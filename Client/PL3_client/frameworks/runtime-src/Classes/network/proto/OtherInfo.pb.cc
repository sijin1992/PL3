// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OtherInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OtherInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_OtherInfo_2eproto() {
  delete OtherUserInfo::default_instance_;
  delete OtherGroupInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_OtherInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_OtherInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  OtherUserInfo::default_instance_ = new OtherUserInfo();
  OtherGroupInfo::default_instance_ = new OtherGroupInfo();
  OtherUserInfo::default_instance_->InitAsDefaultInstance();
  OtherGroupInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OtherInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_OtherInfo_2eproto_once_);
void protobuf_AddDesc_OtherInfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_OtherInfo_2eproto_once_,
                 &protobuf_AddDesc_OtherInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OtherInfo_2eproto {
  StaticDescriptorInitializer_OtherInfo_2eproto() {
    protobuf_AddDesc_OtherInfo_2eproto();
  }
} static_descriptor_initializer_OtherInfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int OtherUserInfo::kUserNameFieldNumber;
const int OtherUserInfo::kNicknameFieldNumber;
const int OtherUserInfo::kPowerFieldNumber;
const int OtherUserInfo::kIdLineupFieldNumber;
const int OtherUserInfo::kLevelFieldNumber;
const int OtherUserInfo::kLvLineupFieldNumber;
const int OtherUserInfo::kIconIdFieldNumber;
const int OtherUserInfo::kGroupNicknameFieldNumber;
const int OtherUserInfo::kLevelRankFieldNumber;
const int OtherUserInfo::kPowerRankFieldNumber;
const int OtherUserInfo::kBuildingLevelListFieldNumber;
const int OtherUserInfo::kMainCityLevelRankFieldNumber;
const int OtherUserInfo::kMaxTrialLevelFieldNumber;
const int OtherUserInfo::kMaxTrialLevelRankFieldNumber;
const int OtherUserInfo::kMaxTrialStarFieldNumber;
const int OtherUserInfo::kBreakLineupFieldNumber;
const int OtherUserInfo::kAttackCountFieldNumber;
const int OtherUserInfo::kDefenceCountFieldNumber;
const int OtherUserInfo::kWinCountFieldNumber;
const int OtherUserInfo::kGroupidFieldNumber;
const int OtherUserInfo::kVipLevelFieldNumber;
const int OtherUserInfo::kLastActFieldNumber;
#endif  // !_MSC_VER

OtherUserInfo::OtherUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OtherUserInfo::InitAsDefaultInstance() {
}

OtherUserInfo::OtherUserInfo(const OtherUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OtherUserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  level_ = 0;
  icon_id_ = 0;
  group_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_rank_ = 0;
  power_rank_ = 0;
  main_city_level_rank_ = 0;
  max_trial_level_ = 0;
  max_trial_level_rank_ = 0;
  max_trial_star_ = 0;
  attack_count_ = 0;
  defence_count_ = 0;
  win_count_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_level_ = 0;
  last_act_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherUserInfo::~OtherUserInfo() {
  SharedDtor();
}

void OtherUserInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete group_nickname_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OtherUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OtherUserInfo& OtherUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_OtherInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_OtherInfo_2eproto();
#endif
  return *default_instance_;
}

OtherUserInfo* OtherUserInfo::default_instance_ = NULL;

OtherUserInfo* OtherUserInfo::New() const {
  return new OtherUserInfo;
}

void OtherUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    power_ = 0;
    level_ = 0;
    icon_id_ = 0;
    if (has_group_nickname()) {
      if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
        group_nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_rank_ = 0;
    power_rank_ = 0;
    main_city_level_rank_ = 0;
    max_trial_level_ = 0;
    max_trial_level_rank_ = 0;
    max_trial_star_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    attack_count_ = 0;
    defence_count_ = 0;
    win_count_ = 0;
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    vip_level_ = 0;
    last_act_ = GOOGLE_ULONGLONG(0);
  }
  id_lineup_.Clear();
  lv_lineup_.Clear();
  building_level_list_.Clear();
  break_lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OtherUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // optional int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id_lineup;
        break;
      }

      // repeated int32 id_lineup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_id_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id_lineup;
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lv_lineup;
        break;
      }

      // repeated int32 lv_lineup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_lv_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lv_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lv_lineup;
        if (input->ExpectTag(56)) goto parse_icon_id;
        break;
      }

      // required int32 icon_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_group_nickname;
        break;
      }

      // optional string group_nickname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level_rank;
        break;
      }

      // optional int32 level_rank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_rank_)));
          set_has_level_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_power_rank;
        break;
      }

      // optional int32 power_rank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_rank_)));
          set_has_power_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_building_level_list;
        break;
      }

      // repeated int32 building_level_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_level_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_building_level_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_building_level_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_building_level_list;
        if (input->ExpectTag(96)) goto parse_main_city_level_rank;
        break;
      }

      // optional int32 main_city_level_rank = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_city_level_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_city_level_rank_)));
          set_has_main_city_level_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_max_trial_level;
        break;
      }

      // optional int32 max_trial_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_trial_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_trial_level_)));
          set_has_max_trial_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_max_trial_level_rank;
        break;
      }

      // optional int32 max_trial_level_rank = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_trial_level_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_trial_level_rank_)));
          set_has_max_trial_level_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_max_trial_star;
        break;
      }

      // optional int32 max_trial_star = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_trial_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_trial_star_)));
          set_has_max_trial_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_break_lineup;
        break;
      }

      // repeated int32 break_lineup = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_break_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_break_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_break_lineup;
        if (input->ExpectTag(136)) goto parse_attack_count;
        break;
      }

      // optional int32 attack_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_defence_count;
        break;
      }

      // optional int32 defence_count = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_count_)));
          set_has_defence_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_win_count;
        break;
      }

      // optional int32 win_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_groupid;
        break;
      }

      // optional string groupid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_last_act;
        break;
      }

      // optional uint64 last_act = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_act_)));
          set_has_last_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

  // repeated int32 id_lineup = 4;
  for (int i = 0; i < this->id_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->id_lineup(i), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // repeated int32 lv_lineup = 6;
  for (int i = 0; i < this->lv_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->lv_lineup(i), output);
  }

  // required int32 icon_id = 7;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->icon_id(), output);
  }

  // optional string group_nickname = 8;
  if (has_group_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->group_nickname(), output);
  }

  // optional int32 level_rank = 9;
  if (has_level_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level_rank(), output);
  }

  // optional int32 power_rank = 10;
  if (has_power_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->power_rank(), output);
  }

  // repeated int32 building_level_list = 11;
  for (int i = 0; i < this->building_level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->building_level_list(i), output);
  }

  // optional int32 main_city_level_rank = 12;
  if (has_main_city_level_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->main_city_level_rank(), output);
  }

  // optional int32 max_trial_level = 13;
  if (has_max_trial_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->max_trial_level(), output);
  }

  // optional int32 max_trial_level_rank = 14;
  if (has_max_trial_level_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_trial_level_rank(), output);
  }

  // optional int32 max_trial_star = 15;
  if (has_max_trial_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_trial_star(), output);
  }

  // repeated int32 break_lineup = 16;
  for (int i = 0; i < this->break_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->break_lineup(i), output);
  }

  // optional int32 attack_count = 17;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->attack_count(), output);
  }

  // optional int32 defence_count = 18;
  if (has_defence_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->defence_count(), output);
  }

  // optional int32 win_count = 19;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->win_count(), output);
  }

  // optional string groupid = 20;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->groupid(), output);
  }

  // optional int32 vip_level = 21;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->vip_level(), output);
  }

  // optional uint64 last_act = 22;
  if (has_last_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->last_act(), output);
  }

}

int OtherUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 icon_id = 7;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // optional string group_nickname = 8;
    if (has_group_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_nickname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level_rank = 9;
    if (has_level_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_rank());
    }

    // optional int32 power_rank = 10;
    if (has_power_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power_rank());
    }

    // optional int32 main_city_level_rank = 12;
    if (has_main_city_level_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_city_level_rank());
    }

    // optional int32 max_trial_level = 13;
    if (has_max_trial_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_trial_level());
    }

    // optional int32 max_trial_level_rank = 14;
    if (has_max_trial_level_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_trial_level_rank());
    }

    // optional int32 max_trial_star = 15;
    if (has_max_trial_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_trial_star());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 attack_count = 17;
    if (has_attack_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_count());
    }

    // optional int32 defence_count = 18;
    if (has_defence_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_count());
    }

    // optional int32 win_count = 19;
    if (has_win_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

    // optional string groupid = 20;
    if (has_groupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional int32 vip_level = 21;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional uint64 last_act = 22;
    if (has_last_act()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_act());
    }

  }
  // repeated int32 id_lineup = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_lineup(i));
    }
    total_size += 1 * this->id_lineup_size() + data_size;
  }

  // repeated int32 lv_lineup = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->lv_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lv_lineup(i));
    }
    total_size += 1 * this->lv_lineup_size() + data_size;
  }

  // repeated int32 building_level_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->building_level_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->building_level_list(i));
    }
    total_size += 1 * this->building_level_list_size() + data_size;
  }

  // repeated int32 break_lineup = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->break_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->break_lineup(i));
    }
    total_size += 2 * this->break_lineup_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OtherUserInfo*>(&from));
}

void OtherUserInfo::MergeFrom(const OtherUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lineup_.MergeFrom(from.id_lineup_);
  lv_lineup_.MergeFrom(from.lv_lineup_);
  building_level_list_.MergeFrom(from.building_level_list_);
  break_lineup_.MergeFrom(from.break_lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_group_nickname()) {
      set_group_nickname(from.group_nickname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level_rank()) {
      set_level_rank(from.level_rank());
    }
    if (from.has_power_rank()) {
      set_power_rank(from.power_rank());
    }
    if (from.has_main_city_level_rank()) {
      set_main_city_level_rank(from.main_city_level_rank());
    }
    if (from.has_max_trial_level()) {
      set_max_trial_level(from.max_trial_level());
    }
    if (from.has_max_trial_level_rank()) {
      set_max_trial_level_rank(from.max_trial_level_rank());
    }
    if (from.has_max_trial_star()) {
      set_max_trial_star(from.max_trial_star());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
    if (from.has_defence_count()) {
      set_defence_count(from.defence_count());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_last_act()) {
      set_last_act(from.last_act());
    }
  }
}

void OtherUserInfo::CopyFrom(const OtherUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000051) != 0x00000051) return false;

  return true;
}

void OtherUserInfo::Swap(OtherUserInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nickname_, other->nickname_);
    std::swap(power_, other->power_);
    id_lineup_.Swap(&other->id_lineup_);
    std::swap(level_, other->level_);
    lv_lineup_.Swap(&other->lv_lineup_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(group_nickname_, other->group_nickname_);
    std::swap(level_rank_, other->level_rank_);
    std::swap(power_rank_, other->power_rank_);
    building_level_list_.Swap(&other->building_level_list_);
    std::swap(main_city_level_rank_, other->main_city_level_rank_);
    std::swap(max_trial_level_, other->max_trial_level_);
    std::swap(max_trial_level_rank_, other->max_trial_level_rank_);
    std::swap(max_trial_star_, other->max_trial_star_);
    break_lineup_.Swap(&other->break_lineup_);
    std::swap(attack_count_, other->attack_count_);
    std::swap(defence_count_, other->defence_count_);
    std::swap(win_count_, other->win_count_);
    std::swap(groupid_, other->groupid_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(last_act_, other->last_act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OtherUserInfo::GetTypeName() const {
  return "OtherUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int OtherGroupInfo::kGroupidFieldNumber;
const int OtherGroupInfo::kNicknameFieldNumber;
const int OtherGroupInfo::kIconIdFieldNumber;
const int OtherGroupInfo::kLevelFieldNumber;
const int OtherGroupInfo::kPowerFieldNumber;
const int OtherGroupInfo::kLeaderNameFieldNumber;
#endif  // !_MSC_VER

OtherGroupInfo::OtherGroupInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OtherGroupInfo::InitAsDefaultInstance() {
}

OtherGroupInfo::OtherGroupInfo(const OtherGroupInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OtherGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_id_ = 0;
  level_ = 0;
  power_ = 0;
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherGroupInfo::~OtherGroupInfo() {
  SharedDtor();
}

void OtherGroupInfo::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OtherGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OtherGroupInfo& OtherGroupInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_OtherInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_OtherInfo_2eproto();
#endif
  return *default_instance_;
}

OtherGroupInfo* OtherGroupInfo::default_instance_ = NULL;

OtherGroupInfo* OtherGroupInfo::New() const {
  return new OtherGroupInfo;
}

void OtherGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    icon_id_ = 0;
    level_ = 0;
    power_ = 0;
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OtherGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon_id;
        break;
      }

      // optional int32 icon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional int32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_leader_name;
        break;
      }

      // optional string leader_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 icon_id = 3;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icon_id(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  // optional string leader_name = 6;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->leader_name(), output);
  }

}

int OtherGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 icon_id = 3;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional string leader_name = 6;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherGroupInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OtherGroupInfo*>(&from));
}

void OtherGroupInfo::MergeFrom(const OtherGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
  }
}

void OtherGroupInfo::CopyFrom(const OtherGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OtherGroupInfo::Swap(OtherGroupInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(nickname_, other->nickname_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OtherGroupInfo::GetTypeName() const {
  return "OtherGroupInfo";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
