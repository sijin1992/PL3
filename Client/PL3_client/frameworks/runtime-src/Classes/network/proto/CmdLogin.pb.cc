// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdLogin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_CmdLogin_2eproto() {
  delete LoginReq::default_instance_;
  delete LoginExtData::default_instance_;
  delete LoginResp::default_instance_;
  delete RegistReq::default_instance_;
  delete RegistReq_ExtInfo::default_instance_;
  delete ReRegistReq::default_instance_;
  delete RegistInitShipReq::default_instance_;
  delete RegistInitShipResp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CmdLogin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CmdLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  LoginReq::default_instance_ = new LoginReq();
  LoginExtData::default_instance_ = new LoginExtData();
  LoginResp::default_instance_ = new LoginResp();
  RegistReq::default_instance_ = new RegistReq();
  RegistReq_ExtInfo::default_instance_ = new RegistReq_ExtInfo();
  ReRegistReq::default_instance_ = new ReRegistReq();
  RegistInitShipReq::default_instance_ = new RegistInitShipReq();
  RegistInitShipResp::default_instance_ = new RegistInitShipResp();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginExtData::default_instance_->InitAsDefaultInstance();
  LoginResp::default_instance_->InitAsDefaultInstance();
  RegistReq::default_instance_->InitAsDefaultInstance();
  RegistReq_ExtInfo::default_instance_->InitAsDefaultInstance();
  ReRegistReq::default_instance_->InitAsDefaultInstance();
  RegistInitShipReq::default_instance_->InitAsDefaultInstance();
  RegistInitShipResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdLogin_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CmdLogin_2eproto_once_);
void protobuf_AddDesc_CmdLogin_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CmdLogin_2eproto_once_,
                 &protobuf_AddDesc_CmdLogin_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdLogin_2eproto {
  StaticDescriptorInitializer_CmdLogin_2eproto() {
    protobuf_AddDesc_CmdLogin_2eproto();
  }
} static_descriptor_initializer_CmdLogin_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kUserNameFieldNumber;
const int LoginReq::kKeyFieldNumber;
const int LoginReq::kDomainFieldNumber;
const int LoginReq::kServerFieldNumber;
const int LoginReq::kPlatformFieldNumber;
const int LoginReq::kVersionFieldNumber;
const int LoginReq::kUseripFieldNumber;
const int LoginReq::kDeviceTypeFieldNumber;
const int LoginReq::kResolutionFieldNumber;
const int LoginReq::kOsTypeFieldNumber;
const int LoginReq::kISPFieldNumber;
const int LoginReq::kNetFieldNumber;
const int LoginReq::kMCCFieldNumber;
const int LoginReq::kIpFieldNumber;
const int LoginReq::kSidFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_ = 0;
  platform_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userip_ = 0;
  device_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolution_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (device_type_ != &::google::protobuf::internal::kEmptyString) {
    delete device_type_;
  }
  if (resolution_ != &::google::protobuf::internal::kEmptyString) {
    delete resolution_;
  }
  if (os_type_ != &::google::protobuf::internal::kEmptyString) {
    delete os_type_;
  }
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (net_ != &::google::protobuf::internal::kEmptyString) {
    delete net_;
  }
  if (mcc_ != &::google::protobuf::internal::kEmptyString) {
    delete mcc_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginReq& LoginReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdLogin_2eproto();
#endif
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    server_ = 0;
    platform_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    userip_ = 0;
    if (has_device_type()) {
      if (device_type_ != &::google::protobuf::internal::kEmptyString) {
        device_type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_resolution()) {
      if (resolution_ != &::google::protobuf::internal::kEmptyString) {
        resolution_->clear();
      }
    }
    if (has_os_type()) {
      if (os_type_ != &::google::protobuf::internal::kEmptyString) {
        os_type_->clear();
      }
    }
    if (has_isp()) {
      if (isp_ != &::google::protobuf::internal::kEmptyString) {
        isp_->clear();
      }
    }
    if (has_net()) {
      if (net_ != &::google::protobuf::internal::kEmptyString) {
        net_->clear();
      }
    }
    if (has_mcc()) {
      if (mcc_ != &::google::protobuf::internal::kEmptyString) {
        mcc_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server;
        break;
      }

      // required int32 server = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_)));
          set_has_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_platform;
        break;
      }

      // required int32 platform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_userip;
        break;
      }

      // optional int32 userip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userip_)));
          set_has_userip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_device_type;
        break;
      }

      // optional string device_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_resolution;
        break;
      }

      // optional string resolution = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_os_type;
        break;
      }

      // optional string os_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ISP;
        break;
      }

      // optional string ISP = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ISP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_net;
        break;
      }

      // optional string net = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_MCC;
        break;
      }

      // optional string MCC = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MCC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ip;
        break;
      }

      // optional string ip = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_sid;
        break;
      }

      // optional string sid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->domain(), output);
  }

  // required int32 server = 4;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server(), output);
  }

  // required int32 platform = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->platform(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }

  // optional int32 userip = 7;
  if (has_userip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->userip(), output);
  }

  // optional string device_type = 8;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->device_type(), output);
  }

  // optional string resolution = 9;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->resolution(), output);
  }

  // optional string os_type = 10;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->os_type(), output);
  }

  // optional string ISP = 11;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->isp(), output);
  }

  // optional string net = 12;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->net(), output);
  }

  // optional string MCC = 13;
  if (has_mcc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->mcc(), output);
  }

  // optional string ip = 14;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->ip(), output);
  }

  // optional string sid = 15;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->sid(), output);
  }

}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // required int32 server = 4;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server());
    }

    // required int32 platform = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 userip = 7;
    if (has_userip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userip());
    }

    // optional string device_type = 8;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string resolution = 9;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolution());
    }

    // optional string os_type = 10;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_type());
    }

    // optional string ISP = 11;
    if (has_isp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp());
    }

    // optional string net = 12;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

    // optional string MCC = 13;
    if (has_mcc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mcc());
    }

    // optional string ip = 14;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string sid = 15;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginReq*>(&from));
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_userip()) {
      set_userip(from.userip());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_isp()) {
      set_isp(from.isp());
    }
    if (from.has_net()) {
      set_net(from.net());
    }
    if (from.has_mcc()) {
      set_mcc(from.mcc());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(key_, other->key_);
    std::swap(domain_, other->domain_);
    std::swap(server_, other->server_);
    std::swap(platform_, other->platform_);
    std::swap(version_, other->version_);
    std::swap(userip_, other->userip_);
    std::swap(device_type_, other->device_type_);
    std::swap(resolution_, other->resolution_);
    std::swap(os_type_, other->os_type_);
    std::swap(isp_, other->isp_);
    std::swap(net_, other->net_);
    std::swap(mcc_, other->mcc_);
    std::swap(ip_, other->ip_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginReq::GetTypeName() const {
  return "LoginReq";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginExtData::kUnReadMailNumFieldNumber;
#endif  // !_MSC_VER

LoginExtData::LoginExtData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginExtData::InitAsDefaultInstance() {
}

LoginExtData::LoginExtData(const LoginExtData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginExtData::SharedCtor() {
  _cached_size_ = 0;
  un_read_mail_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginExtData::~LoginExtData() {
  SharedDtor();
}

void LoginExtData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginExtData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginExtData& LoginExtData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdLogin_2eproto();
#endif
  return *default_instance_;
}

LoginExtData* LoginExtData::default_instance_ = NULL;

LoginExtData* LoginExtData::New() const {
  return new LoginExtData;
}

void LoginExtData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    un_read_mail_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginExtData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 un_read_mail_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &un_read_mail_num_)));
          set_has_un_read_mail_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginExtData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 un_read_mail_num = 1;
  if (has_un_read_mail_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->un_read_mail_num(), output);
  }

}

int LoginExtData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 un_read_mail_num = 1;
    if (has_un_read_mail_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->un_read_mail_num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginExtData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginExtData*>(&from));
}

void LoginExtData::MergeFrom(const LoginExtData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_un_read_mail_num()) {
      set_un_read_mail_num(from.un_read_mail_num());
    }
  }
}

void LoginExtData::CopyFrom(const LoginExtData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginExtData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginExtData::Swap(LoginExtData* other) {
  if (other != this) {
    std::swap(un_read_mail_num_, other->un_read_mail_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginExtData::GetTypeName() const {
  return "LoginExtData";
}


// ===================================================================

bool LoginResp_LoginRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginResp_LoginRet LoginResp::OK;
const LoginResp_LoginRet LoginResp::FAIL;
const LoginResp_LoginRet LoginResp::NODATA;
const LoginResp_LoginRet LoginResp::NOAUTH;
const LoginResp_LoginRet LoginResp::FULL;
const LoginResp_LoginRet LoginResp::VER_ERR;
const LoginResp_LoginRet LoginResp::NICKNAME_EXIST;
const LoginResp_LoginRet LoginResp::NICKNAME_ERR;
const LoginResp_LoginRet LoginResp::BLOCKED;
const LoginResp_LoginRet LoginResp::LoginRet_MIN;
const LoginResp_LoginRet LoginResp::LoginRet_MAX;
const int LoginResp::LoginRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginResp::kResultFieldNumber;
const int LoginResp::kUserNameFieldNumber;
const int LoginResp::kKeyFieldNumber;
const int LoginResp::kIsInitFieldNumber;
const int LoginResp::kUserInfoFieldNumber;
const int LoginResp::kNowtimeFieldNumber;
const int LoginResp::kShipListFieldNumber;
const int LoginResp::kItemListFieldNumber;
const int LoginResp::kExtDataFieldNumber;
const int LoginResp::kVersionFieldNumber;
const int LoginResp::kUnrechargeFieldNumber;
const int LoginResp::kAntiCdkeyFieldNumber;
const int LoginResp::kAntiWeichatFieldNumber;
#endif  // !_MSC_VER

LoginResp::LoginResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::UserInfo*>(
      ::UserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ship_list_ = const_cast< ::ShipList*>(
      ::ShipList::internal_default_instance());
#else
  ship_list_ = const_cast< ::ShipList*>(&::ShipList::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  item_list_ = const_cast< ::ItemList*>(
      ::ItemList::internal_default_instance());
#else
  item_list_ = const_cast< ::ItemList*>(&::ItemList::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ext_data_ = const_cast< ::LoginExtData*>(
      ::LoginExtData::internal_default_instance());
#else
  ext_data_ = const_cast< ::LoginExtData*>(&::LoginExtData::default_instance());
#endif
}

LoginResp::LoginResp(const LoginResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isinit_ = false;
  user_info_ = NULL;
  nowtime_ = GOOGLE_LONGLONG(0);
  ship_list_ = NULL;
  item_list_ = NULL;
  ext_data_ = NULL;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unrecharge_ = 0;
  anti_cdkey_ = 0;
  anti_weichat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResp::~LoginResp() {
  SharedDtor();
}

void LoginResp::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
    delete ship_list_;
    delete item_list_;
    delete ext_data_;
  }
}

void LoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginResp& LoginResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdLogin_2eproto();
#endif
  return *default_instance_;
}

LoginResp* LoginResp::default_instance_ = NULL;

LoginResp* LoginResp::New() const {
  return new LoginResp;
}

void LoginResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    isinit_ = false;
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::UserInfo::Clear();
    }
    nowtime_ = GOOGLE_LONGLONG(0);
    if (has_ship_list()) {
      if (ship_list_ != NULL) ship_list_->::ShipList::Clear();
    }
    if (has_item_list()) {
      if (item_list_ != NULL) item_list_->::ItemList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ext_data()) {
      if (ext_data_ != NULL) ext_data_->::LoginExtData::Clear();
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    unrecharge_ = 0;
    anti_cdkey_ = 0;
    anti_weichat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LoginResp.LoginRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LoginResp_LoginRet_IsValid(value)) {
            set_result(static_cast< ::LoginResp_LoginRet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isInit;
        break;
      }

      // required bool isInit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinit_)));
          set_has_isinit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_info;
        break;
      }

      // optional .UserInfo user_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nowtime;
        break;
      }

      // optional int64 nowtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nowtime_)));
          set_has_nowtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ship_list;
        break;
      }

      // optional .ShipList ship_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item_list;
        break;
      }

      // optional .ItemList item_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ext_data;
        break;
      }

      // optional .LoginExtData ext_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_version;
        break;
      }

      // optional string version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_unrecharge;
        break;
      }

      // optional int32 unrecharge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unrecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unrecharge_)));
          set_has_unrecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_anti_cdkey;
        break;
      }

      // optional int32 anti_cdkey = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anti_cdkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_cdkey_)));
          set_has_anti_cdkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_anti_weichat;
        break;
      }

      // optional int32 anti_weichat = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anti_weichat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anti_weichat_)));
          set_has_anti_weichat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .LoginResp.LoginRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }

  // required bool isInit = 4;
  if (has_isinit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isinit(), output);
  }

  // optional .UserInfo user_info = 5;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->user_info(), output);
  }

  // optional int64 nowtime = 6;
  if (has_nowtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->nowtime(), output);
  }

  // optional .ShipList ship_list = 7;
  if (has_ship_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->ship_list(), output);
  }

  // optional .ItemList item_list = 8;
  if (has_item_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->item_list(), output);
  }

  // optional .LoginExtData ext_data = 9;
  if (has_ext_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->ext_data(), output);
  }

  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->version(), output);
  }

  // optional int32 unrecharge = 11;
  if (has_unrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->unrecharge(), output);
  }

  // optional int32 anti_cdkey = 12;
  if (has_anti_cdkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->anti_cdkey(), output);
  }

  // optional int32 anti_weichat = 13;
  if (has_anti_weichat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->anti_weichat(), output);
  }

}

int LoginResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LoginResp.LoginRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required bool isInit = 4;
    if (has_isinit()) {
      total_size += 1 + 1;
    }

    // optional .UserInfo user_info = 5;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional int64 nowtime = 6;
    if (has_nowtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nowtime());
    }

    // optional .ShipList ship_list = 7;
    if (has_ship_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ship_list());
    }

    // optional .ItemList item_list = 8;
    if (has_item_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .LoginExtData ext_data = 9;
    if (has_ext_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_data());
    }

    // optional string version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 unrecharge = 11;
    if (has_unrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unrecharge());
    }

    // optional int32 anti_cdkey = 12;
    if (has_anti_cdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anti_cdkey());
    }

    // optional int32 anti_weichat = 13;
    if (has_anti_weichat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anti_weichat());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginResp*>(&from));
}

void LoginResp::MergeFrom(const LoginResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_isinit()) {
      set_isinit(from.isinit());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::UserInfo::MergeFrom(from.user_info());
    }
    if (from.has_nowtime()) {
      set_nowtime(from.nowtime());
    }
    if (from.has_ship_list()) {
      mutable_ship_list()->::ShipList::MergeFrom(from.ship_list());
    }
    if (from.has_item_list()) {
      mutable_item_list()->::ItemList::MergeFrom(from.item_list());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ext_data()) {
      mutable_ext_data()->::LoginExtData::MergeFrom(from.ext_data());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_unrecharge()) {
      set_unrecharge(from.unrecharge());
    }
    if (from.has_anti_cdkey()) {
      set_anti_cdkey(from.anti_cdkey());
    }
    if (from.has_anti_weichat()) {
      set_anti_weichat(from.anti_weichat());
    }
  }
}

void LoginResp::CopyFrom(const LoginResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  if (has_ship_list()) {
    if (!this->ship_list().IsInitialized()) return false;
  }
  if (has_item_list()) {
    if (!this->item_list().IsInitialized()) return false;
  }
  if (has_ext_data()) {
    if (!this->ext_data().IsInitialized()) return false;
  }
  return true;
}

void LoginResp::Swap(LoginResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_name_, other->user_name_);
    std::swap(key_, other->key_);
    std::swap(isinit_, other->isinit_);
    std::swap(user_info_, other->user_info_);
    std::swap(nowtime_, other->nowtime_);
    std::swap(ship_list_, other->ship_list_);
    std::swap(item_list_, other->item_list_);
    std::swap(ext_data_, other->ext_data_);
    std::swap(version_, other->version_);
    std::swap(unrecharge_, other->unrecharge_);
    std::swap(anti_cdkey_, other->anti_cdkey_);
    std::swap(anti_weichat_, other->anti_weichat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginResp::GetTypeName() const {
  return "LoginResp";
}


// ===================================================================

#ifndef _MSC_VER
const int RegistReq_ExtInfo::kRealMoneyFieldNumber;
const int RegistReq_ExtInfo::kMoneyFieldNumber;
#endif  // !_MSC_VER

RegistReq_ExtInfo::RegistReq_ExtInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistReq_ExtInfo::InitAsDefaultInstance() {
}

RegistReq_ExtInfo::RegistReq_ExtInfo(const RegistReq_ExtInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistReq_ExtInfo::SharedCtor() {
  _cached_size_ = 0;
  real_money_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistReq_ExtInfo::~RegistReq_ExtInfo() {
  SharedDtor();
}

void RegistReq_ExtInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegistReq_ExtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistReq_ExtInfo& RegistReq_ExtInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdLogin_2eproto();
#endif
  return *default_instance_;
}

RegistReq_ExtInfo* RegistReq_ExtInfo::default_instance_ = NULL;

RegistReq_ExtInfo* RegistReq_ExtInfo::New() const {
  return new RegistReq_ExtInfo;
}

void RegistReq_ExtInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    real_money_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistReq_ExtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 real_money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_money_)));
          set_has_real_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistReq_ExtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 real_money = 1;
  if (has_real_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->real_money(), output);
  }

  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

}

int RegistReq_ExtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 real_money = 1;
    if (has_real_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_money());
    }

    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistReq_ExtInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistReq_ExtInfo*>(&from));
}

void RegistReq_ExtInfo::MergeFrom(const RegistReq_ExtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_money()) {
      set_real_money(from.real_money());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
}

void RegistReq_ExtInfo::CopyFrom(const RegistReq_ExtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistReq_ExtInfo::IsInitialized() const {

  return true;
}

void RegistReq_ExtInfo::Swap(RegistReq_ExtInfo* other) {
  if (other != this) {
    std::swap(real_money_, other->real_money_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistReq_ExtInfo::GetTypeName() const {
  return "RegistReq.ExtInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RegistReq::kRoleNameFieldNumber;
const int RegistReq::kLeadFieldNumber;
const int RegistReq::kServerFieldNumber;
const int RegistReq::kDeviceTypeFieldNumber;
const int RegistReq::kResolutionFieldNumber;
const int RegistReq::kOsTypeFieldNumber;
const int RegistReq::kISPFieldNumber;
const int RegistReq::kNetFieldNumber;
const int RegistReq::kMCCFieldNumber;
const int RegistReq::kAccountFieldNumber;
const int RegistReq::kIpFieldNumber;
const int RegistReq::kPlatformFieldNumber;
const int RegistReq::kRealNameFieldNumber;
const int RegistReq::kExtInfoFieldNumber;
const int RegistReq::kVersionFieldNumber;
#endif  // !_MSC_VER

RegistReq::RegistReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ext_info_ = const_cast< ::RegistReq_ExtInfo*>(
      ::RegistReq_ExtInfo::internal_default_instance());
#else
  ext_info_ = const_cast< ::RegistReq_ExtInfo*>(&::RegistReq_ExtInfo::default_instance());
#endif
}

RegistReq::RegistReq(const RegistReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistReq::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lead_ = 0;
  server_ = 0;
  device_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resolution_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = 0;
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ext_info_ = NULL;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistReq::~RegistReq() {
  SharedDtor();
}

void RegistReq::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (device_type_ != &::google::protobuf::internal::kEmptyString) {
    delete device_type_;
  }
  if (resolution_ != &::google::protobuf::internal::kEmptyString) {
    delete resolution_;
  }
  if (os_type_ != &::google::protobuf::internal::kEmptyString) {
    delete os_type_;
  }
  if (isp_ != &::google::protobuf::internal::kEmptyString) {
    delete isp_;
  }
  if (net_ != &::google::protobuf::internal::kEmptyString) {
    delete net_;
  }
  if (mcc_ != &::google::protobuf::internal::kEmptyString) {
    delete mcc_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ext_info_;
  }
}

void RegistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistReq& RegistReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdLogin_2eproto();
#endif
  return *default_instance_;
}

RegistReq* RegistReq::default_instance_ = NULL;

RegistReq* RegistReq::New() const {
  return new RegistReq;
}

void RegistReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    lead_ = 0;
    server_ = 0;
    if (has_device_type()) {
      if (device_type_ != &::google::protobuf::internal::kEmptyString) {
        device_type_->clear();
      }
    }
    if (has_resolution()) {
      if (resolution_ != &::google::protobuf::internal::kEmptyString) {
        resolution_->clear();
      }
    }
    if (has_os_type()) {
      if (os_type_ != &::google::protobuf::internal::kEmptyString) {
        os_type_->clear();
      }
    }
    if (has_isp()) {
      if (isp_ != &::google::protobuf::internal::kEmptyString) {
        isp_->clear();
      }
    }
    if (has_net()) {
      if (net_ != &::google::protobuf::internal::kEmptyString) {
        net_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mcc()) {
      if (mcc_ != &::google::protobuf::internal::kEmptyString) {
        mcc_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    platform_ = 0;
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::kEmptyString) {
        real_name_->clear();
      }
    }
    if (has_ext_info()) {
      if (ext_info_ != NULL) ext_info_->::RegistReq_ExtInfo::Clear();
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lead;
        break;
      }

      // required int32 lead = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lead_)));
          set_has_lead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server;
        break;
      }

      // required int32 server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_)));
          set_has_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_type;
        break;
      }

      // optional string device_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resolution;
        break;
      }

      // optional string resolution = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resolution()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_os_type;
        break;
      }

      // optional string os_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ISP;
        break;
      }

      // optional string ISP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ISP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_net;
        break;
      }

      // optional string net = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_MCC;
        break;
      }

      // optional string MCC = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MCC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_account;
        break;
      }

      // optional string account = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ip;
        break;
      }

      // optional string ip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_platform;
        break;
      }

      // optional int32 platform = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_platform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_)));
          set_has_platform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_real_name;
        break;
      }

      // optional string real_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ext_info;
        break;
      }

      // optional .RegistReq.ExtInfo ext_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_version;
        break;
      }

      // optional string version = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  // required int32 lead = 2;
  if (has_lead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lead(), output);
  }

  // required int32 server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server(), output);
  }

  // optional string device_type = 4;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_type(), output);
  }

  // optional string resolution = 5;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->resolution(), output);
  }

  // optional string os_type = 6;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->os_type(), output);
  }

  // optional string ISP = 7;
  if (has_isp()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->isp(), output);
  }

  // optional string net = 8;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->net(), output);
  }

  // optional string MCC = 9;
  if (has_mcc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->mcc(), output);
  }

  // optional string account = 10;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->account(), output);
  }

  // optional string ip = 11;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ip(), output);
  }

  // optional int32 platform = 12;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->platform(), output);
  }

  // optional string real_name = 13;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->real_name(), output);
  }

  // optional .RegistReq.ExtInfo ext_info = 14;
  if (has_ext_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->ext_info(), output);
  }

  // optional string version = 15;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->version(), output);
  }

}

int RegistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 lead = 2;
    if (has_lead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lead());
    }

    // required int32 server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server());
    }

    // optional string device_type = 4;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_type());
    }

    // optional string resolution = 5;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resolution());
    }

    // optional string os_type = 6;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_type());
    }

    // optional string ISP = 7;
    if (has_isp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isp());
    }

    // optional string net = 8;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string MCC = 9;
    if (has_mcc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mcc());
    }

    // optional string account = 10;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string ip = 11;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 platform = 12;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform());
    }

    // optional string real_name = 13;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }

    // optional .RegistReq.ExtInfo ext_info = 14;
    if (has_ext_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext_info());
    }

    // optional string version = 15;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistReq*>(&from));
}

void RegistReq::MergeFrom(const RegistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_lead()) {
      set_lead(from.lead());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_isp()) {
      set_isp(from.isp());
    }
    if (from.has_net()) {
      set_net(from.net());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mcc()) {
      set_mcc(from.mcc());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_ext_info()) {
      mutable_ext_info()->::RegistReq_ExtInfo::MergeFrom(from.ext_info());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
}

void RegistReq::CopyFrom(const RegistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RegistReq::Swap(RegistReq* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(lead_, other->lead_);
    std::swap(server_, other->server_);
    std::swap(device_type_, other->device_type_);
    std::swap(resolution_, other->resolution_);
    std::swap(os_type_, other->os_type_);
    std::swap(isp_, other->isp_);
    std::swap(net_, other->net_);
    std::swap(mcc_, other->mcc_);
    std::swap(account_, other->account_);
    std::swap(ip_, other->ip_);
    std::swap(platform_, other->platform_);
    std::swap(real_name_, other->real_name_);
    std::swap(ext_info_, other->ext_info_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistReq::GetTypeName() const {
  return "RegistReq";
}


// ===================================================================

#ifndef _MSC_VER
const int ReRegistReq::kRoleNameFieldNumber;
const int ReRegistReq::kFaceFieldNumber;
#endif  // !_MSC_VER

ReRegistReq::ReRegistReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReRegistReq::InitAsDefaultInstance() {
}

ReRegistReq::ReRegistReq(const ReRegistReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReRegistReq::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReRegistReq::~ReRegistReq() {
  SharedDtor();
}

void ReRegistReq::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReRegistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReRegistReq& ReRegistReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdLogin_2eproto();
#endif
  return *default_instance_;
}

ReRegistReq* ReRegistReq::default_instance_ = NULL;

ReRegistReq* ReRegistReq::New() const {
  return new ReRegistReq;
}

void ReRegistReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    face_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReRegistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_face;
        break;
      }

      // required int32 face = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReRegistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  // required int32 face = 2;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->face(), output);
  }

}

int ReRegistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // required int32 face = 2;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReRegistReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReRegistReq*>(&from));
}

void ReRegistReq::MergeFrom(const ReRegistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
  }
}

void ReRegistReq::CopyFrom(const ReRegistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReRegistReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReRegistReq::Swap(ReRegistReq* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(face_, other->face_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReRegistReq::GetTypeName() const {
  return "ReRegistReq";
}


// ===================================================================

#ifndef _MSC_VER
const int RegistInitShipReq::kInitIndexFieldNumber;
#endif  // !_MSC_VER

RegistInitShipReq::RegistInitShipReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistInitShipReq::InitAsDefaultInstance() {
}

RegistInitShipReq::RegistInitShipReq(const RegistInitShipReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistInitShipReq::SharedCtor() {
  _cached_size_ = 0;
  init_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistInitShipReq::~RegistInitShipReq() {
  SharedDtor();
}

void RegistInitShipReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegistInitShipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistInitShipReq& RegistInitShipReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdLogin_2eproto();
#endif
  return *default_instance_;
}

RegistInitShipReq* RegistInitShipReq::default_instance_ = NULL;

RegistInitShipReq* RegistInitShipReq::New() const {
  return new RegistInitShipReq;
}

void RegistInitShipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    init_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistInitShipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 init_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_index_)));
          set_has_init_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistInitShipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 init_index = 1;
  if (has_init_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->init_index(), output);
  }

}

int RegistInitShipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 init_index = 1;
    if (has_init_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistInitShipReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistInitShipReq*>(&from));
}

void RegistInitShipReq::MergeFrom(const RegistInitShipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_index()) {
      set_init_index(from.init_index());
    }
  }
}

void RegistInitShipReq::CopyFrom(const RegistInitShipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistInitShipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegistInitShipReq::Swap(RegistInitShipReq* other) {
  if (other != this) {
    std::swap(init_index_, other->init_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistInitShipReq::GetTypeName() const {
  return "RegistInitShipReq";
}


// ===================================================================

#ifndef _MSC_VER
const int RegistInitShipResp::kResultFieldNumber;
const int RegistInitShipResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

RegistInitShipResp::RegistInitShipResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistInitShipResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

RegistInitShipResp::RegistInitShipResp(const RegistInitShipResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistInitShipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistInitShipResp::~RegistInitShipResp() {
  SharedDtor();
}

void RegistInitShipResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void RegistInitShipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistInitShipResp& RegistInitShipResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdLogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdLogin_2eproto();
#endif
  return *default_instance_;
}

RegistInitShipResp* RegistInitShipResp::default_instance_ = NULL;

RegistInitShipResp* RegistInitShipResp::New() const {
  return new RegistInitShipResp;
}

void RegistInitShipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistInitShipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistInitShipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

}

int RegistInitShipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistInitShipResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistInitShipResp*>(&from));
}

void RegistInitShipResp::MergeFrom(const RegistInitShipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
}

void RegistInitShipResp::CopyFrom(const RegistInitShipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistInitShipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void RegistInitShipResp::Swap(RegistInitShipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistInitShipResp::GetTypeName() const {
  return "RegistInitShipResp";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
