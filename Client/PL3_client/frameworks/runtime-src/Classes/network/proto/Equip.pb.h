// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Equip.proto

#ifndef PROTOBUF_Equip_2eproto__INCLUDED
#define PROTOBUF_Equip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Equip_2eproto();
void protobuf_AssignDesc_Equip_2eproto();
void protobuf_ShutdownFile_Equip_2eproto();

class Gem;
class Equip;
class ForgeEquip;

// ===================================================================

class Gem : public ::google::protobuf::MessageLite {
 public:
  Gem();
  virtual ~Gem();

  Gem(const Gem& from);

  inline Gem& operator=(const Gem& from) {
    CopyFrom(from);
    return *this;
  }

  static const Gem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Gem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Gem* other);

  // implements Message ----------------------------------------------

  Gem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Gem& from);
  void MergeFrom(const Gem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Gem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Equip_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Equip_2eproto();
  #endif
  friend void protobuf_AssignDesc_Equip_2eproto();
  friend void protobuf_ShutdownFile_Equip_2eproto();

  void InitAsDefaultInstance();
  static Gem* default_instance_;
};
// -------------------------------------------------------------------

class Equip : public ::google::protobuf::MessageLite {
 public:
  Equip();
  virtual ~Equip();

  Equip(const Equip& from);

  inline Equip& operator=(const Equip& from) {
    CopyFrom(from);
    return *this;
  }

  static const Equip& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Equip* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Equip* other);

  // implements Message ----------------------------------------------

  Equip* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Equip& from);
  void MergeFrom(const Equip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // required int32 equip_id = 2;
  inline bool has_equip_id() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 2;
  inline ::google::protobuf::int32 equip_id() const;
  inline void set_equip_id(::google::protobuf::int32 value);

  // required int32 ship_id = 3;
  inline bool has_ship_id() const;
  inline void clear_ship_id();
  static const int kShipIdFieldNumber = 3;
  inline ::google::protobuf::int32 ship_id() const;
  inline void set_ship_id(::google::protobuf::int32 value);

  // required int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 quality = 5;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // required int32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 strength = 8;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 8;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // repeated int32 attributes_base = 9;
  inline int attributes_base_size() const;
  inline void clear_attributes_base();
  static const int kAttributesBaseFieldNumber = 9;
  inline ::google::protobuf::int32 attributes_base(int index) const;
  inline void set_attributes_base(int index, ::google::protobuf::int32 value);
  inline void add_attributes_base(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attributes_base() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attributes_base();

  // @@protoc_insertion_point(class_scope:Equip)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_equip_id();
  inline void clear_has_equip_id();
  inline void set_has_ship_id();
  inline void clear_has_ship_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_strength();
  inline void clear_has_strength();

  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 equip_id_;
  ::google::protobuf::int32 ship_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attributes_base_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Equip_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Equip_2eproto();
  #endif
  friend void protobuf_AssignDesc_Equip_2eproto();
  friend void protobuf_ShutdownFile_Equip_2eproto();

  void InitAsDefaultInstance();
  static Equip* default_instance_;
};
// -------------------------------------------------------------------

class ForgeEquip : public ::google::protobuf::MessageLite {
 public:
  ForgeEquip();
  virtual ~ForgeEquip();

  ForgeEquip(const ForgeEquip& from);

  inline ForgeEquip& operator=(const ForgeEquip& from) {
    CopyFrom(from);
    return *this;
  }

  static const ForgeEquip& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ForgeEquip* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ForgeEquip* other);

  // implements Message ----------------------------------------------

  ForgeEquip* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ForgeEquip& from);
  void MergeFrom(const ForgeEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // required int32 equip_id = 2;
  inline bool has_equip_id() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 2;
  inline ::google::protobuf::int32 equip_id() const;
  inline void set_equip_id(::google::protobuf::int32 value);

  // required int64 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ForgeEquip)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_equip_id();
  inline void clear_has_equip_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();

  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 equip_id_;
  ::google::protobuf::int64 start_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Equip_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Equip_2eproto();
  #endif
  friend void protobuf_AssignDesc_Equip_2eproto();
  friend void protobuf_ShutdownFile_Equip_2eproto();

  void InitAsDefaultInstance();
  static ForgeEquip* default_instance_;
};
// ===================================================================


// ===================================================================

// Gem

// required int32 id = 1;
inline bool Gem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Gem::id() const {
  return id_;
}
inline void Gem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 num = 2;
inline bool Gem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Gem::num() const {
  return num_;
}
inline void Gem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Equip

// required int32 guid = 1;
inline bool Equip::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equip::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equip::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equip::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 Equip::guid() const {
  return guid_;
}
inline void Equip::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// required int32 equip_id = 2;
inline bool Equip::has_equip_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equip::set_has_equip_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equip::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equip::clear_equip_id() {
  equip_id_ = 0;
  clear_has_equip_id();
}
inline ::google::protobuf::int32 Equip::equip_id() const {
  return equip_id_;
}
inline void Equip::set_equip_id(::google::protobuf::int32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// required int32 ship_id = 3;
inline bool Equip::has_ship_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Equip::set_has_ship_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Equip::clear_has_ship_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Equip::clear_ship_id() {
  ship_id_ = 0;
  clear_has_ship_id();
}
inline ::google::protobuf::int32 Equip::ship_id() const {
  return ship_id_;
}
inline void Equip::set_ship_id(::google::protobuf::int32 value) {
  set_has_ship_id();
  ship_id_ = value;
}

// required int32 type = 4;
inline bool Equip::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Equip::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Equip::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Equip::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Equip::type() const {
  return type_;
}
inline void Equip::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 quality = 5;
inline bool Equip::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Equip::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Equip::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Equip::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 Equip::quality() const {
  return quality_;
}
inline void Equip::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// required int32 status = 6;
inline bool Equip::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Equip::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Equip::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Equip::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Equip::status() const {
  return status_;
}
inline void Equip::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 level = 7;
inline bool Equip::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Equip::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Equip::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Equip::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Equip::level() const {
  return level_;
}
inline void Equip::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 strength = 8;
inline bool Equip::has_strength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Equip::set_has_strength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Equip::clear_has_strength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Equip::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 Equip::strength() const {
  return strength_;
}
inline void Equip::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
}

// repeated int32 attributes_base = 9;
inline int Equip::attributes_base_size() const {
  return attributes_base_.size();
}
inline void Equip::clear_attributes_base() {
  attributes_base_.Clear();
}
inline ::google::protobuf::int32 Equip::attributes_base(int index) const {
  return attributes_base_.Get(index);
}
inline void Equip::set_attributes_base(int index, ::google::protobuf::int32 value) {
  attributes_base_.Set(index, value);
}
inline void Equip::add_attributes_base(::google::protobuf::int32 value) {
  attributes_base_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Equip::attributes_base() const {
  return attributes_base_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Equip::mutable_attributes_base() {
  return &attributes_base_;
}

// -------------------------------------------------------------------

// ForgeEquip

// required int32 guid = 1;
inline bool ForgeEquip::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForgeEquip::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForgeEquip::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForgeEquip::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 ForgeEquip::guid() const {
  return guid_;
}
inline void ForgeEquip::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// required int32 equip_id = 2;
inline bool ForgeEquip::has_equip_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForgeEquip::set_has_equip_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForgeEquip::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForgeEquip::clear_equip_id() {
  equip_id_ = 0;
  clear_has_equip_id();
}
inline ::google::protobuf::int32 ForgeEquip::equip_id() const {
  return equip_id_;
}
inline void ForgeEquip::set_equip_id(::google::protobuf::int32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// required int64 start_time = 3;
inline bool ForgeEquip::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForgeEquip::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForgeEquip::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForgeEquip::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 ForgeEquip::start_time() const {
  return start_time_;
}
inline void ForgeEquip::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Equip_2eproto__INCLUDED
