// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_Activity_2eproto() {
  delete ChangeData::default_instance_;
  delete RechargeData::default_instance_;
  delete ConsumeData::default_instance_;
  delete SignInData::default_instance_;
  delete SevenDaysData::default_instance_;
  delete CreditReturnData::default_instance_;
  delete OnlineData::default_instance_;
  delete PowerData::default_instance_;
  delete FirstRechargeData::default_instance_;
  delete GrowthFundData::default_instance_;
  delete InvestData::default_instance_;
  delete ChangeShipData::default_instance_;
  delete MonthSignData::default_instance_;
  delete EveryDayData::default_instance_;
  delete ChagngeItemData::default_instance_;
  delete TurntableData::default_instance_;
  delete Activity::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Activity_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Activity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_Stage_2eproto();
  ::protobuf_AddDesc_Trial_2eproto();
  ChangeData::default_instance_ = new ChangeData();
  RechargeData::default_instance_ = new RechargeData();
  ConsumeData::default_instance_ = new ConsumeData();
  SignInData::default_instance_ = new SignInData();
  SevenDaysData::default_instance_ = new SevenDaysData();
  CreditReturnData::default_instance_ = new CreditReturnData();
  OnlineData::default_instance_ = new OnlineData();
  PowerData::default_instance_ = new PowerData();
  FirstRechargeData::default_instance_ = new FirstRechargeData();
  GrowthFundData::default_instance_ = new GrowthFundData();
  InvestData::default_instance_ = new InvestData();
  ChangeShipData::default_instance_ = new ChangeShipData();
  MonthSignData::default_instance_ = new MonthSignData();
  EveryDayData::default_instance_ = new EveryDayData();
  ChagngeItemData::default_instance_ = new ChagngeItemData();
  TurntableData::default_instance_ = new TurntableData();
  Activity::default_instance_ = new Activity();
  ChangeData::default_instance_->InitAsDefaultInstance();
  RechargeData::default_instance_->InitAsDefaultInstance();
  ConsumeData::default_instance_->InitAsDefaultInstance();
  SignInData::default_instance_->InitAsDefaultInstance();
  SevenDaysData::default_instance_->InitAsDefaultInstance();
  CreditReturnData::default_instance_->InitAsDefaultInstance();
  OnlineData::default_instance_->InitAsDefaultInstance();
  PowerData::default_instance_->InitAsDefaultInstance();
  FirstRechargeData::default_instance_->InitAsDefaultInstance();
  GrowthFundData::default_instance_->InitAsDefaultInstance();
  InvestData::default_instance_->InitAsDefaultInstance();
  ChangeShipData::default_instance_->InitAsDefaultInstance();
  MonthSignData::default_instance_->InitAsDefaultInstance();
  EveryDayData::default_instance_->InitAsDefaultInstance();
  ChagngeItemData::default_instance_->InitAsDefaultInstance();
  TurntableData::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Activity_2eproto_once_);
void protobuf_AddDesc_Activity_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Activity_2eproto_once_,
                 &protobuf_AddDesc_Activity_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_2eproto {
  StaticDescriptorInitializer_Activity_2eproto() {
    protobuf_AddDesc_Activity_2eproto();
  }
} static_descriptor_initializer_Activity_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ChangeData::kLimitListFieldNumber;
#endif  // !_MSC_VER

ChangeData::ChangeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChangeData::InitAsDefaultInstance() {
}

ChangeData::ChangeData(const ChangeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeData::~ChangeData() {
  SharedDtor();
}

void ChangeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangeData& ChangeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

ChangeData* ChangeData::default_instance_ = NULL;

ChangeData* ChangeData::New() const {
  return new ChangeData;
}

void ChangeData::Clear() {
  limit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ChangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pair limit_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_limit_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pair limit_list = 1;
  for (int i = 0; i < this->limit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->limit_list(i), output);
  }

}

int ChangeData::ByteSize() const {
  int total_size = 0;

  // repeated .Pair limit_list = 1;
  total_size += 1 * this->limit_list_size();
  for (int i = 0; i < this->limit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limit_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeData*>(&from));
}

void ChangeData::MergeFrom(const ChangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  limit_list_.MergeFrom(from.limit_list_);
}

void ChangeData::CopyFrom(const ChangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeData::IsInitialized() const {

  for (int i = 0; i < limit_list_size(); i++) {
    if (!this->limit_list(i).IsInitialized()) return false;
  }
  return true;
}

void ChangeData::Swap(ChangeData* other) {
  if (other != this) {
    limit_list_.Swap(&other->limit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangeData::GetTypeName() const {
  return "ChangeData";
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeData::kRechargeMoneyFieldNumber;
const int RechargeData::kGettedIdListFieldNumber;
#endif  // !_MSC_VER

RechargeData::RechargeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RechargeData::InitAsDefaultInstance() {
}

RechargeData::RechargeData(const RechargeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeData::SharedCtor() {
  _cached_size_ = 0;
  recharge_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeData::~RechargeData() {
  SharedDtor();
}

void RechargeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RechargeData& RechargeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

RechargeData* RechargeData::default_instance_ = NULL;

RechargeData* RechargeData::New() const {
  return new RechargeData;
}

void RechargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recharge_money_ = 0;
  }
  getted_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 recharge_money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_money_)));
          set_has_recharge_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_id_list;
        break;
      }

      // repeated int32 getted_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_getted_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getted_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 recharge_money = 1;
  if (has_recharge_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->recharge_money(), output);
  }

  // repeated int32 getted_id_list = 2;
  for (int i = 0; i < this->getted_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->getted_id_list(i), output);
  }

}

int RechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 recharge_money = 1;
    if (has_recharge_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_money());
    }

  }
  // repeated int32 getted_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->getted_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getted_id_list(i));
    }
    total_size += 1 * this->getted_id_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RechargeData*>(&from));
}

void RechargeData::MergeFrom(const RechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getted_id_list_.MergeFrom(from.getted_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recharge_money()) {
      set_recharge_money(from.recharge_money());
    }
  }
}

void RechargeData::CopyFrom(const RechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RechargeData::Swap(RechargeData* other) {
  if (other != this) {
    std::swap(recharge_money_, other->recharge_money_);
    getted_id_list_.Swap(&other->getted_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RechargeData::GetTypeName() const {
  return "RechargeData";
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumeData::kConsumeFieldNumber;
const int ConsumeData::kGettedIdListFieldNumber;
#endif  // !_MSC_VER

ConsumeData::ConsumeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ConsumeData::InitAsDefaultInstance() {
}

ConsumeData::ConsumeData(const ConsumeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ConsumeData::SharedCtor() {
  _cached_size_ = 0;
  consume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumeData::~ConsumeData() {
  SharedDtor();
}

void ConsumeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConsumeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConsumeData& ConsumeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

ConsumeData* ConsumeData::default_instance_ = NULL;

ConsumeData* ConsumeData::New() const {
  return new ConsumeData;
}

void ConsumeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    consume_ = 0;
  }
  getted_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ConsumeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 consume = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_id_list;
        break;
      }

      // repeated int32 getted_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_getted_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getted_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsumeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 consume = 1;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->consume(), output);
  }

  // repeated int32 getted_id_list = 2;
  for (int i = 0; i < this->getted_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->getted_id_list(i), output);
  }

}

int ConsumeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 consume = 1;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume());
    }

  }
  // repeated int32 getted_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->getted_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getted_id_list(i));
    }
    total_size += 1 * this->getted_id_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConsumeData*>(&from));
}

void ConsumeData::MergeFrom(const ConsumeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getted_id_list_.MergeFrom(from.getted_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
}

void ConsumeData::CopyFrom(const ConsumeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConsumeData::Swap(ConsumeData* other) {
  if (other != this) {
    std::swap(consume_, other->consume_);
    getted_id_list_.Swap(&other->getted_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ConsumeData::GetTypeName() const {
  return "ConsumeData";
}


// ===================================================================

#ifndef _MSC_VER
const int SignInData::kCurDayFieldNumber;
const int SignInData::kGettedTodayFieldNumber;
#endif  // !_MSC_VER

SignInData::SignInData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SignInData::InitAsDefaultInstance() {
}

SignInData::SignInData(const SignInData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SignInData::SharedCtor() {
  _cached_size_ = 0;
  cur_day_ = 0;
  getted_today_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignInData::~SignInData() {
  SharedDtor();
}

void SignInData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SignInData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SignInData& SignInData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

SignInData* SignInData::default_instance_ = NULL;

SignInData* SignInData::New() const {
  return new SignInData;
}

void SignInData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_day_ = 0;
    getted_today_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SignInData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cur_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_day_)));
          set_has_cur_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_today;
        break;
      }

      // required bool getted_today = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getted_today_)));
          set_has_getted_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignInData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cur_day = 1;
  if (has_cur_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_day(), output);
  }

  // required bool getted_today = 2;
  if (has_getted_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->getted_today(), output);
  }

}

int SignInData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cur_day = 1;
    if (has_cur_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_day());
    }

    // required bool getted_today = 2;
    if (has_getted_today()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SignInData*>(&from));
}

void SignInData::MergeFrom(const SignInData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_day()) {
      set_cur_day(from.cur_day());
    }
    if (from.has_getted_today()) {
      set_getted_today(from.getted_today());
    }
  }
}

void SignInData::CopyFrom(const SignInData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignInData::Swap(SignInData* other) {
  if (other != this) {
    std::swap(cur_day_, other->cur_day_);
    std::swap(getted_today_, other->getted_today_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SignInData::GetTypeName() const {
  return "SignInData";
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDaysData::kGettedRewardListFieldNumber;
const int SevenDaysData::kLevelInfoFieldNumber;
const int SevenDaysData::kBuildingLevelupCountFieldNumber;
const int SevenDaysData::kHomeLevelupCountFieldNumber;
const int SevenDaysData::kShipLevelupCountFieldNumber;
const int SevenDaysData::kEquipStrengthCountFieldNumber;
const int SevenDaysData::kShipBreakCountFieldNumber;
const int SevenDaysData::kAlreadyChallengeTimesFieldNumber;
const int SevenDaysData::kWinChallengeTimesFieldNumber;
const int SevenDaysData::kContributeTimesFieldNumber;
const int SevenDaysData::kRechargeMoneyFieldNumber;
const int SevenDaysData::kConsumeMoneyFieldNumber;
const int SevenDaysData::kSignInDaysFieldNumber;
const int SevenDaysData::kLotteryCountFieldNumber;
const int SevenDaysData::kMoneyLotteryCountFieldNumber;
const int SevenDaysData::kTrialLevelListFieldNumber;
const int SevenDaysData::kTechnologyLevelupCountFieldNumber;
const int SevenDaysData::kWeaponLevelupCountFieldNumber;
#endif  // !_MSC_VER

SevenDaysData::SevenDaysData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SevenDaysData::InitAsDefaultInstance() {
}

SevenDaysData::SevenDaysData(const SevenDaysData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SevenDaysData::SharedCtor() {
  _cached_size_ = 0;
  building_levelup_count_ = 0;
  home_levelup_count_ = 0;
  ship_levelup_count_ = 0;
  equip_strength_count_ = 0;
  ship_break_count_ = 0;
  already_challenge_times_ = 0;
  win_challenge_times_ = 0;
  contribute_times_ = 0;
  recharge_money_ = 0;
  consume_money_ = 0;
  sign_in_days_ = 0;
  lottery_count_ = 0;
  money_lottery_count_ = 0;
  technology_levelup_count_ = 0;
  weapon_levelup_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDaysData::~SevenDaysData() {
  SharedDtor();
}

void SevenDaysData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SevenDaysData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SevenDaysData& SevenDaysData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

SevenDaysData* SevenDaysData::default_instance_ = NULL;

SevenDaysData* SevenDaysData::New() const {
  return new SevenDaysData;
}

void SevenDaysData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    building_levelup_count_ = 0;
    home_levelup_count_ = 0;
    ship_levelup_count_ = 0;
    equip_strength_count_ = 0;
    ship_break_count_ = 0;
    already_challenge_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_challenge_times_ = 0;
    contribute_times_ = 0;
    recharge_money_ = 0;
    consume_money_ = 0;
    sign_in_days_ = 0;
    lottery_count_ = 0;
    money_lottery_count_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    technology_levelup_count_ = 0;
    weapon_levelup_count_ = 0;
  }
  getted_reward_list_.Clear();
  level_info_.Clear();
  trial_level_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SevenDaysData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 getted_reward_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_getted_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getted_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_getted_reward_list;
        if (input->ExpectTag(18)) goto parse_level_info;
        break;
      }

      // repeated .LevelInfo level_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_level_info;
        if (input->ExpectTag(24)) goto parse_building_levelup_count;
        break;
      }

      // optional int32 building_levelup_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_levelup_count_)));
          set_has_building_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_home_levelup_count;
        break;
      }

      // optional int32 home_levelup_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_home_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &home_levelup_count_)));
          set_has_home_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ship_levelup_count;
        break;
      }

      // optional int32 ship_levelup_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_levelup_count_)));
          set_has_ship_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equip_strength_count;
        break;
      }

      // optional int32 equip_strength_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_strength_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_strength_count_)));
          set_has_equip_strength_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ship_break_count;
        break;
      }

      // optional int32 ship_break_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_break_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_break_count_)));
          set_has_ship_break_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_already_challenge_times;
        break;
      }

      // optional int32 already_challenge_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_challenge_times_)));
          set_has_already_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win_challenge_times;
        break;
      }

      // optional int32 win_challenge_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_challenge_times_)));
          set_has_win_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_contribute_times;
        break;
      }

      // optional int32 contribute_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_times_)));
          set_has_contribute_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_recharge_money;
        break;
      }

      // optional int32 recharge_money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_money_)));
          set_has_recharge_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_consume_money;
        break;
      }

      // optional int32 consume_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_money_)));
          set_has_consume_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sign_in_days;
        break;
      }

      // optional int32 sign_in_days = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_in_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_in_days_)));
          set_has_sign_in_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lottery_count;
        break;
      }

      // optional int32 lottery_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_count_)));
          set_has_lottery_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_money_lottery_count;
        break;
      }

      // optional int32 money_lottery_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_lottery_count_)));
          set_has_money_lottery_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_trial_level_list;
        break;
      }

      // repeated .TrialLevel trial_level_list = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trial_level_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trial_level_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_trial_level_list;
        if (input->ExpectTag(136)) goto parse_technology_levelup_count;
        break;
      }

      // optional int32 technology_levelup_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_technology_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &technology_levelup_count_)));
          set_has_technology_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_weapon_levelup_count;
        break;
      }

      // optional int32 weapon_levelup_count = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_levelup_count_)));
          set_has_weapon_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SevenDaysData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 getted_reward_list = 1;
  for (int i = 0; i < this->getted_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->getted_reward_list(i), output);
  }

  // repeated .LevelInfo level_info = 2;
  for (int i = 0; i < this->level_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->level_info(i), output);
  }

  // optional int32 building_levelup_count = 3;
  if (has_building_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->building_levelup_count(), output);
  }

  // optional int32 home_levelup_count = 4;
  if (has_home_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->home_levelup_count(), output);
  }

  // optional int32 ship_levelup_count = 5;
  if (has_ship_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ship_levelup_count(), output);
  }

  // optional int32 equip_strength_count = 6;
  if (has_equip_strength_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->equip_strength_count(), output);
  }

  // optional int32 ship_break_count = 7;
  if (has_ship_break_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ship_break_count(), output);
  }

  // optional int32 already_challenge_times = 8;
  if (has_already_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->already_challenge_times(), output);
  }

  // optional int32 win_challenge_times = 9;
  if (has_win_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->win_challenge_times(), output);
  }

  // optional int32 contribute_times = 10;
  if (has_contribute_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->contribute_times(), output);
  }

  // optional int32 recharge_money = 11;
  if (has_recharge_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->recharge_money(), output);
  }

  // optional int32 consume_money = 12;
  if (has_consume_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->consume_money(), output);
  }

  // optional int32 sign_in_days = 13;
  if (has_sign_in_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->sign_in_days(), output);
  }

  // optional int32 lottery_count = 14;
  if (has_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lottery_count(), output);
  }

  // optional int32 money_lottery_count = 15;
  if (has_money_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->money_lottery_count(), output);
  }

  // repeated .TrialLevel trial_level_list = 16;
  for (int i = 0; i < this->trial_level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->trial_level_list(i), output);
  }

  // optional int32 technology_levelup_count = 17;
  if (has_technology_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->technology_levelup_count(), output);
  }

  // optional int32 weapon_levelup_count = 18;
  if (has_weapon_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->weapon_levelup_count(), output);
  }

}

int SevenDaysData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 building_levelup_count = 3;
    if (has_building_levelup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_levelup_count());
    }

    // optional int32 home_levelup_count = 4;
    if (has_home_levelup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->home_levelup_count());
    }

    // optional int32 ship_levelup_count = 5;
    if (has_ship_levelup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_levelup_count());
    }

    // optional int32 equip_strength_count = 6;
    if (has_equip_strength_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_strength_count());
    }

    // optional int32 ship_break_count = 7;
    if (has_ship_break_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_break_count());
    }

    // optional int32 already_challenge_times = 8;
    if (has_already_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_challenge_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 win_challenge_times = 9;
    if (has_win_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_challenge_times());
    }

    // optional int32 contribute_times = 10;
    if (has_contribute_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute_times());
    }

    // optional int32 recharge_money = 11;
    if (has_recharge_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_money());
    }

    // optional int32 consume_money = 12;
    if (has_consume_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_money());
    }

    // optional int32 sign_in_days = 13;
    if (has_sign_in_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_in_days());
    }

    // optional int32 lottery_count = 14;
    if (has_lottery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery_count());
    }

    // optional int32 money_lottery_count = 15;
    if (has_money_lottery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_lottery_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 technology_levelup_count = 17;
    if (has_technology_levelup_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->technology_levelup_count());
    }

    // optional int32 weapon_levelup_count = 18;
    if (has_weapon_levelup_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_levelup_count());
    }

  }
  // repeated int32 getted_reward_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->getted_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getted_reward_list(i));
    }
    total_size += 1 * this->getted_reward_list_size() + data_size;
  }

  // repeated .LevelInfo level_info = 2;
  total_size += 1 * this->level_info_size();
  for (int i = 0; i < this->level_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_info(i));
  }

  // repeated .TrialLevel trial_level_list = 16;
  total_size += 2 * this->trial_level_list_size();
  for (int i = 0; i < this->trial_level_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trial_level_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDaysData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SevenDaysData*>(&from));
}

void SevenDaysData::MergeFrom(const SevenDaysData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getted_reward_list_.MergeFrom(from.getted_reward_list_);
  level_info_.MergeFrom(from.level_info_);
  trial_level_list_.MergeFrom(from.trial_level_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_building_levelup_count()) {
      set_building_levelup_count(from.building_levelup_count());
    }
    if (from.has_home_levelup_count()) {
      set_home_levelup_count(from.home_levelup_count());
    }
    if (from.has_ship_levelup_count()) {
      set_ship_levelup_count(from.ship_levelup_count());
    }
    if (from.has_equip_strength_count()) {
      set_equip_strength_count(from.equip_strength_count());
    }
    if (from.has_ship_break_count()) {
      set_ship_break_count(from.ship_break_count());
    }
    if (from.has_already_challenge_times()) {
      set_already_challenge_times(from.already_challenge_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_challenge_times()) {
      set_win_challenge_times(from.win_challenge_times());
    }
    if (from.has_contribute_times()) {
      set_contribute_times(from.contribute_times());
    }
    if (from.has_recharge_money()) {
      set_recharge_money(from.recharge_money());
    }
    if (from.has_consume_money()) {
      set_consume_money(from.consume_money());
    }
    if (from.has_sign_in_days()) {
      set_sign_in_days(from.sign_in_days());
    }
    if (from.has_lottery_count()) {
      set_lottery_count(from.lottery_count());
    }
    if (from.has_money_lottery_count()) {
      set_money_lottery_count(from.money_lottery_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_technology_levelup_count()) {
      set_technology_levelup_count(from.technology_levelup_count());
    }
    if (from.has_weapon_levelup_count()) {
      set_weapon_levelup_count(from.weapon_levelup_count());
    }
  }
}

void SevenDaysData::CopyFrom(const SevenDaysData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDaysData::IsInitialized() const {

  for (int i = 0; i < level_info_size(); i++) {
    if (!this->level_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < trial_level_list_size(); i++) {
    if (!this->trial_level_list(i).IsInitialized()) return false;
  }
  return true;
}

void SevenDaysData::Swap(SevenDaysData* other) {
  if (other != this) {
    getted_reward_list_.Swap(&other->getted_reward_list_);
    level_info_.Swap(&other->level_info_);
    std::swap(building_levelup_count_, other->building_levelup_count_);
    std::swap(home_levelup_count_, other->home_levelup_count_);
    std::swap(ship_levelup_count_, other->ship_levelup_count_);
    std::swap(equip_strength_count_, other->equip_strength_count_);
    std::swap(ship_break_count_, other->ship_break_count_);
    std::swap(already_challenge_times_, other->already_challenge_times_);
    std::swap(win_challenge_times_, other->win_challenge_times_);
    std::swap(contribute_times_, other->contribute_times_);
    std::swap(recharge_money_, other->recharge_money_);
    std::swap(consume_money_, other->consume_money_);
    std::swap(sign_in_days_, other->sign_in_days_);
    std::swap(lottery_count_, other->lottery_count_);
    std::swap(money_lottery_count_, other->money_lottery_count_);
    trial_level_list_.Swap(&other->trial_level_list_);
    std::swap(technology_levelup_count_, other->technology_levelup_count_);
    std::swap(weapon_levelup_count_, other->weapon_levelup_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SevenDaysData::GetTypeName() const {
  return "SevenDaysData";
}


// ===================================================================

#ifndef _MSC_VER
const int CreditReturnData::kReturnIndexFieldNumber;
#endif  // !_MSC_VER

CreditReturnData::CreditReturnData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CreditReturnData::InitAsDefaultInstance() {
}

CreditReturnData::CreditReturnData(const CreditReturnData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CreditReturnData::SharedCtor() {
  _cached_size_ = 0;
  return_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreditReturnData::~CreditReturnData() {
  SharedDtor();
}

void CreditReturnData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreditReturnData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreditReturnData& CreditReturnData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

CreditReturnData* CreditReturnData::default_instance_ = NULL;

CreditReturnData* CreditReturnData::New() const {
  return new CreditReturnData;
}

void CreditReturnData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    return_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CreditReturnData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 return_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_index_)));
          set_has_return_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreditReturnData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 return_index = 1;
  if (has_return_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->return_index(), output);
  }

}

int CreditReturnData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 return_index = 1;
    if (has_return_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreditReturnData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreditReturnData*>(&from));
}

void CreditReturnData::MergeFrom(const CreditReturnData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_return_index()) {
      set_return_index(from.return_index());
    }
  }
}

void CreditReturnData::CopyFrom(const CreditReturnData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditReturnData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreditReturnData::Swap(CreditReturnData* other) {
  if (other != this) {
    std::swap(return_index_, other->return_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreditReturnData::GetTypeName() const {
  return "CreditReturnData";
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineData::kGetIndexsFieldNumber;
#endif  // !_MSC_VER

OnlineData::OnlineData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OnlineData::InitAsDefaultInstance() {
}

OnlineData::OnlineData(const OnlineData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineData::~OnlineData() {
  SharedDtor();
}

void OnlineData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OnlineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OnlineData& OnlineData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

OnlineData* OnlineData::default_instance_ = NULL;

OnlineData* OnlineData::New() const {
  return new OnlineData;
}

void OnlineData::Clear() {
  get_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OnlineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 get_indexs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_get_indexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_indexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_get_indexs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 get_indexs = 1;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->get_indexs(i), output);
  }

}

int OnlineData::ByteSize() const {
  int total_size = 0;

  // repeated int32 get_indexs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_indexs(i));
    }
    total_size += 1 * this->get_indexs_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OnlineData*>(&from));
}

void OnlineData::MergeFrom(const OnlineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_indexs_.MergeFrom(from.get_indexs_);
}

void OnlineData::CopyFrom(const OnlineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineData::IsInitialized() const {

  return true;
}

void OnlineData::Swap(OnlineData* other) {
  if (other != this) {
    get_indexs_.Swap(&other->get_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OnlineData::GetTypeName() const {
  return "OnlineData";
}


// ===================================================================

#ifndef _MSC_VER
const int PowerData::kGetIndexsFieldNumber;
#endif  // !_MSC_VER

PowerData::PowerData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PowerData::InitAsDefaultInstance() {
}

PowerData::PowerData(const PowerData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PowerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerData::~PowerData() {
  SharedDtor();
}

void PowerData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PowerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerData& PowerData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

PowerData* PowerData::default_instance_ = NULL;

PowerData* PowerData::New() const {
  return new PowerData;
}

void PowerData::Clear() {
  get_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PowerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 get_indexs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_get_indexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_indexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_get_indexs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 get_indexs = 1;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->get_indexs(i), output);
  }

}

int PowerData::ByteSize() const {
  int total_size = 0;

  // repeated int32 get_indexs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_indexs(i));
    }
    total_size += 1 * this->get_indexs_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerData*>(&from));
}

void PowerData::MergeFrom(const PowerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_indexs_.MergeFrom(from.get_indexs_);
}

void PowerData::CopyFrom(const PowerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerData::IsInitialized() const {

  return true;
}

void PowerData::Swap(PowerData* other) {
  if (other != this) {
    get_indexs_.Swap(&other->get_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PowerData::GetTypeName() const {
  return "PowerData";
}


// ===================================================================

#ifndef _MSC_VER
const int FirstRechargeData::kGettedRewardFieldNumber;
#endif  // !_MSC_VER

FirstRechargeData::FirstRechargeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FirstRechargeData::InitAsDefaultInstance() {
}

FirstRechargeData::FirstRechargeData(const FirstRechargeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FirstRechargeData::SharedCtor() {
  _cached_size_ = 0;
  getted_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstRechargeData::~FirstRechargeData() {
  SharedDtor();
}

void FirstRechargeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FirstRechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FirstRechargeData& FirstRechargeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

FirstRechargeData* FirstRechargeData::default_instance_ = NULL;

FirstRechargeData* FirstRechargeData::New() const {
  return new FirstRechargeData;
}

void FirstRechargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    getted_reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FirstRechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool getted_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getted_reward_)));
          set_has_getted_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FirstRechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool getted_reward = 1;
  if (has_getted_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->getted_reward(), output);
  }

}

int FirstRechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool getted_reward = 1;
    if (has_getted_reward()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstRechargeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FirstRechargeData*>(&from));
}

void FirstRechargeData::MergeFrom(const FirstRechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_getted_reward()) {
      set_getted_reward(from.getted_reward());
    }
  }
}

void FirstRechargeData::CopyFrom(const FirstRechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstRechargeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FirstRechargeData::Swap(FirstRechargeData* other) {
  if (other != this) {
    std::swap(getted_reward_, other->getted_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FirstRechargeData::GetTypeName() const {
  return "FirstRechargeData";
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthFundData::kPurchasedFieldNumber;
const int GrowthFundData::kGetIndexsFieldNumber;
#endif  // !_MSC_VER

GrowthFundData::GrowthFundData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GrowthFundData::InitAsDefaultInstance() {
}

GrowthFundData::GrowthFundData(const GrowthFundData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GrowthFundData::SharedCtor() {
  _cached_size_ = 0;
  purchased_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthFundData::~GrowthFundData() {
  SharedDtor();
}

void GrowthFundData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GrowthFundData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GrowthFundData& GrowthFundData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

GrowthFundData* GrowthFundData::default_instance_ = NULL;

GrowthFundData* GrowthFundData::New() const {
  return new GrowthFundData;
}

void GrowthFundData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    purchased_ = false;
  }
  get_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GrowthFundData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool purchased = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purchased_)));
          set_has_purchased();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_indexs;
        break;
      }

      // repeated int32 get_indexs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_get_indexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_indexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_indexs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowthFundData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool purchased = 1;
  if (has_purchased()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->purchased(), output);
  }

  // repeated int32 get_indexs = 2;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->get_indexs(i), output);
  }

}

int GrowthFundData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool purchased = 1;
    if (has_purchased()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 get_indexs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_indexs(i));
    }
    total_size += 1 * this->get_indexs_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthFundData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GrowthFundData*>(&from));
}

void GrowthFundData::MergeFrom(const GrowthFundData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_indexs_.MergeFrom(from.get_indexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_purchased()) {
      set_purchased(from.purchased());
    }
  }
}

void GrowthFundData::CopyFrom(const GrowthFundData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthFundData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GrowthFundData::Swap(GrowthFundData* other) {
  if (other != this) {
    std::swap(purchased_, other->purchased_);
    get_indexs_.Swap(&other->get_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GrowthFundData::GetTypeName() const {
  return "GrowthFundData";
}


// ===================================================================

#ifndef _MSC_VER
const int InvestData::kIndexFieldNumber;
const int InvestData::kStartTimeFieldNumber;
#endif  // !_MSC_VER

InvestData::InvestData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InvestData::InitAsDefaultInstance() {
}

InvestData::InvestData(const InvestData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InvestData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestData::~InvestData() {
  SharedDtor();
}

void InvestData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void InvestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InvestData& InvestData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

InvestData* InvestData::default_instance_ = NULL;

InvestData* InvestData::New() const {
  return new InvestData;
}

void InvestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InvestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

}

int InvestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InvestData*>(&from));
}

void InvestData::MergeFrom(const InvestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
}

void InvestData::CopyFrom(const InvestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InvestData::Swap(InvestData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InvestData::GetTypeName() const {
  return "InvestData";
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeShipData::kGettedRewardFieldNumber;
#endif  // !_MSC_VER

ChangeShipData::ChangeShipData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChangeShipData::InitAsDefaultInstance() {
}

ChangeShipData::ChangeShipData(const ChangeShipData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeShipData::SharedCtor() {
  _cached_size_ = 0;
  getted_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeShipData::~ChangeShipData() {
  SharedDtor();
}

void ChangeShipData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChangeShipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangeShipData& ChangeShipData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

ChangeShipData* ChangeShipData::default_instance_ = NULL;

ChangeShipData* ChangeShipData::New() const {
  return new ChangeShipData;
}

void ChangeShipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    getted_reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ChangeShipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool getted_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getted_reward_)));
          set_has_getted_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeShipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool getted_reward = 1;
  if (has_getted_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->getted_reward(), output);
  }

}

int ChangeShipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool getted_reward = 1;
    if (has_getted_reward()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeShipData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeShipData*>(&from));
}

void ChangeShipData::MergeFrom(const ChangeShipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_getted_reward()) {
      set_getted_reward(from.getted_reward());
    }
  }
}

void ChangeShipData::CopyFrom(const ChangeShipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeShipData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeShipData::Swap(ChangeShipData* other) {
  if (other != this) {
    std::swap(getted_reward_, other->getted_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChangeShipData::GetTypeName() const {
  return "ChangeShipData";
}


// ===================================================================

#ifndef _MSC_VER
const int MonthSignData::kResignTimesFieldNumber;
const int MonthSignData::kGetNumsFieldNumber;
const int MonthSignData::kGetRewardsFieldNumber;
#endif  // !_MSC_VER

MonthSignData::MonthSignData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MonthSignData::InitAsDefaultInstance() {
}

MonthSignData::MonthSignData(const MonthSignData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MonthSignData::SharedCtor() {
  _cached_size_ = 0;
  resign_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthSignData::~MonthSignData() {
  SharedDtor();
}

void MonthSignData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MonthSignData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonthSignData& MonthSignData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

MonthSignData* MonthSignData::default_instance_ = NULL;

MonthSignData* MonthSignData::New() const {
  return new MonthSignData;
}

void MonthSignData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resign_times_ = 0;
  }
  get_nums_.Clear();
  get_rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MonthSignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resign_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resign_times_)));
          set_has_resign_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_nums;
        break;
      }

      // repeated int32 get_nums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_get_nums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_nums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_nums;
        if (input->ExpectTag(24)) goto parse_get_rewards;
        break;
      }

      // repeated bool get_rewards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_rewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_get_rewards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_get_rewards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonthSignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 resign_times = 1;
  if (has_resign_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resign_times(), output);
  }

  // repeated int32 get_nums = 2;
  for (int i = 0; i < this->get_nums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->get_nums(i), output);
  }

  // repeated bool get_rewards = 3;
  for (int i = 0; i < this->get_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->get_rewards(i), output);
  }

}

int MonthSignData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 resign_times = 1;
    if (has_resign_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resign_times());
    }

  }
  // repeated int32 get_nums = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_nums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_nums(i));
    }
    total_size += 1 * this->get_nums_size() + data_size;
  }

  // repeated bool get_rewards = 3;
  {
    int data_size = 0;
    data_size = 1 * this->get_rewards_size();
    total_size += 1 * this->get_rewards_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthSignData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonthSignData*>(&from));
}

void MonthSignData::MergeFrom(const MonthSignData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_nums_.MergeFrom(from.get_nums_);
  get_rewards_.MergeFrom(from.get_rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resign_times()) {
      set_resign_times(from.resign_times());
    }
  }
}

void MonthSignData::CopyFrom(const MonthSignData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthSignData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MonthSignData::Swap(MonthSignData* other) {
  if (other != this) {
    std::swap(resign_times_, other->resign_times_);
    get_nums_.Swap(&other->get_nums_);
    get_rewards_.Swap(&other->get_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MonthSignData::GetTypeName() const {
  return "MonthSignData";
}


// ===================================================================

#ifndef _MSC_VER
const int EveryDayData::kGetDayFieldNumber;
const int EveryDayData::kAddMoneyFieldNumber;
const int EveryDayData::kStartTimeFieldNumber;
#endif  // !_MSC_VER

EveryDayData::EveryDayData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EveryDayData::InitAsDefaultInstance() {
}

EveryDayData::EveryDayData(const EveryDayData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EveryDayData::SharedCtor() {
  _cached_size_ = 0;
  get_day_ = 0;
  add_money_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EveryDayData::~EveryDayData() {
  SharedDtor();
}

void EveryDayData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EveryDayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EveryDayData& EveryDayData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

EveryDayData* EveryDayData::default_instance_ = NULL;

EveryDayData* EveryDayData::New() const {
  return new EveryDayData;
}

void EveryDayData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    get_day_ = 0;
    add_money_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EveryDayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 get_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_day_)));
          set_has_get_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_money;
        break;
      }

      // required int32 add_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_money_)));
          set_has_add_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EveryDayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 get_day = 1;
  if (has_get_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->get_day(), output);
  }

  // required int32 add_money = 2;
  if (has_add_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add_money(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

}

int EveryDayData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 get_day = 1;
    if (has_get_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_day());
    }

    // required int32 add_money = 2;
    if (has_add_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_money());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EveryDayData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EveryDayData*>(&from));
}

void EveryDayData::MergeFrom(const EveryDayData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_day()) {
      set_get_day(from.get_day());
    }
    if (from.has_add_money()) {
      set_add_money(from.add_money());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
}

void EveryDayData::CopyFrom(const EveryDayData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EveryDayData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EveryDayData::Swap(EveryDayData* other) {
  if (other != this) {
    std::swap(get_day_, other->get_day_);
    std::swap(add_money_, other->add_money_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EveryDayData::GetTypeName() const {
  return "EveryDayData";
}


// ===================================================================

#ifndef _MSC_VER
const int ChagngeItemData::kDayTimeFieldNumber;
const int ChagngeItemData::kItemListFieldNumber;
#endif  // !_MSC_VER

ChagngeItemData::ChagngeItemData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ChagngeItemData::InitAsDefaultInstance() {
}

ChagngeItemData::ChagngeItemData(const ChagngeItemData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ChagngeItemData::SharedCtor() {
  _cached_size_ = 0;
  day_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChagngeItemData::~ChagngeItemData() {
  SharedDtor();
}

void ChagngeItemData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ChagngeItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChagngeItemData& ChagngeItemData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

ChagngeItemData* ChagngeItemData::default_instance_ = NULL;

ChagngeItemData* ChagngeItemData::New() const {
  return new ChagngeItemData;
}

void ChagngeItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_time_ = GOOGLE_LONGLONG(0);
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ChagngeItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 day_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &day_time_)));
          set_has_day_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .Pair item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChagngeItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 day_time = 1;
  if (has_day_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->day_time(), output);
  }

  // repeated .Pair item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->item_list(i), output);
  }

}

int ChagngeItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 day_time = 1;
    if (has_day_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->day_time());
    }

  }
  // repeated .Pair item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChagngeItemData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChagngeItemData*>(&from));
}

void ChagngeItemData::MergeFrom(const ChagngeItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day_time()) {
      set_day_time(from.day_time());
    }
  }
}

void ChagngeItemData::CopyFrom(const ChagngeItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChagngeItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ChagngeItemData::Swap(ChagngeItemData* other) {
  if (other != this) {
    std::swap(day_time_, other->day_time_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ChagngeItemData::GetTypeName() const {
  return "ChagngeItemData";
}


// ===================================================================

#ifndef _MSC_VER
const int TurntableData::kAddMoneyFieldNumber;
const int TurntableData::kTurntableNumFieldNumber;
#endif  // !_MSC_VER

TurntableData::TurntableData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TurntableData::InitAsDefaultInstance() {
}

TurntableData::TurntableData(const TurntableData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TurntableData::SharedCtor() {
  _cached_size_ = 0;
  add_money_ = 0;
  turntable_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurntableData::~TurntableData() {
  SharedDtor();
}

void TurntableData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TurntableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TurntableData& TurntableData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

TurntableData* TurntableData::default_instance_ = NULL;

TurntableData* TurntableData::New() const {
  return new TurntableData;
}

void TurntableData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    add_money_ = 0;
    turntable_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TurntableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 add_money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_money_)));
          set_has_add_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turntable_num;
        break;
      }

      // required int32 turntable_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turntable_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turntable_num_)));
          set_has_turntable_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurntableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 add_money = 1;
  if (has_add_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->add_money(), output);
  }

  // required int32 turntable_num = 2;
  if (has_turntable_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->turntable_num(), output);
  }

}

int TurntableData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 add_money = 1;
    if (has_add_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_money());
    }

    // required int32 turntable_num = 2;
    if (has_turntable_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turntable_num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurntableData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TurntableData*>(&from));
}

void TurntableData::MergeFrom(const TurntableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_money()) {
      set_add_money(from.add_money());
    }
    if (from.has_turntable_num()) {
      set_turntable_num(from.turntable_num());
    }
  }
}

void TurntableData::CopyFrom(const TurntableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurntableData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TurntableData::Swap(TurntableData* other) {
  if (other != this) {
    std::swap(add_money_, other->add_money_);
    std::swap(turntable_num_, other->turntable_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TurntableData::GetTypeName() const {
  return "TurntableData";
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kIdFieldNumber;
const int Activity::kTypeFieldNumber;
const int Activity::kStartTimeFieldNumber;
const int Activity::kEndTimeFieldNumber;
const int Activity::kChangeDataFieldNumber;
const int Activity::kRechargeDataFieldNumber;
const int Activity::kSignInDataFieldNumber;
const int Activity::kSevenDaysDataFieldNumber;
const int Activity::kFirstRechargeDataFieldNumber;
const int Activity::kCreditRetrunDataFieldNumber;
const int Activity::kConsumeDataFieldNumber;
const int Activity::kOnlineDataFieldNumber;
const int Activity::kPowerDataFieldNumber;
const int Activity::kGrowthFundDataFieldNumber;
const int Activity::kInvestDataFieldNumber;
const int Activity::kChangeShipDataFieldNumber;
const int Activity::kMonthSignDataFieldNumber;
const int Activity::kEveryDayGetDayFieldNumber;
const int Activity::kTurntableDataFieldNumber;
const int Activity::kAdvancedMoneyFieldNumber;
const int Activity::kChangeItemDataFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Activity::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  change_data_ = const_cast< ::ChangeData*>(
      ::ChangeData::internal_default_instance());
#else
  change_data_ = const_cast< ::ChangeData*>(&::ChangeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  recharge_data_ = const_cast< ::RechargeData*>(
      ::RechargeData::internal_default_instance());
#else
  recharge_data_ = const_cast< ::RechargeData*>(&::RechargeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sign_in_data_ = const_cast< ::SignInData*>(
      ::SignInData::internal_default_instance());
#else
  sign_in_data_ = const_cast< ::SignInData*>(&::SignInData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  seven_days_data_ = const_cast< ::SevenDaysData*>(
      ::SevenDaysData::internal_default_instance());
#else
  seven_days_data_ = const_cast< ::SevenDaysData*>(&::SevenDaysData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  first_recharge_data_ = const_cast< ::FirstRechargeData*>(
      ::FirstRechargeData::internal_default_instance());
#else
  first_recharge_data_ = const_cast< ::FirstRechargeData*>(&::FirstRechargeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  credit_retrun_data_ = const_cast< ::CreditReturnData*>(
      ::CreditReturnData::internal_default_instance());
#else
  credit_retrun_data_ = const_cast< ::CreditReturnData*>(&::CreditReturnData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  consume_data_ = const_cast< ::ConsumeData*>(
      ::ConsumeData::internal_default_instance());
#else
  consume_data_ = const_cast< ::ConsumeData*>(&::ConsumeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  online_data_ = const_cast< ::OnlineData*>(
      ::OnlineData::internal_default_instance());
#else
  online_data_ = const_cast< ::OnlineData*>(&::OnlineData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  power_data_ = const_cast< ::PowerData*>(
      ::PowerData::internal_default_instance());
#else
  power_data_ = const_cast< ::PowerData*>(&::PowerData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  growth_fund_data_ = const_cast< ::GrowthFundData*>(
      ::GrowthFundData::internal_default_instance());
#else
  growth_fund_data_ = const_cast< ::GrowthFundData*>(&::GrowthFundData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invest_data_ = const_cast< ::InvestData*>(
      ::InvestData::internal_default_instance());
#else
  invest_data_ = const_cast< ::InvestData*>(&::InvestData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  change_ship_data_ = const_cast< ::ChangeShipData*>(
      ::ChangeShipData::internal_default_instance());
#else
  change_ship_data_ = const_cast< ::ChangeShipData*>(&::ChangeShipData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  month_sign_data_ = const_cast< ::MonthSignData*>(
      ::MonthSignData::internal_default_instance());
#else
  month_sign_data_ = const_cast< ::MonthSignData*>(&::MonthSignData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  every_day_get_day_ = const_cast< ::EveryDayData*>(
      ::EveryDayData::internal_default_instance());
#else
  every_day_get_day_ = const_cast< ::EveryDayData*>(&::EveryDayData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  turntable_data_ = const_cast< ::TurntableData*>(
      ::TurntableData::internal_default_instance());
#else
  turntable_data_ = const_cast< ::TurntableData*>(&::TurntableData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  change_item_data_ = const_cast< ::ChagngeItemData*>(
      ::ChagngeItemData::internal_default_instance());
#else
  change_item_data_ = const_cast< ::ChagngeItemData*>(&::ChagngeItemData::default_instance());
#endif
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  change_data_ = NULL;
  recharge_data_ = NULL;
  sign_in_data_ = NULL;
  seven_days_data_ = NULL;
  first_recharge_data_ = NULL;
  credit_retrun_data_ = NULL;
  consume_data_ = NULL;
  online_data_ = NULL;
  power_data_ = NULL;
  growth_fund_data_ = NULL;
  invest_data_ = NULL;
  change_ship_data_ = NULL;
  month_sign_data_ = NULL;
  every_day_get_day_ = NULL;
  turntable_data_ = NULL;
  advanced_money_ = 0;
  change_item_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  SharedDtor();
}

void Activity::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete change_data_;
    delete recharge_data_;
    delete sign_in_data_;
    delete seven_days_data_;
    delete first_recharge_data_;
    delete credit_retrun_data_;
    delete consume_data_;
    delete online_data_;
    delete power_data_;
    delete growth_fund_data_;
    delete invest_data_;
    delete change_ship_data_;
    delete month_sign_data_;
    delete every_day_get_day_;
    delete turntable_data_;
    delete change_item_data_;
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Activity& Activity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Activity_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
#endif
  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::ChangeData::Clear();
    }
    if (has_recharge_data()) {
      if (recharge_data_ != NULL) recharge_data_->::RechargeData::Clear();
    }
    if (has_sign_in_data()) {
      if (sign_in_data_ != NULL) sign_in_data_->::SignInData::Clear();
    }
    if (has_seven_days_data()) {
      if (seven_days_data_ != NULL) seven_days_data_->::SevenDaysData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_first_recharge_data()) {
      if (first_recharge_data_ != NULL) first_recharge_data_->::FirstRechargeData::Clear();
    }
    if (has_credit_retrun_data()) {
      if (credit_retrun_data_ != NULL) credit_retrun_data_->::CreditReturnData::Clear();
    }
    if (has_consume_data()) {
      if (consume_data_ != NULL) consume_data_->::ConsumeData::Clear();
    }
    if (has_online_data()) {
      if (online_data_ != NULL) online_data_->::OnlineData::Clear();
    }
    if (has_power_data()) {
      if (power_data_ != NULL) power_data_->::PowerData::Clear();
    }
    if (has_growth_fund_data()) {
      if (growth_fund_data_ != NULL) growth_fund_data_->::GrowthFundData::Clear();
    }
    if (has_invest_data()) {
      if (invest_data_ != NULL) invest_data_->::InvestData::Clear();
    }
    if (has_change_ship_data()) {
      if (change_ship_data_ != NULL) change_ship_data_->::ChangeShipData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_month_sign_data()) {
      if (month_sign_data_ != NULL) month_sign_data_->::MonthSignData::Clear();
    }
    if (has_every_day_get_day()) {
      if (every_day_get_day_ != NULL) every_day_get_day_->::EveryDayData::Clear();
    }
    if (has_turntable_data()) {
      if (turntable_data_ != NULL) turntable_data_->::TurntableData::Clear();
    }
    advanced_money_ = 0;
    if (has_change_item_data()) {
      if (change_item_data_ != NULL) change_item_data_->::ChagngeItemData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_change_data;
        break;
      }

      // optional .ChangeData change_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recharge_data;
        break;
      }

      // optional .RechargeData recharge_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sign_in_data;
        break;
      }

      // optional .SignInData sign_in_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_in_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_in_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_seven_days_data;
        break;
      }

      // optional .SevenDaysData seven_days_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seven_days_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seven_days_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_first_recharge_data;
        break;
      }

      // optional .FirstRechargeData first_recharge_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_recharge_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_recharge_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_credit_retrun_data;
        break;
      }

      // optional .CreditReturnData credit_retrun_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_credit_retrun_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credit_retrun_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_consume_data;
        break;
      }

      // optional .ConsumeData consume_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consume_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_online_data;
        break;
      }

      // optional .OnlineData online_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_power_data;
        break;
      }

      // optional .PowerData power_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_power_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_growth_fund_data;
        break;
      }

      // optional .GrowthFundData growth_fund_data = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growth_fund_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_growth_fund_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_invest_data;
        break;
      }

      // optional .InvestData invest_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invest_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invest_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_change_ship_data;
        break;
      }

      // optional .ChangeShipData change_ship_data = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_ship_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_ship_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_month_sign_data;
        break;
      }

      // optional .MonthSignData month_sign_data = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_month_sign_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_month_sign_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_every_day_get_day;
        break;
      }

      // optional .EveryDayData every_day_get_day = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_every_day_get_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_every_day_get_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_turntable_data;
        break;
      }

      // optional .TurntableData turntable_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_turntable_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turntable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_advanced_money;
        break;
      }

      // optional int32 advanced_money = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanced_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advanced_money_)));
          set_has_advanced_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_change_item_data;
        break;
      }

      // optional .ChagngeItemData change_item_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_time(), output);
  }

  // optional .ChangeData change_data = 5;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->change_data(), output);
  }

  // optional .RechargeData recharge_data = 6;
  if (has_recharge_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->recharge_data(), output);
  }

  // optional .SignInData sign_in_data = 7;
  if (has_sign_in_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->sign_in_data(), output);
  }

  // optional .SevenDaysData seven_days_data = 8;
  if (has_seven_days_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->seven_days_data(), output);
  }

  // optional .FirstRechargeData first_recharge_data = 9;
  if (has_first_recharge_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->first_recharge_data(), output);
  }

  // optional .CreditReturnData credit_retrun_data = 10;
  if (has_credit_retrun_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->credit_retrun_data(), output);
  }

  // optional .ConsumeData consume_data = 11;
  if (has_consume_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->consume_data(), output);
  }

  // optional .OnlineData online_data = 12;
  if (has_online_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->online_data(), output);
  }

  // optional .PowerData power_data = 13;
  if (has_power_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->power_data(), output);
  }

  // optional .GrowthFundData growth_fund_data = 14;
  if (has_growth_fund_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->growth_fund_data(), output);
  }

  // optional .InvestData invest_data = 15;
  if (has_invest_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->invest_data(), output);
  }

  // optional .ChangeShipData change_ship_data = 16;
  if (has_change_ship_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->change_ship_data(), output);
  }

  // optional .MonthSignData month_sign_data = 17;
  if (has_month_sign_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->month_sign_data(), output);
  }

  // optional .EveryDayData every_day_get_day = 18;
  if (has_every_day_get_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->every_day_get_day(), output);
  }

  // optional .TurntableData turntable_data = 19;
  if (has_turntable_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->turntable_data(), output);
  }

  // optional int32 advanced_money = 20;
  if (has_advanced_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->advanced_money(), output);
  }

  // optional .ChagngeItemData change_item_data = 21;
  if (has_change_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->change_item_data(), output);
  }

}

int Activity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional .ChangeData change_data = 5;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

    // optional .RechargeData recharge_data = 6;
    if (has_recharge_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recharge_data());
    }

    // optional .SignInData sign_in_data = 7;
    if (has_sign_in_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_in_data());
    }

    // optional .SevenDaysData seven_days_data = 8;
    if (has_seven_days_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seven_days_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .FirstRechargeData first_recharge_data = 9;
    if (has_first_recharge_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_recharge_data());
    }

    // optional .CreditReturnData credit_retrun_data = 10;
    if (has_credit_retrun_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credit_retrun_data());
    }

    // optional .ConsumeData consume_data = 11;
    if (has_consume_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consume_data());
    }

    // optional .OnlineData online_data = 12;
    if (has_online_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_data());
    }

    // optional .PowerData power_data = 13;
    if (has_power_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_data());
    }

    // optional .GrowthFundData growth_fund_data = 14;
    if (has_growth_fund_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->growth_fund_data());
    }

    // optional .InvestData invest_data = 15;
    if (has_invest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invest_data());
    }

    // optional .ChangeShipData change_ship_data = 16;
    if (has_change_ship_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_ship_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .MonthSignData month_sign_data = 17;
    if (has_month_sign_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->month_sign_data());
    }

    // optional .EveryDayData every_day_get_day = 18;
    if (has_every_day_get_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->every_day_get_day());
    }

    // optional .TurntableData turntable_data = 19;
    if (has_turntable_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->turntable_data());
    }

    // optional int32 advanced_money = 20;
    if (has_advanced_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advanced_money());
    }

    // optional .ChagngeItemData change_item_data = 21;
    if (has_change_item_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_item_data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Activity*>(&from));
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_change_data()) {
      mutable_change_data()->::ChangeData::MergeFrom(from.change_data());
    }
    if (from.has_recharge_data()) {
      mutable_recharge_data()->::RechargeData::MergeFrom(from.recharge_data());
    }
    if (from.has_sign_in_data()) {
      mutable_sign_in_data()->::SignInData::MergeFrom(from.sign_in_data());
    }
    if (from.has_seven_days_data()) {
      mutable_seven_days_data()->::SevenDaysData::MergeFrom(from.seven_days_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_first_recharge_data()) {
      mutable_first_recharge_data()->::FirstRechargeData::MergeFrom(from.first_recharge_data());
    }
    if (from.has_credit_retrun_data()) {
      mutable_credit_retrun_data()->::CreditReturnData::MergeFrom(from.credit_retrun_data());
    }
    if (from.has_consume_data()) {
      mutable_consume_data()->::ConsumeData::MergeFrom(from.consume_data());
    }
    if (from.has_online_data()) {
      mutable_online_data()->::OnlineData::MergeFrom(from.online_data());
    }
    if (from.has_power_data()) {
      mutable_power_data()->::PowerData::MergeFrom(from.power_data());
    }
    if (from.has_growth_fund_data()) {
      mutable_growth_fund_data()->::GrowthFundData::MergeFrom(from.growth_fund_data());
    }
    if (from.has_invest_data()) {
      mutable_invest_data()->::InvestData::MergeFrom(from.invest_data());
    }
    if (from.has_change_ship_data()) {
      mutable_change_ship_data()->::ChangeShipData::MergeFrom(from.change_ship_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_month_sign_data()) {
      mutable_month_sign_data()->::MonthSignData::MergeFrom(from.month_sign_data());
    }
    if (from.has_every_day_get_day()) {
      mutable_every_day_get_day()->::EveryDayData::MergeFrom(from.every_day_get_day());
    }
    if (from.has_turntable_data()) {
      mutable_turntable_data()->::TurntableData::MergeFrom(from.turntable_data());
    }
    if (from.has_advanced_money()) {
      set_advanced_money(from.advanced_money());
    }
    if (from.has_change_item_data()) {
      mutable_change_item_data()->::ChagngeItemData::MergeFrom(from.change_item_data());
    }
  }
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_change_data()) {
    if (!this->change_data().IsInitialized()) return false;
  }
  if (has_recharge_data()) {
    if (!this->recharge_data().IsInitialized()) return false;
  }
  if (has_sign_in_data()) {
    if (!this->sign_in_data().IsInitialized()) return false;
  }
  if (has_seven_days_data()) {
    if (!this->seven_days_data().IsInitialized()) return false;
  }
  if (has_first_recharge_data()) {
    if (!this->first_recharge_data().IsInitialized()) return false;
  }
  if (has_credit_retrun_data()) {
    if (!this->credit_retrun_data().IsInitialized()) return false;
  }
  if (has_consume_data()) {
    if (!this->consume_data().IsInitialized()) return false;
  }
  if (has_growth_fund_data()) {
    if (!this->growth_fund_data().IsInitialized()) return false;
  }
  if (has_invest_data()) {
    if (!this->invest_data().IsInitialized()) return false;
  }
  if (has_change_ship_data()) {
    if (!this->change_ship_data().IsInitialized()) return false;
  }
  if (has_month_sign_data()) {
    if (!this->month_sign_data().IsInitialized()) return false;
  }
  if (has_every_day_get_day()) {
    if (!this->every_day_get_day().IsInitialized()) return false;
  }
  if (has_turntable_data()) {
    if (!this->turntable_data().IsInitialized()) return false;
  }
  if (has_change_item_data()) {
    if (!this->change_item_data().IsInitialized()) return false;
  }
  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(change_data_, other->change_data_);
    std::swap(recharge_data_, other->recharge_data_);
    std::swap(sign_in_data_, other->sign_in_data_);
    std::swap(seven_days_data_, other->seven_days_data_);
    std::swap(first_recharge_data_, other->first_recharge_data_);
    std::swap(credit_retrun_data_, other->credit_retrun_data_);
    std::swap(consume_data_, other->consume_data_);
    std::swap(online_data_, other->online_data_);
    std::swap(power_data_, other->power_data_);
    std::swap(growth_fund_data_, other->growth_fund_data_);
    std::swap(invest_data_, other->invest_data_);
    std::swap(change_ship_data_, other->change_ship_data_);
    std::swap(month_sign_data_, other->month_sign_data_);
    std::swap(every_day_get_day_, other->every_day_get_day_);
    std::swap(turntable_data_, other->turntable_data_);
    std::swap(advanced_money_, other->advanced_money_);
    std::swap(change_item_data_, other->change_item_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Activity::GetTypeName() const {
  return "Activity";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
