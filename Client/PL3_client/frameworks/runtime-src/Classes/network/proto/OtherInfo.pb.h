// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OtherInfo.proto

#ifndef PROTOBUF_OtherInfo_2eproto__INCLUDED
#define PROTOBUF_OtherInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OtherInfo_2eproto();
void protobuf_AssignDesc_OtherInfo_2eproto();
void protobuf_ShutdownFile_OtherInfo_2eproto();

class OtherUserInfo;
class OtherGroupInfo;

// ===================================================================

class OtherUserInfo : public ::google::protobuf::MessageLite {
 public:
  OtherUserInfo();
  virtual ~OtherUserInfo();

  OtherUserInfo(const OtherUserInfo& from);

  inline OtherUserInfo& operator=(const OtherUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const OtherUserInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const OtherUserInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(OtherUserInfo* other);

  // implements Message ----------------------------------------------

  OtherUserInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OtherUserInfo& from);
  void MergeFrom(const OtherUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // repeated int32 id_lineup = 4;
  inline int id_lineup_size() const;
  inline void clear_id_lineup();
  static const int kIdLineupFieldNumber = 4;
  inline ::google::protobuf::int32 id_lineup(int index) const;
  inline void set_id_lineup(int index, ::google::protobuf::int32 value);
  inline void add_id_lineup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_lineup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_lineup();

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated int32 lv_lineup = 6;
  inline int lv_lineup_size() const;
  inline void clear_lv_lineup();
  static const int kLvLineupFieldNumber = 6;
  inline ::google::protobuf::int32 lv_lineup(int index) const;
  inline void set_lv_lineup(int index, ::google::protobuf::int32 value);
  inline void add_lv_lineup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lv_lineup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lv_lineup();

  // required int32 icon_id = 7;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 7;
  inline ::google::protobuf::int32 icon_id() const;
  inline void set_icon_id(::google::protobuf::int32 value);

  // optional string group_nickname = 8;
  inline bool has_group_nickname() const;
  inline void clear_group_nickname();
  static const int kGroupNicknameFieldNumber = 8;
  inline const ::std::string& group_nickname() const;
  inline void set_group_nickname(const ::std::string& value);
  inline void set_group_nickname(const char* value);
  inline void set_group_nickname(const char* value, size_t size);
  inline ::std::string* mutable_group_nickname();
  inline ::std::string* release_group_nickname();
  inline void set_allocated_group_nickname(::std::string* group_nickname);

  // optional int32 level_rank = 9;
  inline bool has_level_rank() const;
  inline void clear_level_rank();
  static const int kLevelRankFieldNumber = 9;
  inline ::google::protobuf::int32 level_rank() const;
  inline void set_level_rank(::google::protobuf::int32 value);

  // optional int32 power_rank = 10;
  inline bool has_power_rank() const;
  inline void clear_power_rank();
  static const int kPowerRankFieldNumber = 10;
  inline ::google::protobuf::int32 power_rank() const;
  inline void set_power_rank(::google::protobuf::int32 value);

  // repeated int32 building_level_list = 11;
  inline int building_level_list_size() const;
  inline void clear_building_level_list();
  static const int kBuildingLevelListFieldNumber = 11;
  inline ::google::protobuf::int32 building_level_list(int index) const;
  inline void set_building_level_list(int index, ::google::protobuf::int32 value);
  inline void add_building_level_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      building_level_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_building_level_list();

  // optional int32 main_city_level_rank = 12;
  inline bool has_main_city_level_rank() const;
  inline void clear_main_city_level_rank();
  static const int kMainCityLevelRankFieldNumber = 12;
  inline ::google::protobuf::int32 main_city_level_rank() const;
  inline void set_main_city_level_rank(::google::protobuf::int32 value);

  // optional int32 max_trial_level = 13;
  inline bool has_max_trial_level() const;
  inline void clear_max_trial_level();
  static const int kMaxTrialLevelFieldNumber = 13;
  inline ::google::protobuf::int32 max_trial_level() const;
  inline void set_max_trial_level(::google::protobuf::int32 value);

  // optional int32 max_trial_level_rank = 14;
  inline bool has_max_trial_level_rank() const;
  inline void clear_max_trial_level_rank();
  static const int kMaxTrialLevelRankFieldNumber = 14;
  inline ::google::protobuf::int32 max_trial_level_rank() const;
  inline void set_max_trial_level_rank(::google::protobuf::int32 value);

  // optional int32 max_trial_star = 15;
  inline bool has_max_trial_star() const;
  inline void clear_max_trial_star();
  static const int kMaxTrialStarFieldNumber = 15;
  inline ::google::protobuf::int32 max_trial_star() const;
  inline void set_max_trial_star(::google::protobuf::int32 value);

  // repeated int32 break_lineup = 16;
  inline int break_lineup_size() const;
  inline void clear_break_lineup();
  static const int kBreakLineupFieldNumber = 16;
  inline ::google::protobuf::int32 break_lineup(int index) const;
  inline void set_break_lineup(int index, ::google::protobuf::int32 value);
  inline void add_break_lineup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      break_lineup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_break_lineup();

  // optional int32 attack_count = 17;
  inline bool has_attack_count() const;
  inline void clear_attack_count();
  static const int kAttackCountFieldNumber = 17;
  inline ::google::protobuf::int32 attack_count() const;
  inline void set_attack_count(::google::protobuf::int32 value);

  // optional int32 defence_count = 18;
  inline bool has_defence_count() const;
  inline void clear_defence_count();
  static const int kDefenceCountFieldNumber = 18;
  inline ::google::protobuf::int32 defence_count() const;
  inline void set_defence_count(::google::protobuf::int32 value);

  // optional int32 win_count = 19;
  inline bool has_win_count() const;
  inline void clear_win_count();
  static const int kWinCountFieldNumber = 19;
  inline ::google::protobuf::int32 win_count() const;
  inline void set_win_count(::google::protobuf::int32 value);

  // optional string groupid = 20;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 20;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // optional int32 vip_level = 21;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 21;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional uint64 last_act = 22;
  inline bool has_last_act() const;
  inline void clear_last_act();
  static const int kLastActFieldNumber = 22;
  inline ::google::protobuf::uint64 last_act() const;
  inline void set_last_act(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:OtherUserInfo)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  inline void set_has_group_nickname();
  inline void clear_has_group_nickname();
  inline void set_has_level_rank();
  inline void clear_has_level_rank();
  inline void set_has_power_rank();
  inline void clear_has_power_rank();
  inline void set_has_main_city_level_rank();
  inline void clear_has_main_city_level_rank();
  inline void set_has_max_trial_level();
  inline void clear_has_max_trial_level();
  inline void set_has_max_trial_level_rank();
  inline void clear_has_max_trial_level_rank();
  inline void set_has_max_trial_star();
  inline void clear_has_max_trial_star();
  inline void set_has_attack_count();
  inline void clear_has_attack_count();
  inline void set_has_defence_count();
  inline void clear_has_defence_count();
  inline void set_has_win_count();
  inline void clear_has_win_count();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_last_act();
  inline void clear_has_last_act();

  ::std::string* user_name_;
  ::std::string* nickname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_lineup_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lv_lineup_;
  ::std::string* group_nickname_;
  ::google::protobuf::int32 icon_id_;
  ::google::protobuf::int32 level_rank_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > building_level_list_;
  ::google::protobuf::int32 power_rank_;
  ::google::protobuf::int32 main_city_level_rank_;
  ::google::protobuf::int32 max_trial_level_;
  ::google::protobuf::int32 max_trial_level_rank_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > break_lineup_;
  ::google::protobuf::int32 max_trial_star_;
  ::google::protobuf::int32 attack_count_;
  ::google::protobuf::int32 defence_count_;
  ::google::protobuf::int32 win_count_;
  ::std::string* groupid_;
  ::google::protobuf::uint64 last_act_;
  ::google::protobuf::int32 vip_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_OtherInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_OtherInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_OtherInfo_2eproto();
  friend void protobuf_ShutdownFile_OtherInfo_2eproto();

  void InitAsDefaultInstance();
  static OtherUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class OtherGroupInfo : public ::google::protobuf::MessageLite {
 public:
  OtherGroupInfo();
  virtual ~OtherGroupInfo();

  OtherGroupInfo(const OtherGroupInfo& from);

  inline OtherGroupInfo& operator=(const OtherGroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const OtherGroupInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const OtherGroupInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(OtherGroupInfo* other);

  // implements Message ----------------------------------------------

  OtherGroupInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const OtherGroupInfo& from);
  void MergeFrom(const OtherGroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // optional string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 icon_id = 3;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 3;
  inline ::google::protobuf::int32 icon_id() const;
  inline void set_icon_id(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 power = 5;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 5;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional string leader_name = 6;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 6;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const char* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // @@protoc_insertion_point(class_scope:OtherGroupInfo)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();

  ::std::string* groupid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 icon_id_;
  ::google::protobuf::int32 level_;
  ::std::string* leader_name_;
  ::google::protobuf::int32 power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_OtherInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_OtherInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_OtherInfo_2eproto();
  friend void protobuf_ShutdownFile_OtherInfo_2eproto();

  void InitAsDefaultInstance();
  static OtherGroupInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// OtherUserInfo

// required string user_name = 1;
inline bool OtherUserInfo::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtherUserInfo::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtherUserInfo::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtherUserInfo::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& OtherUserInfo::user_name() const {
  return *user_name_;
}
inline void OtherUserInfo::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void OtherUserInfo::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void OtherUserInfo::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherUserInfo::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* OtherUserInfo::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherUserInfo::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 2;
inline bool OtherUserInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtherUserInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtherUserInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtherUserInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& OtherUserInfo::nickname() const {
  return *nickname_;
}
inline void OtherUserInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void OtherUserInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void OtherUserInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherUserInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* OtherUserInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherUserInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 power = 3;
inline bool OtherUserInfo::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OtherUserInfo::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OtherUserInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OtherUserInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 OtherUserInfo::power() const {
  return power_;
}
inline void OtherUserInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// repeated int32 id_lineup = 4;
inline int OtherUserInfo::id_lineup_size() const {
  return id_lineup_.size();
}
inline void OtherUserInfo::clear_id_lineup() {
  id_lineup_.Clear();
}
inline ::google::protobuf::int32 OtherUserInfo::id_lineup(int index) const {
  return id_lineup_.Get(index);
}
inline void OtherUserInfo::set_id_lineup(int index, ::google::protobuf::int32 value) {
  id_lineup_.Set(index, value);
}
inline void OtherUserInfo::add_id_lineup(::google::protobuf::int32 value) {
  id_lineup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OtherUserInfo::id_lineup() const {
  return id_lineup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OtherUserInfo::mutable_id_lineup() {
  return &id_lineup_;
}

// required int32 level = 5;
inline bool OtherUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OtherUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OtherUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OtherUserInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 OtherUserInfo::level() const {
  return level_;
}
inline void OtherUserInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated int32 lv_lineup = 6;
inline int OtherUserInfo::lv_lineup_size() const {
  return lv_lineup_.size();
}
inline void OtherUserInfo::clear_lv_lineup() {
  lv_lineup_.Clear();
}
inline ::google::protobuf::int32 OtherUserInfo::lv_lineup(int index) const {
  return lv_lineup_.Get(index);
}
inline void OtherUserInfo::set_lv_lineup(int index, ::google::protobuf::int32 value) {
  lv_lineup_.Set(index, value);
}
inline void OtherUserInfo::add_lv_lineup(::google::protobuf::int32 value) {
  lv_lineup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OtherUserInfo::lv_lineup() const {
  return lv_lineup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OtherUserInfo::mutable_lv_lineup() {
  return &lv_lineup_;
}

// required int32 icon_id = 7;
inline bool OtherUserInfo::has_icon_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OtherUserInfo::set_has_icon_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OtherUserInfo::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OtherUserInfo::clear_icon_id() {
  icon_id_ = 0;
  clear_has_icon_id();
}
inline ::google::protobuf::int32 OtherUserInfo::icon_id() const {
  return icon_id_;
}
inline void OtherUserInfo::set_icon_id(::google::protobuf::int32 value) {
  set_has_icon_id();
  icon_id_ = value;
}

// optional string group_nickname = 8;
inline bool OtherUserInfo::has_group_nickname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OtherUserInfo::set_has_group_nickname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OtherUserInfo::clear_has_group_nickname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OtherUserInfo::clear_group_nickname() {
  if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
    group_nickname_->clear();
  }
  clear_has_group_nickname();
}
inline const ::std::string& OtherUserInfo::group_nickname() const {
  return *group_nickname_;
}
inline void OtherUserInfo::set_group_nickname(const ::std::string& value) {
  set_has_group_nickname();
  if (group_nickname_ == &::google::protobuf::internal::kEmptyString) {
    group_nickname_ = new ::std::string;
  }
  group_nickname_->assign(value);
}
inline void OtherUserInfo::set_group_nickname(const char* value) {
  set_has_group_nickname();
  if (group_nickname_ == &::google::protobuf::internal::kEmptyString) {
    group_nickname_ = new ::std::string;
  }
  group_nickname_->assign(value);
}
inline void OtherUserInfo::set_group_nickname(const char* value, size_t size) {
  set_has_group_nickname();
  if (group_nickname_ == &::google::protobuf::internal::kEmptyString) {
    group_nickname_ = new ::std::string;
  }
  group_nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherUserInfo::mutable_group_nickname() {
  set_has_group_nickname();
  if (group_nickname_ == &::google::protobuf::internal::kEmptyString) {
    group_nickname_ = new ::std::string;
  }
  return group_nickname_;
}
inline ::std::string* OtherUserInfo::release_group_nickname() {
  clear_has_group_nickname();
  if (group_nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_nickname_;
    group_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherUserInfo::set_allocated_group_nickname(::std::string* group_nickname) {
  if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete group_nickname_;
  }
  if (group_nickname) {
    set_has_group_nickname();
    group_nickname_ = group_nickname;
  } else {
    clear_has_group_nickname();
    group_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level_rank = 9;
inline bool OtherUserInfo::has_level_rank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OtherUserInfo::set_has_level_rank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OtherUserInfo::clear_has_level_rank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OtherUserInfo::clear_level_rank() {
  level_rank_ = 0;
  clear_has_level_rank();
}
inline ::google::protobuf::int32 OtherUserInfo::level_rank() const {
  return level_rank_;
}
inline void OtherUserInfo::set_level_rank(::google::protobuf::int32 value) {
  set_has_level_rank();
  level_rank_ = value;
}

// optional int32 power_rank = 10;
inline bool OtherUserInfo::has_power_rank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OtherUserInfo::set_has_power_rank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OtherUserInfo::clear_has_power_rank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OtherUserInfo::clear_power_rank() {
  power_rank_ = 0;
  clear_has_power_rank();
}
inline ::google::protobuf::int32 OtherUserInfo::power_rank() const {
  return power_rank_;
}
inline void OtherUserInfo::set_power_rank(::google::protobuf::int32 value) {
  set_has_power_rank();
  power_rank_ = value;
}

// repeated int32 building_level_list = 11;
inline int OtherUserInfo::building_level_list_size() const {
  return building_level_list_.size();
}
inline void OtherUserInfo::clear_building_level_list() {
  building_level_list_.Clear();
}
inline ::google::protobuf::int32 OtherUserInfo::building_level_list(int index) const {
  return building_level_list_.Get(index);
}
inline void OtherUserInfo::set_building_level_list(int index, ::google::protobuf::int32 value) {
  building_level_list_.Set(index, value);
}
inline void OtherUserInfo::add_building_level_list(::google::protobuf::int32 value) {
  building_level_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OtherUserInfo::building_level_list() const {
  return building_level_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OtherUserInfo::mutable_building_level_list() {
  return &building_level_list_;
}

// optional int32 main_city_level_rank = 12;
inline bool OtherUserInfo::has_main_city_level_rank() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OtherUserInfo::set_has_main_city_level_rank() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OtherUserInfo::clear_has_main_city_level_rank() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OtherUserInfo::clear_main_city_level_rank() {
  main_city_level_rank_ = 0;
  clear_has_main_city_level_rank();
}
inline ::google::protobuf::int32 OtherUserInfo::main_city_level_rank() const {
  return main_city_level_rank_;
}
inline void OtherUserInfo::set_main_city_level_rank(::google::protobuf::int32 value) {
  set_has_main_city_level_rank();
  main_city_level_rank_ = value;
}

// optional int32 max_trial_level = 13;
inline bool OtherUserInfo::has_max_trial_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OtherUserInfo::set_has_max_trial_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OtherUserInfo::clear_has_max_trial_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OtherUserInfo::clear_max_trial_level() {
  max_trial_level_ = 0;
  clear_has_max_trial_level();
}
inline ::google::protobuf::int32 OtherUserInfo::max_trial_level() const {
  return max_trial_level_;
}
inline void OtherUserInfo::set_max_trial_level(::google::protobuf::int32 value) {
  set_has_max_trial_level();
  max_trial_level_ = value;
}

// optional int32 max_trial_level_rank = 14;
inline bool OtherUserInfo::has_max_trial_level_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OtherUserInfo::set_has_max_trial_level_rank() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OtherUserInfo::clear_has_max_trial_level_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OtherUserInfo::clear_max_trial_level_rank() {
  max_trial_level_rank_ = 0;
  clear_has_max_trial_level_rank();
}
inline ::google::protobuf::int32 OtherUserInfo::max_trial_level_rank() const {
  return max_trial_level_rank_;
}
inline void OtherUserInfo::set_max_trial_level_rank(::google::protobuf::int32 value) {
  set_has_max_trial_level_rank();
  max_trial_level_rank_ = value;
}

// optional int32 max_trial_star = 15;
inline bool OtherUserInfo::has_max_trial_star() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OtherUserInfo::set_has_max_trial_star() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OtherUserInfo::clear_has_max_trial_star() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OtherUserInfo::clear_max_trial_star() {
  max_trial_star_ = 0;
  clear_has_max_trial_star();
}
inline ::google::protobuf::int32 OtherUserInfo::max_trial_star() const {
  return max_trial_star_;
}
inline void OtherUserInfo::set_max_trial_star(::google::protobuf::int32 value) {
  set_has_max_trial_star();
  max_trial_star_ = value;
}

// repeated int32 break_lineup = 16;
inline int OtherUserInfo::break_lineup_size() const {
  return break_lineup_.size();
}
inline void OtherUserInfo::clear_break_lineup() {
  break_lineup_.Clear();
}
inline ::google::protobuf::int32 OtherUserInfo::break_lineup(int index) const {
  return break_lineup_.Get(index);
}
inline void OtherUserInfo::set_break_lineup(int index, ::google::protobuf::int32 value) {
  break_lineup_.Set(index, value);
}
inline void OtherUserInfo::add_break_lineup(::google::protobuf::int32 value) {
  break_lineup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OtherUserInfo::break_lineup() const {
  return break_lineup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OtherUserInfo::mutable_break_lineup() {
  return &break_lineup_;
}

// optional int32 attack_count = 17;
inline bool OtherUserInfo::has_attack_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OtherUserInfo::set_has_attack_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OtherUserInfo::clear_has_attack_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OtherUserInfo::clear_attack_count() {
  attack_count_ = 0;
  clear_has_attack_count();
}
inline ::google::protobuf::int32 OtherUserInfo::attack_count() const {
  return attack_count_;
}
inline void OtherUserInfo::set_attack_count(::google::protobuf::int32 value) {
  set_has_attack_count();
  attack_count_ = value;
}

// optional int32 defence_count = 18;
inline bool OtherUserInfo::has_defence_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OtherUserInfo::set_has_defence_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OtherUserInfo::clear_has_defence_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OtherUserInfo::clear_defence_count() {
  defence_count_ = 0;
  clear_has_defence_count();
}
inline ::google::protobuf::int32 OtherUserInfo::defence_count() const {
  return defence_count_;
}
inline void OtherUserInfo::set_defence_count(::google::protobuf::int32 value) {
  set_has_defence_count();
  defence_count_ = value;
}

// optional int32 win_count = 19;
inline bool OtherUserInfo::has_win_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OtherUserInfo::set_has_win_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OtherUserInfo::clear_has_win_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OtherUserInfo::clear_win_count() {
  win_count_ = 0;
  clear_has_win_count();
}
inline ::google::protobuf::int32 OtherUserInfo::win_count() const {
  return win_count_;
}
inline void OtherUserInfo::set_win_count(::google::protobuf::int32 value) {
  set_has_win_count();
  win_count_ = value;
}

// optional string groupid = 20;
inline bool OtherUserInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OtherUserInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OtherUserInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OtherUserInfo::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& OtherUserInfo::groupid() const {
  return *groupid_;
}
inline void OtherUserInfo::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void OtherUserInfo::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void OtherUserInfo::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherUserInfo::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}
inline ::std::string* OtherUserInfo::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherUserInfo::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 vip_level = 21;
inline bool OtherUserInfo::has_vip_level() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OtherUserInfo::set_has_vip_level() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OtherUserInfo::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OtherUserInfo::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 OtherUserInfo::vip_level() const {
  return vip_level_;
}
inline void OtherUserInfo::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint64 last_act = 22;
inline bool OtherUserInfo::has_last_act() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OtherUserInfo::set_has_last_act() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OtherUserInfo::clear_has_last_act() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OtherUserInfo::clear_last_act() {
  last_act_ = GOOGLE_ULONGLONG(0);
  clear_has_last_act();
}
inline ::google::protobuf::uint64 OtherUserInfo::last_act() const {
  return last_act_;
}
inline void OtherUserInfo::set_last_act(::google::protobuf::uint64 value) {
  set_has_last_act();
  last_act_ = value;
}

// -------------------------------------------------------------------

// OtherGroupInfo

// required string groupid = 1;
inline bool OtherGroupInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtherGroupInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtherGroupInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtherGroupInfo::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& OtherGroupInfo::groupid() const {
  return *groupid_;
}
inline void OtherGroupInfo::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void OtherGroupInfo::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void OtherGroupInfo::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherGroupInfo::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}
inline ::std::string* OtherGroupInfo::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherGroupInfo::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickname = 2;
inline bool OtherGroupInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtherGroupInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtherGroupInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtherGroupInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& OtherGroupInfo::nickname() const {
  return *nickname_;
}
inline void OtherGroupInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void OtherGroupInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void OtherGroupInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherGroupInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* OtherGroupInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherGroupInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 icon_id = 3;
inline bool OtherGroupInfo::has_icon_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OtherGroupInfo::set_has_icon_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OtherGroupInfo::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OtherGroupInfo::clear_icon_id() {
  icon_id_ = 0;
  clear_has_icon_id();
}
inline ::google::protobuf::int32 OtherGroupInfo::icon_id() const {
  return icon_id_;
}
inline void OtherGroupInfo::set_icon_id(::google::protobuf::int32 value) {
  set_has_icon_id();
  icon_id_ = value;
}

// optional int32 level = 4;
inline bool OtherGroupInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OtherGroupInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OtherGroupInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OtherGroupInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 OtherGroupInfo::level() const {
  return level_;
}
inline void OtherGroupInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 power = 5;
inline bool OtherGroupInfo::has_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OtherGroupInfo::set_has_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OtherGroupInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OtherGroupInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 OtherGroupInfo::power() const {
  return power_;
}
inline void OtherGroupInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional string leader_name = 6;
inline bool OtherGroupInfo::has_leader_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OtherGroupInfo::set_has_leader_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OtherGroupInfo::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OtherGroupInfo::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& OtherGroupInfo::leader_name() const {
  return *leader_name_;
}
inline void OtherGroupInfo::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void OtherGroupInfo::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void OtherGroupInfo::set_leader_name(const char* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherGroupInfo::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* OtherGroupInfo::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherGroupInfo::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OtherInfo_2eproto__INCLUDED
