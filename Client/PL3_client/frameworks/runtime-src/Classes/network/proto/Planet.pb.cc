// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Planet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Planet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_Planet_2eproto() {
  delete PlanetRes::default_instance_;
  delete PlanetCityResUser::default_instance_;
  delete PlanetCityRes::default_instance_;
  delete PlanetRuins::default_instance_;
  delete PlanetBase::default_instance_;
  delete PlanetBossUser::default_instance_;
  delete PlanetBoss::default_instance_;
  delete PlanetMonster::default_instance_;
  delete PlanetCity::default_instance_;
  delete PlanetTowerAttackHp::default_instance_;
  delete PlanetWangZuoTower::default_instance_;
  delete PlanetWangZuo::default_instance_;
  delete PlanetPoint::default_instance_;
  delete PlanetElement::default_instance_;
  delete PlanetNode::default_instance_;
  delete PlanetArmyLine::default_instance_;
  delete PlanetArmy::default_instance_;
  delete PlanetMark::default_instance_;
  delete PlanetSevenDaysData::default_instance_;
  delete PlanetUser::default_instance_;
  delete PlanetMailUser::default_instance_;
  delete PlanetArmyInfo::default_instance_;
  delete PlanetWangZuoTitle::default_instance_;
  delete PlanetWangZuoTitleList::default_instance_;
  delete PlanetWangZuoOccupy::default_instance_;
  delete PlanetWangZuoOccupyList::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Planet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Planet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_OtherInfo_2eproto();
  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_PvpInfo_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  PlanetRes::default_instance_ = new PlanetRes();
  PlanetCityResUser::default_instance_ = new PlanetCityResUser();
  PlanetCityRes::default_instance_ = new PlanetCityRes();
  PlanetRuins::default_instance_ = new PlanetRuins();
  PlanetBase::default_instance_ = new PlanetBase();
  PlanetBossUser::default_instance_ = new PlanetBossUser();
  PlanetBoss::default_instance_ = new PlanetBoss();
  PlanetMonster::default_instance_ = new PlanetMonster();
  PlanetCity::default_instance_ = new PlanetCity();
  PlanetTowerAttackHp::default_instance_ = new PlanetTowerAttackHp();
  PlanetWangZuoTower::default_instance_ = new PlanetWangZuoTower();
  PlanetWangZuo::default_instance_ = new PlanetWangZuo();
  PlanetPoint::default_instance_ = new PlanetPoint();
  PlanetElement::default_instance_ = new PlanetElement();
  PlanetNode::default_instance_ = new PlanetNode();
  PlanetArmyLine::default_instance_ = new PlanetArmyLine();
  PlanetArmy::default_instance_ = new PlanetArmy();
  PlanetMark::default_instance_ = new PlanetMark();
  PlanetSevenDaysData::default_instance_ = new PlanetSevenDaysData();
  PlanetUser::default_instance_ = new PlanetUser();
  PlanetMailUser::default_instance_ = new PlanetMailUser();
  PlanetArmyInfo::default_instance_ = new PlanetArmyInfo();
  PlanetWangZuoTitle::default_instance_ = new PlanetWangZuoTitle();
  PlanetWangZuoTitleList::default_instance_ = new PlanetWangZuoTitleList();
  PlanetWangZuoOccupy::default_instance_ = new PlanetWangZuoOccupy();
  PlanetWangZuoOccupyList::default_instance_ = new PlanetWangZuoOccupyList();
  PlanetRes::default_instance_->InitAsDefaultInstance();
  PlanetCityResUser::default_instance_->InitAsDefaultInstance();
  PlanetCityRes::default_instance_->InitAsDefaultInstance();
  PlanetRuins::default_instance_->InitAsDefaultInstance();
  PlanetBase::default_instance_->InitAsDefaultInstance();
  PlanetBossUser::default_instance_->InitAsDefaultInstance();
  PlanetBoss::default_instance_->InitAsDefaultInstance();
  PlanetMonster::default_instance_->InitAsDefaultInstance();
  PlanetCity::default_instance_->InitAsDefaultInstance();
  PlanetTowerAttackHp::default_instance_->InitAsDefaultInstance();
  PlanetWangZuoTower::default_instance_->InitAsDefaultInstance();
  PlanetWangZuo::default_instance_->InitAsDefaultInstance();
  PlanetPoint::default_instance_->InitAsDefaultInstance();
  PlanetElement::default_instance_->InitAsDefaultInstance();
  PlanetNode::default_instance_->InitAsDefaultInstance();
  PlanetArmyLine::default_instance_->InitAsDefaultInstance();
  PlanetArmy::default_instance_->InitAsDefaultInstance();
  PlanetMark::default_instance_->InitAsDefaultInstance();
  PlanetSevenDaysData::default_instance_->InitAsDefaultInstance();
  PlanetUser::default_instance_->InitAsDefaultInstance();
  PlanetMailUser::default_instance_->InitAsDefaultInstance();
  PlanetArmyInfo::default_instance_->InitAsDefaultInstance();
  PlanetWangZuoTitle::default_instance_->InitAsDefaultInstance();
  PlanetWangZuoTitleList::default_instance_->InitAsDefaultInstance();
  PlanetWangZuoOccupy::default_instance_->InitAsDefaultInstance();
  PlanetWangZuoOccupyList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Planet_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Planet_2eproto_once_);
void protobuf_AddDesc_Planet_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Planet_2eproto_once_,
                 &protobuf_AddDesc_Planet_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Planet_2eproto {
  StaticDescriptorInitializer_Planet_2eproto() {
    protobuf_AddDesc_Planet_2eproto();
  }
} static_descriptor_initializer_Planet_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PlanetRes::kIdFieldNumber;
const int PlanetRes::kCurStorageFieldNumber;
const int PlanetRes::kUserNameFieldNumber;
const int PlanetRes::kBeginTimeFieldNumber;
const int PlanetRes::kCollectSpeedFieldNumber;
const int PlanetRes::kArmyGuidFieldNumber;
const int PlanetRes::kHasMonsterFieldNumber;
#endif  // !_MSC_VER

PlanetRes::PlanetRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetRes::InitAsDefaultInstance() {
}

PlanetRes::PlanetRes(const PlanetRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRes::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_storage_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_time_ = GOOGLE_LONGLONG(0);
  collect_speed_ = 0;
  army_guid_ = 0;
  hasmonster_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRes::~PlanetRes() {
  SharedDtor();
}

void PlanetRes::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetRes& PlanetRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetRes* PlanetRes::default_instance_ = NULL;

PlanetRes* PlanetRes::New() const {
  return new PlanetRes;
}

void PlanetRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_storage_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    begin_time_ = GOOGLE_LONGLONG(0);
    collect_speed_ = 0;
    army_guid_ = 0;
    hasmonster_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_storage;
        break;
      }

      // required int32 cur_storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_storage_)));
          set_has_cur_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_begin_time;
        break;
      }

      // optional int64 begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_collect_speed;
        break;
      }

      // optional int32 collect_speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_speed_)));
          set_has_collect_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_army_guid;
        break;
      }

      // optional int32 army_guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &army_guid_)));
          set_has_army_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasMonster;
        break;
      }

      // required bool hasMonster = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmonster_)));
          set_has_hasmonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 cur_storage = 2;
  if (has_cur_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_storage(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional int64 begin_time = 4;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begin_time(), output);
  }

  // optional int32 collect_speed = 5;
  if (has_collect_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->collect_speed(), output);
  }

  // optional int32 army_guid = 6;
  if (has_army_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->army_guid(), output);
  }

  // required bool hasMonster = 7;
  if (has_hasmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hasmonster(), output);
  }

}

int PlanetRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 cur_storage = 2;
    if (has_cur_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_storage());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int64 begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int32 collect_speed = 5;
    if (has_collect_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_speed());
    }

    // optional int32 army_guid = 6;
    if (has_army_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->army_guid());
    }

    // required bool hasMonster = 7;
    if (has_hasmonster()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetRes*>(&from));
}

void PlanetRes::MergeFrom(const PlanetRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur_storage()) {
      set_cur_storage(from.cur_storage());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_collect_speed()) {
      set_collect_speed(from.collect_speed());
    }
    if (from.has_army_guid()) {
      set_army_guid(from.army_guid());
    }
    if (from.has_hasmonster()) {
      set_hasmonster(from.hasmonster());
    }
  }
}

void PlanetRes::CopyFrom(const PlanetRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  return true;
}

void PlanetRes::Swap(PlanetRes* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_storage_, other->cur_storage_);
    std::swap(user_name_, other->user_name_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(collect_speed_, other->collect_speed_);
    std::swap(army_guid_, other->army_guid_);
    std::swap(hasmonster_, other->hasmonster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetRes::GetTypeName() const {
  return "PlanetRes";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetCityResUser::kUserNameFieldNumber;
const int PlanetCityResUser::kBeginTimeFieldNumber;
const int PlanetCityResUser::kCollectSpeedFieldNumber;
const int PlanetCityResUser::kArmyGuidFieldNumber;
#endif  // !_MSC_VER

PlanetCityResUser::PlanetCityResUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetCityResUser::InitAsDefaultInstance() {
}

PlanetCityResUser::PlanetCityResUser(const PlanetCityResUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCityResUser::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_time_ = GOOGLE_LONGLONG(0);
  collect_speed_ = 0;
  army_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCityResUser::~PlanetCityResUser() {
  SharedDtor();
}

void PlanetCityResUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetCityResUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetCityResUser& PlanetCityResUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetCityResUser* PlanetCityResUser::default_instance_ = NULL;

PlanetCityResUser* PlanetCityResUser::New() const {
  return new PlanetCityResUser;
}

void PlanetCityResUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    begin_time_ = GOOGLE_LONGLONG(0);
    collect_speed_ = 0;
    army_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetCityResUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // required int64 begin_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_collect_speed;
        break;
      }

      // required int32 collect_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_speed_)));
          set_has_collect_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_army_guid;
        break;
      }

      // required int32 army_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &army_guid_)));
          set_has_army_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCityResUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int64 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begin_time(), output);
  }

  // required int32 collect_speed = 3;
  if (has_collect_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->collect_speed(), output);
  }

  // required int32 army_guid = 4;
  if (has_army_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->army_guid(), output);
  }

}

int PlanetCityResUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int64 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // required int32 collect_speed = 3;
    if (has_collect_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_speed());
    }

    // required int32 army_guid = 4;
    if (has_army_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->army_guid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCityResUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetCityResUser*>(&from));
}

void PlanetCityResUser::MergeFrom(const PlanetCityResUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_collect_speed()) {
      set_collect_speed(from.collect_speed());
    }
    if (from.has_army_guid()) {
      set_army_guid(from.army_guid());
    }
  }
}

void PlanetCityResUser::CopyFrom(const PlanetCityResUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCityResUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PlanetCityResUser::Swap(PlanetCityResUser* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(collect_speed_, other->collect_speed_);
    std::swap(army_guid_, other->army_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetCityResUser::GetTypeName() const {
  return "PlanetCityResUser";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetCityRes::kIdFieldNumber;
const int PlanetCityRes::kUserListFieldNumber;
const int PlanetCityRes::kCurStorageFieldNumber;
const int PlanetCityRes::kRestoreStartTimeFieldNumber;
const int PlanetCityRes::kGroupidFieldNumber;
#endif  // !_MSC_VER

PlanetCityRes::PlanetCityRes()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetCityRes::InitAsDefaultInstance() {
}

PlanetCityRes::PlanetCityRes(const PlanetCityRes& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCityRes::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_storage_ = 0;
  restore_start_time_ = GOOGLE_LONGLONG(0);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCityRes::~PlanetCityRes() {
  SharedDtor();
}

void PlanetCityRes::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetCityRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetCityRes& PlanetCityRes::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetCityRes* PlanetCityRes::default_instance_ = NULL;

PlanetCityRes* PlanetCityRes::New() const {
  return new PlanetCityRes;
}

void PlanetCityRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_storage_ = 0;
    restore_start_time_ = GOOGLE_LONGLONG(0);
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetCityRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        break;
      }

      // repeated .PlanetCityResUser user_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        if (input->ExpectTag(24)) goto parse_cur_storage;
        break;
      }

      // required int32 cur_storage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_storage_)));
          set_has_cur_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_restore_start_time;
        break;
      }

      // required int64 restore_start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restore_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restore_start_time_)));
          set_has_restore_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_groupid;
        break;
      }

      // optional string groupid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCityRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .PlanetCityResUser user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_list(i), output);
  }

  // required int32 cur_storage = 3;
  if (has_cur_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_storage(), output);
  }

  // required int64 restore_start_time = 4;
  if (has_restore_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->restore_start_time(), output);
  }

  // optional string groupid = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->groupid(), output);
  }

}

int PlanetCityRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 cur_storage = 3;
    if (has_cur_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_storage());
    }

    // required int64 restore_start_time = 4;
    if (has_restore_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->restore_start_time());
    }

    // optional string groupid = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  // repeated .PlanetCityResUser user_list = 2;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCityRes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetCityRes*>(&from));
}

void PlanetCityRes::MergeFrom(const PlanetCityRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur_storage()) {
      set_cur_storage(from.cur_storage());
    }
    if (from.has_restore_start_time()) {
      set_restore_start_time(from.restore_start_time());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
}

void PlanetCityRes::CopyFrom(const PlanetCityRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCityRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  for (int i = 0; i < user_list_size(); i++) {
    if (!this->user_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetCityRes::Swap(PlanetCityRes* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    user_list_.Swap(&other->user_list_);
    std::swap(cur_storage_, other->cur_storage_);
    std::swap(restore_start_time_, other->restore_start_time_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetCityRes::GetTypeName() const {
  return "PlanetCityRes";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRuins::kIdFieldNumber;
const int PlanetRuins::kBeginTimeFieldNumber;
const int PlanetRuins::kNeedTimeFieldNumber;
const int PlanetRuins::kUserNameFieldNumber;
const int PlanetRuins::kArmyGuidFieldNumber;
#endif  // !_MSC_VER

PlanetRuins::PlanetRuins()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetRuins::InitAsDefaultInstance() {
}

PlanetRuins::PlanetRuins(const PlanetRuins& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRuins::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  begin_time_ = GOOGLE_LONGLONG(0);
  need_time_ = GOOGLE_LONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  army_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRuins::~PlanetRuins() {
  SharedDtor();
}

void PlanetRuins::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetRuins::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetRuins& PlanetRuins::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetRuins* PlanetRuins::default_instance_ = NULL;

PlanetRuins* PlanetRuins::New() const {
  return new PlanetRuins;
}

void PlanetRuins::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    begin_time_ = GOOGLE_LONGLONG(0);
    need_time_ = GOOGLE_LONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    army_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetRuins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional int64 begin_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_time;
        break;
      }

      // optional int64 need_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &need_time_)));
          set_has_need_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_name;
        break;
      }

      // optional string user_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_army_guid;
        break;
      }

      // optional int32 army_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &army_guid_)));
          set_has_army_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRuins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begin_time(), output);
  }

  // optional int64 need_time = 3;
  if (has_need_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->need_time(), output);
  }

  // optional string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_name(), output);
  }

  // optional int32 army_guid = 5;
  if (has_army_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->army_guid(), output);
  }

}

int PlanetRuins::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int64 need_time = 3;
    if (has_need_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->need_time());
    }

    // optional string user_name = 4;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int32 army_guid = 5;
    if (has_army_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->army_guid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRuins::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetRuins*>(&from));
}

void PlanetRuins::MergeFrom(const PlanetRuins& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_need_time()) {
      set_need_time(from.need_time());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_army_guid()) {
      set_army_guid(from.army_guid());
    }
  }
}

void PlanetRuins::CopyFrom(const PlanetRuins& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRuins::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetRuins::Swap(PlanetRuins* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(need_time_, other->need_time_);
    std::swap(user_name_, other->user_name_);
    std::swap(army_guid_, other->army_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetRuins::GetTypeName() const {
  return "PlanetRuins";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetBase::kUserNameFieldNumber;
const int PlanetBase::kGuardeListFieldNumber;
const int PlanetBase::kDestroyValueFieldNumber;
const int PlanetBase::kLastHurtTimeFieldNumber;
const int PlanetBase::kLastSubDestroyValueTimeFieldNumber;
const int PlanetBase::kInfoFieldNumber;
const int PlanetBase::kShieldStartTimeFieldNumber;
const int PlanetBase::kShieldTimeFieldNumber;
const int PlanetBase::kShieldTypeFieldNumber;
#endif  // !_MSC_VER

PlanetBase::PlanetBase()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetBase::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::OtherUserInfo*>(
      ::OtherUserInfo::internal_default_instance());
#else
  info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
#endif
}

PlanetBase::PlanetBase(const PlanetBase& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetBase::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destroy_value_ = 0;
  last_hurt_time_ = GOOGLE_LONGLONG(0);
  last_sub_destroy_value_time_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  shield_start_time_ = GOOGLE_LONGLONG(0);
  shield_time_ = GOOGLE_LONGLONG(0);
  shield_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetBase::~PlanetBase() {
  SharedDtor();
}

void PlanetBase::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void PlanetBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetBase& PlanetBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetBase* PlanetBase::default_instance_ = NULL;

PlanetBase* PlanetBase::New() const {
  return new PlanetBase;
}

void PlanetBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    destroy_value_ = 0;
    last_hurt_time_ = GOOGLE_LONGLONG(0);
    last_sub_destroy_value_time_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::OtherUserInfo::Clear();
    }
    shield_start_time_ = GOOGLE_LONGLONG(0);
    shield_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    shield_type_ = 0;
  }
  guarde_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guarde_list;
        break;
      }

      // repeated string guarde_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guarde_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guarde_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guarde_list;
        if (input->ExpectTag(24)) goto parse_destroy_value;
        break;
      }

      // required int32 destroy_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destroy_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destroy_value_)));
          set_has_destroy_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_hurt_time;
        break;
      }

      // optional int64 last_hurt_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_hurt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_hurt_time_)));
          set_has_last_hurt_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_sub_destroy_value_time;
        break;
      }

      // optional int64 last_sub_destroy_value_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sub_destroy_value_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_sub_destroy_value_time_)));
          set_has_last_sub_destroy_value_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // optional .OtherUserInfo info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_shield_start_time;
        break;
      }

      // optional int64 shield_start_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shield_start_time_)));
          set_has_shield_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_shield_time;
        break;
      }

      // optional int64 shield_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shield_time_)));
          set_has_shield_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_shield_type;
        break;
      }

      // optional int32 shield_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shield_type_)));
          set_has_shield_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // repeated string guarde_list = 2;
  for (int i = 0; i < this->guarde_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guarde_list(i), output);
  }

  // required int32 destroy_value = 3;
  if (has_destroy_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->destroy_value(), output);
  }

  // optional int64 last_hurt_time = 4;
  if (has_last_hurt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_hurt_time(), output);
  }

  // optional int64 last_sub_destroy_value_time = 5;
  if (has_last_sub_destroy_value_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_sub_destroy_value_time(), output);
  }

  // optional .OtherUserInfo info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->info(), output);
  }

  // optional int64 shield_start_time = 7;
  if (has_shield_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->shield_start_time(), output);
  }

  // optional int64 shield_time = 8;
  if (has_shield_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->shield_time(), output);
  }

  // optional int32 shield_type = 9;
  if (has_shield_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->shield_type(), output);
  }

}

int PlanetBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 destroy_value = 3;
    if (has_destroy_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destroy_value());
    }

    // optional int64 last_hurt_time = 4;
    if (has_last_hurt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_hurt_time());
    }

    // optional int64 last_sub_destroy_value_time = 5;
    if (has_last_sub_destroy_value_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_sub_destroy_value_time());
    }

    // optional .OtherUserInfo info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int64 shield_start_time = 7;
    if (has_shield_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shield_start_time());
    }

    // optional int64 shield_time = 8;
    if (has_shield_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shield_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 shield_type = 9;
    if (has_shield_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shield_type());
    }

  }
  // repeated string guarde_list = 2;
  total_size += 1 * this->guarde_list_size();
  for (int i = 0; i < this->guarde_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guarde_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetBase::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetBase*>(&from));
}

void PlanetBase::MergeFrom(const PlanetBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  guarde_list_.MergeFrom(from.guarde_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_destroy_value()) {
      set_destroy_value(from.destroy_value());
    }
    if (from.has_last_hurt_time()) {
      set_last_hurt_time(from.last_hurt_time());
    }
    if (from.has_last_sub_destroy_value_time()) {
      set_last_sub_destroy_value_time(from.last_sub_destroy_value_time());
    }
    if (from.has_info()) {
      mutable_info()->::OtherUserInfo::MergeFrom(from.info());
    }
    if (from.has_shield_start_time()) {
      set_shield_start_time(from.shield_start_time());
    }
    if (from.has_shield_time()) {
      set_shield_time(from.shield_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shield_type()) {
      set_shield_type(from.shield_type());
    }
  }
}

void PlanetBase::CopyFrom(const PlanetBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void PlanetBase::Swap(PlanetBase* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    guarde_list_.Swap(&other->guarde_list_);
    std::swap(destroy_value_, other->destroy_value_);
    std::swap(last_hurt_time_, other->last_hurt_time_);
    std::swap(last_sub_destroy_value_time_, other->last_sub_destroy_value_time_);
    std::swap(info_, other->info_);
    std::swap(shield_start_time_, other->shield_start_time_);
    std::swap(shield_time_, other->shield_time_);
    std::swap(shield_type_, other->shield_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetBase::GetTypeName() const {
  return "PlanetBase";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetBossUser::kUserNameFieldNumber;
const int PlanetBossUser::kTechIdFieldNumber;
const int PlanetBossUser::kStartTimeFieldNumber;
const int PlanetBossUser::kAttackCountFieldNumber;
const int PlanetBossUser::kBossGlobalKeyFieldNumber;
#endif  // !_MSC_VER

PlanetBossUser::PlanetBossUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetBossUser::InitAsDefaultInstance() {
}

PlanetBossUser::PlanetBossUser(const PlanetBossUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetBossUser::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tech_id_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  attack_count_ = 0;
  boss_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetBossUser::~PlanetBossUser() {
  SharedDtor();
}

void PlanetBossUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (boss_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_global_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetBossUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetBossUser& PlanetBossUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetBossUser* PlanetBossUser::default_instance_ = NULL;

PlanetBossUser* PlanetBossUser::New() const {
  return new PlanetBossUser;
}

void PlanetBossUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    tech_id_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    attack_count_ = 0;
    if (has_boss_global_key()) {
      if (boss_global_key_ != &::google::protobuf::internal::kEmptyString) {
        boss_global_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetBossUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tech_id;
        break;
      }

      // required int32 tech_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tech_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack_count;
        break;
      }

      // required int32 attack_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_boss_global_key;
        break;
      }

      // required string boss_global_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boss_global_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetBossUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 tech_id = 2;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tech_id(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // required int32 attack_count = 4;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack_count(), output);
  }

  // required string boss_global_key = 5;
  if (has_boss_global_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->boss_global_key(), output);
  }

}

int PlanetBossUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 tech_id = 2;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int32 attack_count = 4;
    if (has_attack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_count());
    }

    // required string boss_global_key = 5;
    if (has_boss_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boss_global_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetBossUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetBossUser*>(&from));
}

void PlanetBossUser::MergeFrom(const PlanetBossUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
    if (from.has_boss_global_key()) {
      set_boss_global_key(from.boss_global_key());
    }
  }
}

void PlanetBossUser::CopyFrom(const PlanetBossUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetBossUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PlanetBossUser::Swap(PlanetBossUser* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(tech_id_, other->tech_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(attack_count_, other->attack_count_);
    std::swap(boss_global_key_, other->boss_global_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetBossUser::GetTypeName() const {
  return "PlanetBossUser";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetBoss::kIdFieldNumber;
const int PlanetBoss::kCreateTimeFieldNumber;
const int PlanetBoss::kMonsterHpListFieldNumber;
const int PlanetBoss::kUserInfoFieldNumber;
#endif  // !_MSC_VER

PlanetBoss::PlanetBoss()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetBoss::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::PlanetBossUser*>(
      ::PlanetBossUser::internal_default_instance());
#else
  user_info_ = const_cast< ::PlanetBossUser*>(&::PlanetBossUser::default_instance());
#endif
}

PlanetBoss::PlanetBoss(const PlanetBoss& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetBoss::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetBoss::~PlanetBoss() {
  SharedDtor();
}

void PlanetBoss::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void PlanetBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetBoss& PlanetBoss::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetBoss* PlanetBoss::default_instance_ = NULL;

PlanetBoss* PlanetBoss::New() const {
  return new PlanetBoss;
}

void PlanetBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    create_time_ = GOOGLE_LONGLONG(0);
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::PlanetBossUser::Clear();
    }
  }
  monster_hp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // required int64 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_hp_list;
        break;
      }

      // repeated int32 monster_hp_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_monster_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_hp_list;
        if (input->ExpectTag(34)) goto parse_user_info;
        break;
      }

      // optional .PlanetBossUser user_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->create_time(), output);
  }

  // repeated int32 monster_hp_list = 3;
  for (int i = 0; i < this->monster_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->monster_hp_list(i), output);
  }

  // optional .PlanetBossUser user_info = 4;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->user_info(), output);
  }

}

int PlanetBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional .PlanetBossUser user_info = 4;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  // repeated int32 monster_hp_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_hp_list(i));
    }
    total_size += 1 * this->monster_hp_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetBoss::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetBoss*>(&from));
}

void PlanetBoss::MergeFrom(const PlanetBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_hp_list_.MergeFrom(from.monster_hp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::PlanetBossUser::MergeFrom(from.user_info());
    }
  }
}

void PlanetBoss::CopyFrom(const PlanetBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetBoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void PlanetBoss::Swap(PlanetBoss* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(create_time_, other->create_time_);
    monster_hp_list_.Swap(&other->monster_hp_list_);
    std::swap(user_info_, other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetBoss::GetTypeName() const {
  return "PlanetBoss";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMonster::kIdFieldNumber;
const int PlanetMonster::kCreateTimeFieldNumber;
const int PlanetMonster::kIsDeadFieldNumber;
const int PlanetMonster::kDeadTimeFieldNumber;
const int PlanetMonster::kMonsterHpListFieldNumber;
#endif  // !_MSC_VER

PlanetMonster::PlanetMonster()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetMonster::InitAsDefaultInstance() {
}

PlanetMonster::PlanetMonster(const PlanetMonster& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMonster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  isdead_ = 0;
  dead_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMonster::~PlanetMonster() {
  SharedDtor();
}

void PlanetMonster::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetMonster& PlanetMonster::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetMonster* PlanetMonster::default_instance_ = NULL;

PlanetMonster* PlanetMonster::New() const {
  return new PlanetMonster;
}

void PlanetMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    create_time_ = GOOGLE_LONGLONG(0);
    isdead_ = 0;
    dead_time_ = GOOGLE_LONGLONG(0);
  }
  monster_hp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // required int64 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isDead;
        break;
      }

      // required int32 isDead = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdead_)));
          set_has_isdead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_time;
        break;
      }

      // optional int64 dead_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dead_time_)));
          set_has_dead_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_monster_hp_list;
        break;
      }

      // repeated int32 monster_hp_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_monster_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_monster_hp_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->create_time(), output);
  }

  // required int32 isDead = 3;
  if (has_isdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isdead(), output);
  }

  // optional int64 dead_time = 4;
  if (has_dead_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->dead_time(), output);
  }

  // repeated int32 monster_hp_list = 5;
  for (int i = 0; i < this->monster_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->monster_hp_list(i), output);
  }

}

int PlanetMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // required int32 isDead = 3;
    if (has_isdead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdead());
    }

    // optional int64 dead_time = 4;
    if (has_dead_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dead_time());
    }

  }
  // repeated int32 monster_hp_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_hp_list(i));
    }
    total_size += 1 * this->monster_hp_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMonster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetMonster*>(&from));
}

void PlanetMonster::MergeFrom(const PlanetMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_hp_list_.MergeFrom(from.monster_hp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_isdead()) {
      set_isdead(from.isdead());
    }
    if (from.has_dead_time()) {
      set_dead_time(from.dead_time());
    }
  }
}

void PlanetMonster::CopyFrom(const PlanetMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlanetMonster::Swap(PlanetMonster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(create_time_, other->create_time_);
    std::swap(isdead_, other->isdead_);
    std::swap(dead_time_, other->dead_time_);
    monster_hp_list_.Swap(&other->monster_hp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetMonster::GetTypeName() const {
  return "PlanetMonster";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetCity::kIdFieldNumber;
const int PlanetCity::kHasMonsterFieldNumber;
const int PlanetCity::kMonsterHpListFieldNumber;
const int PlanetCity::kStatusFieldNumber;
const int PlanetCity::kStatusBeginTimeFieldNumber;
const int PlanetCity::kOccupyBeginTimeFieldNumber;
const int PlanetCity::kUserNameFieldNumber;
const int PlanetCity::kGroupidFieldNumber;
const int PlanetCity::kGuardeListFieldNumber;
const int PlanetCity::kTempInfoFieldNumber;
#endif  // !_MSC_VER

PlanetCity::PlanetCity()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetCity::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  temp_info_ = const_cast< ::OtherGroupInfo*>(
      ::OtherGroupInfo::internal_default_instance());
#else
  temp_info_ = const_cast< ::OtherGroupInfo*>(&::OtherGroupInfo::default_instance());
#endif
}

PlanetCity::PlanetCity(const PlanetCity& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hasmonster_ = false;
  status_ = 0;
  status_begin_time_ = GOOGLE_LONGLONG(0);
  occupy_begin_time_ = GOOGLE_LONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  temp_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCity::~PlanetCity() {
  SharedDtor();
}

void PlanetCity::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete temp_info_;
  }
}

void PlanetCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetCity& PlanetCity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetCity* PlanetCity::default_instance_ = NULL;

PlanetCity* PlanetCity::New() const {
  return new PlanetCity;
}

void PlanetCity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hasmonster_ = false;
    status_ = 0;
    status_begin_time_ = GOOGLE_LONGLONG(0);
    occupy_begin_time_ = GOOGLE_LONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_temp_info()) {
      if (temp_info_ != NULL) temp_info_->::OtherGroupInfo::Clear();
    }
  }
  monster_hp_list_.Clear();
  guarde_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasMonster;
        break;
      }

      // required bool hasMonster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmonster_)));
          set_has_hasmonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_hp_list;
        break;
      }

      // repeated int32 monster_hp_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_monster_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_hp_list;
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status_begin_time;
        break;
      }

      // required int64 status_begin_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_begin_time_)));
          set_has_status_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_occupy_begin_time;
        break;
      }

      // required int64 occupy_begin_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupy_begin_time_)));
          set_has_occupy_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user_name;
        break;
      }

      // optional string user_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_groupid;
        break;
      }

      // required string groupid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_guarde_list;
        break;
      }

      // repeated string guarde_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guarde_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guarde_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_guarde_list;
        if (input->ExpectTag(82)) goto parse_temp_info;
        break;
      }

      // optional .OtherGroupInfo temp_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool hasMonster = 2;
  if (has_hasmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasmonster(), output);
  }

  // repeated int32 monster_hp_list = 3;
  for (int i = 0; i < this->monster_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->monster_hp_list(i), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required int64 status_begin_time = 5;
  if (has_status_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->status_begin_time(), output);
  }

  // required int64 occupy_begin_time = 6;
  if (has_occupy_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->occupy_begin_time(), output);
  }

  // optional string user_name = 7;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->user_name(), output);
  }

  // required string groupid = 8;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->groupid(), output);
  }

  // repeated string guarde_list = 9;
  for (int i = 0; i < this->guarde_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->guarde_list(i), output);
  }

  // optional .OtherGroupInfo temp_info = 10;
  if (has_temp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->temp_info(), output);
  }

}

int PlanetCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool hasMonster = 2;
    if (has_hasmonster()) {
      total_size += 1 + 1;
    }

    // required int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int64 status_begin_time = 5;
    if (has_status_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status_begin_time());
    }

    // required int64 occupy_begin_time = 6;
    if (has_occupy_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupy_begin_time());
    }

    // optional string user_name = 7;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string groupid = 8;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .OtherGroupInfo temp_info = 10;
    if (has_temp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->temp_info());
    }

  }
  // repeated int32 monster_hp_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_hp_list(i));
    }
    total_size += 1 * this->monster_hp_list_size() + data_size;
  }

  // repeated string guarde_list = 9;
  total_size += 1 * this->guarde_list_size();
  for (int i = 0; i < this->guarde_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guarde_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetCity*>(&from));
}

void PlanetCity::MergeFrom(const PlanetCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_hp_list_.MergeFrom(from.monster_hp_list_);
  guarde_list_.MergeFrom(from.guarde_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hasmonster()) {
      set_hasmonster(from.hasmonster());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_status_begin_time()) {
      set_status_begin_time(from.status_begin_time());
    }
    if (from.has_occupy_begin_time()) {
      set_occupy_begin_time(from.occupy_begin_time());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_temp_info()) {
      mutable_temp_info()->::OtherGroupInfo::MergeFrom(from.temp_info());
    }
  }
}

void PlanetCity::CopyFrom(const PlanetCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000bb) != 0x000000bb) return false;

  if (has_temp_info()) {
    if (!this->temp_info().IsInitialized()) return false;
  }
  return true;
}

void PlanetCity::Swap(PlanetCity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hasmonster_, other->hasmonster_);
    monster_hp_list_.Swap(&other->monster_hp_list_);
    std::swap(status_, other->status_);
    std::swap(status_begin_time_, other->status_begin_time_);
    std::swap(occupy_begin_time_, other->occupy_begin_time_);
    std::swap(user_name_, other->user_name_);
    std::swap(groupid_, other->groupid_);
    guarde_list_.Swap(&other->guarde_list_);
    std::swap(temp_info_, other->temp_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetCity::GetTypeName() const {
  return "PlanetCity";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetTowerAttackHp::kArmyKeyFieldNumber;
const int PlanetTowerAttackHp::kShipHpListFieldNumber;
#endif  // !_MSC_VER

PlanetTowerAttackHp::PlanetTowerAttackHp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetTowerAttackHp::InitAsDefaultInstance() {
}

PlanetTowerAttackHp::PlanetTowerAttackHp(const PlanetTowerAttackHp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetTowerAttackHp::SharedCtor() {
  _cached_size_ = 0;
  army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetTowerAttackHp::~PlanetTowerAttackHp() {
  SharedDtor();
}

void PlanetTowerAttackHp::SharedDtor() {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetTowerAttackHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetTowerAttackHp& PlanetTowerAttackHp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetTowerAttackHp* PlanetTowerAttackHp::default_instance_ = NULL;

PlanetTowerAttackHp* PlanetTowerAttackHp::New() const {
  return new PlanetTowerAttackHp;
}

void PlanetTowerAttackHp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_army_key()) {
      if (army_key_ != &::google::protobuf::internal::kEmptyString) {
        army_key_->clear();
      }
    }
  }
  ship_hp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetTowerAttackHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string army_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_army_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ship_hp_list;
        break;
      }

      // repeated int32 ship_hp_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_ship_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ship_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ship_hp_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetTowerAttackHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string army_key = 1;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->army_key(), output);
  }

  // repeated int32 ship_hp_list = 4;
  for (int i = 0; i < this->ship_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->ship_hp_list(i), output);
  }

}

int PlanetTowerAttackHp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string army_key = 1;
    if (has_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->army_key());
    }

  }
  // repeated int32 ship_hp_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ship_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ship_hp_list(i));
    }
    total_size += 1 * this->ship_hp_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetTowerAttackHp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetTowerAttackHp*>(&from));
}

void PlanetTowerAttackHp::MergeFrom(const PlanetTowerAttackHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ship_hp_list_.MergeFrom(from.ship_hp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_key()) {
      set_army_key(from.army_key());
    }
  }
}

void PlanetTowerAttackHp::CopyFrom(const PlanetTowerAttackHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetTowerAttackHp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetTowerAttackHp::Swap(PlanetTowerAttackHp* other) {
  if (other != this) {
    std::swap(army_key_, other->army_key_);
    ship_hp_list_.Swap(&other->ship_hp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetTowerAttackHp::GetTypeName() const {
  return "PlanetTowerAttackHp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetWangZuoTower::kIdFieldNumber;
const int PlanetWangZuoTower::kStatusFieldNumber;
const int PlanetWangZuoTower::kIsAttackFieldNumber;
const int PlanetWangZuoTower::kOccupyBeginTimeFieldNumber;
const int PlanetWangZuoTower::kUserNameFieldNumber;
const int PlanetWangZuoTower::kGroupidFieldNumber;
const int PlanetWangZuoTower::kGuardeListFieldNumber;
const int PlanetWangZuoTower::kTempInfoFieldNumber;
const int PlanetWangZuoTower::kUserInfoFieldNumber;
const int PlanetWangZuoTower::kAttackHpFieldNumber;
#endif  // !_MSC_VER

PlanetWangZuoTower::PlanetWangZuoTower()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetWangZuoTower::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  temp_info_ = const_cast< ::OtherGroupInfo*>(
      ::OtherGroupInfo::internal_default_instance());
#else
  temp_info_ = const_cast< ::OtherGroupInfo*>(&::OtherGroupInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::OtherUserInfo*>(
      ::OtherUserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
#endif
}

PlanetWangZuoTower::PlanetWangZuoTower(const PlanetWangZuoTower& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetWangZuoTower::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  is_attack_ = false;
  occupy_begin_time_ = GOOGLE_LONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  temp_info_ = NULL;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetWangZuoTower::~PlanetWangZuoTower() {
  SharedDtor();
}

void PlanetWangZuoTower::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete temp_info_;
    delete user_info_;
  }
}

void PlanetWangZuoTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetWangZuoTower& PlanetWangZuoTower::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetWangZuoTower* PlanetWangZuoTower::default_instance_ = NULL;

PlanetWangZuoTower* PlanetWangZuoTower::New() const {
  return new PlanetWangZuoTower;
}

void PlanetWangZuoTower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    is_attack_ = false;
    occupy_begin_time_ = GOOGLE_LONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    if (has_temp_info()) {
      if (temp_info_ != NULL) temp_info_->::OtherGroupInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::OtherUserInfo::Clear();
    }
  }
  guarde_list_.Clear();
  attack_hp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetWangZuoTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_attack;
        break;
      }

      // optional bool is_attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_)));
          set_has_is_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_occupy_begin_time;
        break;
      }

      // required int64 occupy_begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupy_begin_time_)));
          set_has_occupy_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_name;
        break;
      }

      // optional string user_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_groupid;
        break;
      }

      // optional string groupid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_guarde_list;
        break;
      }

      // repeated string guarde_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guarde_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guarde_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_guarde_list;
        if (input->ExpectTag(66)) goto parse_temp_info;
        break;
      }

      // optional .OtherGroupInfo temp_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_user_info;
        break;
      }

      // optional .OtherUserInfo user_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_attack_hp;
        break;
      }

      // repeated .PlanetTowerAttackHp attack_hp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_hp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_hp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_attack_hp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetWangZuoTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional bool is_attack = 3;
  if (has_is_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_attack(), output);
  }

  // required int64 occupy_begin_time = 4;
  if (has_occupy_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->occupy_begin_time(), output);
  }

  // optional string user_name = 5;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_name(), output);
  }

  // optional string groupid = 6;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->groupid(), output);
  }

  // repeated string guarde_list = 7;
  for (int i = 0; i < this->guarde_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->guarde_list(i), output);
  }

  // optional .OtherGroupInfo temp_info = 8;
  if (has_temp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->temp_info(), output);
  }

  // optional .OtherUserInfo user_info = 9;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->user_info(), output);
  }

  // repeated .PlanetTowerAttackHp attack_hp = 10;
  for (int i = 0; i < this->attack_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->attack_hp(i), output);
  }

}

int PlanetWangZuoTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional bool is_attack = 3;
    if (has_is_attack()) {
      total_size += 1 + 1;
    }

    // required int64 occupy_begin_time = 4;
    if (has_occupy_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupy_begin_time());
    }

    // optional string user_name = 5;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string groupid = 6;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional .OtherGroupInfo temp_info = 8;
    if (has_temp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->temp_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OtherUserInfo user_info = 9;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  // repeated string guarde_list = 7;
  total_size += 1 * this->guarde_list_size();
  for (int i = 0; i < this->guarde_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guarde_list(i));
  }

  // repeated .PlanetTowerAttackHp attack_hp = 10;
  total_size += 1 * this->attack_hp_size();
  for (int i = 0; i < this->attack_hp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_hp(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetWangZuoTower::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetWangZuoTower*>(&from));
}

void PlanetWangZuoTower::MergeFrom(const PlanetWangZuoTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  guarde_list_.MergeFrom(from.guarde_list_);
  attack_hp_.MergeFrom(from.attack_hp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_is_attack()) {
      set_is_attack(from.is_attack());
    }
    if (from.has_occupy_begin_time()) {
      set_occupy_begin_time(from.occupy_begin_time());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_temp_info()) {
      mutable_temp_info()->::OtherGroupInfo::MergeFrom(from.temp_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::OtherUserInfo::MergeFrom(from.user_info());
    }
  }
}

void PlanetWangZuoTower::CopyFrom(const PlanetWangZuoTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetWangZuoTower::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_temp_info()) {
    if (!this->temp_info().IsInitialized()) return false;
  }
  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  for (int i = 0; i < attack_hp_size(); i++) {
    if (!this->attack_hp(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetWangZuoTower::Swap(PlanetWangZuoTower* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(is_attack_, other->is_attack_);
    std::swap(occupy_begin_time_, other->occupy_begin_time_);
    std::swap(user_name_, other->user_name_);
    std::swap(groupid_, other->groupid_);
    guarde_list_.Swap(&other->guarde_list_);
    std::swap(temp_info_, other->temp_info_);
    std::swap(user_info_, other->user_info_);
    attack_hp_.Swap(&other->attack_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetWangZuoTower::GetTypeName() const {
  return "PlanetWangZuoTower";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetWangZuo::kIdFieldNumber;
const int PlanetWangZuo::kStatusFieldNumber;
const int PlanetWangZuo::kStatusBeginTimeFieldNumber;
const int PlanetWangZuo::kOccupyBeginTimeFieldNumber;
const int PlanetWangZuo::kCreateTimeFieldNumber;
const int PlanetWangZuo::kUserNameFieldNumber;
const int PlanetWangZuo::kOldUserNameFieldNumber;
const int PlanetWangZuo::kGroupidFieldNumber;
const int PlanetWangZuo::kOldGroupidFieldNumber;
const int PlanetWangZuo::kGuardeListFieldNumber;
const int PlanetWangZuo::kTempInfoFieldNumber;
const int PlanetWangZuo::kUserInfoFieldNumber;
#endif  // !_MSC_VER

PlanetWangZuo::PlanetWangZuo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetWangZuo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  temp_info_ = const_cast< ::OtherGroupInfo*>(
      ::OtherGroupInfo::internal_default_instance());
#else
  temp_info_ = const_cast< ::OtherGroupInfo*>(&::OtherGroupInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::OtherUserInfo*>(
      ::OtherUserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
#endif
}

PlanetWangZuo::PlanetWangZuo(const PlanetWangZuo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetWangZuo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  status_begin_time_ = GOOGLE_LONGLONG(0);
  occupy_begin_time_ = GOOGLE_LONGLONG(0);
  create_time_ = GOOGLE_LONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  temp_info_ = NULL;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetWangZuo::~PlanetWangZuo() {
  SharedDtor();
}

void PlanetWangZuo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (old_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete old_user_name_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (old_groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete old_groupid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete temp_info_;
    delete user_info_;
  }
}

void PlanetWangZuo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetWangZuo& PlanetWangZuo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetWangZuo* PlanetWangZuo::default_instance_ = NULL;

PlanetWangZuo* PlanetWangZuo::New() const {
  return new PlanetWangZuo;
}

void PlanetWangZuo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    status_ = 0;
    status_begin_time_ = GOOGLE_LONGLONG(0);
    occupy_begin_time_ = GOOGLE_LONGLONG(0);
    create_time_ = GOOGLE_LONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_old_user_name()) {
      if (old_user_name_ != &::google::protobuf::internal::kEmptyString) {
        old_user_name_->clear();
      }
    }
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_old_groupid()) {
      if (old_groupid_ != &::google::protobuf::internal::kEmptyString) {
        old_groupid_->clear();
      }
    }
    if (has_temp_info()) {
      if (temp_info_ != NULL) temp_info_->::OtherGroupInfo::Clear();
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::OtherUserInfo::Clear();
    }
  }
  guarde_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetWangZuo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status_begin_time;
        break;
      }

      // required int64 status_begin_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_begin_time_)));
          set_has_status_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_occupy_begin_time;
        break;
      }

      // required int64 occupy_begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupy_begin_time_)));
          set_has_occupy_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // required int64 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_user_name;
        break;
      }

      // optional string user_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_old_user_name;
        break;
      }

      // optional string old_user_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_groupid;
        break;
      }

      // optional string groupid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_old_groupid;
        break;
      }

      // optional string old_groupid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_guarde_list;
        break;
      }

      // repeated string guarde_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guarde_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guarde_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_guarde_list;
        if (input->ExpectTag(90)) goto parse_temp_info;
        break;
      }

      // optional .OtherGroupInfo temp_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_user_info;
        break;
      }

      // optional .OtherUserInfo user_info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetWangZuo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required int64 status_begin_time = 3;
  if (has_status_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->status_begin_time(), output);
  }

  // required int64 occupy_begin_time = 4;
  if (has_occupy_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->occupy_begin_time(), output);
  }

  // required int64 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->create_time(), output);
  }

  // optional string user_name = 6;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->user_name(), output);
  }

  // optional string old_user_name = 7;
  if (has_old_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->old_user_name(), output);
  }

  // optional string groupid = 8;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->groupid(), output);
  }

  // optional string old_groupid = 9;
  if (has_old_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->old_groupid(), output);
  }

  // repeated string guarde_list = 10;
  for (int i = 0; i < this->guarde_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->guarde_list(i), output);
  }

  // optional .OtherGroupInfo temp_info = 11;
  if (has_temp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->temp_info(), output);
  }

  // optional .OtherUserInfo user_info = 12;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->user_info(), output);
  }

}

int PlanetWangZuo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int64 status_begin_time = 3;
    if (has_status_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status_begin_time());
    }

    // required int64 occupy_begin_time = 4;
    if (has_occupy_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupy_begin_time());
    }

    // required int64 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional string user_name = 6;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string old_user_name = 7;
    if (has_old_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_user_name());
    }

    // optional string groupid = 8;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string old_groupid = 9;
    if (has_old_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_groupid());
    }

    // optional .OtherGroupInfo temp_info = 11;
    if (has_temp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->temp_info());
    }

    // optional .OtherUserInfo user_info = 12;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  // repeated string guarde_list = 10;
  total_size += 1 * this->guarde_list_size();
  for (int i = 0; i < this->guarde_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guarde_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetWangZuo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetWangZuo*>(&from));
}

void PlanetWangZuo::MergeFrom(const PlanetWangZuo& from) {
  GOOGLE_CHECK_NE(&from, this);
  guarde_list_.MergeFrom(from.guarde_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_status_begin_time()) {
      set_status_begin_time(from.status_begin_time());
    }
    if (from.has_occupy_begin_time()) {
      set_occupy_begin_time(from.occupy_begin_time());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_old_user_name()) {
      set_old_user_name(from.old_user_name());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_old_groupid()) {
      set_old_groupid(from.old_groupid());
    }
    if (from.has_temp_info()) {
      mutable_temp_info()->::OtherGroupInfo::MergeFrom(from.temp_info());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::OtherUserInfo::MergeFrom(from.user_info());
    }
  }
}

void PlanetWangZuo::CopyFrom(const PlanetWangZuo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetWangZuo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_temp_info()) {
    if (!this->temp_info().IsInitialized()) return false;
  }
  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void PlanetWangZuo::Swap(PlanetWangZuo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(status_begin_time_, other->status_begin_time_);
    std::swap(occupy_begin_time_, other->occupy_begin_time_);
    std::swap(create_time_, other->create_time_);
    std::swap(user_name_, other->user_name_);
    std::swap(old_user_name_, other->old_user_name_);
    std::swap(groupid_, other->groupid_);
    std::swap(old_groupid_, other->old_groupid_);
    guarde_list_.Swap(&other->guarde_list_);
    std::swap(temp_info_, other->temp_info_);
    std::swap(user_info_, other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetWangZuo::GetTypeName() const {
  return "PlanetWangZuo";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetPoint::kXFieldNumber;
const int PlanetPoint::kYFieldNumber;
#endif  // !_MSC_VER

PlanetPoint::PlanetPoint()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetPoint::InitAsDefaultInstance() {
}

PlanetPoint::PlanetPoint(const PlanetPoint& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetPoint::~PlanetPoint() {
  SharedDtor();
}

void PlanetPoint::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetPoint& PlanetPoint::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetPoint* PlanetPoint::default_instance_ = NULL;

PlanetPoint* PlanetPoint::New() const {
  return new PlanetPoint;
}

void PlanetPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

}

int PlanetPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetPoint*>(&from));
}

void PlanetPoint::MergeFrom(const PlanetPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void PlanetPoint::CopyFrom(const PlanetPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlanetPoint::Swap(PlanetPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetPoint::GetTypeName() const {
  return "PlanetPoint";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetElement::kGuidFieldNumber;
const int PlanetElement::kGlobalKeyFieldNumber;
const int PlanetElement::kPosListFieldNumber;
const int PlanetElement::kTypeFieldNumber;
const int PlanetElement::kBaseDataFieldNumber;
const int PlanetElement::kResDataFieldNumber;
const int PlanetElement::kRuinsDataFieldNumber;
const int PlanetElement::kBossDataFieldNumber;
const int PlanetElement::kCityDataFieldNumber;
const int PlanetElement::kCityResDataFieldNumber;
const int PlanetElement::kMonsterDataFieldNumber;
const int PlanetElement::kWangzuoDataFieldNumber;
const int PlanetElement::kTowerDataFieldNumber;
#endif  // !_MSC_VER

PlanetElement::PlanetElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetElement::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  base_data_ = const_cast< ::PlanetBase*>(
      ::PlanetBase::internal_default_instance());
#else
  base_data_ = const_cast< ::PlanetBase*>(&::PlanetBase::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  res_data_ = const_cast< ::PlanetRes*>(
      ::PlanetRes::internal_default_instance());
#else
  res_data_ = const_cast< ::PlanetRes*>(&::PlanetRes::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ruins_data_ = const_cast< ::PlanetRuins*>(
      ::PlanetRuins::internal_default_instance());
#else
  ruins_data_ = const_cast< ::PlanetRuins*>(&::PlanetRuins::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  boss_data_ = const_cast< ::PlanetBoss*>(
      ::PlanetBoss::internal_default_instance());
#else
  boss_data_ = const_cast< ::PlanetBoss*>(&::PlanetBoss::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  city_data_ = const_cast< ::PlanetCity*>(
      ::PlanetCity::internal_default_instance());
#else
  city_data_ = const_cast< ::PlanetCity*>(&::PlanetCity::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  city_res_data_ = const_cast< ::PlanetCityRes*>(
      ::PlanetCityRes::internal_default_instance());
#else
  city_res_data_ = const_cast< ::PlanetCityRes*>(&::PlanetCityRes::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  monster_data_ = const_cast< ::PlanetMonster*>(
      ::PlanetMonster::internal_default_instance());
#else
  monster_data_ = const_cast< ::PlanetMonster*>(&::PlanetMonster::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  wangzuo_data_ = const_cast< ::PlanetWangZuo*>(
      ::PlanetWangZuo::internal_default_instance());
#else
  wangzuo_data_ = const_cast< ::PlanetWangZuo*>(&::PlanetWangZuo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tower_data_ = const_cast< ::PlanetWangZuoTower*>(
      ::PlanetWangZuoTower::internal_default_instance());
#else
  tower_data_ = const_cast< ::PlanetWangZuoTower*>(&::PlanetWangZuoTower::default_instance());
#endif
}

PlanetElement::PlanetElement(const PlanetElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetElement::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  base_data_ = NULL;
  res_data_ = NULL;
  ruins_data_ = NULL;
  boss_data_ = NULL;
  city_data_ = NULL;
  city_res_data_ = NULL;
  monster_data_ = NULL;
  wangzuo_data_ = NULL;
  tower_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetElement::~PlanetElement() {
  SharedDtor();
}

void PlanetElement::SharedDtor() {
  if (global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete global_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete base_data_;
    delete res_data_;
    delete ruins_data_;
    delete boss_data_;
    delete city_data_;
    delete city_res_data_;
    delete monster_data_;
    delete wangzuo_data_;
    delete tower_data_;
  }
}

void PlanetElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetElement& PlanetElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetElement* PlanetElement::default_instance_ = NULL;

PlanetElement* PlanetElement::New() const {
  return new PlanetElement;
}

void PlanetElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
    if (has_global_key()) {
      if (global_key_ != &::google::protobuf::internal::kEmptyString) {
        global_key_->clear();
      }
    }
    type_ = 0;
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::PlanetBase::Clear();
    }
    if (has_res_data()) {
      if (res_data_ != NULL) res_data_->::PlanetRes::Clear();
    }
    if (has_ruins_data()) {
      if (ruins_data_ != NULL) ruins_data_->::PlanetRuins::Clear();
    }
    if (has_boss_data()) {
      if (boss_data_ != NULL) boss_data_->::PlanetBoss::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_city_data()) {
      if (city_data_ != NULL) city_data_->::PlanetCity::Clear();
    }
    if (has_city_res_data()) {
      if (city_res_data_ != NULL) city_res_data_->::PlanetCityRes::Clear();
    }
    if (has_monster_data()) {
      if (monster_data_ != NULL) monster_data_->::PlanetMonster::Clear();
    }
    if (has_wangzuo_data()) {
      if (wangzuo_data_ != NULL) wangzuo_data_->::PlanetWangZuo::Clear();
    }
    if (has_tower_data()) {
      if (tower_data_ != NULL) tower_data_->::PlanetWangZuoTower::Clear();
    }
  }
  pos_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_global_key;
        break;
      }

      // required string global_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos_list;
        break;
      }

      // repeated .PlanetPoint pos_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos_list;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_base_data;
        break;
      }

      // optional .PlanetBase base_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_res_data;
        break;
      }

      // optional .PlanetRes res_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ruins_data;
        break;
      }

      // optional .PlanetRuins ruins_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruins_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ruins_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boss_data;
        break;
      }

      // optional .PlanetBoss boss_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_city_data;
        break;
      }

      // optional .PlanetCity city_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_city_res_data;
        break;
      }

      // optional .PlanetCityRes city_res_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_res_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city_res_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_monster_data;
        break;
      }

      // optional .PlanetMonster monster_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_wangzuo_data;
        break;
      }

      // optional .PlanetWangZuo wangzuo_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wangzuo_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wangzuo_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tower_data;
        break;
      }

      // optional .PlanetWangZuoTower tower_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required string global_key = 2;
  if (has_global_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->global_key(), output);
  }

  // repeated .PlanetPoint pos_list = 3;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->pos_list(i), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional .PlanetBase base_data = 5;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->base_data(), output);
  }

  // optional .PlanetRes res_data = 6;
  if (has_res_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->res_data(), output);
  }

  // optional .PlanetRuins ruins_data = 7;
  if (has_ruins_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->ruins_data(), output);
  }

  // optional .PlanetBoss boss_data = 8;
  if (has_boss_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->boss_data(), output);
  }

  // optional .PlanetCity city_data = 9;
  if (has_city_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->city_data(), output);
  }

  // optional .PlanetCityRes city_res_data = 10;
  if (has_city_res_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->city_res_data(), output);
  }

  // optional .PlanetMonster monster_data = 11;
  if (has_monster_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->monster_data(), output);
  }

  // optional .PlanetWangZuo wangzuo_data = 12;
  if (has_wangzuo_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->wangzuo_data(), output);
  }

  // optional .PlanetWangZuoTower tower_data = 13;
  if (has_tower_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->tower_data(), output);
  }

}

int PlanetElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required string global_key = 2;
    if (has_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_key());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .PlanetBase base_data = 5;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .PlanetRes res_data = 6;
    if (has_res_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res_data());
    }

    // optional .PlanetRuins ruins_data = 7;
    if (has_ruins_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ruins_data());
    }

    // optional .PlanetBoss boss_data = 8;
    if (has_boss_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PlanetCity city_data = 9;
    if (has_city_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city_data());
    }

    // optional .PlanetCityRes city_res_data = 10;
    if (has_city_res_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city_res_data());
    }

    // optional .PlanetMonster monster_data = 11;
    if (has_monster_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster_data());
    }

    // optional .PlanetWangZuo wangzuo_data = 12;
    if (has_wangzuo_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wangzuo_data());
    }

    // optional .PlanetWangZuoTower tower_data = 13;
    if (has_tower_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower_data());
    }

  }
  // repeated .PlanetPoint pos_list = 3;
  total_size += 1 * this->pos_list_size();
  for (int i = 0; i < this->pos_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetElement*>(&from));
}

void PlanetElement::MergeFrom(const PlanetElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_list_.MergeFrom(from.pos_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_global_key()) {
      set_global_key(from.global_key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_base_data()) {
      mutable_base_data()->::PlanetBase::MergeFrom(from.base_data());
    }
    if (from.has_res_data()) {
      mutable_res_data()->::PlanetRes::MergeFrom(from.res_data());
    }
    if (from.has_ruins_data()) {
      mutable_ruins_data()->::PlanetRuins::MergeFrom(from.ruins_data());
    }
    if (from.has_boss_data()) {
      mutable_boss_data()->::PlanetBoss::MergeFrom(from.boss_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_city_data()) {
      mutable_city_data()->::PlanetCity::MergeFrom(from.city_data());
    }
    if (from.has_city_res_data()) {
      mutable_city_res_data()->::PlanetCityRes::MergeFrom(from.city_res_data());
    }
    if (from.has_monster_data()) {
      mutable_monster_data()->::PlanetMonster::MergeFrom(from.monster_data());
    }
    if (from.has_wangzuo_data()) {
      mutable_wangzuo_data()->::PlanetWangZuo::MergeFrom(from.wangzuo_data());
    }
    if (from.has_tower_data()) {
      mutable_tower_data()->::PlanetWangZuoTower::MergeFrom(from.tower_data());
    }
  }
}

void PlanetElement::CopyFrom(const PlanetElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < pos_list_size(); i++) {
    if (!this->pos_list(i).IsInitialized()) return false;
  }
  if (has_base_data()) {
    if (!this->base_data().IsInitialized()) return false;
  }
  if (has_res_data()) {
    if (!this->res_data().IsInitialized()) return false;
  }
  if (has_ruins_data()) {
    if (!this->ruins_data().IsInitialized()) return false;
  }
  if (has_boss_data()) {
    if (!this->boss_data().IsInitialized()) return false;
  }
  if (has_city_data()) {
    if (!this->city_data().IsInitialized()) return false;
  }
  if (has_city_res_data()) {
    if (!this->city_res_data().IsInitialized()) return false;
  }
  if (has_monster_data()) {
    if (!this->monster_data().IsInitialized()) return false;
  }
  if (has_wangzuo_data()) {
    if (!this->wangzuo_data().IsInitialized()) return false;
  }
  if (has_tower_data()) {
    if (!this->tower_data().IsInitialized()) return false;
  }
  return true;
}

void PlanetElement::Swap(PlanetElement* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(global_key_, other->global_key_);
    pos_list_.Swap(&other->pos_list_);
    std::swap(type_, other->type_);
    std::swap(base_data_, other->base_data_);
    std::swap(res_data_, other->res_data_);
    std::swap(ruins_data_, other->ruins_data_);
    std::swap(boss_data_, other->boss_data_);
    std::swap(city_data_, other->city_data_);
    std::swap(city_res_data_, other->city_res_data_);
    std::swap(monster_data_, other->monster_data_);
    std::swap(wangzuo_data_, other->wangzuo_data_);
    std::swap(tower_data_, other->tower_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetElement::GetTypeName() const {
  return "PlanetElement";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetNode::kIdFieldNumber;
const int PlanetNode::kElementListFieldNumber;
const int PlanetNode::kArmyLineKeyListFieldNumber;
#endif  // !_MSC_VER

PlanetNode::PlanetNode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetNode::InitAsDefaultInstance() {
}

PlanetNode::PlanetNode(const PlanetNode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetNode::~PlanetNode() {
  SharedDtor();
}

void PlanetNode::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetNode& PlanetNode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetNode* PlanetNode::default_instance_ = NULL;

PlanetNode* PlanetNode::New() const {
  return new PlanetNode;
}

void PlanetNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  element_list_.Clear();
  army_line_key_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element_list;
        break;
      }

      // repeated .PlanetElement element_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element_list;
        if (input->ExpectTag(26)) goto parse_army_line_key_list;
        break;
      }

      // repeated string army_line_key_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_line_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_army_line_key_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_army_line_key_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .PlanetElement element_list = 2;
  for (int i = 0; i < this->element_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->element_list(i), output);
  }

  // repeated string army_line_key_list = 3;
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->army_line_key_list(i), output);
  }

}

int PlanetNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .PlanetElement element_list = 2;
  total_size += 1 * this->element_list_size();
  for (int i = 0; i < this->element_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element_list(i));
  }

  // repeated string army_line_key_list = 3;
  total_size += 1 * this->army_line_key_list_size();
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->army_line_key_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetNode*>(&from));
}

void PlanetNode::MergeFrom(const PlanetNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_list_.MergeFrom(from.element_list_);
  army_line_key_list_.MergeFrom(from.army_line_key_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void PlanetNode::CopyFrom(const PlanetNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < element_list_size(); i++) {
    if (!this->element_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetNode::Swap(PlanetNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    element_list_.Swap(&other->element_list_);
    army_line_key_list_.Swap(&other->army_line_key_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetNode::GetTypeName() const {
  return "PlanetNode";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetArmyLine::kUserKeyFieldNumber;
const int PlanetArmyLine::kNodeIdListFieldNumber;
const int PlanetArmyLine::kMoveListFieldNumber;
const int PlanetArmyLine::kBeginTimeFieldNumber;
const int PlanetArmyLine::kNeedTimeFieldNumber;
const int PlanetArmyLine::kSubTimeFieldNumber;
const int PlanetArmyLine::kStatusFieldNumber;
const int PlanetArmyLine::kStatusMachineFieldNumber;
#endif  // !_MSC_VER

PlanetArmyLine::PlanetArmyLine()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetArmyLine::InitAsDefaultInstance() {
}

PlanetArmyLine::PlanetArmyLine(const PlanetArmyLine& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetArmyLine::SharedCtor() {
  _cached_size_ = 0;
  user_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_time_ = GOOGLE_LONGLONG(0);
  need_time_ = GOOGLE_LONGLONG(0);
  sub_time_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  status_machine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetArmyLine::~PlanetArmyLine() {
  SharedDtor();
}

void PlanetArmyLine::SharedDtor() {
  if (user_key_ != &::google::protobuf::internal::kEmptyString) {
    delete user_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetArmyLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetArmyLine& PlanetArmyLine::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetArmyLine* PlanetArmyLine::default_instance_ = NULL;

PlanetArmyLine* PlanetArmyLine::New() const {
  return new PlanetArmyLine;
}

void PlanetArmyLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_key()) {
      if (user_key_ != &::google::protobuf::internal::kEmptyString) {
        user_key_->clear();
      }
    }
    begin_time_ = GOOGLE_LONGLONG(0);
    need_time_ = GOOGLE_LONGLONG(0);
    sub_time_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    status_machine_ = 0;
  }
  node_id_list_.Clear();
  move_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetArmyLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id_list;
        break;
      }

      // repeated int32 node_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_node_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_node_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id_list;
        if (input->ExpectTag(26)) goto parse_move_list;
        break;
      }

      // repeated .PlanetPoint move_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_move_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_move_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_move_list;
        if (input->ExpectTag(32)) goto parse_begin_time;
        break;
      }

      // required int64 begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_need_time;
        break;
      }

      // required int64 need_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &need_time_)));
          set_has_need_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sub_time;
        break;
      }

      // required int64 sub_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sub_time_)));
          set_has_sub_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status_machine;
        break;
      }

      // optional int32 status_machine = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_machine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_machine_)));
          set_has_status_machine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetArmyLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_key = 1;
  if (has_user_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_key(), output);
  }

  // repeated int32 node_id_list = 2;
  for (int i = 0; i < this->node_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->node_id_list(i), output);
  }

  // repeated .PlanetPoint move_list = 3;
  for (int i = 0; i < this->move_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->move_list(i), output);
  }

  // required int64 begin_time = 4;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begin_time(), output);
  }

  // required int64 need_time = 5;
  if (has_need_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->need_time(), output);
  }

  // required int64 sub_time = 6;
  if (has_sub_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sub_time(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  // optional int32 status_machine = 8;
  if (has_status_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status_machine(), output);
  }

}

int PlanetArmyLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_key = 1;
    if (has_user_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_key());
    }

    // required int64 begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // required int64 need_time = 5;
    if (has_need_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->need_time());
    }

    // required int64 sub_time = 6;
    if (has_sub_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sub_time());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 status_machine = 8;
    if (has_status_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_machine());
    }

  }
  // repeated int32 node_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->node_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->node_id_list(i));
    }
    total_size += 1 * this->node_id_list_size() + data_size;
  }

  // repeated .PlanetPoint move_list = 3;
  total_size += 1 * this->move_list_size();
  for (int i = 0; i < this->move_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->move_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetArmyLine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetArmyLine*>(&from));
}

void PlanetArmyLine::MergeFrom(const PlanetArmyLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_list_.MergeFrom(from.node_id_list_);
  move_list_.MergeFrom(from.move_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_key()) {
      set_user_key(from.user_key());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_need_time()) {
      set_need_time(from.need_time());
    }
    if (from.has_sub_time()) {
      set_sub_time(from.sub_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_status_machine()) {
      set_status_machine(from.status_machine());
    }
  }
}

void PlanetArmyLine::CopyFrom(const PlanetArmyLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetArmyLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  for (int i = 0; i < move_list_size(); i++) {
    if (!this->move_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetArmyLine::Swap(PlanetArmyLine* other) {
  if (other != this) {
    std::swap(user_key_, other->user_key_);
    node_id_list_.Swap(&other->node_id_list_);
    move_list_.Swap(&other->move_list_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(need_time_, other->need_time_);
    std::swap(sub_time_, other->sub_time_);
    std::swap(status_, other->status_);
    std::swap(status_machine_, other->status_machine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetArmyLine::GetTypeName() const {
  return "PlanetArmyLine";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetArmy::kGuidFieldNumber;
const int PlanetArmy::kArmyKeyFieldNumber;
const int PlanetArmy::kLineupFieldNumber;
const int PlanetArmy::kLineupHpFieldNumber;
const int PlanetArmy::kShipListFieldNumber;
const int PlanetArmy::kStatusFieldNumber;
const int PlanetArmy::kStatusMachineFieldNumber;
const int PlanetArmy::kBeginTimeFieldNumber;
const int PlanetArmy::kItemListFieldNumber;
const int PlanetArmy::kElementGlobalKeyFieldNumber;
const int PlanetArmy::kLineFieldNumber;
const int PlanetArmy::kArmyKeyListFieldNumber;
const int PlanetArmy::kAccompanyArmyKeyFieldNumber;
const int PlanetArmy::kTechDurableParamFieldNumber;
const int PlanetArmy::kNextStatusMachineFieldNumber;
const int PlanetArmy::kReqArmyKeyListFieldNumber;
const int PlanetArmy::kMassTimeFieldNumber;
const int PlanetArmy::kSpeedFieldNumber;
const int PlanetArmy::kAccompanyBeginTimeFieldNumber;
#endif  // !_MSC_VER

PlanetArmy::PlanetArmy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetArmy::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  line_ = const_cast< ::PlanetArmyLine*>(
      ::PlanetArmyLine::internal_default_instance());
#else
  line_ = const_cast< ::PlanetArmyLine*>(&::PlanetArmyLine::default_instance());
#endif
}

PlanetArmy::PlanetArmy(const PlanetArmy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetArmy::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  status_machine_ = 0;
  begin_time_ = GOOGLE_LONGLONG(0);
  element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_ = NULL;
  accompany_army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tech_durable_param_ = 0;
  next_status_machine_ = 0;
  mass_time_ = GOOGLE_LONGLONG(0);
  speed_ = 0;
  accompany_begin_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetArmy::~PlanetArmy() {
  SharedDtor();
}

void PlanetArmy::SharedDtor() {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete element_global_key_;
  }
  if (accompany_army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete accompany_army_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete line_;
  }
}

void PlanetArmy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetArmy& PlanetArmy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetArmy* PlanetArmy::default_instance_ = NULL;

PlanetArmy* PlanetArmy::New() const {
  return new PlanetArmy;
}

void PlanetArmy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
    if (has_army_key()) {
      if (army_key_ != &::google::protobuf::internal::kEmptyString) {
        army_key_->clear();
      }
    }
    status_ = 0;
    status_machine_ = 0;
    begin_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_element_global_key()) {
      if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
        element_global_key_->clear();
      }
    }
    if (has_line()) {
      if (line_ != NULL) line_->::PlanetArmyLine::Clear();
    }
    if (has_accompany_army_key()) {
      if (accompany_army_key_ != &::google::protobuf::internal::kEmptyString) {
        accompany_army_key_->clear();
      }
    }
    tech_durable_param_ = 0;
    next_status_machine_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mass_time_ = GOOGLE_LONGLONG(0);
    speed_ = 0;
    accompany_begin_time_ = GOOGLE_LONGLONG(0);
  }
  lineup_.Clear();
  lineup_hp_.Clear();
  ship_list_.Clear();
  item_list_.Clear();
  army_key_list_.Clear();
  req_army_key_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_army_key;
        break;
      }

      // required string army_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_army_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        if (input->ExpectTag(32)) goto parse_lineup_hp;
        break;
      }

      // repeated int32 lineup_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lineup_hp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup_hp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lineup_hp;
        if (input->ExpectTag(42)) goto parse_ship_list;
        break;
      }

      // repeated .AirShip ship_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ship_list;
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required int32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status_machine;
        break;
      }

      // required int32 status_machine = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_machine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_machine_)));
          set_has_status_machine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_begin_time;
        break;
      }

      // required int64 begin_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_item_list;
        break;
      }

      // repeated .Item item_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_item_list;
        if (input->ExpectTag(82)) goto parse_element_global_key;
        break;
      }

      // required string element_global_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_global_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_line;
        break;
      }

      // optional .PlanetArmyLine line = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_army_key_list;
        break;
      }

      // repeated string army_key_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_army_key_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_army_key_list;
        if (input->ExpectTag(106)) goto parse_accompany_army_key;
        break;
      }

      // optional string accompany_army_key = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accompany_army_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accompany_army_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tech_durable_param;
        break;
      }

      // required int32 tech_durable_param = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tech_durable_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_durable_param_)));
          set_has_tech_durable_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_next_status_machine;
        break;
      }

      // optional int32 next_status_machine = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_status_machine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_status_machine_)));
          set_has_next_status_machine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_req_army_key_list;
        break;
      }

      // repeated string req_army_key_list = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req_army_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_req_army_key_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_req_army_key_list;
        if (input->ExpectTag(136)) goto parse_mass_time;
        break;
      }

      // optional int64 mass_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mass_time_)));
          set_has_mass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_speed;
        break;
      }

      // required int32 speed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_accompany_begin_time;
        break;
      }

      // optional int64 accompany_begin_time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accompany_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accompany_begin_time_)));
          set_has_accompany_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required string army_key = 2;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->army_key(), output);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lineup(i), output);
  }

  // repeated int32 lineup_hp = 4;
  for (int i = 0; i < this->lineup_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lineup_hp(i), output);
  }

  // repeated .AirShip ship_list = 5;
  for (int i = 0; i < this->ship_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->ship_list(i), output);
  }

  // required int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // required int32 status_machine = 7;
  if (has_status_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status_machine(), output);
  }

  // required int64 begin_time = 8;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->begin_time(), output);
  }

  // repeated .Item item_list = 9;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->item_list(i), output);
  }

  // required string element_global_key = 10;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->element_global_key(), output);
  }

  // optional .PlanetArmyLine line = 11;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->line(), output);
  }

  // repeated string army_key_list = 12;
  for (int i = 0; i < this->army_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->army_key_list(i), output);
  }

  // optional string accompany_army_key = 13;
  if (has_accompany_army_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->accompany_army_key(), output);
  }

  // required int32 tech_durable_param = 14;
  if (has_tech_durable_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tech_durable_param(), output);
  }

  // optional int32 next_status_machine = 15;
  if (has_next_status_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->next_status_machine(), output);
  }

  // repeated string req_army_key_list = 16;
  for (int i = 0; i < this->req_army_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->req_army_key_list(i), output);
  }

  // optional int64 mass_time = 17;
  if (has_mass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->mass_time(), output);
  }

  // required int32 speed = 18;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->speed(), output);
  }

  // optional int64 accompany_begin_time = 19;
  if (has_accompany_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->accompany_begin_time(), output);
  }

}

int PlanetArmy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required string army_key = 2;
    if (has_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->army_key());
    }

    // required int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 status_machine = 7;
    if (has_status_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_machine());
    }

    // required int64 begin_time = 8;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required string element_global_key = 10;
    if (has_element_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_global_key());
    }

    // optional .PlanetArmyLine line = 11;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

    // optional string accompany_army_key = 13;
    if (has_accompany_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accompany_army_key());
    }

    // required int32 tech_durable_param = 14;
    if (has_tech_durable_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_durable_param());
    }

    // optional int32 next_status_machine = 15;
    if (has_next_status_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_status_machine());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 mass_time = 17;
    if (has_mass_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mass_time());
    }

    // required int32 speed = 18;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int64 accompany_begin_time = 19;
    if (has_accompany_begin_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accompany_begin_time());
    }

  }
  // repeated int32 lineup = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  // repeated int32 lineup_hp = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup_hp(i));
    }
    total_size += 1 * this->lineup_hp_size() + data_size;
  }

  // repeated .AirShip ship_list = 5;
  total_size += 1 * this->ship_list_size();
  for (int i = 0; i < this->ship_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ship_list(i));
  }

  // repeated .Item item_list = 9;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated string army_key_list = 12;
  total_size += 1 * this->army_key_list_size();
  for (int i = 0; i < this->army_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->army_key_list(i));
  }

  // repeated string req_army_key_list = 16;
  total_size += 2 * this->req_army_key_list_size();
  for (int i = 0; i < this->req_army_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->req_army_key_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetArmy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetArmy*>(&from));
}

void PlanetArmy::MergeFrom(const PlanetArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  lineup_hp_.MergeFrom(from.lineup_hp_);
  ship_list_.MergeFrom(from.ship_list_);
  item_list_.MergeFrom(from.item_list_);
  army_key_list_.MergeFrom(from.army_key_list_);
  req_army_key_list_.MergeFrom(from.req_army_key_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_army_key()) {
      set_army_key(from.army_key());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_status_machine()) {
      set_status_machine(from.status_machine());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_element_global_key()) {
      set_element_global_key(from.element_global_key());
    }
    if (from.has_line()) {
      mutable_line()->::PlanetArmyLine::MergeFrom(from.line());
    }
    if (from.has_accompany_army_key()) {
      set_accompany_army_key(from.accompany_army_key());
    }
    if (from.has_tech_durable_param()) {
      set_tech_durable_param(from.tech_durable_param());
    }
    if (from.has_next_status_machine()) {
      set_next_status_machine(from.next_status_machine());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mass_time()) {
      set_mass_time(from.mass_time());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_accompany_begin_time()) {
      set_accompany_begin_time(from.accompany_begin_time());
    }
  }
}

void PlanetArmy::CopyFrom(const PlanetArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetArmy::IsInitialized() const {
  if ((_has_bits_[0] & 0x000222e3) != 0x000222e3) return false;

  for (int i = 0; i < ship_list_size(); i++) {
    if (!this->ship_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line().IsInitialized()) return false;
  }
  return true;
}

void PlanetArmy::Swap(PlanetArmy* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(army_key_, other->army_key_);
    lineup_.Swap(&other->lineup_);
    lineup_hp_.Swap(&other->lineup_hp_);
    ship_list_.Swap(&other->ship_list_);
    std::swap(status_, other->status_);
    std::swap(status_machine_, other->status_machine_);
    std::swap(begin_time_, other->begin_time_);
    item_list_.Swap(&other->item_list_);
    std::swap(element_global_key_, other->element_global_key_);
    std::swap(line_, other->line_);
    army_key_list_.Swap(&other->army_key_list_);
    std::swap(accompany_army_key_, other->accompany_army_key_);
    std::swap(tech_durable_param_, other->tech_durable_param_);
    std::swap(next_status_machine_, other->next_status_machine_);
    req_army_key_list_.Swap(&other->req_army_key_list_);
    std::swap(mass_time_, other->mass_time_);
    std::swap(speed_, other->speed_);
    std::swap(accompany_begin_time_, other->accompany_begin_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetArmy::GetTypeName() const {
  return "PlanetArmy";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMark::kNameFieldNumber;
const int PlanetMark::kPosFieldNumber;
#endif  // !_MSC_VER

PlanetMark::PlanetMark()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetMark::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos_ = const_cast< ::PlanetPoint*>(
      ::PlanetPoint::internal_default_instance());
#else
  pos_ = const_cast< ::PlanetPoint*>(&::PlanetPoint::default_instance());
#endif
}

PlanetMark::PlanetMark(const PlanetMark& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMark::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMark::~PlanetMark() {
  SharedDtor();
}

void PlanetMark::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pos_;
  }
}

void PlanetMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetMark& PlanetMark::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetMark* PlanetMark::default_instance_ = NULL;

PlanetMark* PlanetMark::New() const {
  return new PlanetMark;
}

void PlanetMark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PlanetPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .PlanetPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .PlanetPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->pos(), output);
  }

}

int PlanetMark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .PlanetPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMark::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetMark*>(&from));
}

void PlanetMark::MergeFrom(const PlanetMark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pos()) {
      mutable_pos()->::PlanetPoint::MergeFrom(from.pos());
    }
  }
}

void PlanetMark::CopyFrom(const PlanetMark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMark::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void PlanetMark::Swap(PlanetMark* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetMark::GetTypeName() const {
  return "PlanetMark";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetSevenDaysData::kAttackMonsterTimesFieldNumber;
const int PlanetSevenDaysData::kBaseAttackTimesFieldNumber;
const int PlanetSevenDaysData::kColloctLevelTimesListDayFieldNumber;
const int PlanetSevenDaysData::kRuinsLevelTimesListDayFieldNumber;
const int PlanetSevenDaysData::kFishingLevelTimesListDayFieldNumber;
const int PlanetSevenDaysData::kBossLevelTimesListDayFieldNumber;
#endif  // !_MSC_VER

PlanetSevenDaysData::PlanetSevenDaysData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetSevenDaysData::InitAsDefaultInstance() {
}

PlanetSevenDaysData::PlanetSevenDaysData(const PlanetSevenDaysData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetSevenDaysData::SharedCtor() {
  _cached_size_ = 0;
  attack_monster_times_ = 0;
  base_attack_times_ = 0;
  colloct_level_times_list_day_ = 0;
  ruins_level_times_list_day_ = 0;
  fishing_level_times_list_day_ = 0;
  boss_level_times_list_day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetSevenDaysData::~PlanetSevenDaysData() {
  SharedDtor();
}

void PlanetSevenDaysData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetSevenDaysData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetSevenDaysData& PlanetSevenDaysData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetSevenDaysData* PlanetSevenDaysData::default_instance_ = NULL;

PlanetSevenDaysData* PlanetSevenDaysData::New() const {
  return new PlanetSevenDaysData;
}

void PlanetSevenDaysData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_monster_times_ = 0;
    base_attack_times_ = 0;
    colloct_level_times_list_day_ = 0;
    ruins_level_times_list_day_ = 0;
    fishing_level_times_list_day_ = 0;
    boss_level_times_list_day_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetSevenDaysData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attack_monster_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_monster_times_)));
          set_has_attack_monster_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_base_attack_times;
        break;
      }

      // optional int32 base_attack_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_attack_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_attack_times_)));
          set_has_base_attack_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colloct_level_times_list_day;
        break;
      }

      // optional int32 colloct_level_times_list_day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colloct_level_times_list_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colloct_level_times_list_day_)));
          set_has_colloct_level_times_list_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ruins_level_times_list_day;
        break;
      }

      // optional int32 ruins_level_times_list_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ruins_level_times_list_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ruins_level_times_list_day_)));
          set_has_ruins_level_times_list_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fishing_level_times_list_day;
        break;
      }

      // optional int32 fishing_level_times_list_day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishing_level_times_list_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishing_level_times_list_day_)));
          set_has_fishing_level_times_list_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_boss_level_times_list_day;
        break;
      }

      // optional int32 boss_level_times_list_day = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level_times_list_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_level_times_list_day_)));
          set_has_boss_level_times_list_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetSevenDaysData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 attack_monster_times = 1;
  if (has_attack_monster_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attack_monster_times(), output);
  }

  // optional int32 base_attack_times = 2;
  if (has_base_attack_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->base_attack_times(), output);
  }

  // optional int32 colloct_level_times_list_day = 3;
  if (has_colloct_level_times_list_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colloct_level_times_list_day(), output);
  }

  // optional int32 ruins_level_times_list_day = 4;
  if (has_ruins_level_times_list_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ruins_level_times_list_day(), output);
  }

  // optional int32 fishing_level_times_list_day = 5;
  if (has_fishing_level_times_list_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fishing_level_times_list_day(), output);
  }

  // optional int32 boss_level_times_list_day = 6;
  if (has_boss_level_times_list_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->boss_level_times_list_day(), output);
  }

}

int PlanetSevenDaysData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attack_monster_times = 1;
    if (has_attack_monster_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_monster_times());
    }

    // optional int32 base_attack_times = 2;
    if (has_base_attack_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_attack_times());
    }

    // optional int32 colloct_level_times_list_day = 3;
    if (has_colloct_level_times_list_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colloct_level_times_list_day());
    }

    // optional int32 ruins_level_times_list_day = 4;
    if (has_ruins_level_times_list_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ruins_level_times_list_day());
    }

    // optional int32 fishing_level_times_list_day = 5;
    if (has_fishing_level_times_list_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishing_level_times_list_day());
    }

    // optional int32 boss_level_times_list_day = 6;
    if (has_boss_level_times_list_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_level_times_list_day());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetSevenDaysData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetSevenDaysData*>(&from));
}

void PlanetSevenDaysData::MergeFrom(const PlanetSevenDaysData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack_monster_times()) {
      set_attack_monster_times(from.attack_monster_times());
    }
    if (from.has_base_attack_times()) {
      set_base_attack_times(from.base_attack_times());
    }
    if (from.has_colloct_level_times_list_day()) {
      set_colloct_level_times_list_day(from.colloct_level_times_list_day());
    }
    if (from.has_ruins_level_times_list_day()) {
      set_ruins_level_times_list_day(from.ruins_level_times_list_day());
    }
    if (from.has_fishing_level_times_list_day()) {
      set_fishing_level_times_list_day(from.fishing_level_times_list_day());
    }
    if (from.has_boss_level_times_list_day()) {
      set_boss_level_times_list_day(from.boss_level_times_list_day());
    }
  }
}

void PlanetSevenDaysData::CopyFrom(const PlanetSevenDaysData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetSevenDaysData::IsInitialized() const {

  return true;
}

void PlanetSevenDaysData::Swap(PlanetSevenDaysData* other) {
  if (other != this) {
    std::swap(attack_monster_times_, other->attack_monster_times_);
    std::swap(base_attack_times_, other->base_attack_times_);
    std::swap(colloct_level_times_list_day_, other->colloct_level_times_list_day_);
    std::swap(ruins_level_times_list_day_, other->ruins_level_times_list_day_);
    std::swap(fishing_level_times_list_day_, other->fishing_level_times_list_day_);
    std::swap(boss_level_times_list_day_, other->boss_level_times_list_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetSevenDaysData::GetTypeName() const {
  return "PlanetSevenDaysData";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetUser::kUserNameFieldNumber;
const int PlanetUser::kNationFieldNumber;
const int PlanetUser::kArmyListFieldNumber;
const int PlanetUser::kBaseGlobalKeyFieldNumber;
const int PlanetUser::kMarkListFieldNumber;
const int PlanetUser::kAttackMeListFieldNumber;
const int PlanetUser::kColloctLevelTimesListFieldNumber;
const int PlanetUser::kColloctCountFieldNumber;
const int PlanetUser::kRuinsLevelTimesListFieldNumber;
const int PlanetUser::kFishingLevelTimesListFieldNumber;
const int PlanetUser::kBossLevelTimesListFieldNumber;
const int PlanetUser::kAttackCityWinTimesFieldNumber;
const int PlanetUser::kAttackWinTimesFieldNumber;
const int PlanetUser::kBaseDefenseWinTimesFieldNumber;
const int PlanetUser::kMoveBaseTimesListFieldNumber;
const int PlanetUser::kAttackMonsterTimesFieldNumber;
const int PlanetUser::kBaseAttackTimesFieldNumber;
const int PlanetUser::kColloctLevelTimesListDayFieldNumber;
const int PlanetUser::kRuinsLevelTimesListDayFieldNumber;
const int PlanetUser::kFishingLevelTimesListDayFieldNumber;
const int PlanetUser::kBossLevelTimesListDayFieldNumber;
const int PlanetUser::kSevenDaysDataFieldNumber;
#endif  // !_MSC_VER

PlanetUser::PlanetUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetUser::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  seven_days_data_ = const_cast< ::PlanetSevenDaysData*>(
      ::PlanetSevenDaysData::internal_default_instance());
#else
  seven_days_data_ = const_cast< ::PlanetSevenDaysData*>(&::PlanetSevenDaysData::default_instance());
#endif
}

PlanetUser::PlanetUser(const PlanetUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetUser::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nation_ = 0;
  base_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attack_city_win_times_ = 0;
  attack_win_times_ = 0;
  base_defense_win_times_ = 0;
  base_attack_times_ = 0;
  seven_days_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetUser::~PlanetUser() {
  SharedDtor();
}

void PlanetUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (base_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete base_global_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete seven_days_data_;
  }
}

void PlanetUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetUser& PlanetUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetUser* PlanetUser::default_instance_ = NULL;

PlanetUser* PlanetUser::New() const {
  return new PlanetUser;
}

void PlanetUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    nation_ = 0;
    if (has_base_global_key()) {
      if (base_global_key_ != &::google::protobuf::internal::kEmptyString) {
        base_global_key_->clear();
      }
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    attack_city_win_times_ = 0;
    attack_win_times_ = 0;
    base_defense_win_times_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    base_attack_times_ = 0;
    if (has_seven_days_data()) {
      if (seven_days_data_ != NULL) seven_days_data_->::PlanetSevenDaysData::Clear();
    }
  }
  army_list_.Clear();
  mark_list_.Clear();
  attack_me_list_.Clear();
  colloct_level_times_list_.Clear();
  colloct_count_.Clear();
  ruins_level_times_list_.Clear();
  fishing_level_times_list_.Clear();
  boss_level_times_list_.Clear();
  move_base_times_list_.Clear();
  attack_monster_times_.Clear();
  colloct_level_times_list_day_.Clear();
  ruins_level_times_list_day_.Clear();
  fishing_level_times_list_day_.Clear();
  boss_level_times_list_day_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nation;
        break;
      }

      // required int32 nation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_army_list;
        break;
      }

      // repeated .PlanetArmy army_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_army_list;
        if (input->ExpectTag(34)) goto parse_base_global_key;
        break;
      }

      // required string base_global_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_global_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mark_list;
        break;
      }

      // repeated .PlanetMark mark_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mark_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mark_list;
        if (input->ExpectTag(50)) goto parse_attack_me_list;
        break;
      }

      // repeated string attack_me_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_me_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attack_me_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attack_me_list;
        if (input->ExpectTag(56)) goto parse_colloct_level_times_list;
        break;
      }

      // repeated int32 colloct_level_times_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colloct_level_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_colloct_level_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colloct_level_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_colloct_level_times_list;
        if (input->ExpectTag(64)) goto parse_colloct_count;
        break;
      }

      // repeated int32 colloct_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colloct_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_colloct_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colloct_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_colloct_count;
        if (input->ExpectTag(72)) goto parse_ruins_level_times_list;
        break;
      }

      // repeated int32 ruins_level_times_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ruins_level_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ruins_level_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ruins_level_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ruins_level_times_list;
        if (input->ExpectTag(80)) goto parse_fishing_level_times_list;
        break;
      }

      // repeated int32 fishing_level_times_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishing_level_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_fishing_level_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishing_level_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fishing_level_times_list;
        if (input->ExpectTag(88)) goto parse_boss_level_times_list;
        break;
      }

      // repeated int32 boss_level_times_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_boss_level_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boss_level_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_boss_level_times_list;
        if (input->ExpectTag(96)) goto parse_attack_city_win_times;
        break;
      }

      // optional int32 attack_city_win_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_city_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_city_win_times_)));
          set_has_attack_city_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attack_win_times;
        break;
      }

      // optional int32 attack_win_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_win_times_)));
          set_has_attack_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_base_defense_win_times;
        break;
      }

      // optional int32 base_defense_win_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_defense_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_defense_win_times_)));
          set_has_base_defense_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_move_base_times_list;
        break;
      }

      // repeated int32 move_base_times_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_base_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_move_base_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_move_base_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_move_base_times_list;
        if (input->ExpectTag(128)) goto parse_attack_monster_times;
        break;
      }

      // repeated int32 attack_monster_times = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_monster_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_attack_monster_times())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attack_monster_times())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_attack_monster_times;
        if (input->ExpectTag(136)) goto parse_base_attack_times;
        break;
      }

      // optional int32 base_attack_times = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_attack_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_attack_times_)));
          set_has_base_attack_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_colloct_level_times_list_day;
        break;
      }

      // repeated int32 colloct_level_times_list_day = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colloct_level_times_list_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_colloct_level_times_list_day())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colloct_level_times_list_day())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_colloct_level_times_list_day;
        if (input->ExpectTag(152)) goto parse_ruins_level_times_list_day;
        break;
      }

      // repeated int32 ruins_level_times_list_day = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ruins_level_times_list_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_ruins_level_times_list_day())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ruins_level_times_list_day())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ruins_level_times_list_day;
        if (input->ExpectTag(160)) goto parse_fishing_level_times_list_day;
        break;
      }

      // repeated int32 fishing_level_times_list_day = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishing_level_times_list_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_fishing_level_times_list_day())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishing_level_times_list_day())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fishing_level_times_list_day;
        if (input->ExpectTag(168)) goto parse_boss_level_times_list_day;
        break;
      }

      // repeated int32 boss_level_times_list_day = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level_times_list_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_boss_level_times_list_day())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boss_level_times_list_day())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_boss_level_times_list_day;
        if (input->ExpectTag(178)) goto parse_seven_days_data;
        break;
      }

      // optional .PlanetSevenDaysData seven_days_data = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seven_days_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seven_days_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 nation = 2;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nation(), output);
  }

  // repeated .PlanetArmy army_list = 3;
  for (int i = 0; i < this->army_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->army_list(i), output);
  }

  // required string base_global_key = 4;
  if (has_base_global_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->base_global_key(), output);
  }

  // repeated .PlanetMark mark_list = 5;
  for (int i = 0; i < this->mark_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->mark_list(i), output);
  }

  // repeated string attack_me_list = 6;
  for (int i = 0; i < this->attack_me_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->attack_me_list(i), output);
  }

  // repeated int32 colloct_level_times_list = 7;
  for (int i = 0; i < this->colloct_level_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->colloct_level_times_list(i), output);
  }

  // repeated int32 colloct_count = 8;
  for (int i = 0; i < this->colloct_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->colloct_count(i), output);
  }

  // repeated int32 ruins_level_times_list = 9;
  for (int i = 0; i < this->ruins_level_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ruins_level_times_list(i), output);
  }

  // repeated int32 fishing_level_times_list = 10;
  for (int i = 0; i < this->fishing_level_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->fishing_level_times_list(i), output);
  }

  // repeated int32 boss_level_times_list = 11;
  for (int i = 0; i < this->boss_level_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->boss_level_times_list(i), output);
  }

  // optional int32 attack_city_win_times = 12;
  if (has_attack_city_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->attack_city_win_times(), output);
  }

  // optional int32 attack_win_times = 13;
  if (has_attack_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->attack_win_times(), output);
  }

  // optional int32 base_defense_win_times = 14;
  if (has_base_defense_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->base_defense_win_times(), output);
  }

  // repeated int32 move_base_times_list = 15;
  for (int i = 0; i < this->move_base_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->move_base_times_list(i), output);
  }

  // repeated int32 attack_monster_times = 16;
  for (int i = 0; i < this->attack_monster_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->attack_monster_times(i), output);
  }

  // optional int32 base_attack_times = 17;
  if (has_base_attack_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->base_attack_times(), output);
  }

  // repeated int32 colloct_level_times_list_day = 18;
  for (int i = 0; i < this->colloct_level_times_list_day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->colloct_level_times_list_day(i), output);
  }

  // repeated int32 ruins_level_times_list_day = 19;
  for (int i = 0; i < this->ruins_level_times_list_day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->ruins_level_times_list_day(i), output);
  }

  // repeated int32 fishing_level_times_list_day = 20;
  for (int i = 0; i < this->fishing_level_times_list_day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->fishing_level_times_list_day(i), output);
  }

  // repeated int32 boss_level_times_list_day = 21;
  for (int i = 0; i < this->boss_level_times_list_day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->boss_level_times_list_day(i), output);
  }

  // optional .PlanetSevenDaysData seven_days_data = 22;
  if (has_seven_days_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->seven_days_data(), output);
  }

}

int PlanetUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 nation = 2;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // required string base_global_key = 4;
    if (has_base_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_global_key());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional int32 attack_city_win_times = 12;
    if (has_attack_city_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_city_win_times());
    }

    // optional int32 attack_win_times = 13;
    if (has_attack_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_win_times());
    }

    // optional int32 base_defense_win_times = 14;
    if (has_base_defense_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_defense_win_times());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 base_attack_times = 17;
    if (has_base_attack_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_attack_times());
    }

    // optional .PlanetSevenDaysData seven_days_data = 22;
    if (has_seven_days_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seven_days_data());
    }

  }
  // repeated .PlanetArmy army_list = 3;
  total_size += 1 * this->army_list_size();
  for (int i = 0; i < this->army_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army_list(i));
  }

  // repeated .PlanetMark mark_list = 5;
  total_size += 1 * this->mark_list_size();
  for (int i = 0; i < this->mark_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mark_list(i));
  }

  // repeated string attack_me_list = 6;
  total_size += 1 * this->attack_me_list_size();
  for (int i = 0; i < this->attack_me_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attack_me_list(i));
  }

  // repeated int32 colloct_level_times_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->colloct_level_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->colloct_level_times_list(i));
    }
    total_size += 1 * this->colloct_level_times_list_size() + data_size;
  }

  // repeated int32 colloct_count = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->colloct_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->colloct_count(i));
    }
    total_size += 1 * this->colloct_count_size() + data_size;
  }

  // repeated int32 ruins_level_times_list = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ruins_level_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ruins_level_times_list(i));
    }
    total_size += 1 * this->ruins_level_times_list_size() + data_size;
  }

  // repeated int32 fishing_level_times_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->fishing_level_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fishing_level_times_list(i));
    }
    total_size += 1 * this->fishing_level_times_list_size() + data_size;
  }

  // repeated int32 boss_level_times_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->boss_level_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boss_level_times_list(i));
    }
    total_size += 1 * this->boss_level_times_list_size() + data_size;
  }

  // repeated int32 move_base_times_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->move_base_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->move_base_times_list(i));
    }
    total_size += 1 * this->move_base_times_list_size() + data_size;
  }

  // repeated int32 attack_monster_times = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->attack_monster_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attack_monster_times(i));
    }
    total_size += 2 * this->attack_monster_times_size() + data_size;
  }

  // repeated int32 colloct_level_times_list_day = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->colloct_level_times_list_day_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->colloct_level_times_list_day(i));
    }
    total_size += 2 * this->colloct_level_times_list_day_size() + data_size;
  }

  // repeated int32 ruins_level_times_list_day = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->ruins_level_times_list_day_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ruins_level_times_list_day(i));
    }
    total_size += 2 * this->ruins_level_times_list_day_size() + data_size;
  }

  // repeated int32 fishing_level_times_list_day = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->fishing_level_times_list_day_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fishing_level_times_list_day(i));
    }
    total_size += 2 * this->fishing_level_times_list_day_size() + data_size;
  }

  // repeated int32 boss_level_times_list_day = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->boss_level_times_list_day_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boss_level_times_list_day(i));
    }
    total_size += 2 * this->boss_level_times_list_day_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetUser*>(&from));
}

void PlanetUser::MergeFrom(const PlanetUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  army_list_.MergeFrom(from.army_list_);
  mark_list_.MergeFrom(from.mark_list_);
  attack_me_list_.MergeFrom(from.attack_me_list_);
  colloct_level_times_list_.MergeFrom(from.colloct_level_times_list_);
  colloct_count_.MergeFrom(from.colloct_count_);
  ruins_level_times_list_.MergeFrom(from.ruins_level_times_list_);
  fishing_level_times_list_.MergeFrom(from.fishing_level_times_list_);
  boss_level_times_list_.MergeFrom(from.boss_level_times_list_);
  move_base_times_list_.MergeFrom(from.move_base_times_list_);
  attack_monster_times_.MergeFrom(from.attack_monster_times_);
  colloct_level_times_list_day_.MergeFrom(from.colloct_level_times_list_day_);
  ruins_level_times_list_day_.MergeFrom(from.ruins_level_times_list_day_);
  fishing_level_times_list_day_.MergeFrom(from.fishing_level_times_list_day_);
  boss_level_times_list_day_.MergeFrom(from.boss_level_times_list_day_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_base_global_key()) {
      set_base_global_key(from.base_global_key());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_attack_city_win_times()) {
      set_attack_city_win_times(from.attack_city_win_times());
    }
    if (from.has_attack_win_times()) {
      set_attack_win_times(from.attack_win_times());
    }
    if (from.has_base_defense_win_times()) {
      set_base_defense_win_times(from.base_defense_win_times());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_base_attack_times()) {
      set_base_attack_times(from.base_attack_times());
    }
    if (from.has_seven_days_data()) {
      mutable_seven_days_data()->::PlanetSevenDaysData::MergeFrom(from.seven_days_data());
    }
  }
}

void PlanetUser::CopyFrom(const PlanetUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < army_list_size(); i++) {
    if (!this->army_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mark_list_size(); i++) {
    if (!this->mark_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetUser::Swap(PlanetUser* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nation_, other->nation_);
    army_list_.Swap(&other->army_list_);
    std::swap(base_global_key_, other->base_global_key_);
    mark_list_.Swap(&other->mark_list_);
    attack_me_list_.Swap(&other->attack_me_list_);
    colloct_level_times_list_.Swap(&other->colloct_level_times_list_);
    colloct_count_.Swap(&other->colloct_count_);
    ruins_level_times_list_.Swap(&other->ruins_level_times_list_);
    fishing_level_times_list_.Swap(&other->fishing_level_times_list_);
    boss_level_times_list_.Swap(&other->boss_level_times_list_);
    std::swap(attack_city_win_times_, other->attack_city_win_times_);
    std::swap(attack_win_times_, other->attack_win_times_);
    std::swap(base_defense_win_times_, other->base_defense_win_times_);
    move_base_times_list_.Swap(&other->move_base_times_list_);
    attack_monster_times_.Swap(&other->attack_monster_times_);
    std::swap(base_attack_times_, other->base_attack_times_);
    colloct_level_times_list_day_.Swap(&other->colloct_level_times_list_day_);
    ruins_level_times_list_day_.Swap(&other->ruins_level_times_list_day_);
    fishing_level_times_list_day_.Swap(&other->fishing_level_times_list_day_);
    boss_level_times_list_day_.Swap(&other->boss_level_times_list_day_);
    std::swap(seven_days_data_, other->seven_days_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetUser::GetTypeName() const {
  return "PlanetUser";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMailUser::kInfoFieldNumber;
const int PlanetMailUser::kPosListFieldNumber;
const int PlanetMailUser::kShipHpListFieldNumber;
const int PlanetMailUser::kShipListFieldNumber;
const int PlanetMailUser::kPreShipEnergyLevelListFieldNumber;
#endif  // !_MSC_VER

PlanetMailUser::PlanetMailUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetMailUser::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::OtherUserInfo*>(
      ::OtherUserInfo::internal_default_instance());
#else
  info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
#endif
}

PlanetMailUser::PlanetMailUser(const PlanetMailUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMailUser::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMailUser::~PlanetMailUser() {
  SharedDtor();
}

void PlanetMailUser::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void PlanetMailUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetMailUser& PlanetMailUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetMailUser* PlanetMailUser::default_instance_ = NULL;

PlanetMailUser* PlanetMailUser::New() const {
  return new PlanetMailUser;
}

void PlanetMailUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::OtherUserInfo::Clear();
    }
  }
  pos_list_.Clear();
  ship_hp_list_.Clear();
  ship_list_.Clear();
  pre_ship_energy_level_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetMailUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OtherUserInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos_list;
        break;
      }

      // repeated .PlanetPoint pos_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos_list;
        if (input->ExpectTag(32)) goto parse_ship_hp_list;
        break;
      }

      // repeated int32 ship_hp_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_ship_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ship_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ship_hp_list;
        if (input->ExpectTag(42)) goto parse_ship_list;
        break;
      }

      // repeated .AirShip ship_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ship_list;
        if (input->ExpectTag(48)) goto parse_pre_ship_energy_level_list;
        break;
      }

      // repeated int32 pre_ship_energy_level_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_ship_energy_level_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_pre_ship_energy_level_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pre_ship_energy_level_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pre_ship_energy_level_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMailUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OtherUserInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

  // repeated .PlanetPoint pos_list = 2;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->pos_list(i), output);
  }

  // repeated int32 ship_hp_list = 4;
  for (int i = 0; i < this->ship_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->ship_hp_list(i), output);
  }

  // repeated .AirShip ship_list = 5;
  for (int i = 0; i < this->ship_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->ship_list(i), output);
  }

  // repeated int32 pre_ship_energy_level_list = 6;
  for (int i = 0; i < this->pre_ship_energy_level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->pre_ship_energy_level_list(i), output);
  }

}

int PlanetMailUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OtherUserInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .PlanetPoint pos_list = 2;
  total_size += 1 * this->pos_list_size();
  for (int i = 0; i < this->pos_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_list(i));
  }

  // repeated int32 ship_hp_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ship_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ship_hp_list(i));
    }
    total_size += 1 * this->ship_hp_list_size() + data_size;
  }

  // repeated .AirShip ship_list = 5;
  total_size += 1 * this->ship_list_size();
  for (int i = 0; i < this->ship_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ship_list(i));
  }

  // repeated int32 pre_ship_energy_level_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->pre_ship_energy_level_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pre_ship_energy_level_list(i));
    }
    total_size += 1 * this->pre_ship_energy_level_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMailUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetMailUser*>(&from));
}

void PlanetMailUser::MergeFrom(const PlanetMailUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_list_.MergeFrom(from.pos_list_);
  ship_hp_list_.MergeFrom(from.ship_hp_list_);
  ship_list_.MergeFrom(from.ship_list_);
  pre_ship_energy_level_list_.MergeFrom(from.pre_ship_energy_level_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::OtherUserInfo::MergeFrom(from.info());
    }
  }
}

void PlanetMailUser::CopyFrom(const PlanetMailUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMailUser::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  for (int i = 0; i < pos_list_size(); i++) {
    if (!this->pos_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ship_list_size(); i++) {
    if (!this->ship_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetMailUser::Swap(PlanetMailUser* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    pos_list_.Swap(&other->pos_list_);
    ship_hp_list_.Swap(&other->ship_hp_list_);
    ship_list_.Swap(&other->ship_list_);
    pre_ship_energy_level_list_.Swap(&other->pre_ship_energy_level_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetMailUser::GetTypeName() const {
  return "PlanetMailUser";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetArmyInfo::kMyBaseFieldNumber;
const int PlanetArmyInfo::kArmyFieldNumber;
const int PlanetArmyInfo::kTargetElementFieldNumber;
#endif  // !_MSC_VER

PlanetArmyInfo::PlanetArmyInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetArmyInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  my_base_ = const_cast< ::PlanetElement*>(
      ::PlanetElement::internal_default_instance());
#else
  my_base_ = const_cast< ::PlanetElement*>(&::PlanetElement::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  army_ = const_cast< ::PlanetArmy*>(
      ::PlanetArmy::internal_default_instance());
#else
  army_ = const_cast< ::PlanetArmy*>(&::PlanetArmy::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  target_element_ = const_cast< ::PlanetElement*>(
      ::PlanetElement::internal_default_instance());
#else
  target_element_ = const_cast< ::PlanetElement*>(&::PlanetElement::default_instance());
#endif
}

PlanetArmyInfo::PlanetArmyInfo(const PlanetArmyInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetArmyInfo::SharedCtor() {
  _cached_size_ = 0;
  my_base_ = NULL;
  army_ = NULL;
  target_element_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetArmyInfo::~PlanetArmyInfo() {
  SharedDtor();
}

void PlanetArmyInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete my_base_;
    delete army_;
    delete target_element_;
  }
}

void PlanetArmyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetArmyInfo& PlanetArmyInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetArmyInfo* PlanetArmyInfo::default_instance_ = NULL;

PlanetArmyInfo* PlanetArmyInfo::New() const {
  return new PlanetArmyInfo;
}

void PlanetArmyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_my_base()) {
      if (my_base_ != NULL) my_base_->::PlanetElement::Clear();
    }
    if (has_army()) {
      if (army_ != NULL) army_->::PlanetArmy::Clear();
    }
    if (has_target_element()) {
      if (target_element_ != NULL) target_element_->::PlanetElement::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetArmyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetElement my_base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_army;
        break;
      }

      // required .PlanetArmy army = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_element;
        break;
      }

      // required .PlanetElement target_element = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetArmyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetElement my_base = 1;
  if (has_my_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->my_base(), output);
  }

  // required .PlanetArmy army = 2;
  if (has_army()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->army(), output);
  }

  // required .PlanetElement target_element = 3;
  if (has_target_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->target_element(), output);
  }

}

int PlanetArmyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetElement my_base = 1;
    if (has_my_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_base());
    }

    // required .PlanetArmy army = 2;
    if (has_army()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army());
    }

    // required .PlanetElement target_element = 3;
    if (has_target_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_element());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetArmyInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetArmyInfo*>(&from));
}

void PlanetArmyInfo::MergeFrom(const PlanetArmyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_base()) {
      mutable_my_base()->::PlanetElement::MergeFrom(from.my_base());
    }
    if (from.has_army()) {
      mutable_army()->::PlanetArmy::MergeFrom(from.army());
    }
    if (from.has_target_element()) {
      mutable_target_element()->::PlanetElement::MergeFrom(from.target_element());
    }
  }
}

void PlanetArmyInfo::CopyFrom(const PlanetArmyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetArmyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_my_base()) {
    if (!this->my_base().IsInitialized()) return false;
  }
  if (has_army()) {
    if (!this->army().IsInitialized()) return false;
  }
  if (has_target_element()) {
    if (!this->target_element().IsInitialized()) return false;
  }
  return true;
}

void PlanetArmyInfo::Swap(PlanetArmyInfo* other) {
  if (other != this) {
    std::swap(my_base_, other->my_base_);
    std::swap(army_, other->army_);
    std::swap(target_element_, other->target_element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetArmyInfo::GetTypeName() const {
  return "PlanetArmyInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetWangZuoTitle::kUserNameFieldNumber;
const int PlanetWangZuoTitle::kTitleFieldNumber;
#endif  // !_MSC_VER

PlanetWangZuoTitle::PlanetWangZuoTitle()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetWangZuoTitle::InitAsDefaultInstance() {
}

PlanetWangZuoTitle::PlanetWangZuoTitle(const PlanetWangZuoTitle& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetWangZuoTitle::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetWangZuoTitle::~PlanetWangZuoTitle() {
  SharedDtor();
}

void PlanetWangZuoTitle::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetWangZuoTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetWangZuoTitle& PlanetWangZuoTitle::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetWangZuoTitle* PlanetWangZuoTitle::default_instance_ = NULL;

PlanetWangZuoTitle* PlanetWangZuoTitle::New() const {
  return new PlanetWangZuoTitle;
}

void PlanetWangZuoTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    title_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetWangZuoTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }

      // required int32 title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetWangZuoTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->title(), output);
  }

}

int PlanetWangZuoTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetWangZuoTitle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetWangZuoTitle*>(&from));
}

void PlanetWangZuoTitle::MergeFrom(const PlanetWangZuoTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
}

void PlanetWangZuoTitle::CopyFrom(const PlanetWangZuoTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetWangZuoTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlanetWangZuoTitle::Swap(PlanetWangZuoTitle* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetWangZuoTitle::GetTypeName() const {
  return "PlanetWangZuoTitle";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetWangZuoTitleList::kWangzuoTitleListFieldNumber;
#endif  // !_MSC_VER

PlanetWangZuoTitleList::PlanetWangZuoTitleList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetWangZuoTitleList::InitAsDefaultInstance() {
}

PlanetWangZuoTitleList::PlanetWangZuoTitleList(const PlanetWangZuoTitleList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetWangZuoTitleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetWangZuoTitleList::~PlanetWangZuoTitleList() {
  SharedDtor();
}

void PlanetWangZuoTitleList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetWangZuoTitleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetWangZuoTitleList& PlanetWangZuoTitleList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetWangZuoTitleList* PlanetWangZuoTitleList::default_instance_ = NULL;

PlanetWangZuoTitleList* PlanetWangZuoTitleList::New() const {
  return new PlanetWangZuoTitleList;
}

void PlanetWangZuoTitleList::Clear() {
  wangzuo_title_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetWangZuoTitleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlanetWangZuoTitle wangzuo_title_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wangzuo_title_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wangzuo_title_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wangzuo_title_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetWangZuoTitleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlanetWangZuoTitle wangzuo_title_list = 1;
  for (int i = 0; i < this->wangzuo_title_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->wangzuo_title_list(i), output);
  }

}

int PlanetWangZuoTitleList::ByteSize() const {
  int total_size = 0;

  // repeated .PlanetWangZuoTitle wangzuo_title_list = 1;
  total_size += 1 * this->wangzuo_title_list_size();
  for (int i = 0; i < this->wangzuo_title_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wangzuo_title_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetWangZuoTitleList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetWangZuoTitleList*>(&from));
}

void PlanetWangZuoTitleList::MergeFrom(const PlanetWangZuoTitleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  wangzuo_title_list_.MergeFrom(from.wangzuo_title_list_);
}

void PlanetWangZuoTitleList::CopyFrom(const PlanetWangZuoTitleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetWangZuoTitleList::IsInitialized() const {

  for (int i = 0; i < wangzuo_title_list_size(); i++) {
    if (!this->wangzuo_title_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetWangZuoTitleList::Swap(PlanetWangZuoTitleList* other) {
  if (other != this) {
    wangzuo_title_list_.Swap(&other->wangzuo_title_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetWangZuoTitleList::GetTypeName() const {
  return "PlanetWangZuoTitleList";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetWangZuoOccupy::kUserNameFieldNumber;
const int PlanetWangZuoOccupy::kCreateTimeFieldNumber;
const int PlanetWangZuoOccupy::kInfoFieldNumber;
#endif  // !_MSC_VER

PlanetWangZuoOccupy::PlanetWangZuoOccupy()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetWangZuoOccupy::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::OtherUserInfo*>(
      ::OtherUserInfo::internal_default_instance());
#else
  info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
#endif
}

PlanetWangZuoOccupy::PlanetWangZuoOccupy(const PlanetWangZuoOccupy& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetWangZuoOccupy::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  create_time_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetWangZuoOccupy::~PlanetWangZuoOccupy() {
  SharedDtor();
}

void PlanetWangZuoOccupy::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void PlanetWangZuoOccupy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetWangZuoOccupy& PlanetWangZuoOccupy::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetWangZuoOccupy* PlanetWangZuoOccupy::default_instance_ = NULL;

PlanetWangZuoOccupy* PlanetWangZuoOccupy::New() const {
  return new PlanetWangZuoOccupy;
}

void PlanetWangZuoOccupy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    create_time_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::OtherUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetWangZuoOccupy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // required int64 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .OtherUserInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetWangZuoOccupy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int64 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->create_time(), output);
  }

  // optional .OtherUserInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->info(), output);
  }

}

int PlanetWangZuoOccupy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int64 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional .OtherUserInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetWangZuoOccupy::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetWangZuoOccupy*>(&from));
}

void PlanetWangZuoOccupy::MergeFrom(const PlanetWangZuoOccupy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_info()) {
      mutable_info()->::OtherUserInfo::MergeFrom(from.info());
    }
  }
}

void PlanetWangZuoOccupy::CopyFrom(const PlanetWangZuoOccupy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetWangZuoOccupy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void PlanetWangZuoOccupy::Swap(PlanetWangZuoOccupy* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(create_time_, other->create_time_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetWangZuoOccupy::GetTypeName() const {
  return "PlanetWangZuoOccupy";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetWangZuoOccupyList::kOccupyListFieldNumber;
#endif  // !_MSC_VER

PlanetWangZuoOccupyList::PlanetWangZuoOccupyList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetWangZuoOccupyList::InitAsDefaultInstance() {
}

PlanetWangZuoOccupyList::PlanetWangZuoOccupyList(const PlanetWangZuoOccupyList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetWangZuoOccupyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetWangZuoOccupyList::~PlanetWangZuoOccupyList() {
  SharedDtor();
}

void PlanetWangZuoOccupyList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetWangZuoOccupyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetWangZuoOccupyList& PlanetWangZuoOccupyList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Planet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
#endif
  return *default_instance_;
}

PlanetWangZuoOccupyList* PlanetWangZuoOccupyList::default_instance_ = NULL;

PlanetWangZuoOccupyList* PlanetWangZuoOccupyList::New() const {
  return new PlanetWangZuoOccupyList;
}

void PlanetWangZuoOccupyList::Clear() {
  occupy_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetWangZuoOccupyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlanetWangZuoOccupy occupy_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupy_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_occupy_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_occupy_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetWangZuoOccupyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlanetWangZuoOccupy occupy_list = 1;
  for (int i = 0; i < this->occupy_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->occupy_list(i), output);
  }

}

int PlanetWangZuoOccupyList::ByteSize() const {
  int total_size = 0;

  // repeated .PlanetWangZuoOccupy occupy_list = 1;
  total_size += 1 * this->occupy_list_size();
  for (int i = 0; i < this->occupy_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->occupy_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetWangZuoOccupyList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetWangZuoOccupyList*>(&from));
}

void PlanetWangZuoOccupyList::MergeFrom(const PlanetWangZuoOccupyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  occupy_list_.MergeFrom(from.occupy_list_);
}

void PlanetWangZuoOccupyList::CopyFrom(const PlanetWangZuoOccupyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetWangZuoOccupyList::IsInitialized() const {

  for (int i = 0; i < occupy_list_size(); i++) {
    if (!this->occupy_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetWangZuoOccupyList::Swap(PlanetWangZuoOccupyList* other) {
  if (other != this) {
    occupy_list_.Swap(&other->occupy_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetWangZuoOccupyList::GetTypeName() const {
  return "PlanetWangZuoOccupyList";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
