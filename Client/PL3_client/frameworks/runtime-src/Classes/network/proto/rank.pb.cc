// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_rank_2eproto() {
  delete RankItem::default_instance_;
  delete RankPlayerInfo::default_instance_;
  delete RankExtData::default_instance_;
  delete RankCallBack::default_instance_;
  delete RankItemList::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_rank_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_rank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RankItem::default_instance_ = new RankItem();
  RankPlayerInfo::default_instance_ = new RankPlayerInfo();
  RankExtData::default_instance_ = new RankExtData();
  RankCallBack::default_instance_ = new RankCallBack();
  RankItemList::default_instance_ = new RankItemList();
  RankItem::default_instance_->InitAsDefaultInstance();
  RankPlayerInfo::default_instance_->InitAsDefaultInstance();
  RankExtData::default_instance_->InitAsDefaultInstance();
  RankCallBack::default_instance_->InitAsDefaultInstance();
  RankItemList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rank_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_rank_2eproto_once_);
void protobuf_AddDesc_rank_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_rank_2eproto_once_,
                 &protobuf_AddDesc_rank_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rank_2eproto {
  StaticDescriptorInitializer_rank_2eproto() {
    protobuf_AddDesc_rank_2eproto();
  }
} static_descriptor_initializer_rank_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RankItem::kUserFieldNumber;
const int RankItem::kKeyFieldNumber;
const int RankItem::kRanktypeFieldNumber;
const int RankItem::kRankidFieldNumber;
const int RankItem::kExtdataFieldNumber;
const int RankItem::kRankopFieldNumber;
#endif  // !_MSC_VER

RankItem::RankItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RankItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  extdata_ = const_cast< ::RankExtData*>(
      ::RankExtData::internal_default_instance());
#else
  extdata_ = const_cast< ::RankExtData*>(&::RankExtData::default_instance());
#endif
}

RankItem::RankItem(const RankItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RankItem::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = 0;
  ranktype_ = 0;
  rankid_ = 0;
  extdata_ = NULL;
  rankop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankItem::~RankItem() {
  SharedDtor();
}

void RankItem::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete extdata_;
  }
}

void RankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankItem& RankItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rank_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
#endif
  return *default_instance_;
}

RankItem* RankItem::default_instance_ = NULL;

RankItem* RankItem::New() const {
  return new RankItem;
}

void RankItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    key_ = 0;
    ranktype_ = 0;
    rankid_ = 0;
    if (has_extdata()) {
      if (extdata_ != NULL) extdata_->::RankExtData::Clear();
    }
    rankop_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional int32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ranktype;
        break;
      }

      // optional int32 ranktype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rankid;
        break;
      }

      // optional int32 rankid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_extdata;
        break;
      }

      // optional .RankExtData extdata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rankop;
        break;
      }

      // optional int32 rankop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankop_)));
          set_has_rankop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user(), output);
  }

  // optional int32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // optional int32 ranktype = 3;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranktype(), output);
  }

  // optional int32 rankid = 4;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rankid(), output);
  }

  // optional .RankExtData extdata = 5;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->extdata(), output);
  }

  // optional int32 rankop = 6;
  if (has_rankop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rankop(), output);
  }

}

int RankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // optional int32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 ranktype = 3;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktype());
    }

    // optional int32 rankid = 4;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

    // optional .RankExtData extdata = 5;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extdata());
    }

    // optional int32 rankop = 6;
    if (has_rankop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankop());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankItem*>(&from));
}

void RankItem::MergeFrom(const RankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_extdata()) {
      mutable_extdata()->::RankExtData::MergeFrom(from.extdata());
    }
    if (from.has_rankop()) {
      set_rankop(from.rankop());
    }
  }
}

void RankItem::CopyFrom(const RankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankItem::IsInitialized() const {

  return true;
}

void RankItem::Swap(RankItem* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(key_, other->key_);
    std::swap(ranktype_, other->ranktype_);
    std::swap(rankid_, other->rankid_);
    std::swap(extdata_, other->extdata_);
    std::swap(rankop_, other->rankop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankItem::GetTypeName() const {
  return "RankItem";
}


// ===================================================================

#ifndef _MSC_VER
const int RankPlayerInfo::kNicknameFieldNumber;
const int RankPlayerInfo::kRolelevelFieldNumber;
const int RankPlayerInfo::kViplevelFieldNumber;
const int RankPlayerInfo::kPowerFieldNumber;
#endif  // !_MSC_VER

RankPlayerInfo::RankPlayerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RankPlayerInfo::InitAsDefaultInstance() {
}

RankPlayerInfo::RankPlayerInfo(const RankPlayerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RankPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolelevel_ = 0;
  viplevel_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankPlayerInfo::~RankPlayerInfo() {
  SharedDtor();
}

void RankPlayerInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RankPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankPlayerInfo& RankPlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rank_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
#endif
  return *default_instance_;
}

RankPlayerInfo* RankPlayerInfo::default_instance_ = NULL;

RankPlayerInfo* RankPlayerInfo::New() const {
  return new RankPlayerInfo;
}

void RankPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    rolelevel_ = 0;
    viplevel_ = 0;
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RankPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rolelevel;
        break;
      }

      // optional int32 rolelevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolelevel_)));
          set_has_rolelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_power;
        break;
      }

      // optional int32 power = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  // optional int32 rolelevel = 2;
  if (has_rolelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rolelevel(), output);
  }

  // optional int32 viplevel = 3;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viplevel(), output);
  }

  // optional int32 power = 11;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->power(), output);
  }

}

int RankPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 rolelevel = 2;
    if (has_rolelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolelevel());
    }

    // optional int32 viplevel = 3;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 power = 11;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankPlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankPlayerInfo*>(&from));
}

void RankPlayerInfo::MergeFrom(const RankPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_rolelevel()) {
      set_rolelevel(from.rolelevel());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
}

void RankPlayerInfo::CopyFrom(const RankPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankPlayerInfo::IsInitialized() const {

  return true;
}

void RankPlayerInfo::Swap(RankPlayerInfo* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(rolelevel_, other->rolelevel_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankPlayerInfo::GetTypeName() const {
  return "RankPlayerInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RankExtData::kNumbervecFieldNumber;
const int RankExtData::kStringvecFieldNumber;
const int RankExtData::kSeedvecFieldNumber;
const int RankExtData::kPlayerinfoFieldNumber;
#endif  // !_MSC_VER

RankExtData::RankExtData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RankExtData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::RankPlayerInfo*>(
      ::RankPlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::RankPlayerInfo*>(&::RankPlayerInfo::default_instance());
#endif
}

RankExtData::RankExtData(const RankExtData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RankExtData::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankExtData::~RankExtData() {
  SharedDtor();
}

void RankExtData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
  }
}

void RankExtData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankExtData& RankExtData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rank_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
#endif
  return *default_instance_;
}

RankExtData* RankExtData::default_instance_ = NULL;

RankExtData* RankExtData::New() const {
  return new RankExtData;
}

void RankExtData::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::RankPlayerInfo::Clear();
    }
  }
  numbervec_.Clear();
  stringvec_.Clear();
  seedvec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RankExtData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 numbervec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numbervec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_numbervec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_numbervec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_numbervec;
        if (input->ExpectTag(18)) goto parse_stringvec;
        break;
      }

      // repeated bytes stringvec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringvec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_stringvec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stringvec;
        if (input->ExpectTag(24)) goto parse_seedvec;
        break;
      }

      // repeated int64 seedvec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seedvec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_seedvec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_seedvec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seedvec;
        if (input->ExpectTag(90)) goto parse_playerinfo;
        break;
      }

      // optional .RankPlayerInfo playerinfo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankExtData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 numbervec = 1;
  for (int i = 0; i < this->numbervec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->numbervec(i), output);
  }

  // repeated bytes stringvec = 2;
  for (int i = 0; i < this->stringvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->stringvec(i), output);
  }

  // repeated int64 seedvec = 3;
  for (int i = 0; i < this->seedvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->seedvec(i), output);
  }

  // optional .RankPlayerInfo playerinfo = 11;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->playerinfo(), output);
  }

}

int RankExtData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .RankPlayerInfo playerinfo = 11;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

  }
  // repeated int32 numbervec = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->numbervec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->numbervec(i));
    }
    total_size += 1 * this->numbervec_size() + data_size;
  }

  // repeated bytes stringvec = 2;
  total_size += 1 * this->stringvec_size();
  for (int i = 0; i < this->stringvec_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->stringvec(i));
  }

  // repeated int64 seedvec = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->seedvec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->seedvec(i));
    }
    total_size += 1 * this->seedvec_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankExtData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankExtData*>(&from));
}

void RankExtData::MergeFrom(const RankExtData& from) {
  GOOGLE_CHECK_NE(&from, this);
  numbervec_.MergeFrom(from.numbervec_);
  stringvec_.MergeFrom(from.stringvec_);
  seedvec_.MergeFrom(from.seedvec_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::RankPlayerInfo::MergeFrom(from.playerinfo());
    }
  }
}

void RankExtData::CopyFrom(const RankExtData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankExtData::IsInitialized() const {

  return true;
}

void RankExtData::Swap(RankExtData* other) {
  if (other != this) {
    numbervec_.Swap(&other->numbervec_);
    stringvec_.Swap(&other->stringvec_);
    seedvec_.Swap(&other->seedvec_);
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankExtData::GetTypeName() const {
  return "RankExtData";
}


// ===================================================================

#ifndef _MSC_VER
const int RankCallBack::kRanktypeFieldNumber;
const int RankCallBack::kRankidFieldNumber;
const int RankCallBack::kRankFieldNumber;
#endif  // !_MSC_VER

RankCallBack::RankCallBack()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RankCallBack::InitAsDefaultInstance() {
}

RankCallBack::RankCallBack(const RankCallBack& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RankCallBack::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0;
  rankid_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankCallBack::~RankCallBack() {
  SharedDtor();
}

void RankCallBack::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RankCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankCallBack& RankCallBack::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rank_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
#endif
  return *default_instance_;
}

RankCallBack* RankCallBack::default_instance_ = NULL;

RankCallBack* RankCallBack::New() const {
  return new RankCallBack;
}

void RankCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0;
    rankid_ = 0;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RankCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ranktype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankid;
        break;
      }

      // optional int32 rankid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ranktype = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranktype(), output);
  }

  // optional int32 rankid = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rankid(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

}

int RankCallBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ranktype = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktype());
    }

    // optional int32 rankid = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankCallBack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankCallBack*>(&from));
}

void RankCallBack::MergeFrom(const RankCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
}

void RankCallBack::CopyFrom(const RankCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankCallBack::IsInitialized() const {

  return true;
}

void RankCallBack::Swap(RankCallBack* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(rankid_, other->rankid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankCallBack::GetTypeName() const {
  return "RankCallBack";
}


// ===================================================================

#ifndef _MSC_VER
const int RankItemList::kItemsFieldNumber;
const int RankItemList::kRankstartFieldNumber;
const int RankItemList::kRankcountFieldNumber;
const int RankItemList::kTotalranksizeFieldNumber;
const int RankItemList::kTaruserFieldNumber;
const int RankItemList::kTaruserrankFieldNumber;
#endif  // !_MSC_VER

RankItemList::RankItemList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RankItemList::InitAsDefaultInstance() {
}

RankItemList::RankItemList(const RankItemList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RankItemList::SharedCtor() {
  _cached_size_ = 0;
  rankstart_ = 0;
  rankcount_ = 0;
  totalranksize_ = 0;
  taruser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taruserrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankItemList::~RankItemList() {
  SharedDtor();
}

void RankItemList::SharedDtor() {
  if (taruser_ != &::google::protobuf::internal::kEmptyString) {
    delete taruser_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RankItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankItemList& RankItemList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_rank_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_rank_2eproto();
#endif
  return *default_instance_;
}

RankItemList* RankItemList::default_instance_ = NULL;

RankItemList* RankItemList::New() const {
  return new RankItemList;
}

void RankItemList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    rankstart_ = 0;
    rankcount_ = 0;
    totalranksize_ = 0;
    if (has_taruser()) {
      if (taruser_ != &::google::protobuf::internal::kEmptyString) {
        taruser_->clear();
      }
    }
    taruserrank_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RankItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RankItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(16)) goto parse_rankstart;
        break;
      }

      // optional int32 rankstart = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankstart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankstart_)));
          set_has_rankstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankcount;
        break;
      }

      // optional int32 rankcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankcount_)));
          set_has_rankcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalranksize;
        break;
      }

      // optional int32 totalranksize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalranksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalranksize_)));
          set_has_totalranksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_taruser;
        break;
      }

      // optional bytes taruser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taruser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taruser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_taruserrank;
        break;
      }

      // optional int32 taruserrank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taruserrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taruserrank_)));
          set_has_taruserrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RankItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->items(i), output);
  }

  // optional int32 rankstart = 2;
  if (has_rankstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rankstart(), output);
  }

  // optional int32 rankcount = 3;
  if (has_rankcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rankcount(), output);
  }

  // optional int32 totalranksize = 4;
  if (has_totalranksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalranksize(), output);
  }

  // optional bytes taruser = 5;
  if (has_taruser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->taruser(), output);
  }

  // optional int32 taruserrank = 6;
  if (has_taruserrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->taruserrank(), output);
  }

}

int RankItemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 rankstart = 2;
    if (has_rankstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankstart());
    }

    // optional int32 rankcount = 3;
    if (has_rankcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankcount());
    }

    // optional int32 totalranksize = 4;
    if (has_totalranksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalranksize());
    }

    // optional bytes taruser = 5;
    if (has_taruser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->taruser());
    }

    // optional int32 taruserrank = 6;
    if (has_taruserrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taruserrank());
    }

  }
  // repeated .RankItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankItemList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankItemList*>(&from));
}

void RankItemList::MergeFrom(const RankItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rankstart()) {
      set_rankstart(from.rankstart());
    }
    if (from.has_rankcount()) {
      set_rankcount(from.rankcount());
    }
    if (from.has_totalranksize()) {
      set_totalranksize(from.totalranksize());
    }
    if (from.has_taruser()) {
      set_taruser(from.taruser());
    }
    if (from.has_taruserrank()) {
      set_taruserrank(from.taruserrank());
    }
  }
}

void RankItemList::CopyFrom(const RankItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankItemList::IsInitialized() const {

  return true;
}

void RankItemList::Swap(RankItemList* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(rankstart_, other->rankstart_);
    std::swap(rankcount_, other->rankcount_);
    std::swap(totalranksize_, other->totalranksize_);
    std::swap(taruser_, other->taruser_);
    std::swap(taruserrank_, other->taruserrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankItemList::GetTypeName() const {
  return "RankItemList";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
