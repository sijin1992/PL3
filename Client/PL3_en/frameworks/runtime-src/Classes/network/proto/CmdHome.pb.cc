// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdHome.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdHome.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_CmdHome_2eproto() {
  delete GetHomeSatusReq::default_instance_;
  delete GetHomeSatusResp::default_instance_;
  delete GetResourceReq::default_instance_;
  delete GetResourceResp::default_instance_;
  delete UpgradeResLandReq::default_instance_;
  delete UpgradeResLandResp::default_instance_;
  delete RemoveResLandReq::default_instance_;
  delete RemoveResLandResp::default_instance_;
  delete CancelResBuildingReq::default_instance_;
  delete CancelResBuildingResp::default_instance_;
  delete SpeedUpBuildReq::default_instance_;
  delete SpeedUpBuildResp::default_instance_;
  delete TradeGetMoneyResp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CmdHome_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CmdHome_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_Home_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  GetHomeSatusReq::default_instance_ = new GetHomeSatusReq();
  GetHomeSatusResp::default_instance_ = new GetHomeSatusResp();
  GetResourceReq::default_instance_ = new GetResourceReq();
  GetResourceResp::default_instance_ = new GetResourceResp();
  UpgradeResLandReq::default_instance_ = new UpgradeResLandReq();
  UpgradeResLandResp::default_instance_ = new UpgradeResLandResp();
  RemoveResLandReq::default_instance_ = new RemoveResLandReq();
  RemoveResLandResp::default_instance_ = new RemoveResLandResp();
  CancelResBuildingReq::default_instance_ = new CancelResBuildingReq();
  CancelResBuildingResp::default_instance_ = new CancelResBuildingResp();
  SpeedUpBuildReq::default_instance_ = new SpeedUpBuildReq();
  SpeedUpBuildResp::default_instance_ = new SpeedUpBuildResp();
  TradeGetMoneyResp::default_instance_ = new TradeGetMoneyResp();
  GetHomeSatusReq::default_instance_->InitAsDefaultInstance();
  GetHomeSatusResp::default_instance_->InitAsDefaultInstance();
  GetResourceReq::default_instance_->InitAsDefaultInstance();
  GetResourceResp::default_instance_->InitAsDefaultInstance();
  UpgradeResLandReq::default_instance_->InitAsDefaultInstance();
  UpgradeResLandResp::default_instance_->InitAsDefaultInstance();
  RemoveResLandReq::default_instance_->InitAsDefaultInstance();
  RemoveResLandResp::default_instance_->InitAsDefaultInstance();
  CancelResBuildingReq::default_instance_->InitAsDefaultInstance();
  CancelResBuildingResp::default_instance_->InitAsDefaultInstance();
  SpeedUpBuildReq::default_instance_->InitAsDefaultInstance();
  SpeedUpBuildResp::default_instance_->InitAsDefaultInstance();
  TradeGetMoneyResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdHome_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CmdHome_2eproto_once_);
void protobuf_AddDesc_CmdHome_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CmdHome_2eproto_once_,
                 &protobuf_AddDesc_CmdHome_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdHome_2eproto {
  StaticDescriptorInitializer_CmdHome_2eproto() {
    protobuf_AddDesc_CmdHome_2eproto();
  }
} static_descriptor_initializer_CmdHome_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetHomeSatusReq::kHomeTypeFieldNumber;
#endif  // !_MSC_VER

GetHomeSatusReq::GetHomeSatusReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetHomeSatusReq::InitAsDefaultInstance() {
}

GetHomeSatusReq::GetHomeSatusReq(const GetHomeSatusReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetHomeSatusReq::SharedCtor() {
  _cached_size_ = 0;
  home_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHomeSatusReq::~GetHomeSatusReq() {
  SharedDtor();
}

void GetHomeSatusReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetHomeSatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetHomeSatusReq& GetHomeSatusReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

GetHomeSatusReq* GetHomeSatusReq::default_instance_ = NULL;

GetHomeSatusReq* GetHomeSatusReq::New() const {
  return new GetHomeSatusReq;
}

void GetHomeSatusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    home_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetHomeSatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 home_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &home_type_)));
          set_has_home_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetHomeSatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 home_type = 1;
  if (has_home_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->home_type(), output);
  }

}

int GetHomeSatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 home_type = 1;
    if (has_home_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->home_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHomeSatusReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetHomeSatusReq*>(&from));
}

void GetHomeSatusReq::MergeFrom(const GetHomeSatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_home_type()) {
      set_home_type(from.home_type());
    }
  }
}

void GetHomeSatusReq::CopyFrom(const GetHomeSatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHomeSatusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetHomeSatusReq::Swap(GetHomeSatusReq* other) {
  if (other != this) {
    std::swap(home_type_, other->home_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetHomeSatusReq::GetTypeName() const {
  return "GetHomeSatusReq";
}


// ===================================================================

#ifndef _MSC_VER
const int GetHomeSatusResp::kResultFieldNumber;
const int GetHomeSatusResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GetHomeSatusResp::GetHomeSatusResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetHomeSatusResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

GetHomeSatusResp::GetHomeSatusResp(const GetHomeSatusResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetHomeSatusResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHomeSatusResp::~GetHomeSatusResp() {
  SharedDtor();
}

void GetHomeSatusResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void GetHomeSatusResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetHomeSatusResp& GetHomeSatusResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

GetHomeSatusResp* GetHomeSatusResp::default_instance_ = NULL;

GetHomeSatusResp* GetHomeSatusResp::New() const {
  return new GetHomeSatusResp;
}

void GetHomeSatusResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetHomeSatusResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetHomeSatusResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

}

int GetHomeSatusResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHomeSatusResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetHomeSatusResp*>(&from));
}

void GetHomeSatusResp::MergeFrom(const GetHomeSatusResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
}

void GetHomeSatusResp::CopyFrom(const GetHomeSatusResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHomeSatusResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GetHomeSatusResp::Swap(GetHomeSatusResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetHomeSatusResp::GetTypeName() const {
  return "GetHomeSatusResp";
}


// ===================================================================

#ifndef _MSC_VER
const int GetResourceReq::kLandIndexFieldNumber;
#endif  // !_MSC_VER

GetResourceReq::GetResourceReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetResourceReq::InitAsDefaultInstance() {
}

GetResourceReq::GetResourceReq(const GetResourceReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetResourceReq::SharedCtor() {
  _cached_size_ = 0;
  land_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResourceReq::~GetResourceReq() {
  SharedDtor();
}

void GetResourceReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetResourceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetResourceReq& GetResourceReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

GetResourceReq* GetResourceReq::default_instance_ = NULL;

GetResourceReq* GetResourceReq::New() const {
  return new GetResourceReq;
}

void GetResourceReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetResourceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 land_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetResourceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 land_index = 1;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_index(), output);
  }

}

int GetResourceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 land_index = 1;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResourceReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetResourceReq*>(&from));
}

void GetResourceReq::MergeFrom(const GetResourceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
  }
}

void GetResourceReq::CopyFrom(const GetResourceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetResourceReq::Swap(GetResourceReq* other) {
  if (other != this) {
    std::swap(land_index_, other->land_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetResourceReq::GetTypeName() const {
  return "GetResourceReq";
}


// ===================================================================

#ifndef _MSC_VER
const int GetResourceResp::kResultFieldNumber;
const int GetResourceResp::kUserSyncFieldNumber;
const int GetResourceResp::kLandIndexFieldNumber;
const int GetResourceResp::kResourceTypeFieldNumber;
const int GetResourceResp::kResourceNumFieldNumber;
#endif  // !_MSC_VER

GetResourceResp::GetResourceResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetResourceResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

GetResourceResp::GetResourceResp(const GetResourceResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetResourceResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  land_index_ = 0;
  resource_type_ = 0;
  resource_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetResourceResp::~GetResourceResp() {
  SharedDtor();
}

void GetResourceResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void GetResourceResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetResourceResp& GetResourceResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

GetResourceResp* GetResourceResp::default_instance_ = NULL;

GetResourceResp* GetResourceResp::New() const {
  return new GetResourceResp;
}

void GetResourceResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    land_index_ = 0;
    resource_type_ = 0;
    resource_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetResourceResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_land_index;
        break;
      }

      // optional int32 land_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resource_type;
        break;
      }

      // optional int32 resource_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_type_)));
          set_has_resource_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resource_num;
        break;
      }

      // optional int32 resource_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_num_)));
          set_has_resource_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetResourceResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional int32 land_index = 3;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->land_index(), output);
  }

  // optional int32 resource_type = 4;
  if (has_resource_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resource_type(), output);
  }

  // optional int32 resource_num = 5;
  if (has_resource_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resource_num(), output);
  }

}

int GetResourceResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 land_index = 3;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

    // optional int32 resource_type = 4;
    if (has_resource_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_type());
    }

    // optional int32 resource_num = 5;
    if (has_resource_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResourceResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetResourceResp*>(&from));
}

void GetResourceResp::MergeFrom(const GetResourceResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
    if (from.has_resource_type()) {
      set_resource_type(from.resource_type());
    }
    if (from.has_resource_num()) {
      set_resource_num(from.resource_num());
    }
  }
}

void GetResourceResp::CopyFrom(const GetResourceResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResourceResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GetResourceResp::Swap(GetResourceResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(land_index_, other->land_index_);
    std::swap(resource_type_, other->resource_type_);
    std::swap(resource_num_, other->resource_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetResourceResp::GetTypeName() const {
  return "GetResourceResp";
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeResLandReq::kLandIndexFieldNumber;
const int UpgradeResLandReq::kResourceTypeFieldNumber;
#endif  // !_MSC_VER

UpgradeResLandReq::UpgradeResLandReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpgradeResLandReq::InitAsDefaultInstance() {
}

UpgradeResLandReq::UpgradeResLandReq(const UpgradeResLandReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeResLandReq::SharedCtor() {
  _cached_size_ = 0;
  land_index_ = 0;
  resource_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeResLandReq::~UpgradeResLandReq() {
  SharedDtor();
}

void UpgradeResLandReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpgradeResLandReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpgradeResLandReq& UpgradeResLandReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

UpgradeResLandReq* UpgradeResLandReq::default_instance_ = NULL;

UpgradeResLandReq* UpgradeResLandReq::New() const {
  return new UpgradeResLandReq;
}

void UpgradeResLandReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_index_ = 0;
    resource_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpgradeResLandReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 land_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resource_type;
        break;
      }

      // optional int32 resource_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_type_)));
          set_has_resource_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeResLandReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 land_index = 1;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_index(), output);
  }

  // optional int32 resource_type = 2;
  if (has_resource_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resource_type(), output);
  }

}

int UpgradeResLandReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 land_index = 1;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

    // optional int32 resource_type = 2;
    if (has_resource_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeResLandReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpgradeResLandReq*>(&from));
}

void UpgradeResLandReq::MergeFrom(const UpgradeResLandReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
    if (from.has_resource_type()) {
      set_resource_type(from.resource_type());
    }
  }
}

void UpgradeResLandReq::CopyFrom(const UpgradeResLandReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeResLandReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpgradeResLandReq::Swap(UpgradeResLandReq* other) {
  if (other != this) {
    std::swap(land_index_, other->land_index_);
    std::swap(resource_type_, other->resource_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpgradeResLandReq::GetTypeName() const {
  return "UpgradeResLandReq";
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeResLandResp::kResultFieldNumber;
const int UpgradeResLandResp::kUserSyncFieldNumber;
const int UpgradeResLandResp::kLandIndexFieldNumber;
const int UpgradeResLandResp::kResourceTypeFieldNumber;
const int UpgradeResLandResp::kBuildingTimeFieldNumber;
#endif  // !_MSC_VER

UpgradeResLandResp::UpgradeResLandResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpgradeResLandResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

UpgradeResLandResp::UpgradeResLandResp(const UpgradeResLandResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeResLandResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  land_index_ = 0;
  resource_type_ = 0;
  building_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeResLandResp::~UpgradeResLandResp() {
  SharedDtor();
}

void UpgradeResLandResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void UpgradeResLandResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpgradeResLandResp& UpgradeResLandResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

UpgradeResLandResp* UpgradeResLandResp::default_instance_ = NULL;

UpgradeResLandResp* UpgradeResLandResp::New() const {
  return new UpgradeResLandResp;
}

void UpgradeResLandResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    land_index_ = 0;
    resource_type_ = 0;
    building_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpgradeResLandResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_land_index;
        break;
      }

      // optional int32 land_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resource_type;
        break;
      }

      // optional int32 resource_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_type_)));
          set_has_resource_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_building_time;
        break;
      }

      // optional int32 building_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_time_)));
          set_has_building_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeResLandResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional int32 land_index = 3;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->land_index(), output);
  }

  // optional int32 resource_type = 4;
  if (has_resource_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resource_type(), output);
  }

  // optional int32 building_time = 5;
  if (has_building_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->building_time(), output);
  }

}

int UpgradeResLandResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 land_index = 3;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

    // optional int32 resource_type = 4;
    if (has_resource_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_type());
    }

    // optional int32 building_time = 5;
    if (has_building_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeResLandResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpgradeResLandResp*>(&from));
}

void UpgradeResLandResp::MergeFrom(const UpgradeResLandResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
    if (from.has_resource_type()) {
      set_resource_type(from.resource_type());
    }
    if (from.has_building_time()) {
      set_building_time(from.building_time());
    }
  }
}

void UpgradeResLandResp::CopyFrom(const UpgradeResLandResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeResLandResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void UpgradeResLandResp::Swap(UpgradeResLandResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(land_index_, other->land_index_);
    std::swap(resource_type_, other->resource_type_);
    std::swap(building_time_, other->building_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpgradeResLandResp::GetTypeName() const {
  return "UpgradeResLandResp";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveResLandReq::kLandIndexFieldNumber;
#endif  // !_MSC_VER

RemoveResLandReq::RemoveResLandReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RemoveResLandReq::InitAsDefaultInstance() {
}

RemoveResLandReq::RemoveResLandReq(const RemoveResLandReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveResLandReq::SharedCtor() {
  _cached_size_ = 0;
  land_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveResLandReq::~RemoveResLandReq() {
  SharedDtor();
}

void RemoveResLandReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveResLandReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveResLandReq& RemoveResLandReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

RemoveResLandReq* RemoveResLandReq::default_instance_ = NULL;

RemoveResLandReq* RemoveResLandReq::New() const {
  return new RemoveResLandReq;
}

void RemoveResLandReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RemoveResLandReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 land_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveResLandReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 land_index = 1;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_index(), output);
  }

}

int RemoveResLandReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 land_index = 1;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveResLandReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveResLandReq*>(&from));
}

void RemoveResLandReq::MergeFrom(const RemoveResLandReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
  }
}

void RemoveResLandReq::CopyFrom(const RemoveResLandReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveResLandReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveResLandReq::Swap(RemoveResLandReq* other) {
  if (other != this) {
    std::swap(land_index_, other->land_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveResLandReq::GetTypeName() const {
  return "RemoveResLandReq";
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveResLandResp::kResultFieldNumber;
const int RemoveResLandResp::kBuildingTimeFieldNumber;
#endif  // !_MSC_VER

RemoveResLandResp::RemoveResLandResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RemoveResLandResp::InitAsDefaultInstance() {
}

RemoveResLandResp::RemoveResLandResp(const RemoveResLandResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveResLandResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  building_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveResLandResp::~RemoveResLandResp() {
  SharedDtor();
}

void RemoveResLandResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RemoveResLandResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveResLandResp& RemoveResLandResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

RemoveResLandResp* RemoveResLandResp::default_instance_ = NULL;

RemoveResLandResp* RemoveResLandResp::New() const {
  return new RemoveResLandResp;
}

void RemoveResLandResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    building_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RemoveResLandResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_building_time;
        break;
      }

      // optional int32 building_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_time_)));
          set_has_building_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveResLandResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 building_time = 2;
  if (has_building_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->building_time(), output);
  }

}

int RemoveResLandResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 building_time = 2;
    if (has_building_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveResLandResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveResLandResp*>(&from));
}

void RemoveResLandResp::MergeFrom(const RemoveResLandResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_building_time()) {
      set_building_time(from.building_time());
    }
  }
}

void RemoveResLandResp::CopyFrom(const RemoveResLandResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveResLandResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveResLandResp::Swap(RemoveResLandResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(building_time_, other->building_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoveResLandResp::GetTypeName() const {
  return "RemoveResLandResp";
}


// ===================================================================

#ifndef _MSC_VER
const int CancelResBuildingReq::kLandIndexFieldNumber;
#endif  // !_MSC_VER

CancelResBuildingReq::CancelResBuildingReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CancelResBuildingReq::InitAsDefaultInstance() {
}

CancelResBuildingReq::CancelResBuildingReq(const CancelResBuildingReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CancelResBuildingReq::SharedCtor() {
  _cached_size_ = 0;
  land_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelResBuildingReq::~CancelResBuildingReq() {
  SharedDtor();
}

void CancelResBuildingReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CancelResBuildingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CancelResBuildingReq& CancelResBuildingReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

CancelResBuildingReq* CancelResBuildingReq::default_instance_ = NULL;

CancelResBuildingReq* CancelResBuildingReq::New() const {
  return new CancelResBuildingReq;
}

void CancelResBuildingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CancelResBuildingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 land_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelResBuildingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 land_index = 1;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_index(), output);
  }

}

int CancelResBuildingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 land_index = 1;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelResBuildingReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CancelResBuildingReq*>(&from));
}

void CancelResBuildingReq::MergeFrom(const CancelResBuildingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
  }
}

void CancelResBuildingReq::CopyFrom(const CancelResBuildingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResBuildingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CancelResBuildingReq::Swap(CancelResBuildingReq* other) {
  if (other != this) {
    std::swap(land_index_, other->land_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CancelResBuildingReq::GetTypeName() const {
  return "CancelResBuildingReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CancelResBuildingResp::kResultFieldNumber;
const int CancelResBuildingResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

CancelResBuildingResp::CancelResBuildingResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CancelResBuildingResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

CancelResBuildingResp::CancelResBuildingResp(const CancelResBuildingResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CancelResBuildingResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelResBuildingResp::~CancelResBuildingResp() {
  SharedDtor();
}

void CancelResBuildingResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void CancelResBuildingResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CancelResBuildingResp& CancelResBuildingResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

CancelResBuildingResp* CancelResBuildingResp::default_instance_ = NULL;

CancelResBuildingResp* CancelResBuildingResp::New() const {
  return new CancelResBuildingResp;
}

void CancelResBuildingResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CancelResBuildingResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CancelResBuildingResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

}

int CancelResBuildingResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelResBuildingResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CancelResBuildingResp*>(&from));
}

void CancelResBuildingResp::MergeFrom(const CancelResBuildingResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
}

void CancelResBuildingResp::CopyFrom(const CancelResBuildingResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResBuildingResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void CancelResBuildingResp::Swap(CancelResBuildingResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CancelResBuildingResp::GetTypeName() const {
  return "CancelResBuildingResp";
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpBuildReq::kLandIndexFieldNumber;
#endif  // !_MSC_VER

SpeedUpBuildReq::SpeedUpBuildReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpeedUpBuildReq::InitAsDefaultInstance() {
}

SpeedUpBuildReq::SpeedUpBuildReq(const SpeedUpBuildReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpBuildReq::SharedCtor() {
  _cached_size_ = 0;
  land_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpBuildReq::~SpeedUpBuildReq() {
  SharedDtor();
}

void SpeedUpBuildReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpeedUpBuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpeedUpBuildReq& SpeedUpBuildReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

SpeedUpBuildReq* SpeedUpBuildReq::default_instance_ = NULL;

SpeedUpBuildReq* SpeedUpBuildReq::New() const {
  return new SpeedUpBuildReq;
}

void SpeedUpBuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpeedUpBuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 land_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpBuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 land_index = 1;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_index(), output);
  }

}

int SpeedUpBuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 land_index = 1;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpBuildReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpeedUpBuildReq*>(&from));
}

void SpeedUpBuildReq::MergeFrom(const SpeedUpBuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
  }
}

void SpeedUpBuildReq::CopyFrom(const SpeedUpBuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpBuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SpeedUpBuildReq::Swap(SpeedUpBuildReq* other) {
  if (other != this) {
    std::swap(land_index_, other->land_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpeedUpBuildReq::GetTypeName() const {
  return "SpeedUpBuildReq";
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpBuildResp::kResultFieldNumber;
const int SpeedUpBuildResp::kUserSyncFieldNumber;
const int SpeedUpBuildResp::kLandIndexFieldNumber;
#endif  // !_MSC_VER

SpeedUpBuildResp::SpeedUpBuildResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpeedUpBuildResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

SpeedUpBuildResp::SpeedUpBuildResp(const SpeedUpBuildResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpBuildResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  land_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpBuildResp::~SpeedUpBuildResp() {
  SharedDtor();
}

void SpeedUpBuildResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void SpeedUpBuildResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpeedUpBuildResp& SpeedUpBuildResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

SpeedUpBuildResp* SpeedUpBuildResp::default_instance_ = NULL;

SpeedUpBuildResp* SpeedUpBuildResp::New() const {
  return new SpeedUpBuildResp;
}

void SpeedUpBuildResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    land_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpeedUpBuildResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_land_index;
        break;
      }

      // optional int32 land_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_land_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpBuildResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional int32 land_index = 3;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->land_index(), output);
  }

}

int SpeedUpBuildResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 land_index = 3;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpBuildResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpeedUpBuildResp*>(&from));
}

void SpeedUpBuildResp::MergeFrom(const SpeedUpBuildResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
  }
}

void SpeedUpBuildResp::CopyFrom(const SpeedUpBuildResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpBuildResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void SpeedUpBuildResp::Swap(SpeedUpBuildResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(land_index_, other->land_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpeedUpBuildResp::GetTypeName() const {
  return "SpeedUpBuildResp";
}


// ===================================================================

#ifndef _MSC_VER
const int TradeGetMoneyResp::kResultFieldNumber;
const int TradeGetMoneyResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

TradeGetMoneyResp::TradeGetMoneyResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TradeGetMoneyResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

TradeGetMoneyResp::TradeGetMoneyResp(const TradeGetMoneyResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TradeGetMoneyResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeGetMoneyResp::~TradeGetMoneyResp() {
  SharedDtor();
}

void TradeGetMoneyResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void TradeGetMoneyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TradeGetMoneyResp& TradeGetMoneyResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdHome_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdHome_2eproto();
#endif
  return *default_instance_;
}

TradeGetMoneyResp* TradeGetMoneyResp::default_instance_ = NULL;

TradeGetMoneyResp* TradeGetMoneyResp::New() const {
  return new TradeGetMoneyResp;
}

void TradeGetMoneyResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TradeGetMoneyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeGetMoneyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

}

int TradeGetMoneyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeGetMoneyResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TradeGetMoneyResp*>(&from));
}

void TradeGetMoneyResp::MergeFrom(const TradeGetMoneyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
}

void TradeGetMoneyResp::CopyFrom(const TradeGetMoneyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeGetMoneyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void TradeGetMoneyResp::Swap(TradeGetMoneyResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TradeGetMoneyResp::GetTypeName() const {
  return "TradeGetMoneyResp";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
