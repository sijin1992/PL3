// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PveInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PveInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_PveInfo_2eproto() {
  delete CheckpointInfo::default_instance_;
  delete PveInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PveInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PveInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CheckpointInfo::default_instance_ = new CheckpointInfo();
  PveInfo::default_instance_ = new PveInfo();
  CheckpointInfo::default_instance_->InitAsDefaultInstance();
  PveInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PveInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PveInfo_2eproto_once_);
void protobuf_AddDesc_PveInfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PveInfo_2eproto_once_,
                 &protobuf_AddDesc_PveInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PveInfo_2eproto {
  StaticDescriptorInitializer_PveInfo_2eproto() {
    protobuf_AddDesc_PveInfo_2eproto();
  }
} static_descriptor_initializer_PveInfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CheckpointInfo::kIdFieldNumber;
const int CheckpointInfo::kPassNumFieldNumber;
const int CheckpointInfo::kPassTimeFieldNumber;
const int CheckpointInfo::kPassStarFieldNumber;
const int CheckpointInfo::kPassNumTodayFieldNumber;
#endif  // !_MSC_VER

CheckpointInfo::CheckpointInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CheckpointInfo::InitAsDefaultInstance() {
}

CheckpointInfo::CheckpointInfo(const CheckpointInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CheckpointInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pass_num_ = 0;
  pass_time_ = 0;
  pass_star_ = 0;
  pass_num_today_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckpointInfo::~CheckpointInfo() {
  SharedDtor();
}

void CheckpointInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CheckpointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckpointInfo& CheckpointInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PveInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PveInfo_2eproto();
#endif
  return *default_instance_;
}

CheckpointInfo* CheckpointInfo::default_instance_ = NULL;

CheckpointInfo* CheckpointInfo::New() const {
  return new CheckpointInfo;
}

void CheckpointInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pass_num_ = 0;
    pass_time_ = 0;
    pass_star_ = 0;
    pass_num_today_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CheckpointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_num;
        break;
      }

      // required int32 pass_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_num_)));
          set_has_pass_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pass_time;
        break;
      }

      // required int32 pass_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_time_)));
          set_has_pass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass_star;
        break;
      }

      // required int32 pass_star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_star_)));
          set_has_pass_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pass_num_today;
        break;
      }

      // required int32 pass_num_today = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_num_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_num_today_)));
          set_has_pass_num_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckpointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 pass_num = 2;
  if (has_pass_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass_num(), output);
  }

  // required int32 pass_time = 3;
  if (has_pass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pass_time(), output);
  }

  // required int32 pass_star = 4;
  if (has_pass_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pass_star(), output);
  }

  // required int32 pass_num_today = 5;
  if (has_pass_num_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pass_num_today(), output);
  }

}

int CheckpointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 pass_num = 2;
    if (has_pass_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_num());
    }

    // required int32 pass_time = 3;
    if (has_pass_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_time());
    }

    // required int32 pass_star = 4;
    if (has_pass_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_star());
    }

    // required int32 pass_num_today = 5;
    if (has_pass_num_today()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_num_today());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckpointInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckpointInfo*>(&from));
}

void CheckpointInfo::MergeFrom(const CheckpointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pass_num()) {
      set_pass_num(from.pass_num());
    }
    if (from.has_pass_time()) {
      set_pass_time(from.pass_time());
    }
    if (from.has_pass_star()) {
      set_pass_star(from.pass_star());
    }
    if (from.has_pass_num_today()) {
      set_pass_num_today(from.pass_num_today());
    }
  }
}

void CheckpointInfo::CopyFrom(const CheckpointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CheckpointInfo::Swap(CheckpointInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pass_num_, other->pass_num_);
    std::swap(pass_time_, other->pass_time_);
    std::swap(pass_star_, other->pass_star_);
    std::swap(pass_num_today_, other->pass_num_today_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CheckpointInfo::GetTypeName() const {
  return "CheckpointInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PveInfo::kCheckpointIdFieldNumber;
const int PveInfo::kCheckpointListFieldNumber;
#endif  // !_MSC_VER

PveInfo::PveInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PveInfo::InitAsDefaultInstance() {
}

PveInfo::PveInfo(const PveInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PveInfo::SharedCtor() {
  _cached_size_ = 0;
  checkpoint_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveInfo::~PveInfo() {
  SharedDtor();
}

void PveInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PveInfo& PveInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PveInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PveInfo_2eproto();
#endif
  return *default_instance_;
}

PveInfo* PveInfo::default_instance_ = NULL;

PveInfo* PveInfo::New() const {
  return new PveInfo;
}

void PveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    checkpoint_id_ = 0;
  }
  checkpoint_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 checkpoint_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_id_)));
          set_has_checkpoint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_checkpoint_list;
        break;
      }

      // repeated .CheckpointInfo checkpoint_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkpoint_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_checkpoint_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_checkpoint_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 checkpoint_id = 1;
  if (has_checkpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->checkpoint_id(), output);
  }

  // repeated .CheckpointInfo checkpoint_list = 2;
  for (int i = 0; i < this->checkpoint_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->checkpoint_list(i), output);
  }

}

int PveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 checkpoint_id = 1;
    if (has_checkpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_id());
    }

  }
  // repeated .CheckpointInfo checkpoint_list = 2;
  total_size += 1 * this->checkpoint_list_size();
  for (int i = 0; i < this->checkpoint_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->checkpoint_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PveInfo*>(&from));
}

void PveInfo::MergeFrom(const PveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  checkpoint_list_.MergeFrom(from.checkpoint_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checkpoint_id()) {
      set_checkpoint_id(from.checkpoint_id());
    }
  }
}

void PveInfo::CopyFrom(const PveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < checkpoint_list_size(); i++) {
    if (!this->checkpoint_list(i).IsInitialized()) return false;
  }
  return true;
}

void PveInfo::Swap(PveInfo* other) {
  if (other != this) {
    std::swap(checkpoint_id_, other->checkpoint_id_);
    checkpoint_list_.Swap(&other->checkpoint_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PveInfo::GetTypeName() const {
  return "PveInfo";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
