// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PveInfo.proto

#ifndef PROTOBUF_PveInfo_2eproto__INCLUDED
#define PROTOBUF_PveInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PveInfo_2eproto();
void protobuf_AssignDesc_PveInfo_2eproto();
void protobuf_ShutdownFile_PveInfo_2eproto();

class CheckpointInfo;
class PveInfo;

// ===================================================================

class CheckpointInfo : public ::google::protobuf::MessageLite {
 public:
  CheckpointInfo();
  virtual ~CheckpointInfo();

  CheckpointInfo(const CheckpointInfo& from);

  inline CheckpointInfo& operator=(const CheckpointInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CheckpointInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CheckpointInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CheckpointInfo* other);

  // implements Message ----------------------------------------------

  CheckpointInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CheckpointInfo& from);
  void MergeFrom(const CheckpointInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 pass_num = 2;
  inline bool has_pass_num() const;
  inline void clear_pass_num();
  static const int kPassNumFieldNumber = 2;
  inline ::google::protobuf::int32 pass_num() const;
  inline void set_pass_num(::google::protobuf::int32 value);

  // required int32 pass_time = 3;
  inline bool has_pass_time() const;
  inline void clear_pass_time();
  static const int kPassTimeFieldNumber = 3;
  inline ::google::protobuf::int32 pass_time() const;
  inline void set_pass_time(::google::protobuf::int32 value);

  // required int32 pass_star = 4;
  inline bool has_pass_star() const;
  inline void clear_pass_star();
  static const int kPassStarFieldNumber = 4;
  inline ::google::protobuf::int32 pass_star() const;
  inline void set_pass_star(::google::protobuf::int32 value);

  // required int32 pass_num_today = 5;
  inline bool has_pass_num_today() const;
  inline void clear_pass_num_today();
  static const int kPassNumTodayFieldNumber = 5;
  inline ::google::protobuf::int32 pass_num_today() const;
  inline void set_pass_num_today(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CheckpointInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pass_num();
  inline void clear_has_pass_num();
  inline void set_has_pass_time();
  inline void clear_has_pass_time();
  inline void set_has_pass_star();
  inline void clear_has_pass_star();
  inline void set_has_pass_num_today();
  inline void clear_has_pass_num_today();

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pass_num_;
  ::google::protobuf::int32 pass_time_;
  ::google::protobuf::int32 pass_star_;
  ::google::protobuf::int32 pass_num_today_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PveInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PveInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_PveInfo_2eproto();
  friend void protobuf_ShutdownFile_PveInfo_2eproto();

  void InitAsDefaultInstance();
  static CheckpointInfo* default_instance_;
};
// -------------------------------------------------------------------

class PveInfo : public ::google::protobuf::MessageLite {
 public:
  PveInfo();
  virtual ~PveInfo();

  PveInfo(const PveInfo& from);

  inline PveInfo& operator=(const PveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const PveInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PveInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PveInfo* other);

  // implements Message ----------------------------------------------

  PveInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PveInfo& from);
  void MergeFrom(const PveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 checkpoint_id = 1;
  inline bool has_checkpoint_id() const;
  inline void clear_checkpoint_id();
  static const int kCheckpointIdFieldNumber = 1;
  inline ::google::protobuf::int32 checkpoint_id() const;
  inline void set_checkpoint_id(::google::protobuf::int32 value);

  // repeated .CheckpointInfo checkpoint_list = 2;
  inline int checkpoint_list_size() const;
  inline void clear_checkpoint_list();
  static const int kCheckpointListFieldNumber = 2;
  inline const ::CheckpointInfo& checkpoint_list(int index) const;
  inline ::CheckpointInfo* mutable_checkpoint_list(int index);
  inline ::CheckpointInfo* add_checkpoint_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CheckpointInfo >&
      checkpoint_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CheckpointInfo >*
      mutable_checkpoint_list();

  // @@protoc_insertion_point(class_scope:PveInfo)
 private:
  inline void set_has_checkpoint_id();
  inline void clear_has_checkpoint_id();

  ::google::protobuf::RepeatedPtrField< ::CheckpointInfo > checkpoint_list_;
  ::google::protobuf::int32 checkpoint_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PveInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PveInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_PveInfo_2eproto();
  friend void protobuf_ShutdownFile_PveInfo_2eproto();

  void InitAsDefaultInstance();
  static PveInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CheckpointInfo

// required int32 id = 1;
inline bool CheckpointInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckpointInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckpointInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckpointInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CheckpointInfo::id() const {
  return id_;
}
inline void CheckpointInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 pass_num = 2;
inline bool CheckpointInfo::has_pass_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckpointInfo::set_has_pass_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckpointInfo::clear_has_pass_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckpointInfo::clear_pass_num() {
  pass_num_ = 0;
  clear_has_pass_num();
}
inline ::google::protobuf::int32 CheckpointInfo::pass_num() const {
  return pass_num_;
}
inline void CheckpointInfo::set_pass_num(::google::protobuf::int32 value) {
  set_has_pass_num();
  pass_num_ = value;
}

// required int32 pass_time = 3;
inline bool CheckpointInfo::has_pass_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckpointInfo::set_has_pass_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckpointInfo::clear_has_pass_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckpointInfo::clear_pass_time() {
  pass_time_ = 0;
  clear_has_pass_time();
}
inline ::google::protobuf::int32 CheckpointInfo::pass_time() const {
  return pass_time_;
}
inline void CheckpointInfo::set_pass_time(::google::protobuf::int32 value) {
  set_has_pass_time();
  pass_time_ = value;
}

// required int32 pass_star = 4;
inline bool CheckpointInfo::has_pass_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckpointInfo::set_has_pass_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckpointInfo::clear_has_pass_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckpointInfo::clear_pass_star() {
  pass_star_ = 0;
  clear_has_pass_star();
}
inline ::google::protobuf::int32 CheckpointInfo::pass_star() const {
  return pass_star_;
}
inline void CheckpointInfo::set_pass_star(::google::protobuf::int32 value) {
  set_has_pass_star();
  pass_star_ = value;
}

// required int32 pass_num_today = 5;
inline bool CheckpointInfo::has_pass_num_today() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CheckpointInfo::set_has_pass_num_today() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CheckpointInfo::clear_has_pass_num_today() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CheckpointInfo::clear_pass_num_today() {
  pass_num_today_ = 0;
  clear_has_pass_num_today();
}
inline ::google::protobuf::int32 CheckpointInfo::pass_num_today() const {
  return pass_num_today_;
}
inline void CheckpointInfo::set_pass_num_today(::google::protobuf::int32 value) {
  set_has_pass_num_today();
  pass_num_today_ = value;
}

// -------------------------------------------------------------------

// PveInfo

// required int32 checkpoint_id = 1;
inline bool PveInfo::has_checkpoint_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PveInfo::set_has_checkpoint_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PveInfo::clear_has_checkpoint_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PveInfo::clear_checkpoint_id() {
  checkpoint_id_ = 0;
  clear_has_checkpoint_id();
}
inline ::google::protobuf::int32 PveInfo::checkpoint_id() const {
  return checkpoint_id_;
}
inline void PveInfo::set_checkpoint_id(::google::protobuf::int32 value) {
  set_has_checkpoint_id();
  checkpoint_id_ = value;
}

// repeated .CheckpointInfo checkpoint_list = 2;
inline int PveInfo::checkpoint_list_size() const {
  return checkpoint_list_.size();
}
inline void PveInfo::clear_checkpoint_list() {
  checkpoint_list_.Clear();
}
inline const ::CheckpointInfo& PveInfo::checkpoint_list(int index) const {
  return checkpoint_list_.Get(index);
}
inline ::CheckpointInfo* PveInfo::mutable_checkpoint_list(int index) {
  return checkpoint_list_.Mutable(index);
}
inline ::CheckpointInfo* PveInfo::add_checkpoint_list() {
  return checkpoint_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CheckpointInfo >&
PveInfo::checkpoint_list() const {
  return checkpoint_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CheckpointInfo >*
PveInfo::mutable_checkpoint_list() {
  return &checkpoint_list_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PveInfo_2eproto__INCLUDED
