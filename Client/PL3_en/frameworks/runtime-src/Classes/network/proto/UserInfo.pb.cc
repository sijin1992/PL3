// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_UserInfo_2eproto() {
  delete TimeStamp::default_instance_;
  delete Lineup::default_instance_;
  delete UserInfo::default_instance_;
  delete UserInfo_BlockInfo::default_instance_;
  delete NewHandGiftBag::default_instance_;
  delete NewHandGiftBagData::default_instance_;
  delete GiftBag::default_instance_;
  delete NextGiftBagData::default_instance_;
  delete TradeData::default_instance_;
  delete BlueprintDevelopInfo::default_instance_;
  delete ShipLotteryInfo::default_instance_;
  delete ShipLotteryData::default_instance_;
  delete ShopGoods::default_instance_;
  delete ShopData::default_instance_;
  delete Point::default_instance_;
  delete DailyData::default_instance_;
  delete AchievementData::default_instance_;
  delete TaskInfo::default_instance_;
  delete BuildQueue::default_instance_;
  delete TechContributeData::default_instance_;
  delete GroupPVECheckpoint::default_instance_;
  delete GroupData::default_instance_;
  delete TechnologyData::default_instance_;
  delete TechnologyInfo::default_instance_;
  delete ArenaRank::default_instance_;
  delete ArenaData::default_instance_;
  delete FriendFamiliarity::default_instance_;
  delete FriendsData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_UserInfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_UserInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_Weapon_2eproto();
  ::protobuf_AddDesc_Equip_2eproto();
  ::protobuf_AddDesc_Home_2eproto();
  ::protobuf_AddDesc_Building_2eproto();
  ::protobuf_AddDesc_Trial_2eproto();
  ::protobuf_AddDesc_Stage_2eproto();
  ::protobuf_AddDesc_Activity_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  TimeStamp::default_instance_ = new TimeStamp();
  Lineup::default_instance_ = new Lineup();
  UserInfo::default_instance_ = new UserInfo();
  UserInfo_BlockInfo::default_instance_ = new UserInfo_BlockInfo();
  NewHandGiftBag::default_instance_ = new NewHandGiftBag();
  NewHandGiftBagData::default_instance_ = new NewHandGiftBagData();
  GiftBag::default_instance_ = new GiftBag();
  NextGiftBagData::default_instance_ = new NextGiftBagData();
  TradeData::default_instance_ = new TradeData();
  BlueprintDevelopInfo::default_instance_ = new BlueprintDevelopInfo();
  ShipLotteryInfo::default_instance_ = new ShipLotteryInfo();
  ShipLotteryData::default_instance_ = new ShipLotteryData();
  ShopGoods::default_instance_ = new ShopGoods();
  ShopData::default_instance_ = new ShopData();
  Point::default_instance_ = new Point();
  DailyData::default_instance_ = new DailyData();
  AchievementData::default_instance_ = new AchievementData();
  TaskInfo::default_instance_ = new TaskInfo();
  BuildQueue::default_instance_ = new BuildQueue();
  TechContributeData::default_instance_ = new TechContributeData();
  GroupPVECheckpoint::default_instance_ = new GroupPVECheckpoint();
  GroupData::default_instance_ = new GroupData();
  TechnologyData::default_instance_ = new TechnologyData();
  TechnologyInfo::default_instance_ = new TechnologyInfo();
  ArenaRank::default_instance_ = new ArenaRank();
  ArenaData::default_instance_ = new ArenaData();
  FriendFamiliarity::default_instance_ = new FriendFamiliarity();
  FriendsData::default_instance_ = new FriendsData();
  TimeStamp::default_instance_->InitAsDefaultInstance();
  Lineup::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserInfo_BlockInfo::default_instance_->InitAsDefaultInstance();
  NewHandGiftBag::default_instance_->InitAsDefaultInstance();
  NewHandGiftBagData::default_instance_->InitAsDefaultInstance();
  GiftBag::default_instance_->InitAsDefaultInstance();
  NextGiftBagData::default_instance_->InitAsDefaultInstance();
  TradeData::default_instance_->InitAsDefaultInstance();
  BlueprintDevelopInfo::default_instance_->InitAsDefaultInstance();
  ShipLotteryInfo::default_instance_->InitAsDefaultInstance();
  ShipLotteryData::default_instance_->InitAsDefaultInstance();
  ShopGoods::default_instance_->InitAsDefaultInstance();
  ShopData::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  DailyData::default_instance_->InitAsDefaultInstance();
  AchievementData::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  BuildQueue::default_instance_->InitAsDefaultInstance();
  TechContributeData::default_instance_->InitAsDefaultInstance();
  GroupPVECheckpoint::default_instance_->InitAsDefaultInstance();
  GroupData::default_instance_->InitAsDefaultInstance();
  TechnologyData::default_instance_->InitAsDefaultInstance();
  TechnologyInfo::default_instance_->InitAsDefaultInstance();
  ArenaRank::default_instance_->InitAsDefaultInstance();
  ArenaData::default_instance_->InitAsDefaultInstance();
  FriendFamiliarity::default_instance_->InitAsDefaultInstance();
  FriendsData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserInfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_UserInfo_2eproto_once_);
void protobuf_AddDesc_UserInfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_UserInfo_2eproto_once_,
                 &protobuf_AddDesc_UserInfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserInfo_2eproto {
  StaticDescriptorInitializer_UserInfo_2eproto() {
    protobuf_AddDesc_UserInfo_2eproto();
  }
} static_descriptor_initializer_UserInfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int TimeStamp::kLast0AmDayFieldNumber;
const int TimeStamp::kRegistTimeFieldNumber;
const int TimeStamp::kStrengthTimerFieldNumber;
const int TimeStamp::kGmailFieldNumber;
const int TimeStamp::kTodayOnlineTimeFieldNumber;
const int TimeStamp::kRegistAidAwardTimeFieldNumber;
const int TimeStamp::kCardEndTimeFieldNumber;
#endif  // !_MSC_VER

TimeStamp::TimeStamp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeStamp::InitAsDefaultInstance() {
}

TimeStamp::TimeStamp(const TimeStamp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeStamp::SharedCtor() {
  _cached_size_ = 0;
  last_0am_day_ = GOOGLE_LONGLONG(0);
  regist_time_ = GOOGLE_LONGLONG(0);
  strength_timer_ = GOOGLE_LONGLONG(0);
  gmail_ = 0;
  today_online_time_ = GOOGLE_LONGLONG(0);
  regist_aid_award_time_ = GOOGLE_LONGLONG(0);
  card_end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeStamp::~TimeStamp() {
  SharedDtor();
}

void TimeStamp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeStamp& TimeStamp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

TimeStamp* TimeStamp::default_instance_ = NULL;

TimeStamp* TimeStamp::New() const {
  return new TimeStamp;
}

void TimeStamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_0am_day_ = GOOGLE_LONGLONG(0);
    regist_time_ = GOOGLE_LONGLONG(0);
    strength_timer_ = GOOGLE_LONGLONG(0);
    gmail_ = 0;
    today_online_time_ = GOOGLE_LONGLONG(0);
    regist_aid_award_time_ = GOOGLE_LONGLONG(0);
    card_end_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_0am_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_0am_day_)));
          set_has_last_0am_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regist_time;
        break;
      }

      // required int64 regist_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regist_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &regist_time_)));
          set_has_regist_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strength_timer;
        break;
      }

      // required int64 strength_timer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &strength_timer_)));
          set_has_strength_timer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gmail;
        break;
      }

      // optional int32 gmail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gmail_)));
          set_has_gmail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_online_time;
        break;
      }

      // optional int64 today_online_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &today_online_time_)));
          set_has_today_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_regist_aid_award_time;
        break;
      }

      // optional int64 regist_aid_award_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regist_aid_award_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &regist_aid_award_time_)));
          set_has_regist_aid_award_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_card_end_time;
        break;
      }

      // optional int64 card_end_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &card_end_time_)));
          set_has_card_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 last_0am_day = 1;
  if (has_last_0am_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_0am_day(), output);
  }

  // required int64 regist_time = 2;
  if (has_regist_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->regist_time(), output);
  }

  // required int64 strength_timer = 3;
  if (has_strength_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->strength_timer(), output);
  }

  // optional int32 gmail = 4;
  if (has_gmail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gmail(), output);
  }

  // optional int64 today_online_time = 5;
  if (has_today_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->today_online_time(), output);
  }

  // optional int64 regist_aid_award_time = 6;
  if (has_regist_aid_award_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->regist_aid_award_time(), output);
  }

  // optional int64 card_end_time = 7;
  if (has_card_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->card_end_time(), output);
  }

}

int TimeStamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 last_0am_day = 1;
    if (has_last_0am_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_0am_day());
    }

    // required int64 regist_time = 2;
    if (has_regist_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->regist_time());
    }

    // required int64 strength_timer = 3;
    if (has_strength_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->strength_timer());
    }

    // optional int32 gmail = 4;
    if (has_gmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gmail());
    }

    // optional int64 today_online_time = 5;
    if (has_today_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->today_online_time());
    }

    // optional int64 regist_aid_award_time = 6;
    if (has_regist_aid_award_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->regist_aid_award_time());
    }

    // optional int64 card_end_time = 7;
    if (has_card_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->card_end_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeStamp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeStamp*>(&from));
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_0am_day()) {
      set_last_0am_day(from.last_0am_day());
    }
    if (from.has_regist_time()) {
      set_regist_time(from.regist_time());
    }
    if (from.has_strength_timer()) {
      set_strength_timer(from.strength_timer());
    }
    if (from.has_gmail()) {
      set_gmail(from.gmail());
    }
    if (from.has_today_online_time()) {
      set_today_online_time(from.today_online_time());
    }
    if (from.has_regist_aid_award_time()) {
      set_regist_aid_award_time(from.regist_aid_award_time());
    }
    if (from.has_card_end_time()) {
      set_card_end_time(from.card_end_time());
    }
  }
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TimeStamp::Swap(TimeStamp* other) {
  if (other != this) {
    std::swap(last_0am_day_, other->last_0am_day_);
    std::swap(regist_time_, other->regist_time_);
    std::swap(strength_timer_, other->strength_timer_);
    std::swap(gmail_, other->gmail_);
    std::swap(today_online_time_, other->today_online_time_);
    std::swap(regist_aid_award_time_, other->regist_aid_award_time_);
    std::swap(card_end_time_, other->card_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeStamp::GetTypeName() const {
  return "TimeStamp";
}


// ===================================================================

#ifndef _MSC_VER
const int Lineup::kShipGuidListFieldNumber;
const int Lineup::kLineNameFieldNumber;
#endif  // !_MSC_VER

Lineup::Lineup()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Lineup::InitAsDefaultInstance() {
}

Lineup::Lineup(const Lineup& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Lineup::SharedCtor() {
  _cached_size_ = 0;
  line_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lineup::~Lineup() {
  SharedDtor();
}

void Lineup::SharedDtor() {
  if (line_name_ != &::google::protobuf::internal::kEmptyString) {
    delete line_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Lineup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lineup& Lineup::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

Lineup* Lineup::default_instance_ = NULL;

Lineup* Lineup::New() const {
  return new Lineup;
}

void Lineup::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_line_name()) {
      if (line_name_ != &::google::protobuf::internal::kEmptyString) {
        line_name_->clear();
      }
    }
  }
  ship_guid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Lineup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ship_guid_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_guid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ship_guid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ship_guid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ship_guid_list;
        if (input->ExpectTag(18)) goto parse_line_name;
        break;
      }

      // optional string line_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lineup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ship_guid_list = 1;
  for (int i = 0; i < this->ship_guid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ship_guid_list(i), output);
  }

  // optional string line_name = 2;
  if (has_line_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->line_name(), output);
  }

}

int Lineup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string line_name = 2;
    if (has_line_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line_name());
    }

  }
  // repeated int32 ship_guid_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ship_guid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ship_guid_list(i));
    }
    total_size += 1 * this->ship_guid_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lineup::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lineup*>(&from));
}

void Lineup::MergeFrom(const Lineup& from) {
  GOOGLE_CHECK_NE(&from, this);
  ship_guid_list_.MergeFrom(from.ship_guid_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_line_name()) {
      set_line_name(from.line_name());
    }
  }
}

void Lineup::CopyFrom(const Lineup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lineup::IsInitialized() const {

  return true;
}

void Lineup::Swap(Lineup* other) {
  if (other != this) {
    ship_guid_list_.Swap(&other->ship_guid_list_);
    std::swap(line_name_, other->line_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Lineup::GetTypeName() const {
  return "Lineup";
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo_BlockInfo::kTypeFieldNumber;
const int UserInfo_BlockInfo::kStampFieldNumber;
#endif  // !_MSC_VER

UserInfo_BlockInfo::UserInfo_BlockInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserInfo_BlockInfo::InitAsDefaultInstance() {
}

UserInfo_BlockInfo::UserInfo_BlockInfo(const UserInfo_BlockInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo_BlockInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  stamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo_BlockInfo::~UserInfo_BlockInfo() {
  SharedDtor();
}

void UserInfo_BlockInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserInfo_BlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserInfo_BlockInfo& UserInfo_BlockInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

UserInfo_BlockInfo* UserInfo_BlockInfo::default_instance_ = NULL;

UserInfo_BlockInfo* UserInfo_BlockInfo::New() const {
  return new UserInfo_BlockInfo;
}

void UserInfo_BlockInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    stamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserInfo_BlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamp;
        break;
      }

      // optional int64 stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo_BlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 stamp = 2;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stamp(), output);
  }

}

int UserInfo_BlockInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 stamp = 2;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo_BlockInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserInfo_BlockInfo*>(&from));
}

void UserInfo_BlockInfo::MergeFrom(const UserInfo_BlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
  }
}

void UserInfo_BlockInfo::CopyFrom(const UserInfo_BlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo_BlockInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserInfo_BlockInfo::Swap(UserInfo_BlockInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(stamp_, other->stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserInfo_BlockInfo::GetTypeName() const {
  return "UserInfo.BlockInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserInfo::kUserNameFieldNumber;
const int UserInfo::kNicknameFieldNumber;
const int UserInfo::kAccountFieldNumber;
const int UserInfo::kIconIdFieldNumber;
const int UserInfo::kLineupFieldNumber;
const int UserInfo::kInitShipIndexFieldNumber;
const int UserInfo::kAidAwardIndexFieldNumber;
const int UserInfo::kStrengthFieldNumber;
const int UserInfo::kStrengthBuyTimesFieldNumber;
const int UserInfo::kResFieldNumber;
const int UserInfo::kMoneyFieldNumber;
const int UserInfo::kVipLevelFieldNumber;
const int UserInfo::kExpFieldNumber;
const int UserInfo::kLevelFieldNumber;
const int UserInfo::kIpFieldNumber;
const int UserInfo::kMccFieldNumber;
const int UserInfo::kClientVersionFieldNumber;
const int UserInfo::kEquipListFieldNumber;
const int UserInfo::kGemListFieldNumber;
const int UserInfo::kWeaponListFieldNumber;
const int UserInfo::kGroupDataFieldNumber;
const int UserInfo::kBuildQueueListFieldNumber;
const int UserInfo::kBuildingListFieldNumber;
const int UserInfo::kStageDataFieldNumber;
const int UserInfo::kHomeInfoFieldNumber;
const int UserInfo::kTechDataFieldNumber;
const int UserInfo::kTrialDataFieldNumber;
const int UserInfo::kArenaDataFieldNumber;
const int UserInfo::kFriendsDataFieldNumber;
const int UserInfo::kTaskListFieldNumber;
const int UserInfo::kDailyDataFieldNumber;
const int UserInfo::kBlueprintListFieldNumber;
const int UserInfo::kAchievementDataFieldNumber;
const int UserInfo::kShopDataFieldNumber;
const int UserInfo::kShipLotteryDataFieldNumber;
const int UserInfo::kActivityListFieldNumber;
const int UserInfo::kStateFieldNumber;
const int UserInfo::kPresetLineupListFieldNumber;
const int UserInfo::kTradeDataFieldNumber;
const int UserInfo::kForgeEquipListFieldNumber;
const int UserInfo::kNewHandGiftBagDataFieldNumber;
const int UserInfo::kGiftBagListFieldNumber;
const int UserInfo::kVipAwardListFieldNumber;
const int UserInfo::kVipPackListFieldNumber;
const int UserInfo::kNextGiftBagDataFieldNumber;
const int UserInfo::kShipEnergyEndTimeFieldNumber;
const int UserInfo::kShipEnergyTimeLockFieldNumber;
const int UserInfo::kGmLevelFieldNumber;
const int UserInfo::kBlockedFieldNumber;
const int UserInfo::kTimestampFieldNumber;
const int UserInfo::kDataVersionFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_data_ = const_cast< ::GroupData*>(
      ::GroupData::internal_default_instance());
#else
  group_data_ = const_cast< ::GroupData*>(&::GroupData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stage_data_ = const_cast< ::StageData*>(
      ::StageData::internal_default_instance());
#else
  stage_data_ = const_cast< ::StageData*>(&::StageData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  home_info_ = const_cast< ::HomeSystemInfo*>(
      ::HomeSystemInfo::internal_default_instance());
#else
  home_info_ = const_cast< ::HomeSystemInfo*>(&::HomeSystemInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tech_data_ = const_cast< ::TechnologyData*>(
      ::TechnologyData::internal_default_instance());
#else
  tech_data_ = const_cast< ::TechnologyData*>(&::TechnologyData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  trial_data_ = const_cast< ::TrialData*>(
      ::TrialData::internal_default_instance());
#else
  trial_data_ = const_cast< ::TrialData*>(&::TrialData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arena_data_ = const_cast< ::ArenaData*>(
      ::ArenaData::internal_default_instance());
#else
  arena_data_ = const_cast< ::ArenaData*>(&::ArenaData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friends_data_ = const_cast< ::FriendsData*>(
      ::FriendsData::internal_default_instance());
#else
  friends_data_ = const_cast< ::FriendsData*>(&::FriendsData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  daily_data_ = const_cast< ::DailyData*>(
      ::DailyData::internal_default_instance());
#else
  daily_data_ = const_cast< ::DailyData*>(&::DailyData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  achievement_data_ = const_cast< ::AchievementData*>(
      ::AchievementData::internal_default_instance());
#else
  achievement_data_ = const_cast< ::AchievementData*>(&::AchievementData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  shop_data_ = const_cast< ::ShopData*>(
      ::ShopData::internal_default_instance());
#else
  shop_data_ = const_cast< ::ShopData*>(&::ShopData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ship_lottery_data_ = const_cast< ::ShipLotteryData*>(
      ::ShipLotteryData::internal_default_instance());
#else
  ship_lottery_data_ = const_cast< ::ShipLotteryData*>(&::ShipLotteryData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  trade_data_ = const_cast< ::TradeData*>(
      ::TradeData::internal_default_instance());
#else
  trade_data_ = const_cast< ::TradeData*>(&::TradeData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  new_hand_gift_bag_data_ = const_cast< ::NewHandGiftBagData*>(
      ::NewHandGiftBagData::internal_default_instance());
#else
  new_hand_gift_bag_data_ = const_cast< ::NewHandGiftBagData*>(&::NewHandGiftBagData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  next_gift_bag_data_ = const_cast< ::NextGiftBagData*>(
      ::NextGiftBagData::internal_default_instance());
#else
  next_gift_bag_data_ = const_cast< ::NextGiftBagData*>(&::NextGiftBagData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  blocked_ = const_cast< ::UserInfo_BlockInfo*>(
      ::UserInfo_BlockInfo::internal_default_instance());
#else
  blocked_ = const_cast< ::UserInfo_BlockInfo*>(&::UserInfo_BlockInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  timestamp_ = const_cast< ::TimeStamp*>(
      ::TimeStamp::internal_default_instance());
#else
  timestamp_ = const_cast< ::TimeStamp*>(&::TimeStamp::default_instance());
#endif
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_id_ = 0;
  init_ship_index_ = 0;
  aid_award_index_ = 0;
  strength_ = 0;
  strength_buy_times_ = 0;
  money_ = 0;
  vip_level_ = 0;
  exp_ = 0;
  level_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mcc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_data_ = NULL;
  stage_data_ = NULL;
  home_info_ = NULL;
  tech_data_ = NULL;
  trial_data_ = NULL;
  arena_data_ = NULL;
  friends_data_ = NULL;
  daily_data_ = NULL;
  achievement_data_ = NULL;
  shop_data_ = NULL;
  ship_lottery_data_ = NULL;
  state_ = 0;
  trade_data_ = NULL;
  new_hand_gift_bag_data_ = NULL;
  next_gift_bag_data_ = NULL;
  ship_energy_end_time_ = GOOGLE_LONGLONG(0);
  ship_energy_time_lock_ = 0;
  gm_level_ = 0;
  blocked_ = NULL;
  timestamp_ = NULL;
  data_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (mcc_ != &::google::protobuf::internal::kEmptyString) {
    delete mcc_;
  }
  if (client_version_ != &::google::protobuf::internal::kEmptyString) {
    delete client_version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete group_data_;
    delete stage_data_;
    delete home_info_;
    delete tech_data_;
    delete trial_data_;
    delete arena_data_;
    delete friends_data_;
    delete daily_data_;
    delete achievement_data_;
    delete shop_data_;
    delete ship_lottery_data_;
    delete trade_data_;
    delete new_hand_gift_bag_data_;
    delete next_gift_bag_data_;
    delete blocked_;
    delete timestamp_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserInfo& UserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    icon_id_ = 0;
    init_ship_index_ = 0;
    aid_award_index_ = 0;
    strength_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    strength_buy_times_ = 0;
    money_ = 0;
    vip_level_ = 0;
    exp_ = 0;
    level_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_mcc()) {
      if (mcc_ != &::google::protobuf::internal::kEmptyString) {
        mcc_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_client_version()) {
      if (client_version_ != &::google::protobuf::internal::kEmptyString) {
        client_version_->clear();
      }
    }
    if (has_group_data()) {
      if (group_data_ != NULL) group_data_->::GroupData::Clear();
    }
    if (has_stage_data()) {
      if (stage_data_ != NULL) stage_data_->::StageData::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_home_info()) {
      if (home_info_ != NULL) home_info_->::HomeSystemInfo::Clear();
    }
    if (has_tech_data()) {
      if (tech_data_ != NULL) tech_data_->::TechnologyData::Clear();
    }
    if (has_trial_data()) {
      if (trial_data_ != NULL) trial_data_->::TrialData::Clear();
    }
    if (has_arena_data()) {
      if (arena_data_ != NULL) arena_data_->::ArenaData::Clear();
    }
    if (has_friends_data()) {
      if (friends_data_ != NULL) friends_data_->::FriendsData::Clear();
    }
    if (has_daily_data()) {
      if (daily_data_ != NULL) daily_data_->::DailyData::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_achievement_data()) {
      if (achievement_data_ != NULL) achievement_data_->::AchievementData::Clear();
    }
    if (has_shop_data()) {
      if (shop_data_ != NULL) shop_data_->::ShopData::Clear();
    }
    if (has_ship_lottery_data()) {
      if (ship_lottery_data_ != NULL) ship_lottery_data_->::ShipLotteryData::Clear();
    }
    state_ = 0;
    if (has_trade_data()) {
      if (trade_data_ != NULL) trade_data_->::TradeData::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_new_hand_gift_bag_data()) {
      if (new_hand_gift_bag_data_ != NULL) new_hand_gift_bag_data_->::NewHandGiftBagData::Clear();
    }
    if (has_next_gift_bag_data()) {
      if (next_gift_bag_data_ != NULL) next_gift_bag_data_->::NextGiftBagData::Clear();
    }
    ship_energy_end_time_ = GOOGLE_LONGLONG(0);
    ship_energy_time_lock_ = 0;
    gm_level_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_blocked()) {
      if (blocked_ != NULL) blocked_->::UserInfo_BlockInfo::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::TimeStamp::Clear();
    }
    data_version_ = 0;
  }
  lineup_.Clear();
  res_.Clear();
  equip_list_.Clear();
  gem_list_.Clear();
  weapon_list_.Clear();
  build_queue_list_.Clear();
  building_list_.Clear();
  task_list_.Clear();
  blueprint_list_.Clear();
  activity_list_.Clear();
  preset_lineup_list_.Clear();
  forge_equip_list_.Clear();
  gift_bag_list_.Clear();
  vip_award_list_.Clear();
  vip_pack_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon_id;
        break;
      }

      // optional int32 icon_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lineup;
        if (input->ExpectTag(48)) goto parse_init_ship_index;
        break;
      }

      // optional int32 init_ship_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_ship_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_ship_index_)));
          set_has_init_ship_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_aid_award_index;
        break;
      }

      // optional int32 aid_award_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aid_award_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aid_award_index_)));
          set_has_aid_award_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_strength;
        break;
      }

      // optional int32 strength = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_strength_buy_times;
        break;
      }

      // optional int32 strength_buy_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_buy_times_)));
          set_has_strength_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_res;
        break;
      }

      // repeated int64 res = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80, input, this->mutable_res())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_res())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_res;
        if (input->ExpectTag(88)) goto parse_money;
        break;
      }

      // optional int32 money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_exp;
        break;
      }

      // optional int32 exp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_level;
        break;
      }

      // optional int32 level = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ip;
        break;
      }

      // optional string ip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_mcc;
        break;
      }

      // optional string mcc = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mcc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_client_version;
        break;
      }

      // optional string client_version = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_equip_list;
        break;
      }

      // repeated .Equip equip_list = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_equip_list;
        if (input->ExpectTag(154)) goto parse_gem_list;
        break;
      }

      // repeated .Gem gem_list = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gem_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_gem_list;
        if (input->ExpectTag(162)) goto parse_weapon_list;
        break;
      }

      // repeated .Weapon weapon_list = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_weapon_list;
        if (input->ExpectTag(170)) goto parse_group_data;
        break;
      }

      // optional .GroupData group_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_build_queue_list;
        break;
      }

      // repeated .BuildQueue build_queue_list = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build_queue_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_build_queue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_build_queue_list;
        if (input->ExpectTag(186)) goto parse_building_list;
        break;
      }

      // repeated .BuildingInfo building_list = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_building_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_building_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_building_list;
        if (input->ExpectTag(194)) goto parse_stage_data;
        break;
      }

      // optional .StageData stage_data = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_home_info;
        break;
      }

      // optional .HomeSystemInfo home_info = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_home_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_home_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_tech_data;
        break;
      }

      // optional .TechnologyData tech_data = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tech_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tech_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_trial_data;
        break;
      }

      // optional .TrialData trial_data = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trial_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trial_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_arena_data;
        break;
      }

      // optional .ArenaData arena_data = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_friends_data;
        break;
      }

      // optional .FriendsData friends_data = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_task_list;
        break;
      }

      // repeated .TaskInfo task_list = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_task_list;
        if (input->ExpectTag(250)) goto parse_daily_data;
        break;
      }

      // optional .DailyData daily_data = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_blueprint_list;
        break;
      }

      // repeated .BlueprintDevelopInfo blueprint_list = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueprint_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blueprint_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_blueprint_list;
        if (input->ExpectTag(266)) goto parse_achievement_data;
        break;
      }

      // optional .AchievementData achievement_data = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievement_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_shop_data;
        break;
      }

      // optional .ShopData shop_data = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_ship_lottery_data;
        break;
      }

      // optional .ShipLotteryData ship_lottery_data = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_lottery_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ship_lottery_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_activity_list;
        break;
      }

      // repeated .Activity activity_list = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_activity_list;
        if (input->ExpectTag(304)) goto parse_state;
        break;
      }

      // optional int32 state = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_preset_lineup_list;
        break;
      }

      // repeated .Lineup preset_lineup_list = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preset_lineup_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preset_lineup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_preset_lineup_list;
        if (input->ExpectTag(322)) goto parse_trade_data;
        break;
      }

      // optional .TradeData trade_data = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trade_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trade_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_forge_equip_list;
        break;
      }

      // repeated .ForgeEquip forge_equip_list = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forge_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forge_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_forge_equip_list;
        if (input->ExpectTag(338)) goto parse_new_hand_gift_bag_data;
        break;
      }

      // optional .NewHandGiftBagData new_hand_gift_bag_data = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_hand_gift_bag_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_hand_gift_bag_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_gift_bag_list;
        break;
      }

      // repeated .GiftBag gift_bag_list = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_bag_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift_bag_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_gift_bag_list;
        if (input->ExpectTag(352)) goto parse_vip_award_list;
        break;
      }

      // repeated int32 vip_award_list = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_award_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 352, input, this->mutable_vip_award_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vip_award_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_vip_award_list;
        if (input->ExpectTag(360)) goto parse_vip_pack_list;
        break;
      }

      // repeated int32 vip_pack_list = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_pack_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 360, input, this->mutable_vip_pack_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vip_pack_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_vip_pack_list;
        if (input->ExpectTag(370)) goto parse_next_gift_bag_data;
        break;
      }

      // optional .NextGiftBagData next_gift_bag_data = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_gift_bag_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_gift_bag_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_ship_energy_end_time;
        break;
      }

      // optional int64 ship_energy_end_time = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_energy_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ship_energy_end_time_)));
          set_has_ship_energy_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_ship_energy_time_lock;
        break;
      }

      // optional int32 ship_energy_time_lock = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_energy_time_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_energy_time_lock_)));
          set_has_ship_energy_time_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(776)) goto parse_gm_level;
        break;
      }

      // optional int32 gm_level = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gm_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gm_level_)));
          set_has_gm_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(786)) goto parse_blocked;
        break;
      }

      // optional .UserInfo.BlockInfo blocked = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocked()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(794)) goto parse_timestamp;
        break;
      }

      // optional .TimeStamp timestamp = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_data_version;
        break;
      }

      // optional int32 data_version = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_version_)));
          set_has_data_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional int32 icon_id = 4;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icon_id(), output);
  }

  // repeated int32 lineup = 5;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->lineup(i), output);
  }

  // optional int32 init_ship_index = 6;
  if (has_init_ship_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->init_ship_index(), output);
  }

  // optional int32 aid_award_index = 7;
  if (has_aid_award_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->aid_award_index(), output);
  }

  // optional int32 strength = 8;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->strength(), output);
  }

  // optional int32 strength_buy_times = 9;
  if (has_strength_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->strength_buy_times(), output);
  }

  // repeated int64 res = 10;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->res(i), output);
  }

  // optional int32 money = 11;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->money(), output);
  }

  // optional int32 vip_level = 12;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vip_level(), output);
  }

  // optional int32 exp = 13;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->exp(), output);
  }

  // optional int32 level = 14;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->level(), output);
  }

  // optional string ip = 15;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->ip(), output);
  }

  // optional string mcc = 16;
  if (has_mcc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->mcc(), output);
  }

  // optional string client_version = 17;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->client_version(), output);
  }

  // repeated .Equip equip_list = 18;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->equip_list(i), output);
  }

  // repeated .Gem gem_list = 19;
  for (int i = 0; i < this->gem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->gem_list(i), output);
  }

  // repeated .Weapon weapon_list = 20;
  for (int i = 0; i < this->weapon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->weapon_list(i), output);
  }

  // optional .GroupData group_data = 21;
  if (has_group_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->group_data(), output);
  }

  // repeated .BuildQueue build_queue_list = 22;
  for (int i = 0; i < this->build_queue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->build_queue_list(i), output);
  }

  // repeated .BuildingInfo building_list = 23;
  for (int i = 0; i < this->building_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->building_list(i), output);
  }

  // optional .StageData stage_data = 24;
  if (has_stage_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->stage_data(), output);
  }

  // optional .HomeSystemInfo home_info = 25;
  if (has_home_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->home_info(), output);
  }

  // optional .TechnologyData tech_data = 26;
  if (has_tech_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->tech_data(), output);
  }

  // optional .TrialData trial_data = 27;
  if (has_trial_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->trial_data(), output);
  }

  // optional .ArenaData arena_data = 28;
  if (has_arena_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->arena_data(), output);
  }

  // optional .FriendsData friends_data = 29;
  if (has_friends_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->friends_data(), output);
  }

  // repeated .TaskInfo task_list = 30;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->task_list(i), output);
  }

  // optional .DailyData daily_data = 31;
  if (has_daily_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->daily_data(), output);
  }

  // repeated .BlueprintDevelopInfo blueprint_list = 32;
  for (int i = 0; i < this->blueprint_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->blueprint_list(i), output);
  }

  // optional .AchievementData achievement_data = 33;
  if (has_achievement_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->achievement_data(), output);
  }

  // optional .ShopData shop_data = 34;
  if (has_shop_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->shop_data(), output);
  }

  // optional .ShipLotteryData ship_lottery_data = 35;
  if (has_ship_lottery_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->ship_lottery_data(), output);
  }

  // repeated .Activity activity_list = 37;
  for (int i = 0; i < this->activity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      37, this->activity_list(i), output);
  }

  // optional int32 state = 38;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->state(), output);
  }

  // repeated .Lineup preset_lineup_list = 39;
  for (int i = 0; i < this->preset_lineup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, this->preset_lineup_list(i), output);
  }

  // optional .TradeData trade_data = 40;
  if (has_trade_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->trade_data(), output);
  }

  // repeated .ForgeEquip forge_equip_list = 41;
  for (int i = 0; i < this->forge_equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->forge_equip_list(i), output);
  }

  // optional .NewHandGiftBagData new_hand_gift_bag_data = 42;
  if (has_new_hand_gift_bag_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      42, this->new_hand_gift_bag_data(), output);
  }

  // repeated .GiftBag gift_bag_list = 43;
  for (int i = 0; i < this->gift_bag_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      43, this->gift_bag_list(i), output);
  }

  // repeated int32 vip_award_list = 44;
  for (int i = 0; i < this->vip_award_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      44, this->vip_award_list(i), output);
  }

  // repeated int32 vip_pack_list = 45;
  for (int i = 0; i < this->vip_pack_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      45, this->vip_pack_list(i), output);
  }

  // optional .NextGiftBagData next_gift_bag_data = 46;
  if (has_next_gift_bag_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->next_gift_bag_data(), output);
  }

  // optional int64 ship_energy_end_time = 47;
  if (has_ship_energy_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->ship_energy_end_time(), output);
  }

  // optional int32 ship_energy_time_lock = 48;
  if (has_ship_energy_time_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->ship_energy_time_lock(), output);
  }

  // optional int32 gm_level = 97;
  if (has_gm_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->gm_level(), output);
  }

  // optional .UserInfo.BlockInfo blocked = 98;
  if (has_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      98, this->blocked(), output);
  }

  // optional .TimeStamp timestamp = 99;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      99, this->timestamp(), output);
  }

  // optional int32 data_version = 100;
  if (has_data_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->data_version(), output);
  }

}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 icon_id = 4;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // optional int32 init_ship_index = 6;
    if (has_init_ship_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_ship_index());
    }

    // optional int32 aid_award_index = 7;
    if (has_aid_award_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aid_award_index());
    }

    // optional int32 strength = 8;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 strength_buy_times = 9;
    if (has_strength_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength_buy_times());
    }

    // optional int32 money = 11;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 vip_level = 12;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional int32 exp = 13;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 14;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string ip = 15;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string mcc = 16;
    if (has_mcc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mcc());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string client_version = 17;
    if (has_client_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_version());
    }

    // optional .GroupData group_data = 21;
    if (has_group_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_data());
    }

    // optional .StageData stage_data = 24;
    if (has_stage_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage_data());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .HomeSystemInfo home_info = 25;
    if (has_home_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->home_info());
    }

    // optional .TechnologyData tech_data = 26;
    if (has_tech_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tech_data());
    }

    // optional .TrialData trial_data = 27;
    if (has_trial_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trial_data());
    }

    // optional .ArenaData arena_data = 28;
    if (has_arena_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_data());
    }

    // optional .FriendsData friends_data = 29;
    if (has_friends_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends_data());
    }

    // optional .DailyData daily_data = 31;
    if (has_daily_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_data());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .AchievementData achievement_data = 33;
    if (has_achievement_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement_data());
    }

    // optional .ShopData shop_data = 34;
    if (has_shop_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_data());
    }

    // optional .ShipLotteryData ship_lottery_data = 35;
    if (has_ship_lottery_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ship_lottery_data());
    }

    // optional int32 state = 38;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .TradeData trade_data = 40;
    if (has_trade_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trade_data());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .NewHandGiftBagData new_hand_gift_bag_data = 42;
    if (has_new_hand_gift_bag_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_hand_gift_bag_data());
    }

    // optional .NextGiftBagData next_gift_bag_data = 46;
    if (has_next_gift_bag_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next_gift_bag_data());
    }

    // optional int64 ship_energy_end_time = 47;
    if (has_ship_energy_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ship_energy_end_time());
    }

    // optional int32 ship_energy_time_lock = 48;
    if (has_ship_energy_time_lock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_energy_time_lock());
    }

    // optional int32 gm_level = 97;
    if (has_gm_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gm_level());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .UserInfo.BlockInfo blocked = 98;
    if (has_blocked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocked());
    }

    // optional .TimeStamp timestamp = 99;
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional int32 data_version = 100;
    if (has_data_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_version());
    }

  }
  // repeated int32 lineup = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  // repeated int64 res = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->res_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->res(i));
    }
    total_size += 1 * this->res_size() + data_size;
  }

  // repeated .Equip equip_list = 18;
  total_size += 2 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  // repeated .Gem gem_list = 19;
  total_size += 2 * this->gem_list_size();
  for (int i = 0; i < this->gem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gem_list(i));
  }

  // repeated .Weapon weapon_list = 20;
  total_size += 2 * this->weapon_list_size();
  for (int i = 0; i < this->weapon_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weapon_list(i));
  }

  // repeated .BuildQueue build_queue_list = 22;
  total_size += 2 * this->build_queue_list_size();
  for (int i = 0; i < this->build_queue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->build_queue_list(i));
  }

  // repeated .BuildingInfo building_list = 23;
  total_size += 2 * this->building_list_size();
  for (int i = 0; i < this->building_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->building_list(i));
  }

  // repeated .TaskInfo task_list = 30;
  total_size += 2 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }

  // repeated .BlueprintDevelopInfo blueprint_list = 32;
  total_size += 2 * this->blueprint_list_size();
  for (int i = 0; i < this->blueprint_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blueprint_list(i));
  }

  // repeated .Activity activity_list = 37;
  total_size += 2 * this->activity_list_size();
  for (int i = 0; i < this->activity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_list(i));
  }

  // repeated .Lineup preset_lineup_list = 39;
  total_size += 2 * this->preset_lineup_list_size();
  for (int i = 0; i < this->preset_lineup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preset_lineup_list(i));
  }

  // repeated .ForgeEquip forge_equip_list = 41;
  total_size += 2 * this->forge_equip_list_size();
  for (int i = 0; i < this->forge_equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forge_equip_list(i));
  }

  // repeated .GiftBag gift_bag_list = 43;
  total_size += 2 * this->gift_bag_list_size();
  for (int i = 0; i < this->gift_bag_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift_bag_list(i));
  }

  // repeated int32 vip_award_list = 44;
  {
    int data_size = 0;
    for (int i = 0; i < this->vip_award_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vip_award_list(i));
    }
    total_size += 2 * this->vip_award_list_size() + data_size;
  }

  // repeated int32 vip_pack_list = 45;
  {
    int data_size = 0;
    for (int i = 0; i < this->vip_pack_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vip_pack_list(i));
    }
    total_size += 2 * this->vip_pack_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserInfo*>(&from));
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  res_.MergeFrom(from.res_);
  equip_list_.MergeFrom(from.equip_list_);
  gem_list_.MergeFrom(from.gem_list_);
  weapon_list_.MergeFrom(from.weapon_list_);
  build_queue_list_.MergeFrom(from.build_queue_list_);
  building_list_.MergeFrom(from.building_list_);
  task_list_.MergeFrom(from.task_list_);
  blueprint_list_.MergeFrom(from.blueprint_list_);
  activity_list_.MergeFrom(from.activity_list_);
  preset_lineup_list_.MergeFrom(from.preset_lineup_list_);
  forge_equip_list_.MergeFrom(from.forge_equip_list_);
  gift_bag_list_.MergeFrom(from.gift_bag_list_);
  vip_award_list_.MergeFrom(from.vip_award_list_);
  vip_pack_list_.MergeFrom(from.vip_pack_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_init_ship_index()) {
      set_init_ship_index(from.init_ship_index());
    }
    if (from.has_aid_award_index()) {
      set_aid_award_index(from.aid_award_index());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strength_buy_times()) {
      set_strength_buy_times(from.strength_buy_times());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_mcc()) {
      set_mcc(from.mcc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_group_data()) {
      mutable_group_data()->::GroupData::MergeFrom(from.group_data());
    }
    if (from.has_stage_data()) {
      mutable_stage_data()->::StageData::MergeFrom(from.stage_data());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_home_info()) {
      mutable_home_info()->::HomeSystemInfo::MergeFrom(from.home_info());
    }
    if (from.has_tech_data()) {
      mutable_tech_data()->::TechnologyData::MergeFrom(from.tech_data());
    }
    if (from.has_trial_data()) {
      mutable_trial_data()->::TrialData::MergeFrom(from.trial_data());
    }
    if (from.has_arena_data()) {
      mutable_arena_data()->::ArenaData::MergeFrom(from.arena_data());
    }
    if (from.has_friends_data()) {
      mutable_friends_data()->::FriendsData::MergeFrom(from.friends_data());
    }
    if (from.has_daily_data()) {
      mutable_daily_data()->::DailyData::MergeFrom(from.daily_data());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_achievement_data()) {
      mutable_achievement_data()->::AchievementData::MergeFrom(from.achievement_data());
    }
    if (from.has_shop_data()) {
      mutable_shop_data()->::ShopData::MergeFrom(from.shop_data());
    }
    if (from.has_ship_lottery_data()) {
      mutable_ship_lottery_data()->::ShipLotteryData::MergeFrom(from.ship_lottery_data());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_trade_data()) {
      mutable_trade_data()->::TradeData::MergeFrom(from.trade_data());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_new_hand_gift_bag_data()) {
      mutable_new_hand_gift_bag_data()->::NewHandGiftBagData::MergeFrom(from.new_hand_gift_bag_data());
    }
    if (from.has_next_gift_bag_data()) {
      mutable_next_gift_bag_data()->::NextGiftBagData::MergeFrom(from.next_gift_bag_data());
    }
    if (from.has_ship_energy_end_time()) {
      set_ship_energy_end_time(from.ship_energy_end_time());
    }
    if (from.has_ship_energy_time_lock()) {
      set_ship_energy_time_lock(from.ship_energy_time_lock());
    }
    if (from.has_gm_level()) {
      set_gm_level(from.gm_level());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_blocked()) {
      mutable_blocked()->::UserInfo_BlockInfo::MergeFrom(from.blocked());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::TimeStamp::MergeFrom(from.timestamp());
    }
    if (from.has_data_version()) {
      set_data_version(from.data_version());
    }
  }
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  for (int i = 0; i < equip_list_size(); i++) {
    if (!this->equip_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gem_list_size(); i++) {
    if (!this->gem_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < weapon_list_size(); i++) {
    if (!this->weapon_list(i).IsInitialized()) return false;
  }
  if (has_group_data()) {
    if (!this->group_data().IsInitialized()) return false;
  }
  for (int i = 0; i < build_queue_list_size(); i++) {
    if (!this->build_queue_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < building_list_size(); i++) {
    if (!this->building_list(i).IsInitialized()) return false;
  }
  if (has_stage_data()) {
    if (!this->stage_data().IsInitialized()) return false;
  }
  if (has_home_info()) {
    if (!this->home_info().IsInitialized()) return false;
  }
  if (has_tech_data()) {
    if (!this->tech_data().IsInitialized()) return false;
  }
  if (has_trial_data()) {
    if (!this->trial_data().IsInitialized()) return false;
  }
  if (has_arena_data()) {
    if (!this->arena_data().IsInitialized()) return false;
  }
  if (has_friends_data()) {
    if (!this->friends_data().IsInitialized()) return false;
  }
  for (int i = 0; i < task_list_size(); i++) {
    if (!this->task_list(i).IsInitialized()) return false;
  }
  if (has_daily_data()) {
    if (!this->daily_data().IsInitialized()) return false;
  }
  for (int i = 0; i < blueprint_list_size(); i++) {
    if (!this->blueprint_list(i).IsInitialized()) return false;
  }
  if (has_achievement_data()) {
    if (!this->achievement_data().IsInitialized()) return false;
  }
  if (has_shop_data()) {
    if (!this->shop_data().IsInitialized()) return false;
  }
  if (has_ship_lottery_data()) {
    if (!this->ship_lottery_data().IsInitialized()) return false;
  }
  for (int i = 0; i < activity_list_size(); i++) {
    if (!this->activity_list(i).IsInitialized()) return false;
  }
  if (has_trade_data()) {
    if (!this->trade_data().IsInitialized()) return false;
  }
  for (int i = 0; i < forge_equip_list_size(); i++) {
    if (!this->forge_equip_list(i).IsInitialized()) return false;
  }
  if (has_new_hand_gift_bag_data()) {
    if (!this->new_hand_gift_bag_data().IsInitialized()) return false;
  }
  for (int i = 0; i < gift_bag_list_size(); i++) {
    if (!this->gift_bag_list(i).IsInitialized()) return false;
  }
  if (has_next_gift_bag_data()) {
    if (!this->next_gift_bag_data().IsInitialized()) return false;
  }
  if (has_blocked()) {
    if (!this->blocked().IsInitialized()) return false;
  }
  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nickname_, other->nickname_);
    std::swap(account_, other->account_);
    std::swap(icon_id_, other->icon_id_);
    lineup_.Swap(&other->lineup_);
    std::swap(init_ship_index_, other->init_ship_index_);
    std::swap(aid_award_index_, other->aid_award_index_);
    std::swap(strength_, other->strength_);
    std::swap(strength_buy_times_, other->strength_buy_times_);
    res_.Swap(&other->res_);
    std::swap(money_, other->money_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(ip_, other->ip_);
    std::swap(mcc_, other->mcc_);
    std::swap(client_version_, other->client_version_);
    equip_list_.Swap(&other->equip_list_);
    gem_list_.Swap(&other->gem_list_);
    weapon_list_.Swap(&other->weapon_list_);
    std::swap(group_data_, other->group_data_);
    build_queue_list_.Swap(&other->build_queue_list_);
    building_list_.Swap(&other->building_list_);
    std::swap(stage_data_, other->stage_data_);
    std::swap(home_info_, other->home_info_);
    std::swap(tech_data_, other->tech_data_);
    std::swap(trial_data_, other->trial_data_);
    std::swap(arena_data_, other->arena_data_);
    std::swap(friends_data_, other->friends_data_);
    task_list_.Swap(&other->task_list_);
    std::swap(daily_data_, other->daily_data_);
    blueprint_list_.Swap(&other->blueprint_list_);
    std::swap(achievement_data_, other->achievement_data_);
    std::swap(shop_data_, other->shop_data_);
    std::swap(ship_lottery_data_, other->ship_lottery_data_);
    activity_list_.Swap(&other->activity_list_);
    std::swap(state_, other->state_);
    preset_lineup_list_.Swap(&other->preset_lineup_list_);
    std::swap(trade_data_, other->trade_data_);
    forge_equip_list_.Swap(&other->forge_equip_list_);
    std::swap(new_hand_gift_bag_data_, other->new_hand_gift_bag_data_);
    gift_bag_list_.Swap(&other->gift_bag_list_);
    vip_award_list_.Swap(&other->vip_award_list_);
    vip_pack_list_.Swap(&other->vip_pack_list_);
    std::swap(next_gift_bag_data_, other->next_gift_bag_data_);
    std::swap(ship_energy_end_time_, other->ship_energy_end_time_);
    std::swap(ship_energy_time_lock_, other->ship_energy_time_lock_);
    std::swap(gm_level_, other->gm_level_);
    std::swap(blocked_, other->blocked_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(data_version_, other->data_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserInfo::GetTypeName() const {
  return "UserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int NewHandGiftBag::kIdFieldNumber;
const int NewHandGiftBag::kGiftIdFieldNumber;
const int NewHandGiftBag::kStartTimeFieldNumber;
#endif  // !_MSC_VER

NewHandGiftBag::NewHandGiftBag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NewHandGiftBag::InitAsDefaultInstance() {
}

NewHandGiftBag::NewHandGiftBag(const NewHandGiftBag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NewHandGiftBag::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gift_id_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewHandGiftBag::~NewHandGiftBag() {
  SharedDtor();
}

void NewHandGiftBag::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewHandGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewHandGiftBag& NewHandGiftBag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

NewHandGiftBag* NewHandGiftBag::default_instance_ = NULL;

NewHandGiftBag* NewHandGiftBag::New() const {
  return new NewHandGiftBag;
}

void NewHandGiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    gift_id_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NewHandGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gift_id;
        break;
      }

      // required int32 gift_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewHandGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 gift_id = 2;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gift_id(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

}

int NewHandGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 gift_id = 2;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewHandGiftBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewHandGiftBag*>(&from));
}

void NewHandGiftBag::MergeFrom(const NewHandGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
}

void NewHandGiftBag::CopyFrom(const NewHandGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewHandGiftBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewHandGiftBag::Swap(NewHandGiftBag* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewHandGiftBag::GetTypeName() const {
  return "NewHandGiftBag";
}


// ===================================================================

#ifndef _MSC_VER
const int NewHandGiftBagData::kTimesFieldNumber;
const int NewHandGiftBagData::kNewHandGiftBagListFieldNumber;
#endif  // !_MSC_VER

NewHandGiftBagData::NewHandGiftBagData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NewHandGiftBagData::InitAsDefaultInstance() {
}

NewHandGiftBagData::NewHandGiftBagData(const NewHandGiftBagData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NewHandGiftBagData::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewHandGiftBagData::~NewHandGiftBagData() {
  SharedDtor();
}

void NewHandGiftBagData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewHandGiftBagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewHandGiftBagData& NewHandGiftBagData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

NewHandGiftBagData* NewHandGiftBagData::default_instance_ = NULL;

NewHandGiftBagData* NewHandGiftBagData::New() const {
  return new NewHandGiftBagData;
}

void NewHandGiftBagData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0;
  }
  new_hand_gift_bag_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NewHandGiftBagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_hand_gift_bag_list;
        break;
      }

      // repeated .NewHandGiftBag new_hand_gift_bag_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_hand_gift_bag_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_hand_gift_bag_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_hand_gift_bag_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewHandGiftBagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }

  // repeated .NewHandGiftBag new_hand_gift_bag_list = 2;
  for (int i = 0; i < this->new_hand_gift_bag_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->new_hand_gift_bag_list(i), output);
  }

}

int NewHandGiftBagData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  // repeated .NewHandGiftBag new_hand_gift_bag_list = 2;
  total_size += 1 * this->new_hand_gift_bag_list_size();
  for (int i = 0; i < this->new_hand_gift_bag_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_hand_gift_bag_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewHandGiftBagData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewHandGiftBagData*>(&from));
}

void NewHandGiftBagData::MergeFrom(const NewHandGiftBagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_hand_gift_bag_list_.MergeFrom(from.new_hand_gift_bag_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
  }
}

void NewHandGiftBagData::CopyFrom(const NewHandGiftBagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewHandGiftBagData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < new_hand_gift_bag_list_size(); i++) {
    if (!this->new_hand_gift_bag_list(i).IsInitialized()) return false;
  }
  return true;
}

void NewHandGiftBagData::Swap(NewHandGiftBagData* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    new_hand_gift_bag_list_.Swap(&other->new_hand_gift_bag_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewHandGiftBagData::GetTypeName() const {
  return "NewHandGiftBagData";
}


// ===================================================================

#ifndef _MSC_VER
const int GiftBag::kIdFieldNumber;
const int GiftBag::kCountFieldNumber;
const int GiftBag::kStartTimeFieldNumber;
#endif  // !_MSC_VER

GiftBag::GiftBag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GiftBag::InitAsDefaultInstance() {
}

GiftBag::GiftBag(const GiftBag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GiftBag::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftBag::~GiftBag() {
  SharedDtor();
}

void GiftBag::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiftBag& GiftBag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

GiftBag* GiftBag::default_instance_ = NULL;

GiftBag* GiftBag::New() const {
  return new GiftBag;
}

void GiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

}

int GiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiftBag*>(&from));
}

void GiftBag::MergeFrom(const GiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
}

void GiftBag::CopyFrom(const GiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GiftBag::Swap(GiftBag* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiftBag::GetTypeName() const {
  return "GiftBag";
}


// ===================================================================

#ifndef _MSC_VER
const int NextGiftBagData::kNextGiftBagFieldNumber;
#endif  // !_MSC_VER

NextGiftBagData::NextGiftBagData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NextGiftBagData::InitAsDefaultInstance() {
}

NextGiftBagData::NextGiftBagData(const NextGiftBagData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NextGiftBagData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextGiftBagData::~NextGiftBagData() {
  SharedDtor();
}

void NextGiftBagData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NextGiftBagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NextGiftBagData& NextGiftBagData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

NextGiftBagData* NextGiftBagData::default_instance_ = NULL;

NextGiftBagData* NextGiftBagData::New() const {
  return new NextGiftBagData;
}

void NextGiftBagData::Clear() {
  next_gift_bag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NextGiftBagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NewHandGiftBag next_gift_bag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next_gift_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_gift_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_next_gift_bag;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextGiftBagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NewHandGiftBag next_gift_bag = 1;
  for (int i = 0; i < this->next_gift_bag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->next_gift_bag(i), output);
  }

}

int NextGiftBagData::ByteSize() const {
  int total_size = 0;

  // repeated .NewHandGiftBag next_gift_bag = 1;
  total_size += 1 * this->next_gift_bag_size();
  for (int i = 0; i < this->next_gift_bag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_gift_bag(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextGiftBagData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NextGiftBagData*>(&from));
}

void NextGiftBagData::MergeFrom(const NextGiftBagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  next_gift_bag_.MergeFrom(from.next_gift_bag_);
}

void NextGiftBagData::CopyFrom(const NextGiftBagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextGiftBagData::IsInitialized() const {

  for (int i = 0; i < next_gift_bag_size(); i++) {
    if (!this->next_gift_bag(i).IsInitialized()) return false;
  }
  return true;
}

void NextGiftBagData::Swap(NextGiftBagData* other) {
  if (other != this) {
    next_gift_bag_.Swap(&other->next_gift_bag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NextGiftBagData::GetTypeName() const {
  return "NextGiftBagData";
}


// ===================================================================

#ifndef _MSC_VER
const int TradeData::kLastProductTimeFieldNumber;
const int TradeData::kCurNumFieldNumber;
#endif  // !_MSC_VER

TradeData::TradeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TradeData::InitAsDefaultInstance() {
}

TradeData::TradeData(const TradeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TradeData::SharedCtor() {
  _cached_size_ = 0;
  last_product_time_ = GOOGLE_LONGLONG(0);
  cur_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeData::~TradeData() {
  SharedDtor();
}

void TradeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TradeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TradeData& TradeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

TradeData* TradeData::default_instance_ = NULL;

TradeData* TradeData::New() const {
  return new TradeData;
}

void TradeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_product_time_ = GOOGLE_LONGLONG(0);
    cur_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TradeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_product_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_product_time_)));
          set_has_last_product_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // required int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 last_product_time = 1;
  if (has_last_product_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_product_time(), output);
  }

  // required int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

}

int TradeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 last_product_time = 1;
    if (has_last_product_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_product_time());
    }

    // required int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TradeData*>(&from));
}

void TradeData::MergeFrom(const TradeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_product_time()) {
      set_last_product_time(from.last_product_time());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
  }
}

void TradeData::CopyFrom(const TradeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TradeData::Swap(TradeData* other) {
  if (other != this) {
    std::swap(last_product_time_, other->last_product_time_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TradeData::GetTypeName() const {
  return "TradeData";
}


// ===================================================================

#ifndef _MSC_VER
const int BlueprintDevelopInfo::kBlueprintIdFieldNumber;
const int BlueprintDevelopInfo::kStartTimeFieldNumber;
#endif  // !_MSC_VER

BlueprintDevelopInfo::BlueprintDevelopInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BlueprintDevelopInfo::InitAsDefaultInstance() {
}

BlueprintDevelopInfo::BlueprintDevelopInfo(const BlueprintDevelopInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BlueprintDevelopInfo::SharedCtor() {
  _cached_size_ = 0;
  blueprint_id_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlueprintDevelopInfo::~BlueprintDevelopInfo() {
  SharedDtor();
}

void BlueprintDevelopInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BlueprintDevelopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlueprintDevelopInfo& BlueprintDevelopInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

BlueprintDevelopInfo* BlueprintDevelopInfo::default_instance_ = NULL;

BlueprintDevelopInfo* BlueprintDevelopInfo::New() const {
  return new BlueprintDevelopInfo;
}

void BlueprintDevelopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blueprint_id_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BlueprintDevelopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blueprint_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blueprint_id_)));
          set_has_blueprint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlueprintDevelopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 blueprint_id = 1;
  if (has_blueprint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blueprint_id(), output);
  }

  // required int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

}

int BlueprintDevelopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blueprint_id = 1;
    if (has_blueprint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blueprint_id());
    }

    // required int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueprintDevelopInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlueprintDevelopInfo*>(&from));
}

void BlueprintDevelopInfo::MergeFrom(const BlueprintDevelopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blueprint_id()) {
      set_blueprint_id(from.blueprint_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
}

void BlueprintDevelopInfo::CopyFrom(const BlueprintDevelopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueprintDevelopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BlueprintDevelopInfo::Swap(BlueprintDevelopInfo* other) {
  if (other != this) {
    std::swap(blueprint_id_, other->blueprint_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BlueprintDevelopInfo::GetTypeName() const {
  return "BlueprintDevelopInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ShipLotteryInfo::kIdFieldNumber;
const int ShipLotteryInfo::kFreeTimesFieldNumber;
const int ShipLotteryInfo::kAddFreeStartTimeFieldNumber;
const int ShipLotteryInfo::kCdStartTimeFieldNumber;
const int ShipLotteryInfo::kSingleTimesFieldNumber;
#endif  // !_MSC_VER

ShipLotteryInfo::ShipLotteryInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShipLotteryInfo::InitAsDefaultInstance() {
}

ShipLotteryInfo::ShipLotteryInfo(const ShipLotteryInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShipLotteryInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  free_times_ = 0;
  add_free_start_time_ = GOOGLE_LONGLONG(0);
  cd_start_time_ = GOOGLE_LONGLONG(0);
  single_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipLotteryInfo::~ShipLotteryInfo() {
  SharedDtor();
}

void ShipLotteryInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShipLotteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShipLotteryInfo& ShipLotteryInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

ShipLotteryInfo* ShipLotteryInfo::default_instance_ = NULL;

ShipLotteryInfo* ShipLotteryInfo::New() const {
  return new ShipLotteryInfo;
}

void ShipLotteryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    free_times_ = 0;
    add_free_start_time_ = GOOGLE_LONGLONG(0);
    cd_start_time_ = GOOGLE_LONGLONG(0);
    single_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShipLotteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_free_times;
        break;
      }

      // required int32 free_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_times_)));
          set_has_free_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_free_start_time;
        break;
      }

      // required int64 add_free_start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_free_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &add_free_start_time_)));
          set_has_add_free_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cd_start_time;
        break;
      }

      // required int64 cd_start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cd_start_time_)));
          set_has_cd_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_single_times;
        break;
      }

      // required int32 single_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_times_)));
          set_has_single_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipLotteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 free_times = 2;
  if (has_free_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->free_times(), output);
  }

  // required int64 add_free_start_time = 3;
  if (has_add_free_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->add_free_start_time(), output);
  }

  // required int64 cd_start_time = 4;
  if (has_cd_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cd_start_time(), output);
  }

  // required int32 single_times = 5;
  if (has_single_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->single_times(), output);
  }

}

int ShipLotteryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 free_times = 2;
    if (has_free_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_times());
    }

    // required int64 add_free_start_time = 3;
    if (has_add_free_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->add_free_start_time());
    }

    // required int64 cd_start_time = 4;
    if (has_cd_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cd_start_time());
    }

    // required int32 single_times = 5;
    if (has_single_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->single_times());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipLotteryInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShipLotteryInfo*>(&from));
}

void ShipLotteryInfo::MergeFrom(const ShipLotteryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_free_times()) {
      set_free_times(from.free_times());
    }
    if (from.has_add_free_start_time()) {
      set_add_free_start_time(from.add_free_start_time());
    }
    if (from.has_cd_start_time()) {
      set_cd_start_time(from.cd_start_time());
    }
    if (from.has_single_times()) {
      set_single_times(from.single_times());
    }
  }
}

void ShipLotteryInfo::CopyFrom(const ShipLotteryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipLotteryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ShipLotteryInfo::Swap(ShipLotteryInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(free_times_, other->free_times_);
    std::swap(add_free_start_time_, other->add_free_start_time_);
    std::swap(cd_start_time_, other->cd_start_time_);
    std::swap(single_times_, other->single_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShipLotteryInfo::GetTypeName() const {
  return "ShipLotteryInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ShipLotteryData::kInfoListFieldNumber;
#endif  // !_MSC_VER

ShipLotteryData::ShipLotteryData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShipLotteryData::InitAsDefaultInstance() {
}

ShipLotteryData::ShipLotteryData(const ShipLotteryData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShipLotteryData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipLotteryData::~ShipLotteryData() {
  SharedDtor();
}

void ShipLotteryData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShipLotteryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShipLotteryData& ShipLotteryData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

ShipLotteryData* ShipLotteryData::default_instance_ = NULL;

ShipLotteryData* ShipLotteryData::New() const {
  return new ShipLotteryData;
}

void ShipLotteryData::Clear() {
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShipLotteryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShipLotteryInfo info_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipLotteryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ShipLotteryInfo info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info_list(i), output);
  }

}

int ShipLotteryData::ByteSize() const {
  int total_size = 0;

  // repeated .ShipLotteryInfo info_list = 1;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipLotteryData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShipLotteryData*>(&from));
}

void ShipLotteryData::MergeFrom(const ShipLotteryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
}

void ShipLotteryData::CopyFrom(const ShipLotteryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipLotteryData::IsInitialized() const {

  for (int i = 0; i < info_list_size(); i++) {
    if (!this->info_list(i).IsInitialized()) return false;
  }
  return true;
}

void ShipLotteryData::Swap(ShipLotteryData* other) {
  if (other != this) {
    info_list_.Swap(&other->info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShipLotteryData::GetTypeName() const {
  return "ShipLotteryData";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopGoods::kIdFieldNumber;
const int ShopGoods::kBuyTimesFieldNumber;
#endif  // !_MSC_VER

ShopGoods::ShopGoods()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShopGoods::InitAsDefaultInstance() {
}

ShopGoods::ShopGoods(const ShopGoods& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShopGoods::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buy_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopGoods::~ShopGoods() {
  SharedDtor();
}

void ShopGoods::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopGoods& ShopGoods::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

ShopGoods* ShopGoods::default_instance_ = NULL;

ShopGoods* ShopGoods::New() const {
  return new ShopGoods;
}

void ShopGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    buy_times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShopGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_times;
        break;
      }

      // required int32 buy_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 buy_times = 2;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_times(), output);
  }

}

int ShopGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 buy_times = 2;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_times());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopGoods::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopGoods*>(&from));
}

void ShopGoods::MergeFrom(const ShopGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
  }
}

void ShopGoods::CopyFrom(const ShopGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShopGoods::Swap(ShopGoods* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopGoods::GetTypeName() const {
  return "ShopGoods";
}


// ===================================================================

#ifndef _MSC_VER
const int ShopData::kGoodsListFieldNumber;
#endif  // !_MSC_VER

ShopData::ShopData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ShopData::InitAsDefaultInstance() {
}

ShopData::ShopData(const ShopData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopData::~ShopData() {
  SharedDtor();
}

void ShopData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ShopData& ShopData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

ShopData* ShopData::default_instance_ = NULL;

ShopData* ShopData::New() const {
  return new ShopData;
}

void ShopData::Clear() {
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShopGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->goods_list(i), output);
  }

}

int ShopData::ByteSize() const {
  int total_size = 0;

  // repeated .ShopGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ShopData*>(&from));
}

void ShopData::MergeFrom(const ShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
}

void ShopData::CopyFrom(const ShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopData::IsInitialized() const {

  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  return true;
}

void ShopData::Swap(ShopData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ShopData::GetTypeName() const {
  return "ShopData";
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kKeyFieldNumber;
const int Point::kValueFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Point& Point::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point*>(&from));
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Point::GetTypeName() const {
  return "Point";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyData::kShipLevelupCountFieldNumber;
const int DailyData::kEquipStrengthCountFieldNumber;
const int DailyData::kShipBreakCountFieldNumber;
const int DailyData::kCheckpointFightFieldNumber;
const int DailyData::kCheckpointWinFieldNumber;
const int DailyData::kContributeTimesFieldNumber;
const int DailyData::kGetHomeResTimesFieldNumber;
const int DailyData::kTrialTimesFieldNumber;
const int DailyData::kGroupBossTimesFieldNumber;
const int DailyData::kRaidTimesFieldNumber;
const int DailyData::kExploreRuinsTimesFieldNumber;
const int DailyData::kFishingRuinsTimsFieldNumber;
const int DailyData::kGetPlanetResTimesFieldNumber;
const int DailyData::kAttackPlanetResTimesFieldNumber;
const int DailyData::kActiveFieldNumber;
const int DailyData::kGetActiveLevelFieldNumber;
const int DailyData::kHelpTimesFieldNumber;
const int DailyData::kLotteryCountFieldNumber;
const int DailyData::kBlueprintCountFieldNumber;
#endif  // !_MSC_VER

DailyData::DailyData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyData::InitAsDefaultInstance() {
}

DailyData::DailyData(const DailyData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyData::SharedCtor() {
  _cached_size_ = 0;
  ship_levelup_count_ = 0;
  equip_strength_count_ = 0;
  ship_break_count_ = 0;
  checkpoint_fight_ = 0;
  checkpoint_win_ = 0;
  contribute_times_ = 0;
  get_home_res_times_ = 0;
  trial_times_ = 0;
  group_boss_times_ = 0;
  raid_times_ = 0;
  explore_ruins_times_ = 0;
  fishing_ruins_tims_ = 0;
  get_planet_res_times_ = 0;
  attack_planet_res_times_ = 0;
  active_ = 0;
  help_times_ = 0;
  lottery_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyData::~DailyData() {
  SharedDtor();
}

void DailyData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyData& DailyData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

DailyData* DailyData::default_instance_ = NULL;

DailyData* DailyData::New() const {
  return new DailyData;
}

void DailyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ship_levelup_count_ = 0;
    equip_strength_count_ = 0;
    ship_break_count_ = 0;
    checkpoint_fight_ = 0;
    checkpoint_win_ = 0;
    contribute_times_ = 0;
    get_home_res_times_ = 0;
    trial_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    group_boss_times_ = 0;
    raid_times_ = 0;
    explore_ruins_times_ = 0;
    fishing_ruins_tims_ = 0;
    get_planet_res_times_ = 0;
    attack_planet_res_times_ = 0;
    active_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    help_times_ = 0;
    lottery_count_ = 0;
  }
  get_active_level_.Clear();
  blueprint_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ship_levelup_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_levelup_count_)));
          set_has_ship_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_strength_count;
        break;
      }

      // optional int32 equip_strength_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_strength_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_strength_count_)));
          set_has_equip_strength_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ship_break_count;
        break;
      }

      // optional int32 ship_break_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_break_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_break_count_)));
          set_has_ship_break_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_checkpoint_fight;
        break;
      }

      // optional int32 checkpoint_fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_fight_)));
          set_has_checkpoint_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_checkpoint_win;
        break;
      }

      // optional int32 checkpoint_win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_win_)));
          set_has_checkpoint_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contribute_times;
        break;
      }

      // optional int32 contribute_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_times_)));
          set_has_contribute_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_get_home_res_times;
        break;
      }

      // optional int32 get_home_res_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_home_res_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_home_res_times_)));
          set_has_get_home_res_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_trial_times;
        break;
      }

      // optional int32 trial_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trial_times_)));
          set_has_trial_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_group_boss_times;
        break;
      }

      // optional int32 group_boss_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_boss_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_boss_times_)));
          set_has_group_boss_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_raid_times;
        break;
      }

      // optional int32 raid_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_times_)));
          set_has_raid_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_explore_ruins_times;
        break;
      }

      // optional int32 explore_ruins_times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explore_ruins_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explore_ruins_times_)));
          set_has_explore_ruins_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fishing_ruins_tims;
        break;
      }

      // optional int32 fishing_ruins_tims = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishing_ruins_tims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishing_ruins_tims_)));
          set_has_fishing_ruins_tims();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_get_planet_res_times;
        break;
      }

      // optional int32 get_planet_res_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_planet_res_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_planet_res_times_)));
          set_has_get_planet_res_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_attack_planet_res_times;
        break;
      }

      // optional int32 attack_planet_res_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_planet_res_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_planet_res_times_)));
          set_has_attack_planet_res_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_active;
        break;
      }

      // optional int32 active = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_get_active_level;
        break;
      }

      // repeated bool get_active_level = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_active_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 128, input, this->mutable_get_active_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_get_active_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_get_active_level;
        if (input->ExpectTag(136)) goto parse_help_times;
        break;
      }

      // optional int32 help_times = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_help_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &help_times_)));
          set_has_help_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_lottery_count;
        break;
      }

      // optional int32 lottery_count = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_count_)));
          set_has_lottery_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_blueprint_count;
        break;
      }

      // repeated .Point blueprint_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueprint_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blueprint_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_blueprint_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ship_levelup_count = 1;
  if (has_ship_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ship_levelup_count(), output);
  }

  // optional int32 equip_strength_count = 2;
  if (has_equip_strength_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_strength_count(), output);
  }

  // optional int32 ship_break_count = 3;
  if (has_ship_break_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ship_break_count(), output);
  }

  // optional int32 checkpoint_fight = 4;
  if (has_checkpoint_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->checkpoint_fight(), output);
  }

  // optional int32 checkpoint_win = 5;
  if (has_checkpoint_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->checkpoint_win(), output);
  }

  // optional int32 contribute_times = 6;
  if (has_contribute_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->contribute_times(), output);
  }

  // optional int32 get_home_res_times = 7;
  if (has_get_home_res_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->get_home_res_times(), output);
  }

  // optional int32 trial_times = 8;
  if (has_trial_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->trial_times(), output);
  }

  // optional int32 group_boss_times = 9;
  if (has_group_boss_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->group_boss_times(), output);
  }

  // optional int32 raid_times = 10;
  if (has_raid_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->raid_times(), output);
  }

  // optional int32 explore_ruins_times = 11;
  if (has_explore_ruins_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->explore_ruins_times(), output);
  }

  // optional int32 fishing_ruins_tims = 12;
  if (has_fishing_ruins_tims()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->fishing_ruins_tims(), output);
  }

  // optional int32 get_planet_res_times = 13;
  if (has_get_planet_res_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->get_planet_res_times(), output);
  }

  // optional int32 attack_planet_res_times = 14;
  if (has_attack_planet_res_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->attack_planet_res_times(), output);
  }

  // optional int32 active = 15;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->active(), output);
  }

  // repeated bool get_active_level = 16;
  for (int i = 0; i < this->get_active_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      16, this->get_active_level(i), output);
  }

  // optional int32 help_times = 17;
  if (has_help_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->help_times(), output);
  }

  // optional int32 lottery_count = 18;
  if (has_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->lottery_count(), output);
  }

  // repeated .Point blueprint_count = 19;
  for (int i = 0; i < this->blueprint_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->blueprint_count(i), output);
  }

}

int DailyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ship_levelup_count = 1;
    if (has_ship_levelup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_levelup_count());
    }

    // optional int32 equip_strength_count = 2;
    if (has_equip_strength_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_strength_count());
    }

    // optional int32 ship_break_count = 3;
    if (has_ship_break_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_break_count());
    }

    // optional int32 checkpoint_fight = 4;
    if (has_checkpoint_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_fight());
    }

    // optional int32 checkpoint_win = 5;
    if (has_checkpoint_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_win());
    }

    // optional int32 contribute_times = 6;
    if (has_contribute_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute_times());
    }

    // optional int32 get_home_res_times = 7;
    if (has_get_home_res_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_home_res_times());
    }

    // optional int32 trial_times = 8;
    if (has_trial_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trial_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 group_boss_times = 9;
    if (has_group_boss_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_boss_times());
    }

    // optional int32 raid_times = 10;
    if (has_raid_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_times());
    }

    // optional int32 explore_ruins_times = 11;
    if (has_explore_ruins_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->explore_ruins_times());
    }

    // optional int32 fishing_ruins_tims = 12;
    if (has_fishing_ruins_tims()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishing_ruins_tims());
    }

    // optional int32 get_planet_res_times = 13;
    if (has_get_planet_res_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_planet_res_times());
    }

    // optional int32 attack_planet_res_times = 14;
    if (has_attack_planet_res_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_planet_res_times());
    }

    // optional int32 active = 15;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 help_times = 17;
    if (has_help_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->help_times());
    }

    // optional int32 lottery_count = 18;
    if (has_lottery_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery_count());
    }

  }
  // repeated bool get_active_level = 16;
  {
    int data_size = 0;
    data_size = 1 * this->get_active_level_size();
    total_size += 2 * this->get_active_level_size() + data_size;
  }

  // repeated .Point blueprint_count = 19;
  total_size += 2 * this->blueprint_count_size();
  for (int i = 0; i < this->blueprint_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blueprint_count(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyData*>(&from));
}

void DailyData::MergeFrom(const DailyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_active_level_.MergeFrom(from.get_active_level_);
  blueprint_count_.MergeFrom(from.blueprint_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_levelup_count()) {
      set_ship_levelup_count(from.ship_levelup_count());
    }
    if (from.has_equip_strength_count()) {
      set_equip_strength_count(from.equip_strength_count());
    }
    if (from.has_ship_break_count()) {
      set_ship_break_count(from.ship_break_count());
    }
    if (from.has_checkpoint_fight()) {
      set_checkpoint_fight(from.checkpoint_fight());
    }
    if (from.has_checkpoint_win()) {
      set_checkpoint_win(from.checkpoint_win());
    }
    if (from.has_contribute_times()) {
      set_contribute_times(from.contribute_times());
    }
    if (from.has_get_home_res_times()) {
      set_get_home_res_times(from.get_home_res_times());
    }
    if (from.has_trial_times()) {
      set_trial_times(from.trial_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_boss_times()) {
      set_group_boss_times(from.group_boss_times());
    }
    if (from.has_raid_times()) {
      set_raid_times(from.raid_times());
    }
    if (from.has_explore_ruins_times()) {
      set_explore_ruins_times(from.explore_ruins_times());
    }
    if (from.has_fishing_ruins_tims()) {
      set_fishing_ruins_tims(from.fishing_ruins_tims());
    }
    if (from.has_get_planet_res_times()) {
      set_get_planet_res_times(from.get_planet_res_times());
    }
    if (from.has_attack_planet_res_times()) {
      set_attack_planet_res_times(from.attack_planet_res_times());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_help_times()) {
      set_help_times(from.help_times());
    }
    if (from.has_lottery_count()) {
      set_lottery_count(from.lottery_count());
    }
  }
}

void DailyData::CopyFrom(const DailyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyData::IsInitialized() const {

  for (int i = 0; i < blueprint_count_size(); i++) {
    if (!this->blueprint_count(i).IsInitialized()) return false;
  }
  return true;
}

void DailyData::Swap(DailyData* other) {
  if (other != this) {
    std::swap(ship_levelup_count_, other->ship_levelup_count_);
    std::swap(equip_strength_count_, other->equip_strength_count_);
    std::swap(ship_break_count_, other->ship_break_count_);
    std::swap(checkpoint_fight_, other->checkpoint_fight_);
    std::swap(checkpoint_win_, other->checkpoint_win_);
    std::swap(contribute_times_, other->contribute_times_);
    std::swap(get_home_res_times_, other->get_home_res_times_);
    std::swap(trial_times_, other->trial_times_);
    std::swap(group_boss_times_, other->group_boss_times_);
    std::swap(raid_times_, other->raid_times_);
    std::swap(explore_ruins_times_, other->explore_ruins_times_);
    std::swap(fishing_ruins_tims_, other->fishing_ruins_tims_);
    std::swap(get_planet_res_times_, other->get_planet_res_times_);
    std::swap(attack_planet_res_times_, other->attack_planet_res_times_);
    std::swap(active_, other->active_);
    get_active_level_.Swap(&other->get_active_level_);
    std::swap(help_times_, other->help_times_);
    std::swap(lottery_count_, other->lottery_count_);
    blueprint_count_.Swap(&other->blueprint_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyData::GetTypeName() const {
  return "DailyData";
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementData::kContributeTimesFieldNumber;
const int AchievementData::kRechargeMoneyFieldNumber;
const int AchievementData::kConsumeMoneyFieldNumber;
const int AchievementData::kSignInDaysFieldNumber;
const int AchievementData::kLotteryCountFieldNumber;
const int AchievementData::kRechargeListFieldNumber;
const int AchievementData::kRechargeRealMoneyFieldNumber;
const int AchievementData::kTalkKeyFieldNumber;
const int AchievementData::kGuideListFieldNumber;
const int AchievementData::kFirstDevelopBlueprintFieldNumber;
const int AchievementData::kFirstFinishCollectFieldNumber;
const int AchievementData::kFirstDevelopShipFieldNumber;
const int AchievementData::kFirstFailedBattleFieldNumber;
const int AchievementData::kTaskFinishTimesFieldNumber;
const int AchievementData::kSlaveTimesFieldNumber;
const int AchievementData::kFirstLotteryMoneyFieldNumber;
const int AchievementData::kFirstLotteryResFieldNumber;
const int AchievementData::kBlueprintCountFieldNumber;
#endif  // !_MSC_VER

AchievementData::AchievementData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AchievementData::InitAsDefaultInstance() {
}

AchievementData::AchievementData(const AchievementData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementData::SharedCtor() {
  _cached_size_ = 0;
  contribute_times_ = 0;
  recharge_money_ = 0;
  consume_money_ = 0;
  sign_in_days_ = 0;
  lottery_count_ = 0;
  recharge_real_money_ = 0;
  talk_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  first_develop_blueprint_ = false;
  first_finish_collect_ = false;
  first_develop_ship_ = false;
  first_failed_battle_ = false;
  task_finish_times_ = 0;
  slave_times_ = 0;
  first_lottery_money_ = false;
  first_lottery_res_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementData::~AchievementData() {
  SharedDtor();
}

void AchievementData::SharedDtor() {
  if (talk_key_ != &::google::protobuf::internal::kEmptyString) {
    delete talk_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AchievementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AchievementData& AchievementData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

AchievementData* AchievementData::default_instance_ = NULL;

AchievementData* AchievementData::New() const {
  return new AchievementData;
}

void AchievementData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contribute_times_ = 0;
    recharge_money_ = 0;
    consume_money_ = 0;
    sign_in_days_ = 0;
    lottery_count_ = 0;
    recharge_real_money_ = 0;
    if (has_talk_key()) {
      if (talk_key_ != &::google::protobuf::internal::kEmptyString) {
        talk_key_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    first_develop_blueprint_ = false;
    first_finish_collect_ = false;
    first_develop_ship_ = false;
    first_failed_battle_ = false;
    task_finish_times_ = 0;
    slave_times_ = 0;
    first_lottery_money_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    first_lottery_res_ = false;
  }
  recharge_list_.Clear();
  guide_list_.Clear();
  blueprint_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AchievementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 contribute_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_times_)));
          set_has_contribute_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recharge_money;
        break;
      }

      // optional int32 recharge_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_money_)));
          set_has_recharge_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consume_money;
        break;
      }

      // optional int32 consume_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_money_)));
          set_has_consume_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sign_in_days;
        break;
      }

      // optional int32 sign_in_days = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_in_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_in_days_)));
          set_has_sign_in_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lottery_count;
        break;
      }

      // optional int32 lottery_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_count_)));
          set_has_lottery_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_recharge_list;
        break;
      }

      // repeated int32 recharge_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_recharge_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recharge_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_recharge_list;
        if (input->ExpectTag(56)) goto parse_recharge_real_money;
        break;
      }

      // optional int32 recharge_real_money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_real_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_real_money_)));
          set_has_recharge_real_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_talk_key;
        break;
      }

      // optional string talk_key = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talk_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_guide_list;
        break;
      }

      // repeated int32 guide_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_guide_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guide_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_guide_list;
        if (input->ExpectTag(80)) goto parse_first_develop_blueprint;
        break;
      }

      // optional bool first_develop_blueprint = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_develop_blueprint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_develop_blueprint_)));
          set_has_first_develop_blueprint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_first_finish_collect;
        break;
      }

      // optional bool first_finish_collect = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_finish_collect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_finish_collect_)));
          set_has_first_finish_collect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_first_develop_ship;
        break;
      }

      // optional bool first_develop_ship = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_develop_ship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_develop_ship_)));
          set_has_first_develop_ship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_first_failed_battle;
        break;
      }

      // optional bool first_failed_battle = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_failed_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_failed_battle_)));
          set_has_first_failed_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_task_finish_times;
        break;
      }

      // optional int32 task_finish_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_finish_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_finish_times_)));
          set_has_task_finish_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_slave_times;
        break;
      }

      // optional int32 slave_times = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slave_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slave_times_)));
          set_has_slave_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_first_lottery_money;
        break;
      }

      // optional bool first_lottery_money = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_lottery_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_lottery_money_)));
          set_has_first_lottery_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_first_lottery_res;
        break;
      }

      // optional bool first_lottery_res = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_lottery_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_lottery_res_)));
          set_has_first_lottery_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_blueprint_count;
        break;
      }

      // repeated .Point blueprint_count = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueprint_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blueprint_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_blueprint_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 contribute_times = 1;
  if (has_contribute_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->contribute_times(), output);
  }

  // optional int32 recharge_money = 2;
  if (has_recharge_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recharge_money(), output);
  }

  // optional int32 consume_money = 3;
  if (has_consume_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consume_money(), output);
  }

  // optional int32 sign_in_days = 4;
  if (has_sign_in_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sign_in_days(), output);
  }

  // optional int32 lottery_count = 5;
  if (has_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lottery_count(), output);
  }

  // repeated int32 recharge_list = 6;
  for (int i = 0; i < this->recharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->recharge_list(i), output);
  }

  // optional int32 recharge_real_money = 7;
  if (has_recharge_real_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recharge_real_money(), output);
  }

  // optional string talk_key = 8;
  if (has_talk_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->talk_key(), output);
  }

  // repeated int32 guide_list = 9;
  for (int i = 0; i < this->guide_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->guide_list(i), output);
  }

  // optional bool first_develop_blueprint = 10;
  if (has_first_develop_blueprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->first_develop_blueprint(), output);
  }

  // optional bool first_finish_collect = 11;
  if (has_first_finish_collect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->first_finish_collect(), output);
  }

  // optional bool first_develop_ship = 12;
  if (has_first_develop_ship()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->first_develop_ship(), output);
  }

  // optional bool first_failed_battle = 13;
  if (has_first_failed_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->first_failed_battle(), output);
  }

  // optional int32 task_finish_times = 14;
  if (has_task_finish_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->task_finish_times(), output);
  }

  // optional int32 slave_times = 15;
  if (has_slave_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->slave_times(), output);
  }

  // optional bool first_lottery_money = 16;
  if (has_first_lottery_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->first_lottery_money(), output);
  }

  // optional bool first_lottery_res = 17;
  if (has_first_lottery_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->first_lottery_res(), output);
  }

  // repeated .Point blueprint_count = 18;
  for (int i = 0; i < this->blueprint_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->blueprint_count(i), output);
  }

}

int AchievementData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 contribute_times = 1;
    if (has_contribute_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute_times());
    }

    // optional int32 recharge_money = 2;
    if (has_recharge_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_money());
    }

    // optional int32 consume_money = 3;
    if (has_consume_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_money());
    }

    // optional int32 sign_in_days = 4;
    if (has_sign_in_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_in_days());
    }

    // optional int32 lottery_count = 5;
    if (has_lottery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery_count());
    }

    // optional int32 recharge_real_money = 7;
    if (has_recharge_real_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_real_money());
    }

    // optional string talk_key = 8;
    if (has_talk_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talk_key());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool first_develop_blueprint = 10;
    if (has_first_develop_blueprint()) {
      total_size += 1 + 1;
    }

    // optional bool first_finish_collect = 11;
    if (has_first_finish_collect()) {
      total_size += 1 + 1;
    }

    // optional bool first_develop_ship = 12;
    if (has_first_develop_ship()) {
      total_size += 1 + 1;
    }

    // optional bool first_failed_battle = 13;
    if (has_first_failed_battle()) {
      total_size += 1 + 1;
    }

    // optional int32 task_finish_times = 14;
    if (has_task_finish_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_finish_times());
    }

    // optional int32 slave_times = 15;
    if (has_slave_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slave_times());
    }

    // optional bool first_lottery_money = 16;
    if (has_first_lottery_money()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool first_lottery_res = 17;
    if (has_first_lottery_res()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 recharge_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->recharge_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recharge_list(i));
    }
    total_size += 1 * this->recharge_list_size() + data_size;
  }

  // repeated int32 guide_list = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->guide_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guide_list(i));
    }
    total_size += 1 * this->guide_list_size() + data_size;
  }

  // repeated .Point blueprint_count = 18;
  total_size += 2 * this->blueprint_count_size();
  for (int i = 0; i < this->blueprint_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blueprint_count(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AchievementData*>(&from));
}

void AchievementData::MergeFrom(const AchievementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recharge_list_.MergeFrom(from.recharge_list_);
  guide_list_.MergeFrom(from.guide_list_);
  blueprint_count_.MergeFrom(from.blueprint_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contribute_times()) {
      set_contribute_times(from.contribute_times());
    }
    if (from.has_recharge_money()) {
      set_recharge_money(from.recharge_money());
    }
    if (from.has_consume_money()) {
      set_consume_money(from.consume_money());
    }
    if (from.has_sign_in_days()) {
      set_sign_in_days(from.sign_in_days());
    }
    if (from.has_lottery_count()) {
      set_lottery_count(from.lottery_count());
    }
    if (from.has_recharge_real_money()) {
      set_recharge_real_money(from.recharge_real_money());
    }
    if (from.has_talk_key()) {
      set_talk_key(from.talk_key());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_first_develop_blueprint()) {
      set_first_develop_blueprint(from.first_develop_blueprint());
    }
    if (from.has_first_finish_collect()) {
      set_first_finish_collect(from.first_finish_collect());
    }
    if (from.has_first_develop_ship()) {
      set_first_develop_ship(from.first_develop_ship());
    }
    if (from.has_first_failed_battle()) {
      set_first_failed_battle(from.first_failed_battle());
    }
    if (from.has_task_finish_times()) {
      set_task_finish_times(from.task_finish_times());
    }
    if (from.has_slave_times()) {
      set_slave_times(from.slave_times());
    }
    if (from.has_first_lottery_money()) {
      set_first_lottery_money(from.first_lottery_money());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_first_lottery_res()) {
      set_first_lottery_res(from.first_lottery_res());
    }
  }
}

void AchievementData::CopyFrom(const AchievementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementData::IsInitialized() const {

  for (int i = 0; i < blueprint_count_size(); i++) {
    if (!this->blueprint_count(i).IsInitialized()) return false;
  }
  return true;
}

void AchievementData::Swap(AchievementData* other) {
  if (other != this) {
    std::swap(contribute_times_, other->contribute_times_);
    std::swap(recharge_money_, other->recharge_money_);
    std::swap(consume_money_, other->consume_money_);
    std::swap(sign_in_days_, other->sign_in_days_);
    std::swap(lottery_count_, other->lottery_count_);
    recharge_list_.Swap(&other->recharge_list_);
    std::swap(recharge_real_money_, other->recharge_real_money_);
    std::swap(talk_key_, other->talk_key_);
    guide_list_.Swap(&other->guide_list_);
    std::swap(first_develop_blueprint_, other->first_develop_blueprint_);
    std::swap(first_finish_collect_, other->first_finish_collect_);
    std::swap(first_develop_ship_, other->first_develop_ship_);
    std::swap(first_failed_battle_, other->first_failed_battle_);
    std::swap(task_finish_times_, other->task_finish_times_);
    std::swap(slave_times_, other->slave_times_);
    std::swap(first_lottery_money_, other->first_lottery_money_);
    std::swap(first_lottery_res_, other->first_lottery_res_);
    blueprint_count_.Swap(&other->blueprint_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AchievementData::GetTypeName() const {
  return "AchievementData";
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kFinishedFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  finished_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskInfo& TaskInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
    finished_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finished;
        break;
      }

      // optional bool finished = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  // optional bool finished = 2;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->finished(), output);
  }

}

int TaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

    // optional bool finished = 2;
    if (has_finished()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskInfo*>(&from));
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
  }
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(finished_, other->finished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskInfo::GetTypeName() const {
  return "TaskInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int BuildQueue::kDurationTimeFieldNumber;
const int BuildQueue::kOpenTimeFieldNumber;
const int BuildQueue::kTypeFieldNumber;
const int BuildQueue::kIndexFieldNumber;
#endif  // !_MSC_VER

BuildQueue::BuildQueue()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BuildQueue::InitAsDefaultInstance() {
}

BuildQueue::BuildQueue(const BuildQueue& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BuildQueue::SharedCtor() {
  _cached_size_ = 0;
  duration_time_ = GOOGLE_LONGLONG(0);
  open_time_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildQueue::~BuildQueue() {
  SharedDtor();
}

void BuildQueue::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BuildQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BuildQueue& BuildQueue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

BuildQueue* BuildQueue::default_instance_ = NULL;

BuildQueue* BuildQueue::New() const {
  return new BuildQueue;
}

void BuildQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_time_ = GOOGLE_LONGLONG(0);
    open_time_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BuildQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 duration_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_time_)));
          set_has_duration_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_time;
        break;
      }

      // required int64 open_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_time_)));
          set_has_open_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 duration_time = 1;
  if (has_duration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->duration_time(), output);
  }

  // required int64 open_time = 2;
  if (has_open_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->open_time(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

}

int BuildQueue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 duration_time = 1;
    if (has_duration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration_time());
    }

    // required int64 open_time = 2;
    if (has_open_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->open_time());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildQueue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BuildQueue*>(&from));
}

void BuildQueue::MergeFrom(const BuildQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration_time()) {
      set_duration_time(from.duration_time());
    }
    if (from.has_open_time()) {
      set_open_time(from.open_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
}

void BuildQueue::CopyFrom(const BuildQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildQueue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BuildQueue::Swap(BuildQueue* other) {
  if (other != this) {
    std::swap(duration_time_, other->duration_time_);
    std::swap(open_time_, other->open_time_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BuildQueue::GetTypeName() const {
  return "BuildQueue";
}


// ===================================================================

#ifndef _MSC_VER
const int TechContributeData::kTechIdFieldNumber;
const int TechContributeData::kItemIndexListFieldNumber;
#endif  // !_MSC_VER

TechContributeData::TechContributeData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TechContributeData::InitAsDefaultInstance() {
}

TechContributeData::TechContributeData(const TechContributeData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TechContributeData::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechContributeData::~TechContributeData() {
  SharedDtor();
}

void TechContributeData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TechContributeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TechContributeData& TechContributeData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

TechContributeData* TechContributeData::default_instance_ = NULL;

TechContributeData* TechContributeData::New() const {
  return new TechContributeData;
}

void TechContributeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  item_index_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TechContributeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_index_list;
        break;
      }

      // repeated int32 item_index_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_index_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_item_index_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_index_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_index_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechContributeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

  // repeated int32 item_index_list = 2;
  for (int i = 0; i < this->item_index_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->item_index_list(i), output);
  }

}

int TechContributeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  // repeated int32 item_index_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_index_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_index_list(i));
    }
    total_size += 1 * this->item_index_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechContributeData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TechContributeData*>(&from));
}

void TechContributeData::MergeFrom(const TechContributeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_index_list_.MergeFrom(from.item_index_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
}

void TechContributeData::CopyFrom(const TechContributeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechContributeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TechContributeData::Swap(TechContributeData* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    item_index_list_.Swap(&other->item_index_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TechContributeData::GetTypeName() const {
  return "TechContributeData";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupPVECheckpoint::kGroupBossIdFieldNumber;
const int GroupPVECheckpoint::kHurterHpListFieldNumber;
const int GroupPVECheckpoint::kDamageFieldNumber;
const int GroupPVECheckpoint::kChallengeTimesFieldNumber;
const int GroupPVECheckpoint::kBuyChallengeTimesFieldNumber;
const int GroupPVECheckpoint::kGetRewardListFieldNumber;
#endif  // !_MSC_VER

GroupPVECheckpoint::GroupPVECheckpoint()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupPVECheckpoint::InitAsDefaultInstance() {
}

GroupPVECheckpoint::GroupPVECheckpoint(const GroupPVECheckpoint& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVECheckpoint::SharedCtor() {
  _cached_size_ = 0;
  group_boss_id_ = 0;
  damage_ = 0;
  challenge_times_ = 0;
  buy_challenge_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVECheckpoint::~GroupPVECheckpoint() {
  SharedDtor();
}

void GroupPVECheckpoint::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupPVECheckpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupPVECheckpoint& GroupPVECheckpoint::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

GroupPVECheckpoint* GroupPVECheckpoint::default_instance_ = NULL;

GroupPVECheckpoint* GroupPVECheckpoint::New() const {
  return new GroupPVECheckpoint;
}

void GroupPVECheckpoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_boss_id_ = 0;
    damage_ = 0;
    challenge_times_ = 0;
    buy_challenge_times_ = 0;
  }
  hurter_hp_list_.Clear();
  get_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupPVECheckpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_boss_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_boss_id_)));
          set_has_group_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hurter_hp_list;
        break;
      }

      // repeated int32 hurter_hp_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurter_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_hurter_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hurter_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hurter_hp_list;
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // required int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_challenge_times;
        break;
      }

      // required int32 challenge_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_times_)));
          set_has_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_challenge_times;
        break;
      }

      // required int32 buy_challenge_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_challenge_times_)));
          set_has_buy_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_get_reward_list;
        break;
      }

      // repeated bool get_reward_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 48, input, this->mutable_get_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_get_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_get_reward_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVECheckpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_boss_id(), output);
  }

  // repeated int32 hurter_hp_list = 2;
  for (int i = 0; i < this->hurter_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->hurter_hp_list(i), output);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  // required int32 challenge_times = 4;
  if (has_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->challenge_times(), output);
  }

  // required int32 buy_challenge_times = 5;
  if (has_buy_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_challenge_times(), output);
  }

  // repeated bool get_reward_list = 6;
  for (int i = 0; i < this->get_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      6, this->get_reward_list(i), output);
  }

}

int GroupPVECheckpoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_boss_id = 1;
    if (has_group_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_boss_id());
    }

    // required int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required int32 challenge_times = 4;
    if (has_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_times());
    }

    // required int32 buy_challenge_times = 5;
    if (has_buy_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_challenge_times());
    }

  }
  // repeated int32 hurter_hp_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hurter_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hurter_hp_list(i));
    }
    total_size += 1 * this->hurter_hp_list_size() + data_size;
  }

  // repeated bool get_reward_list = 6;
  {
    int data_size = 0;
    data_size = 1 * this->get_reward_list_size();
    total_size += 1 * this->get_reward_list_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVECheckpoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupPVECheckpoint*>(&from));
}

void GroupPVECheckpoint::MergeFrom(const GroupPVECheckpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  hurter_hp_list_.MergeFrom(from.hurter_hp_list_);
  get_reward_list_.MergeFrom(from.get_reward_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_boss_id()) {
      set_group_boss_id(from.group_boss_id());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_challenge_times()) {
      set_challenge_times(from.challenge_times());
    }
    if (from.has_buy_challenge_times()) {
      set_buy_challenge_times(from.buy_challenge_times());
    }
  }
}

void GroupPVECheckpoint::CopyFrom(const GroupPVECheckpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVECheckpoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void GroupPVECheckpoint::Swap(GroupPVECheckpoint* other) {
  if (other != this) {
    std::swap(group_boss_id_, other->group_boss_id_);
    hurter_hp_list_.Swap(&other->hurter_hp_list_);
    std::swap(damage_, other->damage_);
    std::swap(challenge_times_, other->challenge_times_);
    std::swap(buy_challenge_times_, other->buy_challenge_times_);
    get_reward_list_.Swap(&other->get_reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupPVECheckpoint::GetTypeName() const {
  return "GroupPVECheckpoint";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupData::kGroupidFieldNumber;
const int GroupData::kJobFieldNumber;
const int GroupData::kStatusFieldNumber;
const int GroupData::kIconIdFieldNumber;
const int GroupData::kAntiTimeFieldNumber;
const int GroupData::kTodayJoinNumFieldNumber;
const int GroupData::kContributeFieldNumber;
const int GroupData::kTechContributeListFieldNumber;
const int GroupData::kContributeEndCdFieldNumber;
const int GroupData::kContributeLockerFieldNumber;
const int GroupData::kPveCheckpointListFieldNumber;
const int GroupData::kHelpTimesFieldNumber;
const int GroupData::kTodayWorshipLevelFieldNumber;
const int GroupData::kGettedWorshipRewardFieldNumber;
#endif  // !_MSC_VER

GroupData::GroupData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupData::InitAsDefaultInstance() {
}

GroupData::GroupData(const GroupData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupData::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0;
  status_ = 0;
  icon_id_ = 0;
  anti_time_ = GOOGLE_LONGLONG(0);
  today_join_num_ = 0;
  contribute_ = 0;
  contribute_end_cd_ = GOOGLE_LONGLONG(0);
  contribute_locker_ = false;
  help_times_ = 0;
  today_worship_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupData::~GroupData() {
  SharedDtor();
}

void GroupData::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupData& GroupData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

GroupData* GroupData::default_instance_ = NULL;

GroupData* GroupData::New() const {
  return new GroupData;
}

void GroupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    job_ = 0;
    status_ = 0;
    icon_id_ = 0;
    anti_time_ = GOOGLE_LONGLONG(0);
    today_join_num_ = 0;
    contribute_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    contribute_end_cd_ = GOOGLE_LONGLONG(0);
    contribute_locker_ = false;
    help_times_ = 0;
    today_worship_level_ = 0;
  }
  tech_contribute_list_.Clear();
  pve_checkpoint_list_.Clear();
  getted_worship_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // required int32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon_id;
        break;
      }

      // optional int32 icon_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_anti_time;
        break;
      }

      // optional int64 anti_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anti_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &anti_time_)));
          set_has_anti_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_today_join_num;
        break;
      }

      // optional int32 today_join_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_join_num_)));
          set_has_today_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tech_contribute_list;
        break;
      }

      // repeated .TechContributeData tech_contribute_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tech_contribute_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tech_contribute_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tech_contribute_list;
        if (input->ExpectTag(72)) goto parse_contribute_end_cd;
        break;
      }

      // optional int64 contribute_end_cd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute_end_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &contribute_end_cd_)));
          set_has_contribute_end_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_contribute_locker;
        break;
      }

      // optional bool contribute_locker = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute_locker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contribute_locker_)));
          set_has_contribute_locker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pve_checkpoint_list;
        break;
      }

      // repeated .GroupPVECheckpoint pve_checkpoint_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pve_checkpoint_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pve_checkpoint_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pve_checkpoint_list;
        if (input->ExpectTag(96)) goto parse_help_times;
        break;
      }

      // optional int32 help_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_help_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &help_times_)));
          set_has_help_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_today_worship_level;
        break;
      }

      // optional int32 today_worship_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_worship_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_worship_level_)));
          set_has_today_worship_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_getted_worship_reward;
        break;
      }

      // repeated bool getted_worship_reward = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_worship_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 112, input, this->mutable_getted_worship_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_getted_worship_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_getted_worship_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }

  // required int32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional int32 icon_id = 4;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icon_id(), output);
  }

  // optional int64 anti_time = 5;
  if (has_anti_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->anti_time(), output);
  }

  // optional int32 today_join_num = 6;
  if (has_today_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->today_join_num(), output);
  }

  // optional int32 contribute = 7;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->contribute(), output);
  }

  // repeated .TechContributeData tech_contribute_list = 8;
  for (int i = 0; i < this->tech_contribute_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->tech_contribute_list(i), output);
  }

  // optional int64 contribute_end_cd = 9;
  if (has_contribute_end_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->contribute_end_cd(), output);
  }

  // optional bool contribute_locker = 10;
  if (has_contribute_locker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->contribute_locker(), output);
  }

  // repeated .GroupPVECheckpoint pve_checkpoint_list = 11;
  for (int i = 0; i < this->pve_checkpoint_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->pve_checkpoint_list(i), output);
  }

  // optional int32 help_times = 12;
  if (has_help_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->help_times(), output);
  }

  // optional int32 today_worship_level = 13;
  if (has_today_worship_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->today_worship_level(), output);
  }

  // repeated bool getted_worship_reward = 14;
  for (int i = 0; i < this->getted_worship_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      14, this->getted_worship_reward(i), output);
  }

}

int GroupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // required int32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 icon_id = 4;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // optional int64 anti_time = 5;
    if (has_anti_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->anti_time());
    }

    // optional int32 today_join_num = 6;
    if (has_today_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_join_num());
    }

    // optional int32 contribute = 7;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 contribute_end_cd = 9;
    if (has_contribute_end_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->contribute_end_cd());
    }

    // optional bool contribute_locker = 10;
    if (has_contribute_locker()) {
      total_size += 1 + 1;
    }

    // optional int32 help_times = 12;
    if (has_help_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->help_times());
    }

    // optional int32 today_worship_level = 13;
    if (has_today_worship_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_worship_level());
    }

  }
  // repeated .TechContributeData tech_contribute_list = 8;
  total_size += 1 * this->tech_contribute_list_size();
  for (int i = 0; i < this->tech_contribute_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tech_contribute_list(i));
  }

  // repeated .GroupPVECheckpoint pve_checkpoint_list = 11;
  total_size += 1 * this->pve_checkpoint_list_size();
  for (int i = 0; i < this->pve_checkpoint_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pve_checkpoint_list(i));
  }

  // repeated bool getted_worship_reward = 14;
  {
    int data_size = 0;
    data_size = 1 * this->getted_worship_reward_size();
    total_size += 1 * this->getted_worship_reward_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupData*>(&from));
}

void GroupData::MergeFrom(const GroupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tech_contribute_list_.MergeFrom(from.tech_contribute_list_);
  pve_checkpoint_list_.MergeFrom(from.pve_checkpoint_list_);
  getted_worship_reward_.MergeFrom(from.getted_worship_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_anti_time()) {
      set_anti_time(from.anti_time());
    }
    if (from.has_today_join_num()) {
      set_today_join_num(from.today_join_num());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_contribute_end_cd()) {
      set_contribute_end_cd(from.contribute_end_cd());
    }
    if (from.has_contribute_locker()) {
      set_contribute_locker(from.contribute_locker());
    }
    if (from.has_help_times()) {
      set_help_times(from.help_times());
    }
    if (from.has_today_worship_level()) {
      set_today_worship_level(from.today_worship_level());
    }
  }
}

void GroupData::CopyFrom(const GroupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < tech_contribute_list_size(); i++) {
    if (!this->tech_contribute_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pve_checkpoint_list_size(); i++) {
    if (!this->pve_checkpoint_list(i).IsInitialized()) return false;
  }
  return true;
}

void GroupData::Swap(GroupData* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(job_, other->job_);
    std::swap(status_, other->status_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(anti_time_, other->anti_time_);
    std::swap(today_join_num_, other->today_join_num_);
    std::swap(contribute_, other->contribute_);
    tech_contribute_list_.Swap(&other->tech_contribute_list_);
    std::swap(contribute_end_cd_, other->contribute_end_cd_);
    std::swap(contribute_locker_, other->contribute_locker_);
    pve_checkpoint_list_.Swap(&other->pve_checkpoint_list_);
    std::swap(help_times_, other->help_times_);
    std::swap(today_worship_level_, other->today_worship_level_);
    getted_worship_reward_.Swap(&other->getted_worship_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupData::GetTypeName() const {
  return "GroupData";
}


// ===================================================================

#ifndef _MSC_VER
const int TechnologyData::kTechInfoFieldNumber;
const int TechnologyData::kUpgradeBusyFieldNumber;
const int TechnologyData::kTechIdFieldNumber;
#endif  // !_MSC_VER

TechnologyData::TechnologyData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TechnologyData::InitAsDefaultInstance() {
}

TechnologyData::TechnologyData(const TechnologyData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TechnologyData::SharedCtor() {
  _cached_size_ = 0;
  upgrade_busy_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechnologyData::~TechnologyData() {
  SharedDtor();
}

void TechnologyData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TechnologyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TechnologyData& TechnologyData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

TechnologyData* TechnologyData::default_instance_ = NULL;

TechnologyData* TechnologyData::New() const {
  return new TechnologyData;
}

void TechnologyData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    upgrade_busy_ = 0;
    tech_id_ = 0;
  }
  tech_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TechnologyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TechnologyInfo tech_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tech_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tech_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tech_info;
        if (input->ExpectTag(16)) goto parse_upgrade_busy;
        break;
      }

      // optional int32 upgrade_busy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_busy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_busy_)));
          set_has_upgrade_busy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tech_id;
        break;
      }

      // optional int32 tech_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tech_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechnologyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TechnologyInfo tech_info = 1;
  for (int i = 0; i < this->tech_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tech_info(i), output);
  }

  // optional int32 upgrade_busy = 2;
  if (has_upgrade_busy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgrade_busy(), output);
  }

  // optional int32 tech_id = 3;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tech_id(), output);
  }

}

int TechnologyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 upgrade_busy = 2;
    if (has_upgrade_busy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_busy());
    }

    // optional int32 tech_id = 3;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  // repeated .TechnologyInfo tech_info = 1;
  total_size += 1 * this->tech_info_size();
  for (int i = 0; i < this->tech_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tech_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechnologyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TechnologyData*>(&from));
}

void TechnologyData::MergeFrom(const TechnologyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tech_info_.MergeFrom(from.tech_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_upgrade_busy()) {
      set_upgrade_busy(from.upgrade_busy());
    }
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
}

void TechnologyData::CopyFrom(const TechnologyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnologyData::IsInitialized() const {

  for (int i = 0; i < tech_info_size(); i++) {
    if (!this->tech_info(i).IsInitialized()) return false;
  }
  return true;
}

void TechnologyData::Swap(TechnologyData* other) {
  if (other != this) {
    tech_info_.Swap(&other->tech_info_);
    std::swap(upgrade_busy_, other->upgrade_busy_);
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TechnologyData::GetTypeName() const {
  return "TechnologyData";
}


// ===================================================================

#ifndef _MSC_VER
const int TechnologyInfo::kTechIdFieldNumber;
const int TechnologyInfo::kBeginUpgradeTimeFieldNumber;
const int TechnologyInfo::kHelpedFieldNumber;
#endif  // !_MSC_VER

TechnologyInfo::TechnologyInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TechnologyInfo::InitAsDefaultInstance() {
}

TechnologyInfo::TechnologyInfo(const TechnologyInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TechnologyInfo::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  begin_upgrade_time_ = GOOGLE_LONGLONG(0);
  helped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TechnologyInfo::~TechnologyInfo() {
  SharedDtor();
}

void TechnologyInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TechnologyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TechnologyInfo& TechnologyInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

TechnologyInfo* TechnologyInfo::default_instance_ = NULL;

TechnologyInfo* TechnologyInfo::New() const {
  return new TechnologyInfo;
}

void TechnologyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
    begin_upgrade_time_ = GOOGLE_LONGLONG(0);
    helped_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TechnologyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_upgrade_time;
        break;
      }

      // optional int64 begin_upgrade_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_upgrade_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_upgrade_time_)));
          set_has_begin_upgrade_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_helped;
        break;
      }

      // optional bool helped = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helped_)));
          set_has_helped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TechnologyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

  // optional int64 begin_upgrade_time = 2;
  if (has_begin_upgrade_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begin_upgrade_time(), output);
  }

  // optional bool helped = 3;
  if (has_helped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->helped(), output);
  }

}

int TechnologyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

    // optional int64 begin_upgrade_time = 2;
    if (has_begin_upgrade_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_upgrade_time());
    }

    // optional bool helped = 3;
    if (has_helped()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TechnologyInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TechnologyInfo*>(&from));
}

void TechnologyInfo::MergeFrom(const TechnologyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
    if (from.has_begin_upgrade_time()) {
      set_begin_upgrade_time(from.begin_upgrade_time());
    }
    if (from.has_helped()) {
      set_helped(from.helped());
    }
  }
}

void TechnologyInfo::CopyFrom(const TechnologyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnologyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TechnologyInfo::Swap(TechnologyInfo* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(begin_upgrade_time_, other->begin_upgrade_time_);
    std::swap(helped_, other->helped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TechnologyInfo::GetTypeName() const {
  return "TechnologyInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRank::kRankFieldNumber;
const int ArenaRank::kIsChallengedFieldNumber;
#endif  // !_MSC_VER

ArenaRank::ArenaRank()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaRank::InitAsDefaultInstance() {
}

ArenaRank::ArenaRank(const ArenaRank& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  ischallenged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRank::~ArenaRank() {
  SharedDtor();
}

void ArenaRank::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaRank& ArenaRank::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

ArenaRank* ArenaRank::default_instance_ = NULL;

ArenaRank* ArenaRank::New() const {
  return new ArenaRank;
}

void ArenaRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    ischallenged_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isChallenged;
        break;
      }

      // required bool isChallenged = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isChallenged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischallenged_)));
          set_has_ischallenged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // required bool isChallenged = 2;
  if (has_ischallenged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ischallenged(), output);
  }

}

int ArenaRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required bool isChallenged = 2;
    if (has_ischallenged()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRank::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaRank*>(&from));
}

void ArenaRank::MergeFrom(const ArenaRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_ischallenged()) {
      set_ischallenged(from.ischallenged());
    }
  }
}

void ArenaRank::CopyFrom(const ArenaRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ArenaRank::Swap(ArenaRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(ischallenged_, other->ischallenged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaRank::GetTypeName() const {
  return "ArenaRank";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaData::kChallengeTimesFieldNumber;
const int ArenaData::kPurchasedChallengeTimesFieldNumber;
const int ArenaData::kHonourPointFieldNumber;
const int ArenaData::kChallengeListFieldNumber;
const int ArenaData::kLastFailedTimeFieldNumber;
const int ArenaData::kTargetRankFieldNumber;
const int ArenaData::kDailyRewardFieldNumber;
const int ArenaData::kAlreadyChallengeTimesFieldNumber;
const int ArenaData::kWinChallengeTimesFieldNumber;
const int ArenaData::kTitleLevelFieldNumber;
#endif  // !_MSC_VER

ArenaData::ArenaData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaData::InitAsDefaultInstance() {
}

ArenaData::ArenaData(const ArenaData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaData::SharedCtor() {
  _cached_size_ = 0;
  challenge_times_ = 0;
  purchased_challenge_times_ = 0;
  honour_point_ = 0;
  last_failed_time_ = GOOGLE_LONGLONG(0);
  target_rank_ = 0;
  daily_reward_ = 0;
  already_challenge_times_ = 0;
  win_challenge_times_ = 0;
  title_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaData::~ArenaData() {
  SharedDtor();
}

void ArenaData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaData& ArenaData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

ArenaData* ArenaData::default_instance_ = NULL;

ArenaData* ArenaData::New() const {
  return new ArenaData;
}

void ArenaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challenge_times_ = 0;
    purchased_challenge_times_ = 0;
    honour_point_ = 0;
    last_failed_time_ = GOOGLE_LONGLONG(0);
    target_rank_ = 0;
    daily_reward_ = 0;
    already_challenge_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_challenge_times_ = 0;
    title_level_ = 0;
  }
  challenge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challenge_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challenge_times_)));
          set_has_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_purchased_challenge_times;
        break;
      }

      // required int32 purchased_challenge_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purchased_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchased_challenge_times_)));
          set_has_purchased_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_honour_point;
        break;
      }

      // required int32 honour_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honour_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honour_point_)));
          set_has_honour_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_challenge_list;
        break;
      }

      // repeated .ArenaRank challenge_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenge_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_challenge_list;
        if (input->ExpectTag(40)) goto parse_last_failed_time;
        break;
      }

      // required int64 last_failed_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_failed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_failed_time_)));
          set_has_last_failed_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_target_rank;
        break;
      }

      // required int32 target_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_rank_)));
          set_has_target_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_daily_reward;
        break;
      }

      // required int32 daily_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_reward_)));
          set_has_daily_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_already_challenge_times;
        break;
      }

      // required int32 already_challenge_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_challenge_times_)));
          set_has_already_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win_challenge_times;
        break;
      }

      // required int32 win_challenge_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_challenge_times_)));
          set_has_win_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_title_level;
        break;
      }

      // required int32 title_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_level_)));
          set_has_title_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 challenge_times = 1;
  if (has_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challenge_times(), output);
  }

  // required int32 purchased_challenge_times = 2;
  if (has_purchased_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchased_challenge_times(), output);
  }

  // required int32 honour_point = 3;
  if (has_honour_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->honour_point(), output);
  }

  // repeated .ArenaRank challenge_list = 4;
  for (int i = 0; i < this->challenge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->challenge_list(i), output);
  }

  // required int64 last_failed_time = 5;
  if (has_last_failed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_failed_time(), output);
  }

  // required int32 target_rank = 6;
  if (has_target_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->target_rank(), output);
  }

  // required int32 daily_reward = 7;
  if (has_daily_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->daily_reward(), output);
  }

  // required int32 already_challenge_times = 8;
  if (has_already_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->already_challenge_times(), output);
  }

  // required int32 win_challenge_times = 9;
  if (has_win_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->win_challenge_times(), output);
  }

  // required int32 title_level = 10;
  if (has_title_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->title_level(), output);
  }

}

int ArenaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challenge_times = 1;
    if (has_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challenge_times());
    }

    // required int32 purchased_challenge_times = 2;
    if (has_purchased_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchased_challenge_times());
    }

    // required int32 honour_point = 3;
    if (has_honour_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honour_point());
    }

    // required int64 last_failed_time = 5;
    if (has_last_failed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_failed_time());
    }

    // required int32 target_rank = 6;
    if (has_target_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_rank());
    }

    // required int32 daily_reward = 7;
    if (has_daily_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_reward());
    }

    // required int32 already_challenge_times = 8;
    if (has_already_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_challenge_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 win_challenge_times = 9;
    if (has_win_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_challenge_times());
    }

    // required int32 title_level = 10;
    if (has_title_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_level());
    }

  }
  // repeated .ArenaRank challenge_list = 4;
  total_size += 1 * this->challenge_list_size();
  for (int i = 0; i < this->challenge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challenge_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaData*>(&from));
}

void ArenaData::MergeFrom(const ArenaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  challenge_list_.MergeFrom(from.challenge_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge_times()) {
      set_challenge_times(from.challenge_times());
    }
    if (from.has_purchased_challenge_times()) {
      set_purchased_challenge_times(from.purchased_challenge_times());
    }
    if (from.has_honour_point()) {
      set_honour_point(from.honour_point());
    }
    if (from.has_last_failed_time()) {
      set_last_failed_time(from.last_failed_time());
    }
    if (from.has_target_rank()) {
      set_target_rank(from.target_rank());
    }
    if (from.has_daily_reward()) {
      set_daily_reward(from.daily_reward());
    }
    if (from.has_already_challenge_times()) {
      set_already_challenge_times(from.already_challenge_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_challenge_times()) {
      set_win_challenge_times(from.win_challenge_times());
    }
    if (from.has_title_level()) {
      set_title_level(from.title_level());
    }
  }
}

void ArenaData::CopyFrom(const ArenaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003f7) != 0x000003f7) return false;

  for (int i = 0; i < challenge_list_size(); i++) {
    if (!this->challenge_list(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaData::Swap(ArenaData* other) {
  if (other != this) {
    std::swap(challenge_times_, other->challenge_times_);
    std::swap(purchased_challenge_times_, other->purchased_challenge_times_);
    std::swap(honour_point_, other->honour_point_);
    challenge_list_.Swap(&other->challenge_list_);
    std::swap(last_failed_time_, other->last_failed_time_);
    std::swap(target_rank_, other->target_rank_);
    std::swap(daily_reward_, other->daily_reward_);
    std::swap(already_challenge_times_, other->already_challenge_times_);
    std::swap(win_challenge_times_, other->win_challenge_times_);
    std::swap(title_level_, other->title_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaData::GetTypeName() const {
  return "ArenaData";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendFamiliarity::kUserNameFieldNumber;
const int FriendFamiliarity::kFamiliarityFieldNumber;
#endif  // !_MSC_VER

FriendFamiliarity::FriendFamiliarity()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendFamiliarity::InitAsDefaultInstance() {
}

FriendFamiliarity::FriendFamiliarity(const FriendFamiliarity& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendFamiliarity::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  familiarity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendFamiliarity::~FriendFamiliarity() {
  SharedDtor();
}

void FriendFamiliarity::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendFamiliarity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendFamiliarity& FriendFamiliarity::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

FriendFamiliarity* FriendFamiliarity::default_instance_ = NULL;

FriendFamiliarity* FriendFamiliarity::New() const {
  return new FriendFamiliarity;
}

void FriendFamiliarity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    familiarity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendFamiliarity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_familiarity;
        break;
      }

      // required int32 familiarity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_familiarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &familiarity_)));
          set_has_familiarity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendFamiliarity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 familiarity = 2;
  if (has_familiarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->familiarity(), output);
  }

}

int FriendFamiliarity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 familiarity = 2;
    if (has_familiarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->familiarity());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendFamiliarity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendFamiliarity*>(&from));
}

void FriendFamiliarity::MergeFrom(const FriendFamiliarity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_familiarity()) {
      set_familiarity(from.familiarity());
    }
  }
}

void FriendFamiliarity::CopyFrom(const FriendFamiliarity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendFamiliarity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FriendFamiliarity::Swap(FriendFamiliarity* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(familiarity_, other->familiarity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendFamiliarity::GetTypeName() const {
  return "FriendFamiliarity";
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsData::kFriendsListFieldNumber;
const int FriendsData::kBlackListFieldNumber;
const int FriendsData::kTalkListFieldNumber;
const int FriendsData::kFriendsFamiliarityFieldNumber;
const int FriendsData::kAddTiliFieldNumber;
const int FriendsData::kReadTiliFieldNumber;
const int FriendsData::kAddTiliCountFieldNumber;
const int FriendsData::kReadTiliCountFieldNumber;
#endif  // !_MSC_VER

FriendsData::FriendsData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FriendsData::InitAsDefaultInstance() {
}

FriendsData::FriendsData(const FriendsData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsData::SharedCtor() {
  _cached_size_ = 0;
  add_tili_count_ = 0;
  read_tili_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsData::~FriendsData() {
  SharedDtor();
}

void FriendsData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FriendsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FriendsData& FriendsData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserInfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserInfo_2eproto();
#endif
  return *default_instance_;
}

FriendsData* FriendsData::default_instance_ = NULL;

FriendsData* FriendsData::New() const {
  return new FriendsData;
}

void FriendsData::Clear() {
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    add_tili_count_ = 0;
    read_tili_count_ = 0;
  }
  friends_list_.Clear();
  black_list_.Clear();
  talk_list_.Clear();
  friends_familiarity_.Clear();
  add_tili_.Clear();
  read_tili_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FriendsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string friends_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_friends_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends_list;
        if (input->ExpectTag(18)) goto parse_black_list;
        break;
      }

      // repeated string black_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_black_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_black_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_black_list;
        if (input->ExpectTag(26)) goto parse_talk_list;
        break;
      }

      // repeated string talk_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_talk_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_talk_list;
        if (input->ExpectTag(34)) goto parse_friends_familiarity;
        break;
      }

      // repeated .FriendFamiliarity friends_familiarity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends_familiarity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends_familiarity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friends_familiarity;
        if (input->ExpectTag(42)) goto parse_add_tili;
        break;
      }

      // repeated string add_tili = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_tili:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_add_tili()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_add_tili;
        if (input->ExpectTag(50)) goto parse_read_tili;
        break;
      }

      // repeated string read_tili = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read_tili:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_read_tili()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_read_tili;
        if (input->ExpectTag(56)) goto parse_add_tili_count;
        break;
      }

      // optional int32 add_tili_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_tili_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_tili_count_)));
          set_has_add_tili_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_read_tili_count;
        break;
      }

      // optional int32 read_tili_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_tili_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_tili_count_)));
          set_has_read_tili_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string friends_list = 1;
  for (int i = 0; i < this->friends_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->friends_list(i), output);
  }

  // repeated string black_list = 2;
  for (int i = 0; i < this->black_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->black_list(i), output);
  }

  // repeated string talk_list = 3;
  for (int i = 0; i < this->talk_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->talk_list(i), output);
  }

  // repeated .FriendFamiliarity friends_familiarity = 4;
  for (int i = 0; i < this->friends_familiarity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->friends_familiarity(i), output);
  }

  // repeated string add_tili = 5;
  for (int i = 0; i < this->add_tili_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->add_tili(i), output);
  }

  // repeated string read_tili = 6;
  for (int i = 0; i < this->read_tili_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->read_tili(i), output);
  }

  // optional int32 add_tili_count = 7;
  if (has_add_tili_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->add_tili_count(), output);
  }

  // optional int32 read_tili_count = 8;
  if (has_read_tili_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->read_tili_count(), output);
  }

}

int FriendsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional int32 add_tili_count = 7;
    if (has_add_tili_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_tili_count());
    }

    // optional int32 read_tili_count = 8;
    if (has_read_tili_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read_tili_count());
    }

  }
  // repeated string friends_list = 1;
  total_size += 1 * this->friends_list_size();
  for (int i = 0; i < this->friends_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->friends_list(i));
  }

  // repeated string black_list = 2;
  total_size += 1 * this->black_list_size();
  for (int i = 0; i < this->black_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->black_list(i));
  }

  // repeated string talk_list = 3;
  total_size += 1 * this->talk_list_size();
  for (int i = 0; i < this->talk_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->talk_list(i));
  }

  // repeated .FriendFamiliarity friends_familiarity = 4;
  total_size += 1 * this->friends_familiarity_size();
  for (int i = 0; i < this->friends_familiarity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends_familiarity(i));
  }

  // repeated string add_tili = 5;
  total_size += 1 * this->add_tili_size();
  for (int i = 0; i < this->add_tili_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->add_tili(i));
  }

  // repeated string read_tili = 6;
  total_size += 1 * this->read_tili_size();
  for (int i = 0; i < this->read_tili_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->read_tili(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FriendsData*>(&from));
}

void FriendsData::MergeFrom(const FriendsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_list_.MergeFrom(from.friends_list_);
  black_list_.MergeFrom(from.black_list_);
  talk_list_.MergeFrom(from.talk_list_);
  friends_familiarity_.MergeFrom(from.friends_familiarity_);
  add_tili_.MergeFrom(from.add_tili_);
  read_tili_.MergeFrom(from.read_tili_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from.has_add_tili_count()) {
      set_add_tili_count(from.add_tili_count());
    }
    if (from.has_read_tili_count()) {
      set_read_tili_count(from.read_tili_count());
    }
  }
}

void FriendsData::CopyFrom(const FriendsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendsData::IsInitialized() const {

  for (int i = 0; i < friends_familiarity_size(); i++) {
    if (!this->friends_familiarity(i).IsInitialized()) return false;
  }
  return true;
}

void FriendsData::Swap(FriendsData* other) {
  if (other != this) {
    friends_list_.Swap(&other->friends_list_);
    black_list_.Swap(&other->black_list_);
    talk_list_.Swap(&other->talk_list_);
    friends_familiarity_.Swap(&other->friends_familiarity_);
    add_tili_.Swap(&other->add_tili_);
    read_tili_.Swap(&other->read_tili_);
    std::swap(add_tili_count_, other->add_tili_count_);
    std::swap(read_tili_count_, other->read_tili_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FriendsData::GetTypeName() const {
  return "FriendsData";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
