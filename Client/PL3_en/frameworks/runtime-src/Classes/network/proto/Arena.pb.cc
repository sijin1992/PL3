// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Arena.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Arena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_Arena_2eproto() {
  delete ArenaUser::default_instance_;
  delete ArenaMainData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Arena_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Arena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::protobuf_AddDesc_AirShip_2eproto();
  ArenaUser::default_instance_ = new ArenaUser();
  ArenaMainData::default_instance_ = new ArenaMainData();
  ArenaUser::default_instance_->InitAsDefaultInstance();
  ArenaMainData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Arena_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Arena_2eproto_once_);
void protobuf_AddDesc_Arena_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Arena_2eproto_once_,
                 &protobuf_AddDesc_Arena_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Arena_2eproto {
  StaticDescriptorInitializer_Arena_2eproto() {
    protobuf_AddDesc_Arena_2eproto();
  }
} static_descriptor_initializer_Arena_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ArenaUser::kGuidFieldNumber;
const int ArenaUser::kUsernameFieldNumber;
const int ArenaUser::kNicknameFieldNumber;
const int ArenaUser::kUserRankFieldNumber;
const int ArenaUser::kShipListFieldNumber;
const int ArenaUser::kTechDataFieldNumber;
const int ArenaUser::kUserScoreFieldNumber;
const int ArenaUser::kOpponentGuidFieldNumber;
const int ArenaUser::kDefeatedOpponentGuidFieldNumber;
const int ArenaUser::kRefreshTimeFieldNumber;
#endif  // !_MSC_VER

ArenaUser::ArenaUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaUser::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ship_list_ = const_cast< ::ShipList*>(
      ::ShipList::internal_default_instance());
#else
  ship_list_ = const_cast< ::ShipList*>(&::ShipList::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tech_data_ = const_cast< ::TechnologyData*>(
      ::TechnologyData::internal_default_instance());
#else
  tech_data_ = const_cast< ::TechnologyData*>(&::TechnologyData::default_instance());
#endif
}

ArenaUser::ArenaUser(const ArenaUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaUser::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_rank_ = 0;
  ship_list_ = NULL;
  tech_data_ = NULL;
  user_score_ = 0;
  refresh_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaUser::~ArenaUser() {
  SharedDtor();
}

void ArenaUser::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete ship_list_;
    delete tech_data_;
  }
}

void ArenaUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaUser& ArenaUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Arena_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
#endif
  return *default_instance_;
}

ArenaUser* ArenaUser::default_instance_ = NULL;

ArenaUser* ArenaUser::New() const {
  return new ArenaUser;
}

void ArenaUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    user_rank_ = 0;
    if (has_ship_list()) {
      if (ship_list_ != NULL) ship_list_->::ShipList::Clear();
    }
    if (has_tech_data()) {
      if (tech_data_ != NULL) tech_data_->::TechnologyData::Clear();
    }
    user_score_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    refresh_time_ = 0;
  }
  opponent_guid_.Clear();
  defeated_opponent_guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // required string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_rank;
        break;
      }

      // required int32 user_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_rank_)));
          set_has_user_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ship_list;
        break;
      }

      // optional .ShipList ship_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tech_data;
        break;
      }

      // optional .TechnologyData tech_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tech_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tech_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_user_score;
        break;
      }

      // optional int32 user_score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_score_)));
          set_has_user_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_opponent_guid;
        break;
      }

      // repeated int32 opponent_guid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opponent_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_opponent_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opponent_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_opponent_guid;
        if (input->ExpectTag(72)) goto parse_defeated_opponent_guid;
        break;
      }

      // repeated int32 defeated_opponent_guid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defeated_opponent_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_defeated_opponent_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_defeated_opponent_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defeated_opponent_guid;
        if (input->ExpectTag(80)) goto parse_refresh_time;
        break;
      }

      // optional int32 refresh_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // required int32 user_rank = 4;
  if (has_user_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_rank(), output);
  }

  // optional .ShipList ship_list = 5;
  if (has_ship_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->ship_list(), output);
  }

  // optional .TechnologyData tech_data = 6;
  if (has_tech_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->tech_data(), output);
  }

  // optional int32 user_score = 7;
  if (has_user_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->user_score(), output);
  }

  // repeated int32 opponent_guid = 8;
  for (int i = 0; i < this->opponent_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->opponent_guid(i), output);
  }

  // repeated int32 defeated_opponent_guid = 9;
  for (int i = 0; i < this->defeated_opponent_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->defeated_opponent_guid(i), output);
  }

  // optional int32 refresh_time = 10;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refresh_time(), output);
  }

}

int ArenaUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 user_rank = 4;
    if (has_user_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_rank());
    }

    // optional .ShipList ship_list = 5;
    if (has_ship_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ship_list());
    }

    // optional .TechnologyData tech_data = 6;
    if (has_tech_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tech_data());
    }

    // optional int32 user_score = 7;
    if (has_user_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_score());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 refresh_time = 10;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_time());
    }

  }
  // repeated int32 opponent_guid = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->opponent_guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->opponent_guid(i));
    }
    total_size += 1 * this->opponent_guid_size() + data_size;
  }

  // repeated int32 defeated_opponent_guid = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->defeated_opponent_guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->defeated_opponent_guid(i));
    }
    total_size += 1 * this->defeated_opponent_guid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaUser*>(&from));
}

void ArenaUser::MergeFrom(const ArenaUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponent_guid_.MergeFrom(from.opponent_guid_);
  defeated_opponent_guid_.MergeFrom(from.defeated_opponent_guid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_user_rank()) {
      set_user_rank(from.user_rank());
    }
    if (from.has_ship_list()) {
      mutable_ship_list()->::ShipList::MergeFrom(from.ship_list());
    }
    if (from.has_tech_data()) {
      mutable_tech_data()->::TechnologyData::MergeFrom(from.tech_data());
    }
    if (from.has_user_score()) {
      set_user_score(from.user_score());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
  }
}

void ArenaUser::CopyFrom(const ArenaUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_ship_list()) {
    if (!this->ship_list().IsInitialized()) return false;
  }
  if (has_tech_data()) {
    if (!this->tech_data().IsInitialized()) return false;
  }
  return true;
}

void ArenaUser::Swap(ArenaUser* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(username_, other->username_);
    std::swap(nickname_, other->nickname_);
    std::swap(user_rank_, other->user_rank_);
    std::swap(ship_list_, other->ship_list_);
    std::swap(tech_data_, other->tech_data_);
    std::swap(user_score_, other->user_score_);
    opponent_guid_.Swap(&other->opponent_guid_);
    defeated_opponent_guid_.Swap(&other->defeated_opponent_guid_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaUser::GetTypeName() const {
  return "ArenaUser";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaMainData::kArenaUserListFieldNumber;
#endif  // !_MSC_VER

ArenaMainData::ArenaMainData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaMainData::InitAsDefaultInstance() {
}

ArenaMainData::ArenaMainData(const ArenaMainData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaMainData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaMainData::~ArenaMainData() {
  SharedDtor();
}

void ArenaMainData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaMainData& ArenaMainData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Arena_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Arena_2eproto();
#endif
  return *default_instance_;
}

ArenaMainData* ArenaMainData::default_instance_ = NULL;

ArenaMainData* ArenaMainData::New() const {
  return new ArenaMainData;
}

void ArenaMainData::Clear() {
  arena_user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ArenaUser arena_user_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arena_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arena_user_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ArenaUser arena_user_list = 1;
  for (int i = 0; i < this->arena_user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->arena_user_list(i), output);
  }

}

int ArenaMainData::ByteSize() const {
  int total_size = 0;

  // repeated .ArenaUser arena_user_list = 1;
  total_size += 1 * this->arena_user_list_size();
  for (int i = 0; i < this->arena_user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arena_user_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaMainData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaMainData*>(&from));
}

void ArenaMainData::MergeFrom(const ArenaMainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  arena_user_list_.MergeFrom(from.arena_user_list_);
}

void ArenaMainData::CopyFrom(const ArenaMainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaMainData::IsInitialized() const {

  for (int i = 0; i < arena_user_list_size(); i++) {
    if (!this->arena_user_list(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaMainData::Swap(ArenaMainData* other) {
  if (other != this) {
    arena_user_list_.Swap(&other->arena_user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaMainData::GetTypeName() const {
  return "ArenaMainData";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
