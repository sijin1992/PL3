// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdPve.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdPve.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_CmdPve_2eproto() {
  delete PveReq::default_instance_;
  delete PveResp::default_instance_;
  delete PVEGetRewardReq::default_instance_;
  delete PVEGetRewardResp::default_instance_;
  delete UpgradeTechReq::default_instance_;
  delete UpgradeTechResp::default_instance_;
  delete GetTechnologyReq::default_instance_;
  delete GetTechnologyResp::default_instance_;
  delete SpeedUpTechnologyReq::default_instance_;
  delete SpeedUpTechnologyResp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CmdPve_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CmdPve_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::protobuf_AddDesc_Home_2eproto();
  ::protobuf_AddDesc_UserInfo_2eproto();
  PveReq::default_instance_ = new PveReq();
  PveResp::default_instance_ = new PveResp();
  PVEGetRewardReq::default_instance_ = new PVEGetRewardReq();
  PVEGetRewardResp::default_instance_ = new PVEGetRewardResp();
  UpgradeTechReq::default_instance_ = new UpgradeTechReq();
  UpgradeTechResp::default_instance_ = new UpgradeTechResp();
  GetTechnologyReq::default_instance_ = new GetTechnologyReq();
  GetTechnologyResp::default_instance_ = new GetTechnologyResp();
  SpeedUpTechnologyReq::default_instance_ = new SpeedUpTechnologyReq();
  SpeedUpTechnologyResp::default_instance_ = new SpeedUpTechnologyResp();
  PveReq::default_instance_->InitAsDefaultInstance();
  PveResp::default_instance_->InitAsDefaultInstance();
  PVEGetRewardReq::default_instance_->InitAsDefaultInstance();
  PVEGetRewardResp::default_instance_->InitAsDefaultInstance();
  UpgradeTechReq::default_instance_->InitAsDefaultInstance();
  UpgradeTechResp::default_instance_->InitAsDefaultInstance();
  GetTechnologyReq::default_instance_->InitAsDefaultInstance();
  GetTechnologyResp::default_instance_->InitAsDefaultInstance();
  SpeedUpTechnologyReq::default_instance_->InitAsDefaultInstance();
  SpeedUpTechnologyResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdPve_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CmdPve_2eproto_once_);
void protobuf_AddDesc_CmdPve_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CmdPve_2eproto_once_,
                 &protobuf_AddDesc_CmdPve_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdPve_2eproto {
  StaticDescriptorInitializer_CmdPve_2eproto() {
    protobuf_AddDesc_CmdPve_2eproto();
  }
} static_descriptor_initializer_CmdPve_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PveReq::kCheckpointIdFieldNumber;
const int PveReq::kTypeFieldNumber;
const int PveReq::kResultFieldNumber;
const int PveReq::kStarFieldNumber;
#endif  // !_MSC_VER

PveReq::PveReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PveReq::InitAsDefaultInstance() {
}

PveReq::PveReq(const PveReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PveReq::SharedCtor() {
  _cached_size_ = 0;
  checkpoint_id_ = 0;
  type_ = 0;
  result_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveReq::~PveReq() {
  SharedDtor();
}

void PveReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PveReq& PveReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

PveReq* PveReq::default_instance_ = NULL;

PveReq* PveReq::New() const {
  return new PveReq;
}

void PveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    checkpoint_id_ = 0;
    type_ = 0;
    result_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 checkpoint_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_id_)));
          set_has_checkpoint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 checkpoint_id = 1;
  if (has_checkpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->checkpoint_id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // required int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

}

int PveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 checkpoint_id = 1;
    if (has_checkpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PveReq*>(&from));
}

void PveReq::MergeFrom(const PveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checkpoint_id()) {
      set_checkpoint_id(from.checkpoint_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
}

void PveReq::CopyFrom(const PveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PveReq::Swap(PveReq* other) {
  if (other != this) {
    std::swap(checkpoint_id_, other->checkpoint_id_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PveReq::GetTypeName() const {
  return "PveReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PveResp::kResultFieldNumber;
const int PveResp::kUserSyncFieldNumber;
const int PveResp::kTypeFieldNumber;
const int PveResp::kAttackListFieldNumber;
const int PveResp::kHurterListFieldNumber;
const int PveResp::kCharExpBonusFieldNumber;
const int PveResp::kShipExpBonusFieldNumber;
const int PveResp::kLevelGoldBonusFieldNumber;
const int PveResp::kLevelPointBonusFieldNumber;
const int PveResp::kCheckpointIdFieldNumber;
const int PveResp::kGetItemListFieldNumber;
#endif  // !_MSC_VER

PveResp::PveResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PveResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

PveResp::PveResp(const PveResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PveResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  type_ = 0;
  char_exp_bonus_ = 0;
  ship_exp_bonus_ = 0;
  level_gold_bonus_ = 0;
  level_point_bonus_ = 0;
  checkpoint_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveResp::~PveResp() {
  SharedDtor();
}

void PveResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void PveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PveResp& PveResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

PveResp* PveResp::default_instance_ = NULL;

PveResp* PveResp::New() const {
  return new PveResp;
}

void PveResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    type_ = 0;
    char_exp_bonus_ = 0;
    ship_exp_bonus_ = 0;
    level_gold_bonus_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_point_bonus_ = 0;
    checkpoint_id_ = 0;
  }
  attack_list_.Clear();
  hurter_list_.Clear();
  get_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attack_list;
        break;
      }

      // repeated .AirShip attack_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attack_list;
        if (input->ExpectTag(42)) goto parse_hurter_list;
        break;
      }

      // repeated .AirShip hurter_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hurter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hurter_list;
        if (input->ExpectTag(48)) goto parse_char_exp_bonus;
        break;
      }

      // optional int32 char_exp_bonus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_exp_bonus_)));
          set_has_char_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ship_exp_bonus;
        break;
      }

      // optional int32 ship_exp_bonus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_exp_bonus_)));
          set_has_ship_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level_gold_bonus;
        break;
      }

      // optional int32 level_gold_bonus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_gold_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_gold_bonus_)));
          set_has_level_gold_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level_point_bonus;
        break;
      }

      // optional int32 level_point_bonus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_point_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_point_bonus_)));
          set_has_level_point_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_checkpoint_id;
        break;
      }

      // required int32 checkpoint_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_id_)));
          set_has_checkpoint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_get_item_list;
        break;
      }

      // repeated .Pair get_item_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_get_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated .AirShip attack_list = 4;
  for (int i = 0; i < this->attack_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->attack_list(i), output);
  }

  // repeated .AirShip hurter_list = 5;
  for (int i = 0; i < this->hurter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->hurter_list(i), output);
  }

  // optional int32 char_exp_bonus = 6;
  if (has_char_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->char_exp_bonus(), output);
  }

  // optional int32 ship_exp_bonus = 7;
  if (has_ship_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ship_exp_bonus(), output);
  }

  // optional int32 level_gold_bonus = 8;
  if (has_level_gold_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level_gold_bonus(), output);
  }

  // optional int32 level_point_bonus = 9;
  if (has_level_point_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level_point_bonus(), output);
  }

  // required int32 checkpoint_id = 10;
  if (has_checkpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->checkpoint_id(), output);
  }

  // repeated .Pair get_item_list = 11;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->get_item_list(i), output);
  }

}

int PveResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 char_exp_bonus = 6;
    if (has_char_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_exp_bonus());
    }

    // optional int32 ship_exp_bonus = 7;
    if (has_ship_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_exp_bonus());
    }

    // optional int32 level_gold_bonus = 8;
    if (has_level_gold_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_gold_bonus());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level_point_bonus = 9;
    if (has_level_point_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_point_bonus());
    }

    // required int32 checkpoint_id = 10;
    if (has_checkpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_id());
    }

  }
  // repeated .AirShip attack_list = 4;
  total_size += 1 * this->attack_list_size();
  for (int i = 0; i < this->attack_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_list(i));
  }

  // repeated .AirShip hurter_list = 5;
  total_size += 1 * this->hurter_list_size();
  for (int i = 0; i < this->hurter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hurter_list(i));
  }

  // repeated .Pair get_item_list = 11;
  total_size += 1 * this->get_item_list_size();
  for (int i = 0; i < this->get_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_item_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PveResp*>(&from));
}

void PveResp::MergeFrom(const PveResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_list_.MergeFrom(from.attack_list_);
  hurter_list_.MergeFrom(from.hurter_list_);
  get_item_list_.MergeFrom(from.get_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_char_exp_bonus()) {
      set_char_exp_bonus(from.char_exp_bonus());
    }
    if (from.has_ship_exp_bonus()) {
      set_ship_exp_bonus(from.ship_exp_bonus());
    }
    if (from.has_level_gold_bonus()) {
      set_level_gold_bonus(from.level_gold_bonus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level_point_bonus()) {
      set_level_point_bonus(from.level_point_bonus());
    }
    if (from.has_checkpoint_id()) {
      set_checkpoint_id(from.checkpoint_id());
    }
  }
}

void PveResp::CopyFrom(const PveResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000205) != 0x00000205) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < attack_list_size(); i++) {
    if (!this->attack_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hurter_list_size(); i++) {
    if (!this->hurter_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < get_item_list_size(); i++) {
    if (!this->get_item_list(i).IsInitialized()) return false;
  }
  return true;
}

void PveResp::Swap(PveResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(type_, other->type_);
    attack_list_.Swap(&other->attack_list_);
    hurter_list_.Swap(&other->hurter_list_);
    std::swap(char_exp_bonus_, other->char_exp_bonus_);
    std::swap(ship_exp_bonus_, other->ship_exp_bonus_);
    std::swap(level_gold_bonus_, other->level_gold_bonus_);
    std::swap(level_point_bonus_, other->level_point_bonus_);
    std::swap(checkpoint_id_, other->checkpoint_id_);
    get_item_list_.Swap(&other->get_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PveResp::GetTypeName() const {
  return "PveResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PVEGetRewardReq::kCopyIdFieldNumber;
const int PVEGetRewardReq::kScoreIdFieldNumber;
#endif  // !_MSC_VER

PVEGetRewardReq::PVEGetRewardReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PVEGetRewardReq::InitAsDefaultInstance() {
}

PVEGetRewardReq::PVEGetRewardReq(const PVEGetRewardReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PVEGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  copy_id_ = 0;
  score_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVEGetRewardReq::~PVEGetRewardReq() {
  SharedDtor();
}

void PVEGetRewardReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PVEGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PVEGetRewardReq& PVEGetRewardReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

PVEGetRewardReq* PVEGetRewardReq::default_instance_ = NULL;

PVEGetRewardReq* PVEGetRewardReq::New() const {
  return new PVEGetRewardReq;
}

void PVEGetRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copy_id_ = 0;
    score_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PVEGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copy_id_)));
          set_has_copy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score_id;
        break;
      }

      // required int32 score_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_id_)));
          set_has_score_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVEGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copy_id = 1;
  if (has_copy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copy_id(), output);
  }

  // required int32 score_id = 2;
  if (has_score_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score_id(), output);
  }

}

int PVEGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copy_id = 1;
    if (has_copy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copy_id());
    }

    // required int32 score_id = 2;
    if (has_score_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVEGetRewardReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PVEGetRewardReq*>(&from));
}

void PVEGetRewardReq::MergeFrom(const PVEGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copy_id()) {
      set_copy_id(from.copy_id());
    }
    if (from.has_score_id()) {
      set_score_id(from.score_id());
    }
  }
}

void PVEGetRewardReq::CopyFrom(const PVEGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVEGetRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PVEGetRewardReq::Swap(PVEGetRewardReq* other) {
  if (other != this) {
    std::swap(copy_id_, other->copy_id_);
    std::swap(score_id_, other->score_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PVEGetRewardReq::GetTypeName() const {
  return "PVEGetRewardReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PVEGetRewardResp::kResultFieldNumber;
const int PVEGetRewardResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

PVEGetRewardResp::PVEGetRewardResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PVEGetRewardResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

PVEGetRewardResp::PVEGetRewardResp(const PVEGetRewardResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PVEGetRewardResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVEGetRewardResp::~PVEGetRewardResp() {
  SharedDtor();
}

void PVEGetRewardResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void PVEGetRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PVEGetRewardResp& PVEGetRewardResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

PVEGetRewardResp* PVEGetRewardResp::default_instance_ = NULL;

PVEGetRewardResp* PVEGetRewardResp::New() const {
  return new PVEGetRewardResp;
}

void PVEGetRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PVEGetRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVEGetRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

}

int PVEGetRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVEGetRewardResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PVEGetRewardResp*>(&from));
}

void PVEGetRewardResp::MergeFrom(const PVEGetRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
}

void PVEGetRewardResp::CopyFrom(const PVEGetRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVEGetRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void PVEGetRewardResp::Swap(PVEGetRewardResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PVEGetRewardResp::GetTypeName() const {
  return "PVEGetRewardResp";
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeTechReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

UpgradeTechReq::UpgradeTechReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpgradeTechReq::InitAsDefaultInstance() {
}

UpgradeTechReq::UpgradeTechReq(const UpgradeTechReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeTechReq::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeTechReq::~UpgradeTechReq() {
  SharedDtor();
}

void UpgradeTechReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpgradeTechReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpgradeTechReq& UpgradeTechReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

UpgradeTechReq* UpgradeTechReq::default_instance_ = NULL;

UpgradeTechReq* UpgradeTechReq::New() const {
  return new UpgradeTechReq;
}

void UpgradeTechReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpgradeTechReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeTechReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

}

int UpgradeTechReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeTechReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpgradeTechReq*>(&from));
}

void UpgradeTechReq::MergeFrom(const UpgradeTechReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
}

void UpgradeTechReq::CopyFrom(const UpgradeTechReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeTechReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpgradeTechReq::Swap(UpgradeTechReq* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpgradeTechReq::GetTypeName() const {
  return "UpgradeTechReq";
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeTechResp::kResultFieldNumber;
const int UpgradeTechResp::kUserSyncFieldNumber;
const int UpgradeTechResp::kTechIdFieldNumber;
const int UpgradeTechResp::kUpgradeBeginTimeFieldNumber;
#endif  // !_MSC_VER

UpgradeTechResp::UpgradeTechResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpgradeTechResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

UpgradeTechResp::UpgradeTechResp(const UpgradeTechResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeTechResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  tech_id_ = 0;
  upgrade_begin_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeTechResp::~UpgradeTechResp() {
  SharedDtor();
}

void UpgradeTechResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void UpgradeTechResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpgradeTechResp& UpgradeTechResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

UpgradeTechResp* UpgradeTechResp::default_instance_ = NULL;

UpgradeTechResp* UpgradeTechResp::New() const {
  return new UpgradeTechResp;
}

void UpgradeTechResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    tech_id_ = 0;
    upgrade_begin_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpgradeTechResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tech_id;
        break;
      }

      // optional int32 tech_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tech_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_upgrade_begin_time;
        break;
      }

      // optional int32 upgrade_begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_begin_time_)));
          set_has_upgrade_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeTechResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional int32 tech_id = 3;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tech_id(), output);
  }

  // optional int32 upgrade_begin_time = 4;
  if (has_upgrade_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgrade_begin_time(), output);
  }

}

int UpgradeTechResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 tech_id = 3;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

    // optional int32 upgrade_begin_time = 4;
    if (has_upgrade_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_begin_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeTechResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpgradeTechResp*>(&from));
}

void UpgradeTechResp::MergeFrom(const UpgradeTechResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
    if (from.has_upgrade_begin_time()) {
      set_upgrade_begin_time(from.upgrade_begin_time());
    }
  }
}

void UpgradeTechResp::CopyFrom(const UpgradeTechResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeTechResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void UpgradeTechResp::Swap(UpgradeTechResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(tech_id_, other->tech_id_);
    std::swap(upgrade_begin_time_, other->upgrade_begin_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpgradeTechResp::GetTypeName() const {
  return "UpgradeTechResp";
}


// ===================================================================

#ifndef _MSC_VER
const int GetTechnologyReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

GetTechnologyReq::GetTechnologyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetTechnologyReq::InitAsDefaultInstance() {
}

GetTechnologyReq::GetTechnologyReq(const GetTechnologyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetTechnologyReq::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTechnologyReq::~GetTechnologyReq() {
  SharedDtor();
}

void GetTechnologyReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetTechnologyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTechnologyReq& GetTechnologyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

GetTechnologyReq* GetTechnologyReq::default_instance_ = NULL;

GetTechnologyReq* GetTechnologyReq::New() const {
  return new GetTechnologyReq;
}

void GetTechnologyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetTechnologyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTechnologyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

}

int GetTechnologyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTechnologyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTechnologyReq*>(&from));
}

void GetTechnologyReq::MergeFrom(const GetTechnologyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
}

void GetTechnologyReq::CopyFrom(const GetTechnologyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechnologyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTechnologyReq::Swap(GetTechnologyReq* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTechnologyReq::GetTypeName() const {
  return "GetTechnologyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int GetTechnologyResp::kResultFieldNumber;
const int GetTechnologyResp::kUserSyncFieldNumber;
const int GetTechnologyResp::kHasUpgradeFieldNumber;
#endif  // !_MSC_VER

GetTechnologyResp::GetTechnologyResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetTechnologyResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

GetTechnologyResp::GetTechnologyResp(const GetTechnologyResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetTechnologyResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  hasupgrade_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTechnologyResp::~GetTechnologyResp() {
  SharedDtor();
}

void GetTechnologyResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void GetTechnologyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTechnologyResp& GetTechnologyResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

GetTechnologyResp* GetTechnologyResp::default_instance_ = NULL;

GetTechnologyResp* GetTechnologyResp::New() const {
  return new GetTechnologyResp;
}

void GetTechnologyResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    hasupgrade_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetTechnologyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasUpgrade;
        break;
      }

      // optional bool hasUpgrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasUpgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasupgrade_)));
          set_has_hasupgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTechnologyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional bool hasUpgrade = 3;
  if (has_hasupgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasupgrade(), output);
  }

}

int GetTechnologyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional bool hasUpgrade = 3;
    if (has_hasupgrade()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTechnologyResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTechnologyResp*>(&from));
}

void GetTechnologyResp::MergeFrom(const GetTechnologyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_hasupgrade()) {
      set_hasupgrade(from.hasupgrade());
    }
  }
}

void GetTechnologyResp::CopyFrom(const GetTechnologyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechnologyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GetTechnologyResp::Swap(GetTechnologyResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(hasupgrade_, other->hasupgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTechnologyResp::GetTypeName() const {
  return "GetTechnologyResp";
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpTechnologyReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

SpeedUpTechnologyReq::SpeedUpTechnologyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpeedUpTechnologyReq::InitAsDefaultInstance() {
}

SpeedUpTechnologyReq::SpeedUpTechnologyReq(const SpeedUpTechnologyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpTechnologyReq::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpTechnologyReq::~SpeedUpTechnologyReq() {
  SharedDtor();
}

void SpeedUpTechnologyReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpeedUpTechnologyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpeedUpTechnologyReq& SpeedUpTechnologyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

SpeedUpTechnologyReq* SpeedUpTechnologyReq::default_instance_ = NULL;

SpeedUpTechnologyReq* SpeedUpTechnologyReq::New() const {
  return new SpeedUpTechnologyReq;
}

void SpeedUpTechnologyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpeedUpTechnologyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpTechnologyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

}

int SpeedUpTechnologyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpTechnologyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpeedUpTechnologyReq*>(&from));
}

void SpeedUpTechnologyReq::MergeFrom(const SpeedUpTechnologyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
}

void SpeedUpTechnologyReq::CopyFrom(const SpeedUpTechnologyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpTechnologyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SpeedUpTechnologyReq::Swap(SpeedUpTechnologyReq* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpeedUpTechnologyReq::GetTypeName() const {
  return "SpeedUpTechnologyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpTechnologyResp::kResultFieldNumber;
const int SpeedUpTechnologyResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

SpeedUpTechnologyResp::SpeedUpTechnologyResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpeedUpTechnologyResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

SpeedUpTechnologyResp::SpeedUpTechnologyResp(const SpeedUpTechnologyResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpTechnologyResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpTechnologyResp::~SpeedUpTechnologyResp() {
  SharedDtor();
}

void SpeedUpTechnologyResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void SpeedUpTechnologyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpeedUpTechnologyResp& SpeedUpTechnologyResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPve_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
#endif
  return *default_instance_;
}

SpeedUpTechnologyResp* SpeedUpTechnologyResp::default_instance_ = NULL;

SpeedUpTechnologyResp* SpeedUpTechnologyResp::New() const {
  return new SpeedUpTechnologyResp;
}

void SpeedUpTechnologyResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpeedUpTechnologyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpTechnologyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

}

int SpeedUpTechnologyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpTechnologyResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpeedUpTechnologyResp*>(&from));
}

void SpeedUpTechnologyResp::MergeFrom(const SpeedUpTechnologyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
}

void SpeedUpTechnologyResp::CopyFrom(const SpeedUpTechnologyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpTechnologyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void SpeedUpTechnologyResp::Swap(SpeedUpTechnologyResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpeedUpTechnologyResp::GetTypeName() const {
  return "SpeedUpTechnologyResp";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
