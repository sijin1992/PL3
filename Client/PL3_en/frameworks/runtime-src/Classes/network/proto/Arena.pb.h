// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Arena.proto

#ifndef PROTOBUF_Arena_2eproto__INCLUDED
#define PROTOBUF_Arena_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "UserInfo.pb.h"
#include "AirShip.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Arena_2eproto();
void protobuf_AssignDesc_Arena_2eproto();
void protobuf_ShutdownFile_Arena_2eproto();

class ArenaUser;
class ArenaMainData;

// ===================================================================

class ArenaUser : public ::google::protobuf::MessageLite {
 public:
  ArenaUser();
  virtual ~ArenaUser();

  ArenaUser(const ArenaUser& from);

  inline ArenaUser& operator=(const ArenaUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ArenaUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ArenaUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ArenaUser* other);

  // implements Message ----------------------------------------------

  ArenaUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ArenaUser& from);
  void MergeFrom(const ArenaUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 user_rank = 4;
  inline bool has_user_rank() const;
  inline void clear_user_rank();
  static const int kUserRankFieldNumber = 4;
  inline ::google::protobuf::int32 user_rank() const;
  inline void set_user_rank(::google::protobuf::int32 value);

  // optional .ShipList ship_list = 5;
  inline bool has_ship_list() const;
  inline void clear_ship_list();
  static const int kShipListFieldNumber = 5;
  inline const ::ShipList& ship_list() const;
  inline ::ShipList* mutable_ship_list();
  inline ::ShipList* release_ship_list();
  inline void set_allocated_ship_list(::ShipList* ship_list);

  // optional .TechnologyData tech_data = 6;
  inline bool has_tech_data() const;
  inline void clear_tech_data();
  static const int kTechDataFieldNumber = 6;
  inline const ::TechnologyData& tech_data() const;
  inline ::TechnologyData* mutable_tech_data();
  inline ::TechnologyData* release_tech_data();
  inline void set_allocated_tech_data(::TechnologyData* tech_data);

  // optional int32 user_score = 7;
  inline bool has_user_score() const;
  inline void clear_user_score();
  static const int kUserScoreFieldNumber = 7;
  inline ::google::protobuf::int32 user_score() const;
  inline void set_user_score(::google::protobuf::int32 value);

  // repeated int32 opponent_guid = 8;
  inline int opponent_guid_size() const;
  inline void clear_opponent_guid();
  static const int kOpponentGuidFieldNumber = 8;
  inline ::google::protobuf::int32 opponent_guid(int index) const;
  inline void set_opponent_guid(int index, ::google::protobuf::int32 value);
  inline void add_opponent_guid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      opponent_guid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_opponent_guid();

  // repeated int32 defeated_opponent_guid = 9;
  inline int defeated_opponent_guid_size() const;
  inline void clear_defeated_opponent_guid();
  static const int kDefeatedOpponentGuidFieldNumber = 9;
  inline ::google::protobuf::int32 defeated_opponent_guid(int index) const;
  inline void set_defeated_opponent_guid(int index, ::google::protobuf::int32 value);
  inline void add_defeated_opponent_guid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      defeated_opponent_guid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_defeated_opponent_guid();

  // optional int32 refresh_time = 10;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 10;
  inline ::google::protobuf::int32 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaUser)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_user_rank();
  inline void clear_has_user_rank();
  inline void set_has_ship_list();
  inline void clear_has_ship_list();
  inline void set_has_tech_data();
  inline void clear_has_tech_data();
  inline void set_has_user_score();
  inline void clear_has_user_score();
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();

  ::std::string* username_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 user_rank_;
  ::std::string* nickname_;
  ::ShipList* ship_list_;
  ::TechnologyData* tech_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > opponent_guid_;
  ::google::protobuf::int32 user_score_;
  ::google::protobuf::int32 refresh_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > defeated_opponent_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Arena_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Arena_2eproto();
  #endif
  friend void protobuf_AssignDesc_Arena_2eproto();
  friend void protobuf_ShutdownFile_Arena_2eproto();

  void InitAsDefaultInstance();
  static ArenaUser* default_instance_;
};
// -------------------------------------------------------------------

class ArenaMainData : public ::google::protobuf::MessageLite {
 public:
  ArenaMainData();
  virtual ~ArenaMainData();

  ArenaMainData(const ArenaMainData& from);

  inline ArenaMainData& operator=(const ArenaMainData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ArenaMainData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ArenaMainData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ArenaMainData* other);

  // implements Message ----------------------------------------------

  ArenaMainData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ArenaMainData& from);
  void MergeFrom(const ArenaMainData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ArenaUser arena_user_list = 1;
  inline int arena_user_list_size() const;
  inline void clear_arena_user_list();
  static const int kArenaUserListFieldNumber = 1;
  inline const ::ArenaUser& arena_user_list(int index) const;
  inline ::ArenaUser* mutable_arena_user_list(int index);
  inline ::ArenaUser* add_arena_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ArenaUser >&
      arena_user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ArenaUser >*
      mutable_arena_user_list();

  // @@protoc_insertion_point(class_scope:ArenaMainData)
 private:

  ::google::protobuf::RepeatedPtrField< ::ArenaUser > arena_user_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Arena_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Arena_2eproto();
  #endif
  friend void protobuf_AssignDesc_Arena_2eproto();
  friend void protobuf_ShutdownFile_Arena_2eproto();

  void InitAsDefaultInstance();
  static ArenaMainData* default_instance_;
};
// ===================================================================


// ===================================================================

// ArenaUser

// required int32 guid = 1;
inline bool ArenaUser::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaUser::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaUser::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaUser::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 ArenaUser::guid() const {
  return guid_;
}
inline void ArenaUser::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// required string username = 2;
inline bool ArenaUser::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaUser::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaUser::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaUser::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ArenaUser::username() const {
  return *username_;
}
inline void ArenaUser::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ArenaUser::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ArenaUser::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaUser::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* ArenaUser::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaUser::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nickname = 3;
inline bool ArenaUser::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaUser::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaUser::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaUser::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ArenaUser::nickname() const {
  return *nickname_;
}
inline void ArenaUser::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ArenaUser::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ArenaUser::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaUser::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ArenaUser::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaUser::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 user_rank = 4;
inline bool ArenaUser::has_user_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaUser::set_has_user_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaUser::clear_has_user_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaUser::clear_user_rank() {
  user_rank_ = 0;
  clear_has_user_rank();
}
inline ::google::protobuf::int32 ArenaUser::user_rank() const {
  return user_rank_;
}
inline void ArenaUser::set_user_rank(::google::protobuf::int32 value) {
  set_has_user_rank();
  user_rank_ = value;
}

// optional .ShipList ship_list = 5;
inline bool ArenaUser::has_ship_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaUser::set_has_ship_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaUser::clear_has_ship_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaUser::clear_ship_list() {
  if (ship_list_ != NULL) ship_list_->::ShipList::Clear();
  clear_has_ship_list();
}
inline const ::ShipList& ArenaUser::ship_list() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ship_list_ != NULL ? *ship_list_ : *default_instance().ship_list_;
#else
  return ship_list_ != NULL ? *ship_list_ : *default_instance_->ship_list_;
#endif
}
inline ::ShipList* ArenaUser::mutable_ship_list() {
  set_has_ship_list();
  if (ship_list_ == NULL) ship_list_ = new ::ShipList;
  return ship_list_;
}
inline ::ShipList* ArenaUser::release_ship_list() {
  clear_has_ship_list();
  ::ShipList* temp = ship_list_;
  ship_list_ = NULL;
  return temp;
}
inline void ArenaUser::set_allocated_ship_list(::ShipList* ship_list) {
  delete ship_list_;
  ship_list_ = ship_list;
  if (ship_list) {
    set_has_ship_list();
  } else {
    clear_has_ship_list();
  }
}

// optional .TechnologyData tech_data = 6;
inline bool ArenaUser::has_tech_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaUser::set_has_tech_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaUser::clear_has_tech_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaUser::clear_tech_data() {
  if (tech_data_ != NULL) tech_data_->::TechnologyData::Clear();
  clear_has_tech_data();
}
inline const ::TechnologyData& ArenaUser::tech_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return tech_data_ != NULL ? *tech_data_ : *default_instance().tech_data_;
#else
  return tech_data_ != NULL ? *tech_data_ : *default_instance_->tech_data_;
#endif
}
inline ::TechnologyData* ArenaUser::mutable_tech_data() {
  set_has_tech_data();
  if (tech_data_ == NULL) tech_data_ = new ::TechnologyData;
  return tech_data_;
}
inline ::TechnologyData* ArenaUser::release_tech_data() {
  clear_has_tech_data();
  ::TechnologyData* temp = tech_data_;
  tech_data_ = NULL;
  return temp;
}
inline void ArenaUser::set_allocated_tech_data(::TechnologyData* tech_data) {
  delete tech_data_;
  tech_data_ = tech_data;
  if (tech_data) {
    set_has_tech_data();
  } else {
    clear_has_tech_data();
  }
}

// optional int32 user_score = 7;
inline bool ArenaUser::has_user_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaUser::set_has_user_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaUser::clear_has_user_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaUser::clear_user_score() {
  user_score_ = 0;
  clear_has_user_score();
}
inline ::google::protobuf::int32 ArenaUser::user_score() const {
  return user_score_;
}
inline void ArenaUser::set_user_score(::google::protobuf::int32 value) {
  set_has_user_score();
  user_score_ = value;
}

// repeated int32 opponent_guid = 8;
inline int ArenaUser::opponent_guid_size() const {
  return opponent_guid_.size();
}
inline void ArenaUser::clear_opponent_guid() {
  opponent_guid_.Clear();
}
inline ::google::protobuf::int32 ArenaUser::opponent_guid(int index) const {
  return opponent_guid_.Get(index);
}
inline void ArenaUser::set_opponent_guid(int index, ::google::protobuf::int32 value) {
  opponent_guid_.Set(index, value);
}
inline void ArenaUser::add_opponent_guid(::google::protobuf::int32 value) {
  opponent_guid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ArenaUser::opponent_guid() const {
  return opponent_guid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ArenaUser::mutable_opponent_guid() {
  return &opponent_guid_;
}

// repeated int32 defeated_opponent_guid = 9;
inline int ArenaUser::defeated_opponent_guid_size() const {
  return defeated_opponent_guid_.size();
}
inline void ArenaUser::clear_defeated_opponent_guid() {
  defeated_opponent_guid_.Clear();
}
inline ::google::protobuf::int32 ArenaUser::defeated_opponent_guid(int index) const {
  return defeated_opponent_guid_.Get(index);
}
inline void ArenaUser::set_defeated_opponent_guid(int index, ::google::protobuf::int32 value) {
  defeated_opponent_guid_.Set(index, value);
}
inline void ArenaUser::add_defeated_opponent_guid(::google::protobuf::int32 value) {
  defeated_opponent_guid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ArenaUser::defeated_opponent_guid() const {
  return defeated_opponent_guid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ArenaUser::mutable_defeated_opponent_guid() {
  return &defeated_opponent_guid_;
}

// optional int32 refresh_time = 10;
inline bool ArenaUser::has_refresh_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArenaUser::set_has_refresh_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArenaUser::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArenaUser::clear_refresh_time() {
  refresh_time_ = 0;
  clear_has_refresh_time();
}
inline ::google::protobuf::int32 ArenaUser::refresh_time() const {
  return refresh_time_;
}
inline void ArenaUser::set_refresh_time(::google::protobuf::int32 value) {
  set_has_refresh_time();
  refresh_time_ = value;
}

// -------------------------------------------------------------------

// ArenaMainData

// repeated .ArenaUser arena_user_list = 1;
inline int ArenaMainData::arena_user_list_size() const {
  return arena_user_list_.size();
}
inline void ArenaMainData::clear_arena_user_list() {
  arena_user_list_.Clear();
}
inline const ::ArenaUser& ArenaMainData::arena_user_list(int index) const {
  return arena_user_list_.Get(index);
}
inline ::ArenaUser* ArenaMainData::mutable_arena_user_list(int index) {
  return arena_user_list_.Mutable(index);
}
inline ::ArenaUser* ArenaMainData::add_arena_user_list() {
  return arena_user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ArenaUser >&
ArenaMainData::arena_user_list() const {
  return arena_user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ArenaUser >*
ArenaMainData::mutable_arena_user_list() {
  return &arena_user_list_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Arena_2eproto__INCLUDED
