// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PvpInfo.proto

#ifndef PROTOBUF_PvpInfo_2eproto__INCLUDED
#define PROTOBUF_PvpInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PvpInfo_2eproto();
void protobuf_AssignDesc_PvpInfo_2eproto();
void protobuf_ShutdownFile_PvpInfo_2eproto();

class InfoPair;
class HurterInfo;
class EventInfo;

// ===================================================================

class InfoPair : public ::google::protobuf::MessageLite {
 public:
  InfoPair();
  virtual ~InfoPair();

  InfoPair(const InfoPair& from);

  inline InfoPair& operator=(const InfoPair& from) {
    CopyFrom(from);
    return *this;
  }

  static const InfoPair& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const InfoPair* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(InfoPair* other);

  // implements Message ----------------------------------------------

  InfoPair* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const InfoPair& from);
  void MergeFrom(const InfoPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:InfoPair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpInfo_2eproto();
  friend void protobuf_ShutdownFile_PvpInfo_2eproto();

  void InitAsDefaultInstance();
  static InfoPair* default_instance_;
};
// -------------------------------------------------------------------

class HurterInfo : public ::google::protobuf::MessageLite {
 public:
  HurterInfo();
  virtual ~HurterInfo();

  HurterInfo(const HurterInfo& from);

  inline HurterInfo& operator=(const HurterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const HurterInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const HurterInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(HurterInfo* other);

  // implements Message ----------------------------------------------

  HurterInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const HurterInfo& from);
  void MergeFrom(const HurterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pos = 1;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos(int index) const;
  inline void set_pos(int index, ::google::protobuf::int32 value);
  inline void add_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos();

  // repeated .InfoPair values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::InfoPair& values(int index) const;
  inline ::InfoPair* mutable_values(int index);
  inline ::InfoPair* add_values();
  inline const ::google::protobuf::RepeatedPtrField< ::InfoPair >&
      values() const;
  inline ::google::protobuf::RepeatedPtrField< ::InfoPair >*
      mutable_values();

  // repeated int32 buffs = 3;
  inline int buffs_size() const;
  inline void clear_buffs();
  static const int kBuffsFieldNumber = 3;
  inline ::google::protobuf::int32 buffs(int index) const;
  inline void set_buffs(int index, ::google::protobuf::int32 value);
  inline void add_buffs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buffs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buffs();

  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bool isBig = 5;
  inline bool has_isbig() const;
  inline void clear_isbig();
  static const int kIsBigFieldNumber = 5;
  inline bool isbig() const;
  inline void set_isbig(bool value);

  // @@protoc_insertion_point(class_scope:HurterInfo)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_isbig();
  inline void clear_has_isbig();

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_;
  ::google::protobuf::RepeatedPtrField< ::InfoPair > values_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buffs_;
  ::google::protobuf::int32 status_;
  bool isbig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpInfo_2eproto();
  friend void protobuf_ShutdownFile_PvpInfo_2eproto();

  void InitAsDefaultInstance();
  static HurterInfo* default_instance_;
};
// -------------------------------------------------------------------

class EventInfo : public ::google::protobuf::MessageLite {
 public:
  EventInfo();
  virtual ~EventInfo();

  EventInfo(const EventInfo& from);

  inline EventInfo& operator=(const EventInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const EventInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EventInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EventInfo* other);

  // implements Message ----------------------------------------------

  EventInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EventInfo& from);
  void MergeFrom(const EventInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline ::google::protobuf::int32 values(int index) const;
  inline void set_values(int index, ::google::protobuf::int32 value);
  inline void add_values(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      values() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_values();

  // repeated .HurterInfo attack_list = 3;
  inline int attack_list_size() const;
  inline void clear_attack_list();
  static const int kAttackListFieldNumber = 3;
  inline const ::HurterInfo& attack_list(int index) const;
  inline ::HurterInfo* mutable_attack_list(int index);
  inline ::HurterInfo* add_attack_list();
  inline const ::google::protobuf::RepeatedPtrField< ::HurterInfo >&
      attack_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::HurterInfo >*
      mutable_attack_list();

  // repeated .HurterInfo hurter_list = 4;
  inline int hurter_list_size() const;
  inline void clear_hurter_list();
  static const int kHurterListFieldNumber = 4;
  inline const ::HurterInfo& hurter_list(int index) const;
  inline ::HurterInfo* mutable_hurter_list(int index);
  inline ::HurterInfo* add_hurter_list();
  inline const ::google::protobuf::RepeatedPtrField< ::HurterInfo >&
      hurter_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::HurterInfo >*
      mutable_hurter_list();

  // repeated int32 attack_hp_list = 5;
  inline int attack_hp_list_size() const;
  inline void clear_attack_hp_list();
  static const int kAttackHpListFieldNumber = 5;
  inline ::google::protobuf::int32 attack_hp_list(int index) const;
  inline void set_attack_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_attack_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attack_hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attack_hp_list();

  // repeated int32 hurter_hp_list = 6;
  inline int hurter_hp_list_size() const;
  inline void clear_hurter_hp_list();
  static const int kHurterHpListFieldNumber = 6;
  inline ::google::protobuf::int32 hurter_hp_list(int index) const;
  inline void set_hurter_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_hurter_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hurter_hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hurter_hp_list();

  // @@protoc_insertion_point(class_scope:EventInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > values_;
  ::google::protobuf::RepeatedPtrField< ::HurterInfo > attack_list_;
  ::google::protobuf::RepeatedPtrField< ::HurterInfo > hurter_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attack_hp_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hurter_hp_list_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PvpInfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PvpInfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_PvpInfo_2eproto();
  friend void protobuf_ShutdownFile_PvpInfo_2eproto();

  void InitAsDefaultInstance();
  static EventInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// InfoPair

// required int32 key = 1;
inline bool InfoPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfoPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfoPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfoPair::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 InfoPair::key() const {
  return key_;
}
inline void InfoPair::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required int32 value = 2;
inline bool InfoPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfoPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfoPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfoPair::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 InfoPair::value() const {
  return value_;
}
inline void InfoPair::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// HurterInfo

// repeated int32 pos = 1;
inline int HurterInfo::pos_size() const {
  return pos_.size();
}
inline void HurterInfo::clear_pos() {
  pos_.Clear();
}
inline ::google::protobuf::int32 HurterInfo::pos(int index) const {
  return pos_.Get(index);
}
inline void HurterInfo::set_pos(int index, ::google::protobuf::int32 value) {
  pos_.Set(index, value);
}
inline void HurterInfo::add_pos(::google::protobuf::int32 value) {
  pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HurterInfo::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HurterInfo::mutable_pos() {
  return &pos_;
}

// repeated .InfoPair values = 2;
inline int HurterInfo::values_size() const {
  return values_.size();
}
inline void HurterInfo::clear_values() {
  values_.Clear();
}
inline const ::InfoPair& HurterInfo::values(int index) const {
  return values_.Get(index);
}
inline ::InfoPair* HurterInfo::mutable_values(int index) {
  return values_.Mutable(index);
}
inline ::InfoPair* HurterInfo::add_values() {
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InfoPair >&
HurterInfo::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::InfoPair >*
HurterInfo::mutable_values() {
  return &values_;
}

// repeated int32 buffs = 3;
inline int HurterInfo::buffs_size() const {
  return buffs_.size();
}
inline void HurterInfo::clear_buffs() {
  buffs_.Clear();
}
inline ::google::protobuf::int32 HurterInfo::buffs(int index) const {
  return buffs_.Get(index);
}
inline void HurterInfo::set_buffs(int index, ::google::protobuf::int32 value) {
  buffs_.Set(index, value);
}
inline void HurterInfo::add_buffs(::google::protobuf::int32 value) {
  buffs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HurterInfo::buffs() const {
  return buffs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HurterInfo::mutable_buffs() {
  return &buffs_;
}

// optional int32 status = 4;
inline bool HurterInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HurterInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HurterInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HurterInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 HurterInfo::status() const {
  return status_;
}
inline void HurterInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional bool isBig = 5;
inline bool HurterInfo::has_isbig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HurterInfo::set_has_isbig() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HurterInfo::clear_has_isbig() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HurterInfo::clear_isbig() {
  isbig_ = false;
  clear_has_isbig();
}
inline bool HurterInfo::isbig() const {
  return isbig_;
}
inline void HurterInfo::set_isbig(bool value) {
  set_has_isbig();
  isbig_ = value;
}

// -------------------------------------------------------------------

// EventInfo

// required int32 id = 1;
inline bool EventInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EventInfo::id() const {
  return id_;
}
inline void EventInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int32 values = 2;
inline int EventInfo::values_size() const {
  return values_.size();
}
inline void EventInfo::clear_values() {
  values_.Clear();
}
inline ::google::protobuf::int32 EventInfo::values(int index) const {
  return values_.Get(index);
}
inline void EventInfo::set_values(int index, ::google::protobuf::int32 value) {
  values_.Set(index, value);
}
inline void EventInfo::add_values(::google::protobuf::int32 value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EventInfo::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EventInfo::mutable_values() {
  return &values_;
}

// repeated .HurterInfo attack_list = 3;
inline int EventInfo::attack_list_size() const {
  return attack_list_.size();
}
inline void EventInfo::clear_attack_list() {
  attack_list_.Clear();
}
inline const ::HurterInfo& EventInfo::attack_list(int index) const {
  return attack_list_.Get(index);
}
inline ::HurterInfo* EventInfo::mutable_attack_list(int index) {
  return attack_list_.Mutable(index);
}
inline ::HurterInfo* EventInfo::add_attack_list() {
  return attack_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HurterInfo >&
EventInfo::attack_list() const {
  return attack_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::HurterInfo >*
EventInfo::mutable_attack_list() {
  return &attack_list_;
}

// repeated .HurterInfo hurter_list = 4;
inline int EventInfo::hurter_list_size() const {
  return hurter_list_.size();
}
inline void EventInfo::clear_hurter_list() {
  hurter_list_.Clear();
}
inline const ::HurterInfo& EventInfo::hurter_list(int index) const {
  return hurter_list_.Get(index);
}
inline ::HurterInfo* EventInfo::mutable_hurter_list(int index) {
  return hurter_list_.Mutable(index);
}
inline ::HurterInfo* EventInfo::add_hurter_list() {
  return hurter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HurterInfo >&
EventInfo::hurter_list() const {
  return hurter_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::HurterInfo >*
EventInfo::mutable_hurter_list() {
  return &hurter_list_;
}

// repeated int32 attack_hp_list = 5;
inline int EventInfo::attack_hp_list_size() const {
  return attack_hp_list_.size();
}
inline void EventInfo::clear_attack_hp_list() {
  attack_hp_list_.Clear();
}
inline ::google::protobuf::int32 EventInfo::attack_hp_list(int index) const {
  return attack_hp_list_.Get(index);
}
inline void EventInfo::set_attack_hp_list(int index, ::google::protobuf::int32 value) {
  attack_hp_list_.Set(index, value);
}
inline void EventInfo::add_attack_hp_list(::google::protobuf::int32 value) {
  attack_hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EventInfo::attack_hp_list() const {
  return attack_hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EventInfo::mutable_attack_hp_list() {
  return &attack_hp_list_;
}

// repeated int32 hurter_hp_list = 6;
inline int EventInfo::hurter_hp_list_size() const {
  return hurter_hp_list_.size();
}
inline void EventInfo::clear_hurter_hp_list() {
  hurter_hp_list_.Clear();
}
inline ::google::protobuf::int32 EventInfo::hurter_hp_list(int index) const {
  return hurter_hp_list_.Get(index);
}
inline void EventInfo::set_hurter_hp_list(int index, ::google::protobuf::int32 value) {
  hurter_hp_list_.Set(index, value);
}
inline void EventInfo::add_hurter_hp_list(::google::protobuf::int32 value) {
  hurter_hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EventInfo::hurter_hp_list() const {
  return hurter_hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EventInfo::mutable_hurter_hp_list() {
  return &hurter_hp_list_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PvpInfo_2eproto__INCLUDED
