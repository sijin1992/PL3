// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserSync.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserSync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_UserSync_2eproto() {
  delete UserSync::default_instance_;
  delete RedoRecharge::default_instance_;
  delete RedoEntry::default_instance_;
  delete SyncUser::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_UserSync_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_UserSync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_Weapon_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_Equip_2eproto();
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::protobuf_AddDesc_Slave_2eproto();
  ::protobuf_AddDesc_Mail_2eproto();
  ::protobuf_AddDesc_Group_2eproto();
  ::protobuf_AddDesc_Activity_2eproto();
  UserSync::default_instance_ = new UserSync();
  RedoRecharge::default_instance_ = new RedoRecharge();
  RedoEntry::default_instance_ = new RedoEntry();
  SyncUser::default_instance_ = new SyncUser();
  UserSync::default_instance_->InitAsDefaultInstance();
  RedoRecharge::default_instance_->InitAsDefaultInstance();
  RedoEntry::default_instance_->InitAsDefaultInstance();
  SyncUser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserSync_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_UserSync_2eproto_once_);
void protobuf_AddDesc_UserSync_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_UserSync_2eproto_once_,
                 &protobuf_AddDesc_UserSync_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserSync_2eproto {
  StaticDescriptorInitializer_UserSync_2eproto() {
    protobuf_AddDesc_UserSync_2eproto();
  }
} static_descriptor_initializer_UserSync_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int UserSync::kShipListFieldNumber;
const int UserSync::kWeaponListFieldNumber;
const int UserSync::kEquipListFieldNumber;
const int UserSync::kItemListFieldNumber;
const int UserSync::kUserInfoFieldNumber;
const int UserSync::kMailListFieldNumber;
const int UserSync::kGroupMainFieldNumber;
const int UserSync::kTaskListFieldNumber;
const int UserSync::kGemListFieldNumber;
const int UserSync::kActivityListFieldNumber;
const int UserSync::kSlaveDataFieldNumber;
const int UserSync::kForgeEquipListFieldNumber;
#endif  // !_MSC_VER

UserSync::UserSync()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserSync::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::UserInfo*>(
      ::UserInfo::internal_default_instance());
#else
  user_info_ = const_cast< ::UserInfo*>(&::UserInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  group_main_ = const_cast< ::GroupMainData*>(
      ::GroupMainData::internal_default_instance());
#else
  group_main_ = const_cast< ::GroupMainData*>(&::GroupMainData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  slave_data_ = const_cast< ::SlaveData*>(
      ::SlaveData::internal_default_instance());
#else
  slave_data_ = const_cast< ::SlaveData*>(&::SlaveData::default_instance());
#endif
}

UserSync::UserSync(const UserSync& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserSync::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  group_main_ = NULL;
  slave_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSync::~UserSync() {
  SharedDtor();
}

void UserSync::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
    delete group_main_;
    delete slave_data_;
  }
}

void UserSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserSync& UserSync::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserSync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserSync_2eproto();
#endif
  return *default_instance_;
}

UserSync* UserSync::default_instance_ = NULL;

UserSync* UserSync::New() const {
  return new UserSync;
}

void UserSync::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::UserInfo::Clear();
    }
    if (has_group_main()) {
      if (group_main_ != NULL) group_main_->::GroupMainData::Clear();
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_slave_data()) {
      if (slave_data_ != NULL) slave_data_->::SlaveData::Clear();
    }
  }
  ship_list_.Clear();
  weapon_list_.Clear();
  equip_list_.Clear();
  item_list_.Clear();
  mail_list_.Clear();
  task_list_.Clear();
  gem_list_.Clear();
  activity_list_.Clear();
  forge_equip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AirShip ship_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ship_list;
        if (input->ExpectTag(18)) goto parse_weapon_list;
        break;
      }

      // repeated .Weapon weapon_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_weapon_list;
        if (input->ExpectTag(26)) goto parse_equip_list;
        break;
      }

      // repeated .Equip equip_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_list;
        if (input->ExpectTag(34)) goto parse_item_list;
        break;
      }

      // repeated .Item item_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        if (input->ExpectTag(42)) goto parse_user_info;
        break;
      }

      // optional .UserInfo user_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mail_list;
        break;
      }

      // repeated .Mail mail_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mail_list;
        if (input->ExpectTag(58)) goto parse_group_main;
        break;
      }

      // optional .GroupMainData group_main = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_main:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_main()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_task_list;
        break;
      }

      // repeated .TaskInfo task_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_task_list;
        if (input->ExpectTag(74)) goto parse_gem_list;
        break;
      }

      // repeated .Gem gem_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gem_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_gem_list;
        if (input->ExpectTag(82)) goto parse_activity_list;
        break;
      }

      // repeated .Activity activity_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_activity_list;
        if (input->ExpectTag(90)) goto parse_slave_data;
        break;
      }

      // optional .SlaveData slave_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_forge_equip_list;
        break;
      }

      // repeated .ForgeEquip forge_equip_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forge_equip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forge_equip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_forge_equip_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AirShip ship_list = 1;
  for (int i = 0; i < this->ship_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->ship_list(i), output);
  }

  // repeated .Weapon weapon_list = 2;
  for (int i = 0; i < this->weapon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->weapon_list(i), output);
  }

  // repeated .Equip equip_list = 3;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->equip_list(i), output);
  }

  // repeated .Item item_list = 4;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->item_list(i), output);
  }

  // optional .UserInfo user_info = 5;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->user_info(), output);
  }

  // repeated .Mail mail_list = 6;
  for (int i = 0; i < this->mail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->mail_list(i), output);
  }

  // optional .GroupMainData group_main = 7;
  if (has_group_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->group_main(), output);
  }

  // repeated .TaskInfo task_list = 8;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->task_list(i), output);
  }

  // repeated .Gem gem_list = 9;
  for (int i = 0; i < this->gem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->gem_list(i), output);
  }

  // repeated .Activity activity_list = 10;
  for (int i = 0; i < this->activity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->activity_list(i), output);
  }

  // optional .SlaveData slave_data = 11;
  if (has_slave_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->slave_data(), output);
  }

  // repeated .ForgeEquip forge_equip_list = 12;
  for (int i = 0; i < this->forge_equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->forge_equip_list(i), output);
  }

}

int UserSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .UserInfo user_info = 5;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional .GroupMainData group_main = 7;
    if (has_group_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_main());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .SlaveData slave_data = 11;
    if (has_slave_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_data());
    }

  }
  // repeated .AirShip ship_list = 1;
  total_size += 1 * this->ship_list_size();
  for (int i = 0; i < this->ship_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ship_list(i));
  }

  // repeated .Weapon weapon_list = 2;
  total_size += 1 * this->weapon_list_size();
  for (int i = 0; i < this->weapon_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weapon_list(i));
  }

  // repeated .Equip equip_list = 3;
  total_size += 1 * this->equip_list_size();
  for (int i = 0; i < this->equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_list(i));
  }

  // repeated .Item item_list = 4;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .Mail mail_list = 6;
  total_size += 1 * this->mail_list_size();
  for (int i = 0; i < this->mail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_list(i));
  }

  // repeated .TaskInfo task_list = 8;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }

  // repeated .Gem gem_list = 9;
  total_size += 1 * this->gem_list_size();
  for (int i = 0; i < this->gem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gem_list(i));
  }

  // repeated .Activity activity_list = 10;
  total_size += 1 * this->activity_list_size();
  for (int i = 0; i < this->activity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_list(i));
  }

  // repeated .ForgeEquip forge_equip_list = 12;
  total_size += 1 * this->forge_equip_list_size();
  for (int i = 0; i < this->forge_equip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forge_equip_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSync::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserSync*>(&from));
}

void UserSync::MergeFrom(const UserSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  ship_list_.MergeFrom(from.ship_list_);
  weapon_list_.MergeFrom(from.weapon_list_);
  equip_list_.MergeFrom(from.equip_list_);
  item_list_.MergeFrom(from.item_list_);
  mail_list_.MergeFrom(from.mail_list_);
  task_list_.MergeFrom(from.task_list_);
  gem_list_.MergeFrom(from.gem_list_);
  activity_list_.MergeFrom(from.activity_list_);
  forge_equip_list_.MergeFrom(from.forge_equip_list_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::UserInfo::MergeFrom(from.user_info());
    }
    if (from.has_group_main()) {
      mutable_group_main()->::GroupMainData::MergeFrom(from.group_main());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_slave_data()) {
      mutable_slave_data()->::SlaveData::MergeFrom(from.slave_data());
    }
  }
}

void UserSync::CopyFrom(const UserSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSync::IsInitialized() const {

  for (int i = 0; i < ship_list_size(); i++) {
    if (!this->ship_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < weapon_list_size(); i++) {
    if (!this->weapon_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equip_list_size(); i++) {
    if (!this->equip_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  for (int i = 0; i < mail_list_size(); i++) {
    if (!this->mail_list(i).IsInitialized()) return false;
  }
  if (has_group_main()) {
    if (!this->group_main().IsInitialized()) return false;
  }
  for (int i = 0; i < task_list_size(); i++) {
    if (!this->task_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gem_list_size(); i++) {
    if (!this->gem_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < activity_list_size(); i++) {
    if (!this->activity_list(i).IsInitialized()) return false;
  }
  if (has_slave_data()) {
    if (!this->slave_data().IsInitialized()) return false;
  }
  for (int i = 0; i < forge_equip_list_size(); i++) {
    if (!this->forge_equip_list(i).IsInitialized()) return false;
  }
  return true;
}

void UserSync::Swap(UserSync* other) {
  if (other != this) {
    ship_list_.Swap(&other->ship_list_);
    weapon_list_.Swap(&other->weapon_list_);
    equip_list_.Swap(&other->equip_list_);
    item_list_.Swap(&other->item_list_);
    std::swap(user_info_, other->user_info_);
    mail_list_.Swap(&other->mail_list_);
    std::swap(group_main_, other->group_main_);
    task_list_.Swap(&other->task_list_);
    gem_list_.Swap(&other->gem_list_);
    activity_list_.Swap(&other->activity_list_);
    std::swap(slave_data_, other->slave_data_);
    forge_equip_list_.Swap(&other->forge_equip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserSync::GetTypeName() const {
  return "UserSync";
}


// ===================================================================

#ifndef _MSC_VER
const int RedoRecharge::kMoneyFieldNumber;
const int RedoRecharge::kItemIdFieldNumber;
const int RedoRecharge::kFakeFieldNumber;
const int RedoRecharge::kOdFieldNumber;
#endif  // !_MSC_VER

RedoRecharge::RedoRecharge()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RedoRecharge::InitAsDefaultInstance() {
}

RedoRecharge::RedoRecharge(const RedoRecharge& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RedoRecharge::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  item_id_ = 0;
  fake_ = 0;
  od_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedoRecharge::~RedoRecharge() {
  SharedDtor();
}

void RedoRecharge::SharedDtor() {
  if (od_ != &::google::protobuf::internal::kEmptyString) {
    delete od_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RedoRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RedoRecharge& RedoRecharge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserSync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserSync_2eproto();
#endif
  return *default_instance_;
}

RedoRecharge* RedoRecharge::default_instance_ = NULL;

RedoRecharge* RedoRecharge::New() const {
  return new RedoRecharge;
}

void RedoRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_ = 0;
    item_id_ = 0;
    fake_ = 0;
    if (has_od()) {
      if (od_ != &::google::protobuf::internal::kEmptyString) {
        od_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RedoRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fake;
        break;
      }

      // required int32 fake = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fake_)));
          set_has_fake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_od;
        break;
      }

      // required string od = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_od:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_od()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedoRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  // required int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  // required int32 fake = 3;
  if (has_fake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fake(), output);
  }

  // required string od = 4;
  if (has_od()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->od(), output);
  }

}

int RedoRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // required int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 fake = 3;
    if (has_fake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fake());
    }

    // required string od = 4;
    if (has_od()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->od());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedoRecharge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RedoRecharge*>(&from));
}

void RedoRecharge::MergeFrom(const RedoRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_fake()) {
      set_fake(from.fake());
    }
    if (from.has_od()) {
      set_od(from.od());
    }
  }
}

void RedoRecharge::CopyFrom(const RedoRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedoRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RedoRecharge::Swap(RedoRecharge* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(item_id_, other->item_id_);
    std::swap(fake_, other->fake_);
    std::swap(od_, other->od_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RedoRecharge::GetTypeName() const {
  return "RedoRecharge";
}


// ===================================================================

#ifndef _MSC_VER
const int RedoEntry::kUserNameFieldNumber;
const int RedoEntry::kMailListFieldNumber;
const int RedoEntry::kRechargeListFieldNumber;
#endif  // !_MSC_VER

RedoEntry::RedoEntry()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RedoEntry::InitAsDefaultInstance() {
}

RedoEntry::RedoEntry(const RedoEntry& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RedoEntry::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedoEntry::~RedoEntry() {
  SharedDtor();
}

void RedoEntry::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RedoEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RedoEntry& RedoEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserSync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserSync_2eproto();
#endif
  return *default_instance_;
}

RedoEntry* RedoEntry::default_instance_ = NULL;

RedoEntry* RedoEntry::New() const {
  return new RedoEntry;
}

void RedoEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  mail_list_.Clear();
  recharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RedoEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_list;
        break;
      }

      // repeated .Mail mail_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_list;
        if (input->ExpectTag(26)) goto parse_recharge_list;
        break;
      }

      // repeated .RedoRecharge recharge_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recharge_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedoEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // repeated .Mail mail_list = 2;
  for (int i = 0; i < this->mail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mail_list(i), output);
  }

  // repeated .RedoRecharge recharge_list = 3;
  for (int i = 0; i < this->recharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->recharge_list(i), output);
  }

}

int RedoEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  // repeated .Mail mail_list = 2;
  total_size += 1 * this->mail_list_size();
  for (int i = 0; i < this->mail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_list(i));
  }

  // repeated .RedoRecharge recharge_list = 3;
  total_size += 1 * this->recharge_list_size();
  for (int i = 0; i < this->recharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recharge_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedoEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RedoEntry*>(&from));
}

void RedoEntry::MergeFrom(const RedoEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_list_.MergeFrom(from.mail_list_);
  recharge_list_.MergeFrom(from.recharge_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
}

void RedoEntry::CopyFrom(const RedoEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedoEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mail_list_size(); i++) {
    if (!this->mail_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < recharge_list_size(); i++) {
    if (!this->recharge_list(i).IsInitialized()) return false;
  }
  return true;
}

void RedoEntry::Swap(RedoEntry* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    mail_list_.Swap(&other->mail_list_);
    recharge_list_.Swap(&other->recharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RedoEntry::GetTypeName() const {
  return "RedoEntry";
}


// ===================================================================

#ifndef _MSC_VER
const int SyncUser::kUserNameFieldNumber;
const int SyncUser::kResFieldNumber;
#endif  // !_MSC_VER

SyncUser::SyncUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SyncUser::InitAsDefaultInstance() {
}

SyncUser::SyncUser(const SyncUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SyncUser::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncUser::~SyncUser() {
  SharedDtor();
}

void SyncUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SyncUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SyncUser& SyncUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_UserSync_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_UserSync_2eproto();
#endif
  return *default_instance_;
}

SyncUser* SyncUser::default_instance_ = NULL;

SyncUser* SyncUser::New() const {
  return new SyncUser;
}

void SyncUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SyncUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        break;
      }

      // repeated int64 res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_res())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_res())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // repeated int64 res = 2;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->res(i), output);
  }

}

int SyncUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  // repeated int64 res = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->res_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->res(i));
    }
    total_size += 1 * this->res_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SyncUser*>(&from));
}

void SyncUser::MergeFrom(const SyncUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
}

void SyncUser::CopyFrom(const SyncUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncUser::Swap(SyncUser* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    res_.Swap(&other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SyncUser::GetTypeName() const {
  return "SyncUser";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
