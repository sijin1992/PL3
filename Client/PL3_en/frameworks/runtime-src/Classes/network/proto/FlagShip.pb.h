// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FlagShip.proto

#ifndef PROTOBUF_FlagShip_2eproto__INCLUDED
#define PROTOBUF_FlagShip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FlagShip_2eproto();
void protobuf_AssignDesc_FlagShip_2eproto();
void protobuf_ShutdownFile_FlagShip_2eproto();

class FlagShip;

// ===================================================================

class FlagShip : public ::google::protobuf::MessageLite {
 public:
  FlagShip();
  virtual ~FlagShip();

  FlagShip(const FlagShip& from);

  inline FlagShip& operator=(const FlagShip& from) {
    CopyFrom(from);
    return *this;
  }

  static const FlagShip& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FlagShip* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FlagShip* other);

  // implements Message ----------------------------------------------

  FlagShip* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FlagShip& from);
  void MergeFrom(const FlagShip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // required int32 ability = 3;
  inline bool has_ability() const;
  inline void clear_ability();
  static const int kAbilityFieldNumber = 3;
  inline ::google::protobuf::int32 ability() const;
  inline void set_ability(::google::protobuf::int32 value);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FlagShip)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_ability();
  inline void clear_has_ability();
  inline void set_has_level();
  inline void clear_has_level();

  ::std::string* name_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 ability_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FlagShip_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FlagShip_2eproto();
  #endif
  friend void protobuf_AssignDesc_FlagShip_2eproto();
  friend void protobuf_ShutdownFile_FlagShip_2eproto();

  void InitAsDefaultInstance();
  static FlagShip* default_instance_;
};
// ===================================================================


// ===================================================================

// FlagShip

// required string name = 1;
inline bool FlagShip::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlagShip::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlagShip::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlagShip::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FlagShip::name() const {
  return *name_;
}
inline void FlagShip::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FlagShip::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FlagShip::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlagShip::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FlagShip::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlagShip::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 quality = 2;
inline bool FlagShip::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlagShip::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlagShip::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlagShip::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 FlagShip::quality() const {
  return quality_;
}
inline void FlagShip::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// required int32 ability = 3;
inline bool FlagShip::has_ability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlagShip::set_has_ability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlagShip::clear_has_ability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlagShip::clear_ability() {
  ability_ = 0;
  clear_has_ability();
}
inline ::google::protobuf::int32 FlagShip::ability() const {
  return ability_;
}
inline void FlagShip::set_ability(::google::protobuf::int32 value) {
  set_has_ability();
  ability_ = value;
}

// required int32 level = 4;
inline bool FlagShip::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlagShip::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlagShip::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlagShip::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FlagShip::level() const {
  return level_;
}
inline void FlagShip::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FlagShip_2eproto__INCLUDED
