// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Stage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_Stage_2eproto() {
  delete LevelInfo::default_instance_;
  delete StageCopyData::default_instance_;
  delete StageData::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Stage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Stage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  LevelInfo::default_instance_ = new LevelInfo();
  StageCopyData::default_instance_ = new StageCopyData();
  StageData::default_instance_ = new StageData();
  LevelInfo::default_instance_->InitAsDefaultInstance();
  StageCopyData::default_instance_->InitAsDefaultInstance();
  StageData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Stage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Stage_2eproto_once_);
void protobuf_AddDesc_Stage_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Stage_2eproto_once_,
                 &protobuf_AddDesc_Stage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Stage_2eproto {
  StaticDescriptorInitializer_Stage_2eproto() {
    protobuf_AddDesc_Stage_2eproto();
  }
} static_descriptor_initializer_Stage_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int LevelInfo::kLevelIdFieldNumber;
const int LevelInfo::kLevelStarFieldNumber;
#endif  // !_MSC_VER

LevelInfo::LevelInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LevelInfo::InitAsDefaultInstance() {
}

LevelInfo::LevelInfo(const LevelInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LevelInfo::SharedCtor() {
  _cached_size_ = 0;
  level_id_ = 0;
  level_star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelInfo::~LevelInfo() {
  SharedDtor();
}

void LevelInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LevelInfo& LevelInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Stage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
#endif
  return *default_instance_;
}

LevelInfo* LevelInfo::default_instance_ = NULL;

LevelInfo* LevelInfo::New() const {
  return new LevelInfo;
}

void LevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_id_ = 0;
    level_star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level_star;
        break;
      }

      // required int32 level_star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_star_)));
          set_has_level_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level_id = 1;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level_id(), output);
  }

  // required int32 level_star = 2;
  if (has_level_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level_star(), output);
  }

}

int LevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level_id = 1;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_id());
    }

    // required int32 level_star = 2;
    if (has_level_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_star());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LevelInfo*>(&from));
}

void LevelInfo::MergeFrom(const LevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_level_star()) {
      set_level_star(from.level_star());
    }
  }
}

void LevelInfo::CopyFrom(const LevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LevelInfo::Swap(LevelInfo* other) {
  if (other != this) {
    std::swap(level_id_, other->level_id_);
    std::swap(level_star_, other->level_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LevelInfo::GetTypeName() const {
  return "LevelInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int StageCopyData::kCopyIdFieldNumber;
const int StageCopyData::kGotRewardFieldNumber;
#endif  // !_MSC_VER

StageCopyData::StageCopyData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StageCopyData::InitAsDefaultInstance() {
}

StageCopyData::StageCopyData(const StageCopyData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StageCopyData::SharedCtor() {
  _cached_size_ = 0;
  copy_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageCopyData::~StageCopyData() {
  SharedDtor();
}

void StageCopyData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageCopyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageCopyData& StageCopyData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Stage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
#endif
  return *default_instance_;
}

StageCopyData* StageCopyData::default_instance_ = NULL;

StageCopyData* StageCopyData::New() const {
  return new StageCopyData;
}

void StageCopyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copy_id_ = 0;
  }
  got_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StageCopyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copy_id_)));
          set_has_copy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_got_reward;
        break;
      }

      // repeated bool got_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_got_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_got_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_got_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_got_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageCopyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copy_id = 1;
  if (has_copy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copy_id(), output);
  }

  // repeated bool got_reward = 2;
  for (int i = 0; i < this->got_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->got_reward(i), output);
  }

}

int StageCopyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copy_id = 1;
    if (has_copy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copy_id());
    }

  }
  // repeated bool got_reward = 2;
  {
    int data_size = 0;
    data_size = 1 * this->got_reward_size();
    total_size += 1 * this->got_reward_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageCopyData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageCopyData*>(&from));
}

void StageCopyData::MergeFrom(const StageCopyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  got_reward_.MergeFrom(from.got_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copy_id()) {
      set_copy_id(from.copy_id());
    }
  }
}

void StageCopyData::CopyFrom(const StageCopyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageCopyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StageCopyData::Swap(StageCopyData* other) {
  if (other != this) {
    std::swap(copy_id_, other->copy_id_);
    got_reward_.Swap(&other->got_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StageCopyData::GetTypeName() const {
  return "StageCopyData";
}


// ===================================================================

#ifndef _MSC_VER
const int StageData::kLevelInfoFieldNumber;
const int StageData::kCopyDataFieldNumber;
#endif  // !_MSC_VER

StageData::StageData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StageData::InitAsDefaultInstance() {
}

StageData::StageData(const StageData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StageData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageData::~StageData() {
  SharedDtor();
}

void StageData::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StageData& StageData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Stage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
#endif
  return *default_instance_;
}

StageData* StageData::default_instance_ = NULL;

StageData* StageData::New() const {
  return new StageData;
}

void StageData::Clear() {
  level_info_.Clear();
  copy_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LevelInfo level_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_level_info;
        if (input->ExpectTag(18)) goto parse_copy_data;
        break;
      }

      // repeated .StageCopyData copy_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copy_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_copy_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_copy_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .LevelInfo level_info = 1;
  for (int i = 0; i < this->level_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->level_info(i), output);
  }

  // repeated .StageCopyData copy_data = 2;
  for (int i = 0; i < this->copy_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->copy_data(i), output);
  }

}

int StageData::ByteSize() const {
  int total_size = 0;

  // repeated .LevelInfo level_info = 1;
  total_size += 1 * this->level_info_size();
  for (int i = 0; i < this->level_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_info(i));
  }

  // repeated .StageCopyData copy_data = 2;
  total_size += 1 * this->copy_data_size();
  for (int i = 0; i < this->copy_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copy_data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StageData*>(&from));
}

void StageData::MergeFrom(const StageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_info_.MergeFrom(from.level_info_);
  copy_data_.MergeFrom(from.copy_data_);
}

void StageData::CopyFrom(const StageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageData::IsInitialized() const {

  for (int i = 0; i < level_info_size(); i++) {
    if (!this->level_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < copy_data_size(); i++) {
    if (!this->copy_data(i).IsInitialized()) return false;
  }
  return true;
}

void StageData::Swap(StageData* other) {
  if (other != this) {
    level_info_.Swap(&other->level_info_);
    copy_data_.Swap(&other->copy_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StageData::GetTypeName() const {
  return "StageData";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
