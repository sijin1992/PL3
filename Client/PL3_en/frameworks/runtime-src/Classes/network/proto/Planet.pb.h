// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Planet.proto

#ifndef PROTOBUF_Planet_2eproto__INCLUDED
#define PROTOBUF_Planet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "OtherInfo.pb.h"
#include "AirShip.pb.h"
#include "PvpInfo.pb.h"
#include "Item.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Planet_2eproto();
void protobuf_AssignDesc_Planet_2eproto();
void protobuf_ShutdownFile_Planet_2eproto();

class PlanetRes;
class PlanetCityResUser;
class PlanetCityRes;
class PlanetRuins;
class PlanetBase;
class PlanetBossUser;
class PlanetBoss;
class PlanetMonster;
class PlanetCity;
class PlanetTowerAttackHp;
class PlanetWangZuoTower;
class PlanetWangZuo;
class PlanetPoint;
class PlanetElement;
class PlanetNode;
class PlanetArmyLine;
class PlanetArmy;
class PlanetMark;
class PlanetSevenDaysData;
class PlanetUser;
class PlanetMailUser;
class PlanetArmyInfo;
class PlanetWangZuoTitle;
class PlanetWangZuoTitleList;
class PlanetWangZuoOccupy;
class PlanetWangZuoOccupyList;

// ===================================================================

class PlanetRes : public ::google::protobuf::MessageLite {
 public:
  PlanetRes();
  virtual ~PlanetRes();

  PlanetRes(const PlanetRes& from);

  inline PlanetRes& operator=(const PlanetRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetRes* other);

  // implements Message ----------------------------------------------

  PlanetRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetRes& from);
  void MergeFrom(const PlanetRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 cur_storage = 2;
  inline bool has_cur_storage() const;
  inline void clear_cur_storage();
  static const int kCurStorageFieldNumber = 2;
  inline ::google::protobuf::int32 cur_storage() const;
  inline void set_cur_storage(::google::protobuf::int32 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional int64 begin_time = 4;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 4;
  inline ::google::protobuf::int64 begin_time() const;
  inline void set_begin_time(::google::protobuf::int64 value);

  // optional int32 collect_speed = 5;
  inline bool has_collect_speed() const;
  inline void clear_collect_speed();
  static const int kCollectSpeedFieldNumber = 5;
  inline ::google::protobuf::int32 collect_speed() const;
  inline void set_collect_speed(::google::protobuf::int32 value);

  // optional int32 army_guid = 6;
  inline bool has_army_guid() const;
  inline void clear_army_guid();
  static const int kArmyGuidFieldNumber = 6;
  inline ::google::protobuf::int32 army_guid() const;
  inline void set_army_guid(::google::protobuf::int32 value);

  // required bool hasMonster = 7;
  inline bool has_hasmonster() const;
  inline void clear_hasmonster();
  static const int kHasMonsterFieldNumber = 7;
  inline bool hasmonster() const;
  inline void set_hasmonster(bool value);

  // @@protoc_insertion_point(class_scope:PlanetRes)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cur_storage();
  inline void clear_has_cur_storage();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_collect_speed();
  inline void clear_has_collect_speed();
  inline void set_has_army_guid();
  inline void clear_has_army_guid();
  inline void set_has_hasmonster();
  inline void clear_has_hasmonster();

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cur_storage_;
  ::std::string* user_name_;
  ::google::protobuf::int64 begin_time_;
  ::google::protobuf::int32 collect_speed_;
  ::google::protobuf::int32 army_guid_;
  bool hasmonster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetRes* default_instance_;
};
// -------------------------------------------------------------------

class PlanetCityResUser : public ::google::protobuf::MessageLite {
 public:
  PlanetCityResUser();
  virtual ~PlanetCityResUser();

  PlanetCityResUser(const PlanetCityResUser& from);

  inline PlanetCityResUser& operator=(const PlanetCityResUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetCityResUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetCityResUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetCityResUser* other);

  // implements Message ----------------------------------------------

  PlanetCityResUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetCityResUser& from);
  void MergeFrom(const PlanetCityResUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required int64 begin_time = 2;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 begin_time() const;
  inline void set_begin_time(::google::protobuf::int64 value);

  // required int32 collect_speed = 3;
  inline bool has_collect_speed() const;
  inline void clear_collect_speed();
  static const int kCollectSpeedFieldNumber = 3;
  inline ::google::protobuf::int32 collect_speed() const;
  inline void set_collect_speed(::google::protobuf::int32 value);

  // required int32 army_guid = 4;
  inline bool has_army_guid() const;
  inline void clear_army_guid();
  static const int kArmyGuidFieldNumber = 4;
  inline ::google::protobuf::int32 army_guid() const;
  inline void set_army_guid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlanetCityResUser)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_collect_speed();
  inline void clear_has_collect_speed();
  inline void set_has_army_guid();
  inline void clear_has_army_guid();

  ::std::string* user_name_;
  ::google::protobuf::int64 begin_time_;
  ::google::protobuf::int32 collect_speed_;
  ::google::protobuf::int32 army_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetCityResUser* default_instance_;
};
// -------------------------------------------------------------------

class PlanetCityRes : public ::google::protobuf::MessageLite {
 public:
  PlanetCityRes();
  virtual ~PlanetCityRes();

  PlanetCityRes(const PlanetCityRes& from);

  inline PlanetCityRes& operator=(const PlanetCityRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetCityRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetCityRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetCityRes* other);

  // implements Message ----------------------------------------------

  PlanetCityRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetCityRes& from);
  void MergeFrom(const PlanetCityRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .PlanetCityResUser user_list = 2;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 2;
  inline const ::PlanetCityResUser& user_list(int index) const;
  inline ::PlanetCityResUser* mutable_user_list(int index);
  inline ::PlanetCityResUser* add_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetCityResUser >&
      user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetCityResUser >*
      mutable_user_list();

  // required int32 cur_storage = 3;
  inline bool has_cur_storage() const;
  inline void clear_cur_storage();
  static const int kCurStorageFieldNumber = 3;
  inline ::google::protobuf::int32 cur_storage() const;
  inline void set_cur_storage(::google::protobuf::int32 value);

  // required int64 restore_start_time = 4;
  inline bool has_restore_start_time() const;
  inline void clear_restore_start_time();
  static const int kRestoreStartTimeFieldNumber = 4;
  inline ::google::protobuf::int64 restore_start_time() const;
  inline void set_restore_start_time(::google::protobuf::int64 value);

  // optional string groupid = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 5;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // @@protoc_insertion_point(class_scope:PlanetCityRes)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cur_storage();
  inline void clear_has_cur_storage();
  inline void set_has_restore_start_time();
  inline void clear_has_restore_start_time();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::RepeatedPtrField< ::PlanetCityResUser > user_list_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cur_storage_;
  ::google::protobuf::int64 restore_start_time_;
  ::std::string* groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetCityRes* default_instance_;
};
// -------------------------------------------------------------------

class PlanetRuins : public ::google::protobuf::MessageLite {
 public:
  PlanetRuins();
  virtual ~PlanetRuins();

  PlanetRuins(const PlanetRuins& from);

  inline PlanetRuins& operator=(const PlanetRuins& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetRuins& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetRuins* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetRuins* other);

  // implements Message ----------------------------------------------

  PlanetRuins* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetRuins& from);
  void MergeFrom(const PlanetRuins& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 begin_time = 2;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 begin_time() const;
  inline void set_begin_time(::google::protobuf::int64 value);

  // optional int64 need_time = 3;
  inline bool has_need_time() const;
  inline void clear_need_time();
  static const int kNeedTimeFieldNumber = 3;
  inline ::google::protobuf::int64 need_time() const;
  inline void set_need_time(::google::protobuf::int64 value);

  // optional string user_name = 4;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional int32 army_guid = 5;
  inline bool has_army_guid() const;
  inline void clear_army_guid();
  static const int kArmyGuidFieldNumber = 5;
  inline ::google::protobuf::int32 army_guid() const;
  inline void set_army_guid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlanetRuins)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_need_time();
  inline void clear_has_need_time();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_army_guid();
  inline void clear_has_army_guid();

  ::google::protobuf::int64 begin_time_;
  ::google::protobuf::int64 need_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 army_guid_;
  ::std::string* user_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetRuins* default_instance_;
};
// -------------------------------------------------------------------

class PlanetBase : public ::google::protobuf::MessageLite {
 public:
  PlanetBase();
  virtual ~PlanetBase();

  PlanetBase(const PlanetBase& from);

  inline PlanetBase& operator=(const PlanetBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetBase& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetBase* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetBase* other);

  // implements Message ----------------------------------------------

  PlanetBase* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetBase& from);
  void MergeFrom(const PlanetBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // repeated string guarde_list = 2;
  inline int guarde_list_size() const;
  inline void clear_guarde_list();
  static const int kGuardeListFieldNumber = 2;
  inline const ::std::string& guarde_list(int index) const;
  inline ::std::string* mutable_guarde_list(int index);
  inline void set_guarde_list(int index, const ::std::string& value);
  inline void set_guarde_list(int index, const char* value);
  inline void set_guarde_list(int index, const char* value, size_t size);
  inline ::std::string* add_guarde_list();
  inline void add_guarde_list(const ::std::string& value);
  inline void add_guarde_list(const char* value);
  inline void add_guarde_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guarde_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guarde_list();

  // required int32 destroy_value = 3;
  inline bool has_destroy_value() const;
  inline void clear_destroy_value();
  static const int kDestroyValueFieldNumber = 3;
  inline ::google::protobuf::int32 destroy_value() const;
  inline void set_destroy_value(::google::protobuf::int32 value);

  // optional int64 last_hurt_time = 4;
  inline bool has_last_hurt_time() const;
  inline void clear_last_hurt_time();
  static const int kLastHurtTimeFieldNumber = 4;
  inline ::google::protobuf::int64 last_hurt_time() const;
  inline void set_last_hurt_time(::google::protobuf::int64 value);

  // optional int64 last_sub_destroy_value_time = 5;
  inline bool has_last_sub_destroy_value_time() const;
  inline void clear_last_sub_destroy_value_time();
  static const int kLastSubDestroyValueTimeFieldNumber = 5;
  inline ::google::protobuf::int64 last_sub_destroy_value_time() const;
  inline void set_last_sub_destroy_value_time(::google::protobuf::int64 value);

  // optional .OtherUserInfo info = 6;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 6;
  inline const ::OtherUserInfo& info() const;
  inline ::OtherUserInfo* mutable_info();
  inline ::OtherUserInfo* release_info();
  inline void set_allocated_info(::OtherUserInfo* info);

  // optional int64 shield_start_time = 7;
  inline bool has_shield_start_time() const;
  inline void clear_shield_start_time();
  static const int kShieldStartTimeFieldNumber = 7;
  inline ::google::protobuf::int64 shield_start_time() const;
  inline void set_shield_start_time(::google::protobuf::int64 value);

  // optional int64 shield_time = 8;
  inline bool has_shield_time() const;
  inline void clear_shield_time();
  static const int kShieldTimeFieldNumber = 8;
  inline ::google::protobuf::int64 shield_time() const;
  inline void set_shield_time(::google::protobuf::int64 value);

  // optional int32 shield_type = 9;
  inline bool has_shield_type() const;
  inline void clear_shield_type();
  static const int kShieldTypeFieldNumber = 9;
  inline ::google::protobuf::int32 shield_type() const;
  inline void set_shield_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlanetBase)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_destroy_value();
  inline void clear_has_destroy_value();
  inline void set_has_last_hurt_time();
  inline void clear_has_last_hurt_time();
  inline void set_has_last_sub_destroy_value_time();
  inline void clear_has_last_sub_destroy_value_time();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_shield_start_time();
  inline void clear_has_shield_start_time();
  inline void set_has_shield_time();
  inline void clear_has_shield_time();
  inline void set_has_shield_type();
  inline void clear_has_shield_type();

  ::std::string* user_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guarde_list_;
  ::google::protobuf::int64 last_hurt_time_;
  ::google::protobuf::int64 last_sub_destroy_value_time_;
  ::OtherUserInfo* info_;
  ::google::protobuf::int32 destroy_value_;
  ::google::protobuf::int32 shield_type_;
  ::google::protobuf::int64 shield_start_time_;
  ::google::protobuf::int64 shield_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetBase* default_instance_;
};
// -------------------------------------------------------------------

class PlanetBossUser : public ::google::protobuf::MessageLite {
 public:
  PlanetBossUser();
  virtual ~PlanetBossUser();

  PlanetBossUser(const PlanetBossUser& from);

  inline PlanetBossUser& operator=(const PlanetBossUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetBossUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetBossUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetBossUser* other);

  // implements Message ----------------------------------------------

  PlanetBossUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetBossUser& from);
  void MergeFrom(const PlanetBossUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required int32 tech_id = 2;
  inline bool has_tech_id() const;
  inline void clear_tech_id();
  static const int kTechIdFieldNumber = 2;
  inline ::google::protobuf::int32 tech_id() const;
  inline void set_tech_id(::google::protobuf::int32 value);

  // required int64 start_time = 3;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // required int32 attack_count = 4;
  inline bool has_attack_count() const;
  inline void clear_attack_count();
  static const int kAttackCountFieldNumber = 4;
  inline ::google::protobuf::int32 attack_count() const;
  inline void set_attack_count(::google::protobuf::int32 value);

  // required string boss_global_key = 5;
  inline bool has_boss_global_key() const;
  inline void clear_boss_global_key();
  static const int kBossGlobalKeyFieldNumber = 5;
  inline const ::std::string& boss_global_key() const;
  inline void set_boss_global_key(const ::std::string& value);
  inline void set_boss_global_key(const char* value);
  inline void set_boss_global_key(const char* value, size_t size);
  inline ::std::string* mutable_boss_global_key();
  inline ::std::string* release_boss_global_key();
  inline void set_allocated_boss_global_key(::std::string* boss_global_key);

  // @@protoc_insertion_point(class_scope:PlanetBossUser)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_tech_id();
  inline void clear_has_tech_id();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_attack_count();
  inline void clear_has_attack_count();
  inline void set_has_boss_global_key();
  inline void clear_has_boss_global_key();

  ::std::string* user_name_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int32 tech_id_;
  ::google::protobuf::int32 attack_count_;
  ::std::string* boss_global_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetBossUser* default_instance_;
};
// -------------------------------------------------------------------

class PlanetBoss : public ::google::protobuf::MessageLite {
 public:
  PlanetBoss();
  virtual ~PlanetBoss();

  PlanetBoss(const PlanetBoss& from);

  inline PlanetBoss& operator=(const PlanetBoss& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetBoss& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetBoss* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetBoss* other);

  // implements Message ----------------------------------------------

  PlanetBoss* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetBoss& from);
  void MergeFrom(const PlanetBoss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int64 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 create_time() const;
  inline void set_create_time(::google::protobuf::int64 value);

  // repeated int32 monster_hp_list = 3;
  inline int monster_hp_list_size() const;
  inline void clear_monster_hp_list();
  static const int kMonsterHpListFieldNumber = 3;
  inline ::google::protobuf::int32 monster_hp_list(int index) const;
  inline void set_monster_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_monster_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monster_hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monster_hp_list();

  // optional .PlanetBossUser user_info = 4;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  inline const ::PlanetBossUser& user_info() const;
  inline ::PlanetBossUser* mutable_user_info();
  inline ::PlanetBossUser* release_user_info();
  inline void set_allocated_user_info(::PlanetBossUser* user_info);

  // @@protoc_insertion_point(class_scope:PlanetBoss)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_user_info();
  inline void clear_has_user_info();

  ::google::protobuf::int64 create_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monster_hp_list_;
  ::PlanetBossUser* user_info_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetBoss* default_instance_;
};
// -------------------------------------------------------------------

class PlanetMonster : public ::google::protobuf::MessageLite {
 public:
  PlanetMonster();
  virtual ~PlanetMonster();

  PlanetMonster(const PlanetMonster& from);

  inline PlanetMonster& operator=(const PlanetMonster& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetMonster& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetMonster* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetMonster* other);

  // implements Message ----------------------------------------------

  PlanetMonster* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetMonster& from);
  void MergeFrom(const PlanetMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int64 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 create_time() const;
  inline void set_create_time(::google::protobuf::int64 value);

  // required int32 isDead = 3;
  inline bool has_isdead() const;
  inline void clear_isdead();
  static const int kIsDeadFieldNumber = 3;
  inline ::google::protobuf::int32 isdead() const;
  inline void set_isdead(::google::protobuf::int32 value);

  // optional int64 dead_time = 4;
  inline bool has_dead_time() const;
  inline void clear_dead_time();
  static const int kDeadTimeFieldNumber = 4;
  inline ::google::protobuf::int64 dead_time() const;
  inline void set_dead_time(::google::protobuf::int64 value);

  // repeated int32 monster_hp_list = 5;
  inline int monster_hp_list_size() const;
  inline void clear_monster_hp_list();
  static const int kMonsterHpListFieldNumber = 5;
  inline ::google::protobuf::int32 monster_hp_list(int index) const;
  inline void set_monster_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_monster_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monster_hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monster_hp_list();

  // @@protoc_insertion_point(class_scope:PlanetMonster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_isdead();
  inline void clear_has_isdead();
  inline void set_has_dead_time();
  inline void clear_has_dead_time();

  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 isdead_;
  ::google::protobuf::int64 dead_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monster_hp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetMonster* default_instance_;
};
// -------------------------------------------------------------------

class PlanetCity : public ::google::protobuf::MessageLite {
 public:
  PlanetCity();
  virtual ~PlanetCity();

  PlanetCity(const PlanetCity& from);

  inline PlanetCity& operator=(const PlanetCity& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetCity& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetCity* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetCity* other);

  // implements Message ----------------------------------------------

  PlanetCity* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetCity& from);
  void MergeFrom(const PlanetCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bool hasMonster = 2;
  inline bool has_hasmonster() const;
  inline void clear_hasmonster();
  static const int kHasMonsterFieldNumber = 2;
  inline bool hasmonster() const;
  inline void set_hasmonster(bool value);

  // repeated int32 monster_hp_list = 3;
  inline int monster_hp_list_size() const;
  inline void clear_monster_hp_list();
  static const int kMonsterHpListFieldNumber = 3;
  inline ::google::protobuf::int32 monster_hp_list(int index) const;
  inline void set_monster_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_monster_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monster_hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monster_hp_list();

  // required int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int64 status_begin_time = 5;
  inline bool has_status_begin_time() const;
  inline void clear_status_begin_time();
  static const int kStatusBeginTimeFieldNumber = 5;
  inline ::google::protobuf::int64 status_begin_time() const;
  inline void set_status_begin_time(::google::protobuf::int64 value);

  // required int64 occupy_begin_time = 6;
  inline bool has_occupy_begin_time() const;
  inline void clear_occupy_begin_time();
  static const int kOccupyBeginTimeFieldNumber = 6;
  inline ::google::protobuf::int64 occupy_begin_time() const;
  inline void set_occupy_begin_time(::google::protobuf::int64 value);

  // optional string user_name = 7;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 7;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string groupid = 8;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 8;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // repeated string guarde_list = 9;
  inline int guarde_list_size() const;
  inline void clear_guarde_list();
  static const int kGuardeListFieldNumber = 9;
  inline const ::std::string& guarde_list(int index) const;
  inline ::std::string* mutable_guarde_list(int index);
  inline void set_guarde_list(int index, const ::std::string& value);
  inline void set_guarde_list(int index, const char* value);
  inline void set_guarde_list(int index, const char* value, size_t size);
  inline ::std::string* add_guarde_list();
  inline void add_guarde_list(const ::std::string& value);
  inline void add_guarde_list(const char* value);
  inline void add_guarde_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guarde_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guarde_list();

  // optional .OtherGroupInfo temp_info = 10;
  inline bool has_temp_info() const;
  inline void clear_temp_info();
  static const int kTempInfoFieldNumber = 10;
  inline const ::OtherGroupInfo& temp_info() const;
  inline ::OtherGroupInfo* mutable_temp_info();
  inline ::OtherGroupInfo* release_temp_info();
  inline void set_allocated_temp_info(::OtherGroupInfo* temp_info);

  // @@protoc_insertion_point(class_scope:PlanetCity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hasmonster();
  inline void clear_has_hasmonster();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_status_begin_time();
  inline void clear_has_status_begin_time();
  inline void set_has_occupy_begin_time();
  inline void clear_has_occupy_begin_time();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_temp_info();
  inline void clear_has_temp_info();

  ::google::protobuf::int32 id_;
  bool hasmonster_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monster_hp_list_;
  ::google::protobuf::int64 status_begin_time_;
  ::google::protobuf::int64 occupy_begin_time_;
  ::std::string* user_name_;
  ::std::string* groupid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guarde_list_;
  ::OtherGroupInfo* temp_info_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetCity* default_instance_;
};
// -------------------------------------------------------------------

class PlanetTowerAttackHp : public ::google::protobuf::MessageLite {
 public:
  PlanetTowerAttackHp();
  virtual ~PlanetTowerAttackHp();

  PlanetTowerAttackHp(const PlanetTowerAttackHp& from);

  inline PlanetTowerAttackHp& operator=(const PlanetTowerAttackHp& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetTowerAttackHp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetTowerAttackHp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetTowerAttackHp* other);

  // implements Message ----------------------------------------------

  PlanetTowerAttackHp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetTowerAttackHp& from);
  void MergeFrom(const PlanetTowerAttackHp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string army_key = 1;
  inline bool has_army_key() const;
  inline void clear_army_key();
  static const int kArmyKeyFieldNumber = 1;
  inline const ::std::string& army_key() const;
  inline void set_army_key(const ::std::string& value);
  inline void set_army_key(const char* value);
  inline void set_army_key(const char* value, size_t size);
  inline ::std::string* mutable_army_key();
  inline ::std::string* release_army_key();
  inline void set_allocated_army_key(::std::string* army_key);

  // repeated int32 ship_hp_list = 4;
  inline int ship_hp_list_size() const;
  inline void clear_ship_hp_list();
  static const int kShipHpListFieldNumber = 4;
  inline ::google::protobuf::int32 ship_hp_list(int index) const;
  inline void set_ship_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_ship_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ship_hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ship_hp_list();

  // @@protoc_insertion_point(class_scope:PlanetTowerAttackHp)
 private:
  inline void set_has_army_key();
  inline void clear_has_army_key();

  ::std::string* army_key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ship_hp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetTowerAttackHp* default_instance_;
};
// -------------------------------------------------------------------

class PlanetWangZuoTower : public ::google::protobuf::MessageLite {
 public:
  PlanetWangZuoTower();
  virtual ~PlanetWangZuoTower();

  PlanetWangZuoTower(const PlanetWangZuoTower& from);

  inline PlanetWangZuoTower& operator=(const PlanetWangZuoTower& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetWangZuoTower& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetWangZuoTower* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetWangZuoTower* other);

  // implements Message ----------------------------------------------

  PlanetWangZuoTower* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetWangZuoTower& from);
  void MergeFrom(const PlanetWangZuoTower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bool is_attack = 3;
  inline bool has_is_attack() const;
  inline void clear_is_attack();
  static const int kIsAttackFieldNumber = 3;
  inline bool is_attack() const;
  inline void set_is_attack(bool value);

  // required int64 occupy_begin_time = 4;
  inline bool has_occupy_begin_time() const;
  inline void clear_occupy_begin_time();
  static const int kOccupyBeginTimeFieldNumber = 4;
  inline ::google::protobuf::int64 occupy_begin_time() const;
  inline void set_occupy_begin_time(::google::protobuf::int64 value);

  // optional string user_name = 5;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 5;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string groupid = 6;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 6;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // repeated string guarde_list = 7;
  inline int guarde_list_size() const;
  inline void clear_guarde_list();
  static const int kGuardeListFieldNumber = 7;
  inline const ::std::string& guarde_list(int index) const;
  inline ::std::string* mutable_guarde_list(int index);
  inline void set_guarde_list(int index, const ::std::string& value);
  inline void set_guarde_list(int index, const char* value);
  inline void set_guarde_list(int index, const char* value, size_t size);
  inline ::std::string* add_guarde_list();
  inline void add_guarde_list(const ::std::string& value);
  inline void add_guarde_list(const char* value);
  inline void add_guarde_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guarde_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guarde_list();

  // optional .OtherGroupInfo temp_info = 8;
  inline bool has_temp_info() const;
  inline void clear_temp_info();
  static const int kTempInfoFieldNumber = 8;
  inline const ::OtherGroupInfo& temp_info() const;
  inline ::OtherGroupInfo* mutable_temp_info();
  inline ::OtherGroupInfo* release_temp_info();
  inline void set_allocated_temp_info(::OtherGroupInfo* temp_info);

  // optional .OtherUserInfo user_info = 9;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 9;
  inline const ::OtherUserInfo& user_info() const;
  inline ::OtherUserInfo* mutable_user_info();
  inline ::OtherUserInfo* release_user_info();
  inline void set_allocated_user_info(::OtherUserInfo* user_info);

  // repeated .PlanetTowerAttackHp attack_hp = 10;
  inline int attack_hp_size() const;
  inline void clear_attack_hp();
  static const int kAttackHpFieldNumber = 10;
  inline const ::PlanetTowerAttackHp& attack_hp(int index) const;
  inline ::PlanetTowerAttackHp* mutable_attack_hp(int index);
  inline ::PlanetTowerAttackHp* add_attack_hp();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetTowerAttackHp >&
      attack_hp() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetTowerAttackHp >*
      mutable_attack_hp();

  // @@protoc_insertion_point(class_scope:PlanetWangZuoTower)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_is_attack();
  inline void clear_has_is_attack();
  inline void set_has_occupy_begin_time();
  inline void clear_has_occupy_begin_time();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_temp_info();
  inline void clear_has_temp_info();
  inline void set_has_user_info();
  inline void clear_has_user_info();

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int64 occupy_begin_time_;
  ::std::string* user_name_;
  ::std::string* groupid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guarde_list_;
  ::OtherGroupInfo* temp_info_;
  ::OtherUserInfo* user_info_;
  ::google::protobuf::RepeatedPtrField< ::PlanetTowerAttackHp > attack_hp_;
  bool is_attack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetWangZuoTower* default_instance_;
};
// -------------------------------------------------------------------

class PlanetWangZuo : public ::google::protobuf::MessageLite {
 public:
  PlanetWangZuo();
  virtual ~PlanetWangZuo();

  PlanetWangZuo(const PlanetWangZuo& from);

  inline PlanetWangZuo& operator=(const PlanetWangZuo& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetWangZuo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetWangZuo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetWangZuo* other);

  // implements Message ----------------------------------------------

  PlanetWangZuo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetWangZuo& from);
  void MergeFrom(const PlanetWangZuo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int64 status_begin_time = 3;
  inline bool has_status_begin_time() const;
  inline void clear_status_begin_time();
  static const int kStatusBeginTimeFieldNumber = 3;
  inline ::google::protobuf::int64 status_begin_time() const;
  inline void set_status_begin_time(::google::protobuf::int64 value);

  // required int64 occupy_begin_time = 4;
  inline bool has_occupy_begin_time() const;
  inline void clear_occupy_begin_time();
  static const int kOccupyBeginTimeFieldNumber = 4;
  inline ::google::protobuf::int64 occupy_begin_time() const;
  inline void set_occupy_begin_time(::google::protobuf::int64 value);

  // required int64 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::int64 create_time() const;
  inline void set_create_time(::google::protobuf::int64 value);

  // optional string user_name = 6;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 6;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string old_user_name = 7;
  inline bool has_old_user_name() const;
  inline void clear_old_user_name();
  static const int kOldUserNameFieldNumber = 7;
  inline const ::std::string& old_user_name() const;
  inline void set_old_user_name(const ::std::string& value);
  inline void set_old_user_name(const char* value);
  inline void set_old_user_name(const char* value, size_t size);
  inline ::std::string* mutable_old_user_name();
  inline ::std::string* release_old_user_name();
  inline void set_allocated_old_user_name(::std::string* old_user_name);

  // optional string groupid = 8;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 8;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // optional string old_groupid = 9;
  inline bool has_old_groupid() const;
  inline void clear_old_groupid();
  static const int kOldGroupidFieldNumber = 9;
  inline const ::std::string& old_groupid() const;
  inline void set_old_groupid(const ::std::string& value);
  inline void set_old_groupid(const char* value);
  inline void set_old_groupid(const char* value, size_t size);
  inline ::std::string* mutable_old_groupid();
  inline ::std::string* release_old_groupid();
  inline void set_allocated_old_groupid(::std::string* old_groupid);

  // repeated string guarde_list = 10;
  inline int guarde_list_size() const;
  inline void clear_guarde_list();
  static const int kGuardeListFieldNumber = 10;
  inline const ::std::string& guarde_list(int index) const;
  inline ::std::string* mutable_guarde_list(int index);
  inline void set_guarde_list(int index, const ::std::string& value);
  inline void set_guarde_list(int index, const char* value);
  inline void set_guarde_list(int index, const char* value, size_t size);
  inline ::std::string* add_guarde_list();
  inline void add_guarde_list(const ::std::string& value);
  inline void add_guarde_list(const char* value);
  inline void add_guarde_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& guarde_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_guarde_list();

  // optional .OtherGroupInfo temp_info = 11;
  inline bool has_temp_info() const;
  inline void clear_temp_info();
  static const int kTempInfoFieldNumber = 11;
  inline const ::OtherGroupInfo& temp_info() const;
  inline ::OtherGroupInfo* mutable_temp_info();
  inline ::OtherGroupInfo* release_temp_info();
  inline void set_allocated_temp_info(::OtherGroupInfo* temp_info);

  // optional .OtherUserInfo user_info = 12;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 12;
  inline const ::OtherUserInfo& user_info() const;
  inline ::OtherUserInfo* mutable_user_info();
  inline ::OtherUserInfo* release_user_info();
  inline void set_allocated_user_info(::OtherUserInfo* user_info);

  // @@protoc_insertion_point(class_scope:PlanetWangZuo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_status_begin_time();
  inline void clear_has_status_begin_time();
  inline void set_has_occupy_begin_time();
  inline void clear_has_occupy_begin_time();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_old_user_name();
  inline void clear_has_old_user_name();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_old_groupid();
  inline void clear_has_old_groupid();
  inline void set_has_temp_info();
  inline void clear_has_temp_info();
  inline void set_has_user_info();
  inline void clear_has_user_info();

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int64 status_begin_time_;
  ::google::protobuf::int64 occupy_begin_time_;
  ::google::protobuf::int64 create_time_;
  ::std::string* user_name_;
  ::std::string* old_user_name_;
  ::std::string* groupid_;
  ::std::string* old_groupid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> guarde_list_;
  ::OtherGroupInfo* temp_info_;
  ::OtherUserInfo* user_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetWangZuo* default_instance_;
};
// -------------------------------------------------------------------

class PlanetPoint : public ::google::protobuf::MessageLite {
 public:
  PlanetPoint();
  virtual ~PlanetPoint();

  PlanetPoint(const PlanetPoint& from);

  inline PlanetPoint& operator=(const PlanetPoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetPoint& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetPoint* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetPoint* other);

  // implements Message ----------------------------------------------

  PlanetPoint* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetPoint& from);
  void MergeFrom(const PlanetPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlanetPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetPoint* default_instance_;
};
// -------------------------------------------------------------------

class PlanetElement : public ::google::protobuf::MessageLite {
 public:
  PlanetElement();
  virtual ~PlanetElement();

  PlanetElement(const PlanetElement& from);

  inline PlanetElement& operator=(const PlanetElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetElement& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetElement* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetElement* other);

  // implements Message ----------------------------------------------

  PlanetElement* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetElement& from);
  void MergeFrom(const PlanetElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // required string global_key = 2;
  inline bool has_global_key() const;
  inline void clear_global_key();
  static const int kGlobalKeyFieldNumber = 2;
  inline const ::std::string& global_key() const;
  inline void set_global_key(const ::std::string& value);
  inline void set_global_key(const char* value);
  inline void set_global_key(const char* value, size_t size);
  inline ::std::string* mutable_global_key();
  inline ::std::string* release_global_key();
  inline void set_allocated_global_key(::std::string* global_key);

  // repeated .PlanetPoint pos_list = 3;
  inline int pos_list_size() const;
  inline void clear_pos_list();
  static const int kPosListFieldNumber = 3;
  inline const ::PlanetPoint& pos_list(int index) const;
  inline ::PlanetPoint* mutable_pos_list(int index);
  inline ::PlanetPoint* add_pos_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetPoint >&
      pos_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetPoint >*
      mutable_pos_list();

  // required int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .PlanetBase base_data = 5;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 5;
  inline const ::PlanetBase& base_data() const;
  inline ::PlanetBase* mutable_base_data();
  inline ::PlanetBase* release_base_data();
  inline void set_allocated_base_data(::PlanetBase* base_data);

  // optional .PlanetRes res_data = 6;
  inline bool has_res_data() const;
  inline void clear_res_data();
  static const int kResDataFieldNumber = 6;
  inline const ::PlanetRes& res_data() const;
  inline ::PlanetRes* mutable_res_data();
  inline ::PlanetRes* release_res_data();
  inline void set_allocated_res_data(::PlanetRes* res_data);

  // optional .PlanetRuins ruins_data = 7;
  inline bool has_ruins_data() const;
  inline void clear_ruins_data();
  static const int kRuinsDataFieldNumber = 7;
  inline const ::PlanetRuins& ruins_data() const;
  inline ::PlanetRuins* mutable_ruins_data();
  inline ::PlanetRuins* release_ruins_data();
  inline void set_allocated_ruins_data(::PlanetRuins* ruins_data);

  // optional .PlanetBoss boss_data = 8;
  inline bool has_boss_data() const;
  inline void clear_boss_data();
  static const int kBossDataFieldNumber = 8;
  inline const ::PlanetBoss& boss_data() const;
  inline ::PlanetBoss* mutable_boss_data();
  inline ::PlanetBoss* release_boss_data();
  inline void set_allocated_boss_data(::PlanetBoss* boss_data);

  // optional .PlanetCity city_data = 9;
  inline bool has_city_data() const;
  inline void clear_city_data();
  static const int kCityDataFieldNumber = 9;
  inline const ::PlanetCity& city_data() const;
  inline ::PlanetCity* mutable_city_data();
  inline ::PlanetCity* release_city_data();
  inline void set_allocated_city_data(::PlanetCity* city_data);

  // optional .PlanetCityRes city_res_data = 10;
  inline bool has_city_res_data() const;
  inline void clear_city_res_data();
  static const int kCityResDataFieldNumber = 10;
  inline const ::PlanetCityRes& city_res_data() const;
  inline ::PlanetCityRes* mutable_city_res_data();
  inline ::PlanetCityRes* release_city_res_data();
  inline void set_allocated_city_res_data(::PlanetCityRes* city_res_data);

  // optional .PlanetMonster monster_data = 11;
  inline bool has_monster_data() const;
  inline void clear_monster_data();
  static const int kMonsterDataFieldNumber = 11;
  inline const ::PlanetMonster& monster_data() const;
  inline ::PlanetMonster* mutable_monster_data();
  inline ::PlanetMonster* release_monster_data();
  inline void set_allocated_monster_data(::PlanetMonster* monster_data);

  // optional .PlanetWangZuo wangzuo_data = 12;
  inline bool has_wangzuo_data() const;
  inline void clear_wangzuo_data();
  static const int kWangzuoDataFieldNumber = 12;
  inline const ::PlanetWangZuo& wangzuo_data() const;
  inline ::PlanetWangZuo* mutable_wangzuo_data();
  inline ::PlanetWangZuo* release_wangzuo_data();
  inline void set_allocated_wangzuo_data(::PlanetWangZuo* wangzuo_data);

  // optional .PlanetWangZuoTower tower_data = 13;
  inline bool has_tower_data() const;
  inline void clear_tower_data();
  static const int kTowerDataFieldNumber = 13;
  inline const ::PlanetWangZuoTower& tower_data() const;
  inline ::PlanetWangZuoTower* mutable_tower_data();
  inline ::PlanetWangZuoTower* release_tower_data();
  inline void set_allocated_tower_data(::PlanetWangZuoTower* tower_data);

  // @@protoc_insertion_point(class_scope:PlanetElement)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_global_key();
  inline void clear_has_global_key();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_res_data();
  inline void clear_has_res_data();
  inline void set_has_ruins_data();
  inline void clear_has_ruins_data();
  inline void set_has_boss_data();
  inline void clear_has_boss_data();
  inline void set_has_city_data();
  inline void clear_has_city_data();
  inline void set_has_city_res_data();
  inline void clear_has_city_res_data();
  inline void set_has_monster_data();
  inline void clear_has_monster_data();
  inline void set_has_wangzuo_data();
  inline void clear_has_wangzuo_data();
  inline void set_has_tower_data();
  inline void clear_has_tower_data();

  ::std::string* global_key_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::PlanetPoint > pos_list_;
  ::PlanetBase* base_data_;
  ::PlanetRes* res_data_;
  ::PlanetRuins* ruins_data_;
  ::PlanetBoss* boss_data_;
  ::PlanetCity* city_data_;
  ::PlanetCityRes* city_res_data_;
  ::PlanetMonster* monster_data_;
  ::PlanetWangZuo* wangzuo_data_;
  ::PlanetWangZuoTower* tower_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetElement* default_instance_;
};
// -------------------------------------------------------------------

class PlanetNode : public ::google::protobuf::MessageLite {
 public:
  PlanetNode();
  virtual ~PlanetNode();

  PlanetNode(const PlanetNode& from);

  inline PlanetNode& operator=(const PlanetNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetNode& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetNode* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetNode* other);

  // implements Message ----------------------------------------------

  PlanetNode* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetNode& from);
  void MergeFrom(const PlanetNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .PlanetElement element_list = 2;
  inline int element_list_size() const;
  inline void clear_element_list();
  static const int kElementListFieldNumber = 2;
  inline const ::PlanetElement& element_list(int index) const;
  inline ::PlanetElement* mutable_element_list(int index);
  inline ::PlanetElement* add_element_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetElement >&
      element_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetElement >*
      mutable_element_list();

  // repeated string army_line_key_list = 3;
  inline int army_line_key_list_size() const;
  inline void clear_army_line_key_list();
  static const int kArmyLineKeyListFieldNumber = 3;
  inline const ::std::string& army_line_key_list(int index) const;
  inline ::std::string* mutable_army_line_key_list(int index);
  inline void set_army_line_key_list(int index, const ::std::string& value);
  inline void set_army_line_key_list(int index, const char* value);
  inline void set_army_line_key_list(int index, const char* value, size_t size);
  inline ::std::string* add_army_line_key_list();
  inline void add_army_line_key_list(const ::std::string& value);
  inline void add_army_line_key_list(const char* value);
  inline void add_army_line_key_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& army_line_key_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_army_line_key_list();

  // @@protoc_insertion_point(class_scope:PlanetNode)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::RepeatedPtrField< ::PlanetElement > element_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> army_line_key_list_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetNode* default_instance_;
};
// -------------------------------------------------------------------

class PlanetArmyLine : public ::google::protobuf::MessageLite {
 public:
  PlanetArmyLine();
  virtual ~PlanetArmyLine();

  PlanetArmyLine(const PlanetArmyLine& from);

  inline PlanetArmyLine& operator=(const PlanetArmyLine& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetArmyLine& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetArmyLine* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetArmyLine* other);

  // implements Message ----------------------------------------------

  PlanetArmyLine* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetArmyLine& from);
  void MergeFrom(const PlanetArmyLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_key = 1;
  inline bool has_user_key() const;
  inline void clear_user_key();
  static const int kUserKeyFieldNumber = 1;
  inline const ::std::string& user_key() const;
  inline void set_user_key(const ::std::string& value);
  inline void set_user_key(const char* value);
  inline void set_user_key(const char* value, size_t size);
  inline ::std::string* mutable_user_key();
  inline ::std::string* release_user_key();
  inline void set_allocated_user_key(::std::string* user_key);

  // repeated int32 node_id_list = 2;
  inline int node_id_list_size() const;
  inline void clear_node_id_list();
  static const int kNodeIdListFieldNumber = 2;
  inline ::google::protobuf::int32 node_id_list(int index) const;
  inline void set_node_id_list(int index, ::google::protobuf::int32 value);
  inline void add_node_id_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      node_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_node_id_list();

  // repeated .PlanetPoint move_list = 3;
  inline int move_list_size() const;
  inline void clear_move_list();
  static const int kMoveListFieldNumber = 3;
  inline const ::PlanetPoint& move_list(int index) const;
  inline ::PlanetPoint* mutable_move_list(int index);
  inline ::PlanetPoint* add_move_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetPoint >&
      move_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetPoint >*
      mutable_move_list();

  // required int64 begin_time = 4;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 4;
  inline ::google::protobuf::int64 begin_time() const;
  inline void set_begin_time(::google::protobuf::int64 value);

  // required int64 need_time = 5;
  inline bool has_need_time() const;
  inline void clear_need_time();
  static const int kNeedTimeFieldNumber = 5;
  inline ::google::protobuf::int64 need_time() const;
  inline void set_need_time(::google::protobuf::int64 value);

  // required int64 sub_time = 6;
  inline bool has_sub_time() const;
  inline void clear_sub_time();
  static const int kSubTimeFieldNumber = 6;
  inline ::google::protobuf::int64 sub_time() const;
  inline void set_sub_time(::google::protobuf::int64 value);

  // optional int32 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 status_machine = 8;
  inline bool has_status_machine() const;
  inline void clear_status_machine();
  static const int kStatusMachineFieldNumber = 8;
  inline ::google::protobuf::int32 status_machine() const;
  inline void set_status_machine(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlanetArmyLine)
 private:
  inline void set_has_user_key();
  inline void clear_has_user_key();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_need_time();
  inline void clear_has_need_time();
  inline void set_has_sub_time();
  inline void clear_has_sub_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_status_machine();
  inline void clear_has_status_machine();

  ::std::string* user_key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > node_id_list_;
  ::google::protobuf::RepeatedPtrField< ::PlanetPoint > move_list_;
  ::google::protobuf::int64 begin_time_;
  ::google::protobuf::int64 need_time_;
  ::google::protobuf::int64 sub_time_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 status_machine_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetArmyLine* default_instance_;
};
// -------------------------------------------------------------------

class PlanetArmy : public ::google::protobuf::MessageLite {
 public:
  PlanetArmy();
  virtual ~PlanetArmy();

  PlanetArmy(const PlanetArmy& from);

  inline PlanetArmy& operator=(const PlanetArmy& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetArmy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetArmy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetArmy* other);

  // implements Message ----------------------------------------------

  PlanetArmy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetArmy& from);
  void MergeFrom(const PlanetArmy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::int32 guid() const;
  inline void set_guid(::google::protobuf::int32 value);

  // required string army_key = 2;
  inline bool has_army_key() const;
  inline void clear_army_key();
  static const int kArmyKeyFieldNumber = 2;
  inline const ::std::string& army_key() const;
  inline void set_army_key(const ::std::string& value);
  inline void set_army_key(const char* value);
  inline void set_army_key(const char* value, size_t size);
  inline ::std::string* mutable_army_key();
  inline ::std::string* release_army_key();
  inline void set_allocated_army_key(::std::string* army_key);

  // repeated int32 lineup = 3;
  inline int lineup_size() const;
  inline void clear_lineup();
  static const int kLineupFieldNumber = 3;
  inline ::google::protobuf::int32 lineup(int index) const;
  inline void set_lineup(int index, ::google::protobuf::int32 value);
  inline void add_lineup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lineup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lineup();

  // repeated int32 lineup_hp = 4;
  inline int lineup_hp_size() const;
  inline void clear_lineup_hp();
  static const int kLineupHpFieldNumber = 4;
  inline ::google::protobuf::int32 lineup_hp(int index) const;
  inline void set_lineup_hp(int index, ::google::protobuf::int32 value);
  inline void add_lineup_hp(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lineup_hp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lineup_hp();

  // repeated .AirShip ship_list = 5;
  inline int ship_list_size() const;
  inline void clear_ship_list();
  static const int kShipListFieldNumber = 5;
  inline const ::AirShip& ship_list(int index) const;
  inline ::AirShip* mutable_ship_list(int index);
  inline ::AirShip* add_ship_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
      ship_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
      mutable_ship_list();

  // required int32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 status_machine = 7;
  inline bool has_status_machine() const;
  inline void clear_status_machine();
  static const int kStatusMachineFieldNumber = 7;
  inline ::google::protobuf::int32 status_machine() const;
  inline void set_status_machine(::google::protobuf::int32 value);

  // required int64 begin_time = 8;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 8;
  inline ::google::protobuf::int64 begin_time() const;
  inline void set_begin_time(::google::protobuf::int64 value);

  // repeated .Item item_list = 9;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 9;
  inline const ::Item& item_list(int index) const;
  inline ::Item* mutable_item_list(int index);
  inline ::Item* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Item >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Item >*
      mutable_item_list();

  // required string element_global_key = 10;
  inline bool has_element_global_key() const;
  inline void clear_element_global_key();
  static const int kElementGlobalKeyFieldNumber = 10;
  inline const ::std::string& element_global_key() const;
  inline void set_element_global_key(const ::std::string& value);
  inline void set_element_global_key(const char* value);
  inline void set_element_global_key(const char* value, size_t size);
  inline ::std::string* mutable_element_global_key();
  inline ::std::string* release_element_global_key();
  inline void set_allocated_element_global_key(::std::string* element_global_key);

  // optional .PlanetArmyLine line = 11;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 11;
  inline const ::PlanetArmyLine& line() const;
  inline ::PlanetArmyLine* mutable_line();
  inline ::PlanetArmyLine* release_line();
  inline void set_allocated_line(::PlanetArmyLine* line);

  // repeated string army_key_list = 12;
  inline int army_key_list_size() const;
  inline void clear_army_key_list();
  static const int kArmyKeyListFieldNumber = 12;
  inline const ::std::string& army_key_list(int index) const;
  inline ::std::string* mutable_army_key_list(int index);
  inline void set_army_key_list(int index, const ::std::string& value);
  inline void set_army_key_list(int index, const char* value);
  inline void set_army_key_list(int index, const char* value, size_t size);
  inline ::std::string* add_army_key_list();
  inline void add_army_key_list(const ::std::string& value);
  inline void add_army_key_list(const char* value);
  inline void add_army_key_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& army_key_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_army_key_list();

  // optional string accompany_army_key = 13;
  inline bool has_accompany_army_key() const;
  inline void clear_accompany_army_key();
  static const int kAccompanyArmyKeyFieldNumber = 13;
  inline const ::std::string& accompany_army_key() const;
  inline void set_accompany_army_key(const ::std::string& value);
  inline void set_accompany_army_key(const char* value);
  inline void set_accompany_army_key(const char* value, size_t size);
  inline ::std::string* mutable_accompany_army_key();
  inline ::std::string* release_accompany_army_key();
  inline void set_allocated_accompany_army_key(::std::string* accompany_army_key);

  // required int32 tech_durable_param = 14;
  inline bool has_tech_durable_param() const;
  inline void clear_tech_durable_param();
  static const int kTechDurableParamFieldNumber = 14;
  inline ::google::protobuf::int32 tech_durable_param() const;
  inline void set_tech_durable_param(::google::protobuf::int32 value);

  // optional int32 next_status_machine = 15;
  inline bool has_next_status_machine() const;
  inline void clear_next_status_machine();
  static const int kNextStatusMachineFieldNumber = 15;
  inline ::google::protobuf::int32 next_status_machine() const;
  inline void set_next_status_machine(::google::protobuf::int32 value);

  // repeated string req_army_key_list = 16;
  inline int req_army_key_list_size() const;
  inline void clear_req_army_key_list();
  static const int kReqArmyKeyListFieldNumber = 16;
  inline const ::std::string& req_army_key_list(int index) const;
  inline ::std::string* mutable_req_army_key_list(int index);
  inline void set_req_army_key_list(int index, const ::std::string& value);
  inline void set_req_army_key_list(int index, const char* value);
  inline void set_req_army_key_list(int index, const char* value, size_t size);
  inline ::std::string* add_req_army_key_list();
  inline void add_req_army_key_list(const ::std::string& value);
  inline void add_req_army_key_list(const char* value);
  inline void add_req_army_key_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& req_army_key_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_req_army_key_list();

  // optional int64 mass_time = 17;
  inline bool has_mass_time() const;
  inline void clear_mass_time();
  static const int kMassTimeFieldNumber = 17;
  inline ::google::protobuf::int64 mass_time() const;
  inline void set_mass_time(::google::protobuf::int64 value);

  // required int32 speed = 18;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 18;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);

  // optional int64 accompany_begin_time = 19;
  inline bool has_accompany_begin_time() const;
  inline void clear_accompany_begin_time();
  static const int kAccompanyBeginTimeFieldNumber = 19;
  inline ::google::protobuf::int64 accompany_begin_time() const;
  inline void set_accompany_begin_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PlanetArmy)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_army_key();
  inline void clear_has_army_key();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_status_machine();
  inline void clear_has_status_machine();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_element_global_key();
  inline void clear_has_element_global_key();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_accompany_army_key();
  inline void clear_has_accompany_army_key();
  inline void set_has_tech_durable_param();
  inline void clear_has_tech_durable_param();
  inline void set_has_next_status_machine();
  inline void clear_has_next_status_machine();
  inline void set_has_mass_time();
  inline void clear_has_mass_time();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_accompany_begin_time();
  inline void clear_has_accompany_begin_time();

  ::std::string* army_key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lineup_;
  ::google::protobuf::int32 guid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lineup_hp_;
  ::google::protobuf::RepeatedPtrField< ::AirShip > ship_list_;
  ::google::protobuf::int64 begin_time_;
  ::google::protobuf::RepeatedPtrField< ::Item > item_list_;
  ::std::string* element_global_key_;
  ::google::protobuf::int32 status_machine_;
  ::google::protobuf::int32 tech_durable_param_;
  ::PlanetArmyLine* line_;
  ::google::protobuf::RepeatedPtrField< ::std::string> army_key_list_;
  ::std::string* accompany_army_key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> req_army_key_list_;
  ::google::protobuf::int32 next_status_machine_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int64 mass_time_;
  ::google::protobuf::int64 accompany_begin_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetArmy* default_instance_;
};
// -------------------------------------------------------------------

class PlanetMark : public ::google::protobuf::MessageLite {
 public:
  PlanetMark();
  virtual ~PlanetMark();

  PlanetMark(const PlanetMark& from);

  inline PlanetMark& operator=(const PlanetMark& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetMark& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetMark* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetMark* other);

  // implements Message ----------------------------------------------

  PlanetMark* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetMark& from);
  void MergeFrom(const PlanetMark& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .PlanetPoint pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::PlanetPoint& pos() const;
  inline ::PlanetPoint* mutable_pos();
  inline ::PlanetPoint* release_pos();
  inline void set_allocated_pos(::PlanetPoint* pos);

  // @@protoc_insertion_point(class_scope:PlanetMark)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::std::string* name_;
  ::PlanetPoint* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetMark* default_instance_;
};
// -------------------------------------------------------------------

class PlanetSevenDaysData : public ::google::protobuf::MessageLite {
 public:
  PlanetSevenDaysData();
  virtual ~PlanetSevenDaysData();

  PlanetSevenDaysData(const PlanetSevenDaysData& from);

  inline PlanetSevenDaysData& operator=(const PlanetSevenDaysData& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetSevenDaysData& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetSevenDaysData* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetSevenDaysData* other);

  // implements Message ----------------------------------------------

  PlanetSevenDaysData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetSevenDaysData& from);
  void MergeFrom(const PlanetSevenDaysData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 attack_monster_times = 1;
  inline bool has_attack_monster_times() const;
  inline void clear_attack_monster_times();
  static const int kAttackMonsterTimesFieldNumber = 1;
  inline ::google::protobuf::int32 attack_monster_times() const;
  inline void set_attack_monster_times(::google::protobuf::int32 value);

  // optional int32 base_attack_times = 2;
  inline bool has_base_attack_times() const;
  inline void clear_base_attack_times();
  static const int kBaseAttackTimesFieldNumber = 2;
  inline ::google::protobuf::int32 base_attack_times() const;
  inline void set_base_attack_times(::google::protobuf::int32 value);

  // optional int32 colloct_level_times_list_day = 3;
  inline bool has_colloct_level_times_list_day() const;
  inline void clear_colloct_level_times_list_day();
  static const int kColloctLevelTimesListDayFieldNumber = 3;
  inline ::google::protobuf::int32 colloct_level_times_list_day() const;
  inline void set_colloct_level_times_list_day(::google::protobuf::int32 value);

  // optional int32 ruins_level_times_list_day = 4;
  inline bool has_ruins_level_times_list_day() const;
  inline void clear_ruins_level_times_list_day();
  static const int kRuinsLevelTimesListDayFieldNumber = 4;
  inline ::google::protobuf::int32 ruins_level_times_list_day() const;
  inline void set_ruins_level_times_list_day(::google::protobuf::int32 value);

  // optional int32 fishing_level_times_list_day = 5;
  inline bool has_fishing_level_times_list_day() const;
  inline void clear_fishing_level_times_list_day();
  static const int kFishingLevelTimesListDayFieldNumber = 5;
  inline ::google::protobuf::int32 fishing_level_times_list_day() const;
  inline void set_fishing_level_times_list_day(::google::protobuf::int32 value);

  // optional int32 boss_level_times_list_day = 6;
  inline bool has_boss_level_times_list_day() const;
  inline void clear_boss_level_times_list_day();
  static const int kBossLevelTimesListDayFieldNumber = 6;
  inline ::google::protobuf::int32 boss_level_times_list_day() const;
  inline void set_boss_level_times_list_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlanetSevenDaysData)
 private:
  inline void set_has_attack_monster_times();
  inline void clear_has_attack_monster_times();
  inline void set_has_base_attack_times();
  inline void clear_has_base_attack_times();
  inline void set_has_colloct_level_times_list_day();
  inline void clear_has_colloct_level_times_list_day();
  inline void set_has_ruins_level_times_list_day();
  inline void clear_has_ruins_level_times_list_day();
  inline void set_has_fishing_level_times_list_day();
  inline void clear_has_fishing_level_times_list_day();
  inline void set_has_boss_level_times_list_day();
  inline void clear_has_boss_level_times_list_day();

  ::google::protobuf::int32 attack_monster_times_;
  ::google::protobuf::int32 base_attack_times_;
  ::google::protobuf::int32 colloct_level_times_list_day_;
  ::google::protobuf::int32 ruins_level_times_list_day_;
  ::google::protobuf::int32 fishing_level_times_list_day_;
  ::google::protobuf::int32 boss_level_times_list_day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetSevenDaysData* default_instance_;
};
// -------------------------------------------------------------------

class PlanetUser : public ::google::protobuf::MessageLite {
 public:
  PlanetUser();
  virtual ~PlanetUser();

  PlanetUser(const PlanetUser& from);

  inline PlanetUser& operator=(const PlanetUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetUser* other);

  // implements Message ----------------------------------------------

  PlanetUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetUser& from);
  void MergeFrom(const PlanetUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required int32 nation = 2;
  inline bool has_nation() const;
  inline void clear_nation();
  static const int kNationFieldNumber = 2;
  inline ::google::protobuf::int32 nation() const;
  inline void set_nation(::google::protobuf::int32 value);

  // repeated .PlanetArmy army_list = 3;
  inline int army_list_size() const;
  inline void clear_army_list();
  static const int kArmyListFieldNumber = 3;
  inline const ::PlanetArmy& army_list(int index) const;
  inline ::PlanetArmy* mutable_army_list(int index);
  inline ::PlanetArmy* add_army_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetArmy >&
      army_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetArmy >*
      mutable_army_list();

  // required string base_global_key = 4;
  inline bool has_base_global_key() const;
  inline void clear_base_global_key();
  static const int kBaseGlobalKeyFieldNumber = 4;
  inline const ::std::string& base_global_key() const;
  inline void set_base_global_key(const ::std::string& value);
  inline void set_base_global_key(const char* value);
  inline void set_base_global_key(const char* value, size_t size);
  inline ::std::string* mutable_base_global_key();
  inline ::std::string* release_base_global_key();
  inline void set_allocated_base_global_key(::std::string* base_global_key);

  // repeated .PlanetMark mark_list = 5;
  inline int mark_list_size() const;
  inline void clear_mark_list();
  static const int kMarkListFieldNumber = 5;
  inline const ::PlanetMark& mark_list(int index) const;
  inline ::PlanetMark* mutable_mark_list(int index);
  inline ::PlanetMark* add_mark_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetMark >&
      mark_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetMark >*
      mutable_mark_list();

  // repeated string attack_me_list = 6;
  inline int attack_me_list_size() const;
  inline void clear_attack_me_list();
  static const int kAttackMeListFieldNumber = 6;
  inline const ::std::string& attack_me_list(int index) const;
  inline ::std::string* mutable_attack_me_list(int index);
  inline void set_attack_me_list(int index, const ::std::string& value);
  inline void set_attack_me_list(int index, const char* value);
  inline void set_attack_me_list(int index, const char* value, size_t size);
  inline ::std::string* add_attack_me_list();
  inline void add_attack_me_list(const ::std::string& value);
  inline void add_attack_me_list(const char* value);
  inline void add_attack_me_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attack_me_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attack_me_list();

  // repeated int32 colloct_level_times_list = 7;
  inline int colloct_level_times_list_size() const;
  inline void clear_colloct_level_times_list();
  static const int kColloctLevelTimesListFieldNumber = 7;
  inline ::google::protobuf::int32 colloct_level_times_list(int index) const;
  inline void set_colloct_level_times_list(int index, ::google::protobuf::int32 value);
  inline void add_colloct_level_times_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      colloct_level_times_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_colloct_level_times_list();

  // repeated int32 colloct_count = 8;
  inline int colloct_count_size() const;
  inline void clear_colloct_count();
  static const int kColloctCountFieldNumber = 8;
  inline ::google::protobuf::int32 colloct_count(int index) const;
  inline void set_colloct_count(int index, ::google::protobuf::int32 value);
  inline void add_colloct_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      colloct_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_colloct_count();

  // repeated int32 ruins_level_times_list = 9;
  inline int ruins_level_times_list_size() const;
  inline void clear_ruins_level_times_list();
  static const int kRuinsLevelTimesListFieldNumber = 9;
  inline ::google::protobuf::int32 ruins_level_times_list(int index) const;
  inline void set_ruins_level_times_list(int index, ::google::protobuf::int32 value);
  inline void add_ruins_level_times_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ruins_level_times_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ruins_level_times_list();

  // repeated int32 fishing_level_times_list = 10;
  inline int fishing_level_times_list_size() const;
  inline void clear_fishing_level_times_list();
  static const int kFishingLevelTimesListFieldNumber = 10;
  inline ::google::protobuf::int32 fishing_level_times_list(int index) const;
  inline void set_fishing_level_times_list(int index, ::google::protobuf::int32 value);
  inline void add_fishing_level_times_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fishing_level_times_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fishing_level_times_list();

  // repeated int32 boss_level_times_list = 11;
  inline int boss_level_times_list_size() const;
  inline void clear_boss_level_times_list();
  static const int kBossLevelTimesListFieldNumber = 11;
  inline ::google::protobuf::int32 boss_level_times_list(int index) const;
  inline void set_boss_level_times_list(int index, ::google::protobuf::int32 value);
  inline void add_boss_level_times_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boss_level_times_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boss_level_times_list();

  // optional int32 attack_city_win_times = 12;
  inline bool has_attack_city_win_times() const;
  inline void clear_attack_city_win_times();
  static const int kAttackCityWinTimesFieldNumber = 12;
  inline ::google::protobuf::int32 attack_city_win_times() const;
  inline void set_attack_city_win_times(::google::protobuf::int32 value);

  // optional int32 attack_win_times = 13;
  inline bool has_attack_win_times() const;
  inline void clear_attack_win_times();
  static const int kAttackWinTimesFieldNumber = 13;
  inline ::google::protobuf::int32 attack_win_times() const;
  inline void set_attack_win_times(::google::protobuf::int32 value);

  // optional int32 base_defense_win_times = 14;
  inline bool has_base_defense_win_times() const;
  inline void clear_base_defense_win_times();
  static const int kBaseDefenseWinTimesFieldNumber = 14;
  inline ::google::protobuf::int32 base_defense_win_times() const;
  inline void set_base_defense_win_times(::google::protobuf::int32 value);

  // repeated int32 move_base_times_list = 15;
  inline int move_base_times_list_size() const;
  inline void clear_move_base_times_list();
  static const int kMoveBaseTimesListFieldNumber = 15;
  inline ::google::protobuf::int32 move_base_times_list(int index) const;
  inline void set_move_base_times_list(int index, ::google::protobuf::int32 value);
  inline void add_move_base_times_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      move_base_times_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_move_base_times_list();

  // repeated int32 attack_monster_times = 16;
  inline int attack_monster_times_size() const;
  inline void clear_attack_monster_times();
  static const int kAttackMonsterTimesFieldNumber = 16;
  inline ::google::protobuf::int32 attack_monster_times(int index) const;
  inline void set_attack_monster_times(int index, ::google::protobuf::int32 value);
  inline void add_attack_monster_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attack_monster_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attack_monster_times();

  // optional int32 base_attack_times = 17;
  inline bool has_base_attack_times() const;
  inline void clear_base_attack_times();
  static const int kBaseAttackTimesFieldNumber = 17;
  inline ::google::protobuf::int32 base_attack_times() const;
  inline void set_base_attack_times(::google::protobuf::int32 value);

  // repeated int32 colloct_level_times_list_day = 18;
  inline int colloct_level_times_list_day_size() const;
  inline void clear_colloct_level_times_list_day();
  static const int kColloctLevelTimesListDayFieldNumber = 18;
  inline ::google::protobuf::int32 colloct_level_times_list_day(int index) const;
  inline void set_colloct_level_times_list_day(int index, ::google::protobuf::int32 value);
  inline void add_colloct_level_times_list_day(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      colloct_level_times_list_day() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_colloct_level_times_list_day();

  // repeated int32 ruins_level_times_list_day = 19;
  inline int ruins_level_times_list_day_size() const;
  inline void clear_ruins_level_times_list_day();
  static const int kRuinsLevelTimesListDayFieldNumber = 19;
  inline ::google::protobuf::int32 ruins_level_times_list_day(int index) const;
  inline void set_ruins_level_times_list_day(int index, ::google::protobuf::int32 value);
  inline void add_ruins_level_times_list_day(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ruins_level_times_list_day() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ruins_level_times_list_day();

  // repeated int32 fishing_level_times_list_day = 20;
  inline int fishing_level_times_list_day_size() const;
  inline void clear_fishing_level_times_list_day();
  static const int kFishingLevelTimesListDayFieldNumber = 20;
  inline ::google::protobuf::int32 fishing_level_times_list_day(int index) const;
  inline void set_fishing_level_times_list_day(int index, ::google::protobuf::int32 value);
  inline void add_fishing_level_times_list_day(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fishing_level_times_list_day() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fishing_level_times_list_day();

  // repeated int32 boss_level_times_list_day = 21;
  inline int boss_level_times_list_day_size() const;
  inline void clear_boss_level_times_list_day();
  static const int kBossLevelTimesListDayFieldNumber = 21;
  inline ::google::protobuf::int32 boss_level_times_list_day(int index) const;
  inline void set_boss_level_times_list_day(int index, ::google::protobuf::int32 value);
  inline void add_boss_level_times_list_day(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boss_level_times_list_day() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boss_level_times_list_day();

  // optional .PlanetSevenDaysData seven_days_data = 22;
  inline bool has_seven_days_data() const;
  inline void clear_seven_days_data();
  static const int kSevenDaysDataFieldNumber = 22;
  inline const ::PlanetSevenDaysData& seven_days_data() const;
  inline ::PlanetSevenDaysData* mutable_seven_days_data();
  inline ::PlanetSevenDaysData* release_seven_days_data();
  inline void set_allocated_seven_days_data(::PlanetSevenDaysData* seven_days_data);

  // @@protoc_insertion_point(class_scope:PlanetUser)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_nation();
  inline void clear_has_nation();
  inline void set_has_base_global_key();
  inline void clear_has_base_global_key();
  inline void set_has_attack_city_win_times();
  inline void clear_has_attack_city_win_times();
  inline void set_has_attack_win_times();
  inline void clear_has_attack_win_times();
  inline void set_has_base_defense_win_times();
  inline void clear_has_base_defense_win_times();
  inline void set_has_base_attack_times();
  inline void clear_has_base_attack_times();
  inline void set_has_seven_days_data();
  inline void clear_has_seven_days_data();

  ::std::string* user_name_;
  ::google::protobuf::RepeatedPtrField< ::PlanetArmy > army_list_;
  ::std::string* base_global_key_;
  ::google::protobuf::RepeatedPtrField< ::PlanetMark > mark_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attack_me_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > colloct_level_times_list_;
  ::google::protobuf::int32 nation_;
  ::google::protobuf::int32 attack_city_win_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > colloct_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ruins_level_times_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fishing_level_times_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boss_level_times_list_;
  ::google::protobuf::int32 attack_win_times_;
  ::google::protobuf::int32 base_defense_win_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > move_base_times_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attack_monster_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > colloct_level_times_list_day_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ruins_level_times_list_day_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fishing_level_times_list_day_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boss_level_times_list_day_;
  ::PlanetSevenDaysData* seven_days_data_;
  ::google::protobuf::int32 base_attack_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetUser* default_instance_;
};
// -------------------------------------------------------------------

class PlanetMailUser : public ::google::protobuf::MessageLite {
 public:
  PlanetMailUser();
  virtual ~PlanetMailUser();

  PlanetMailUser(const PlanetMailUser& from);

  inline PlanetMailUser& operator=(const PlanetMailUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetMailUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetMailUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetMailUser* other);

  // implements Message ----------------------------------------------

  PlanetMailUser* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetMailUser& from);
  void MergeFrom(const PlanetMailUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .OtherUserInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::OtherUserInfo& info() const;
  inline ::OtherUserInfo* mutable_info();
  inline ::OtherUserInfo* release_info();
  inline void set_allocated_info(::OtherUserInfo* info);

  // repeated .PlanetPoint pos_list = 2;
  inline int pos_list_size() const;
  inline void clear_pos_list();
  static const int kPosListFieldNumber = 2;
  inline const ::PlanetPoint& pos_list(int index) const;
  inline ::PlanetPoint* mutable_pos_list(int index);
  inline ::PlanetPoint* add_pos_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetPoint >&
      pos_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetPoint >*
      mutable_pos_list();

  // repeated int32 ship_hp_list = 4;
  inline int ship_hp_list_size() const;
  inline void clear_ship_hp_list();
  static const int kShipHpListFieldNumber = 4;
  inline ::google::protobuf::int32 ship_hp_list(int index) const;
  inline void set_ship_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_ship_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ship_hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ship_hp_list();

  // repeated .AirShip ship_list = 5;
  inline int ship_list_size() const;
  inline void clear_ship_list();
  static const int kShipListFieldNumber = 5;
  inline const ::AirShip& ship_list(int index) const;
  inline ::AirShip* mutable_ship_list(int index);
  inline ::AirShip* add_ship_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
      ship_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
      mutable_ship_list();

  // repeated int32 pre_ship_energy_level_list = 6;
  inline int pre_ship_energy_level_list_size() const;
  inline void clear_pre_ship_energy_level_list();
  static const int kPreShipEnergyLevelListFieldNumber = 6;
  inline ::google::protobuf::int32 pre_ship_energy_level_list(int index) const;
  inline void set_pre_ship_energy_level_list(int index, ::google::protobuf::int32 value);
  inline void add_pre_ship_energy_level_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pre_ship_energy_level_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pre_ship_energy_level_list();

  // @@protoc_insertion_point(class_scope:PlanetMailUser)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::OtherUserInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::PlanetPoint > pos_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ship_hp_list_;
  ::google::protobuf::RepeatedPtrField< ::AirShip > ship_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pre_ship_energy_level_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetMailUser* default_instance_;
};
// -------------------------------------------------------------------

class PlanetArmyInfo : public ::google::protobuf::MessageLite {
 public:
  PlanetArmyInfo();
  virtual ~PlanetArmyInfo();

  PlanetArmyInfo(const PlanetArmyInfo& from);

  inline PlanetArmyInfo& operator=(const PlanetArmyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetArmyInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetArmyInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetArmyInfo* other);

  // implements Message ----------------------------------------------

  PlanetArmyInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetArmyInfo& from);
  void MergeFrom(const PlanetArmyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PlanetElement my_base = 1;
  inline bool has_my_base() const;
  inline void clear_my_base();
  static const int kMyBaseFieldNumber = 1;
  inline const ::PlanetElement& my_base() const;
  inline ::PlanetElement* mutable_my_base();
  inline ::PlanetElement* release_my_base();
  inline void set_allocated_my_base(::PlanetElement* my_base);

  // required .PlanetArmy army = 2;
  inline bool has_army() const;
  inline void clear_army();
  static const int kArmyFieldNumber = 2;
  inline const ::PlanetArmy& army() const;
  inline ::PlanetArmy* mutable_army();
  inline ::PlanetArmy* release_army();
  inline void set_allocated_army(::PlanetArmy* army);

  // required .PlanetElement target_element = 3;
  inline bool has_target_element() const;
  inline void clear_target_element();
  static const int kTargetElementFieldNumber = 3;
  inline const ::PlanetElement& target_element() const;
  inline ::PlanetElement* mutable_target_element();
  inline ::PlanetElement* release_target_element();
  inline void set_allocated_target_element(::PlanetElement* target_element);

  // @@protoc_insertion_point(class_scope:PlanetArmyInfo)
 private:
  inline void set_has_my_base();
  inline void clear_has_my_base();
  inline void set_has_army();
  inline void clear_has_army();
  inline void set_has_target_element();
  inline void clear_has_target_element();

  ::PlanetElement* my_base_;
  ::PlanetArmy* army_;
  ::PlanetElement* target_element_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetArmyInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlanetWangZuoTitle : public ::google::protobuf::MessageLite {
 public:
  PlanetWangZuoTitle();
  virtual ~PlanetWangZuoTitle();

  PlanetWangZuoTitle(const PlanetWangZuoTitle& from);

  inline PlanetWangZuoTitle& operator=(const PlanetWangZuoTitle& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetWangZuoTitle& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetWangZuoTitle* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetWangZuoTitle* other);

  // implements Message ----------------------------------------------

  PlanetWangZuoTitle* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetWangZuoTitle& from);
  void MergeFrom(const PlanetWangZuoTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required int32 title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlanetWangZuoTitle)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_title();
  inline void clear_has_title();

  ::std::string* user_name_;
  ::google::protobuf::int32 title_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetWangZuoTitle* default_instance_;
};
// -------------------------------------------------------------------

class PlanetWangZuoTitleList : public ::google::protobuf::MessageLite {
 public:
  PlanetWangZuoTitleList();
  virtual ~PlanetWangZuoTitleList();

  PlanetWangZuoTitleList(const PlanetWangZuoTitleList& from);

  inline PlanetWangZuoTitleList& operator=(const PlanetWangZuoTitleList& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetWangZuoTitleList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetWangZuoTitleList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetWangZuoTitleList* other);

  // implements Message ----------------------------------------------

  PlanetWangZuoTitleList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetWangZuoTitleList& from);
  void MergeFrom(const PlanetWangZuoTitleList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlanetWangZuoTitle wangzuo_title_list = 1;
  inline int wangzuo_title_list_size() const;
  inline void clear_wangzuo_title_list();
  static const int kWangzuoTitleListFieldNumber = 1;
  inline const ::PlanetWangZuoTitle& wangzuo_title_list(int index) const;
  inline ::PlanetWangZuoTitle* mutable_wangzuo_title_list(int index);
  inline ::PlanetWangZuoTitle* add_wangzuo_title_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoTitle >&
      wangzuo_title_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoTitle >*
      mutable_wangzuo_title_list();

  // @@protoc_insertion_point(class_scope:PlanetWangZuoTitleList)
 private:

  ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoTitle > wangzuo_title_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetWangZuoTitleList* default_instance_;
};
// -------------------------------------------------------------------

class PlanetWangZuoOccupy : public ::google::protobuf::MessageLite {
 public:
  PlanetWangZuoOccupy();
  virtual ~PlanetWangZuoOccupy();

  PlanetWangZuoOccupy(const PlanetWangZuoOccupy& from);

  inline PlanetWangZuoOccupy& operator=(const PlanetWangZuoOccupy& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetWangZuoOccupy& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetWangZuoOccupy* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetWangZuoOccupy* other);

  // implements Message ----------------------------------------------

  PlanetWangZuoOccupy* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetWangZuoOccupy& from);
  void MergeFrom(const PlanetWangZuoOccupy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required int64 create_time = 2;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 2;
  inline ::google::protobuf::int64 create_time() const;
  inline void set_create_time(::google::protobuf::int64 value);

  // optional .OtherUserInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::OtherUserInfo& info() const;
  inline ::OtherUserInfo* mutable_info();
  inline ::OtherUserInfo* release_info();
  inline void set_allocated_info(::OtherUserInfo* info);

  // @@protoc_insertion_point(class_scope:PlanetWangZuoOccupy)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_info();
  inline void clear_has_info();

  ::std::string* user_name_;
  ::google::protobuf::int64 create_time_;
  ::OtherUserInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetWangZuoOccupy* default_instance_;
};
// -------------------------------------------------------------------

class PlanetWangZuoOccupyList : public ::google::protobuf::MessageLite {
 public:
  PlanetWangZuoOccupyList();
  virtual ~PlanetWangZuoOccupyList();

  PlanetWangZuoOccupyList(const PlanetWangZuoOccupyList& from);

  inline PlanetWangZuoOccupyList& operator=(const PlanetWangZuoOccupyList& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlanetWangZuoOccupyList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlanetWangZuoOccupyList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlanetWangZuoOccupyList* other);

  // implements Message ----------------------------------------------

  PlanetWangZuoOccupyList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlanetWangZuoOccupyList& from);
  void MergeFrom(const PlanetWangZuoOccupyList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlanetWangZuoOccupy occupy_list = 1;
  inline int occupy_list_size() const;
  inline void clear_occupy_list();
  static const int kOccupyListFieldNumber = 1;
  inline const ::PlanetWangZuoOccupy& occupy_list(int index) const;
  inline ::PlanetWangZuoOccupy* mutable_occupy_list(int index);
  inline ::PlanetWangZuoOccupy* add_occupy_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoOccupy >&
      occupy_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoOccupy >*
      mutable_occupy_list();

  // @@protoc_insertion_point(class_scope:PlanetWangZuoOccupyList)
 private:

  ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoOccupy > occupy_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Planet_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Planet_2eproto();
  #endif
  friend void protobuf_AssignDesc_Planet_2eproto();
  friend void protobuf_ShutdownFile_Planet_2eproto();

  void InitAsDefaultInstance();
  static PlanetWangZuoOccupyList* default_instance_;
};
// ===================================================================


// ===================================================================

// PlanetRes

// required int32 id = 1;
inline bool PlanetRes::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetRes::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetRes::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetRes::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetRes::id() const {
  return id_;
}
inline void PlanetRes::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 cur_storage = 2;
inline bool PlanetRes::has_cur_storage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetRes::set_has_cur_storage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetRes::clear_has_cur_storage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetRes::clear_cur_storage() {
  cur_storage_ = 0;
  clear_has_cur_storage();
}
inline ::google::protobuf::int32 PlanetRes::cur_storage() const {
  return cur_storage_;
}
inline void PlanetRes::set_cur_storage(::google::protobuf::int32 value) {
  set_has_cur_storage();
  cur_storage_ = value;
}

// optional string user_name = 3;
inline bool PlanetRes::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetRes::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetRes::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetRes::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetRes::user_name() const {
  return *user_name_;
}
inline void PlanetRes::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetRes::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetRes::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetRes::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetRes::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetRes::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 begin_time = 4;
inline bool PlanetRes::has_begin_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetRes::set_has_begin_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetRes::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetRes::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::int64 PlanetRes::begin_time() const {
  return begin_time_;
}
inline void PlanetRes::set_begin_time(::google::protobuf::int64 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// optional int32 collect_speed = 5;
inline bool PlanetRes::has_collect_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetRes::set_has_collect_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetRes::clear_has_collect_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetRes::clear_collect_speed() {
  collect_speed_ = 0;
  clear_has_collect_speed();
}
inline ::google::protobuf::int32 PlanetRes::collect_speed() const {
  return collect_speed_;
}
inline void PlanetRes::set_collect_speed(::google::protobuf::int32 value) {
  set_has_collect_speed();
  collect_speed_ = value;
}

// optional int32 army_guid = 6;
inline bool PlanetRes::has_army_guid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetRes::set_has_army_guid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetRes::clear_has_army_guid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetRes::clear_army_guid() {
  army_guid_ = 0;
  clear_has_army_guid();
}
inline ::google::protobuf::int32 PlanetRes::army_guid() const {
  return army_guid_;
}
inline void PlanetRes::set_army_guid(::google::protobuf::int32 value) {
  set_has_army_guid();
  army_guid_ = value;
}

// required bool hasMonster = 7;
inline bool PlanetRes::has_hasmonster() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanetRes::set_has_hasmonster() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanetRes::clear_has_hasmonster() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanetRes::clear_hasmonster() {
  hasmonster_ = false;
  clear_has_hasmonster();
}
inline bool PlanetRes::hasmonster() const {
  return hasmonster_;
}
inline void PlanetRes::set_hasmonster(bool value) {
  set_has_hasmonster();
  hasmonster_ = value;
}

// -------------------------------------------------------------------

// PlanetCityResUser

// required string user_name = 1;
inline bool PlanetCityResUser::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetCityResUser::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetCityResUser::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetCityResUser::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetCityResUser::user_name() const {
  return *user_name_;
}
inline void PlanetCityResUser::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetCityResUser::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetCityResUser::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetCityResUser::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetCityResUser::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetCityResUser::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 begin_time = 2;
inline bool PlanetCityResUser::has_begin_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetCityResUser::set_has_begin_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetCityResUser::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetCityResUser::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::int64 PlanetCityResUser::begin_time() const {
  return begin_time_;
}
inline void PlanetCityResUser::set_begin_time(::google::protobuf::int64 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// required int32 collect_speed = 3;
inline bool PlanetCityResUser::has_collect_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetCityResUser::set_has_collect_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetCityResUser::clear_has_collect_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetCityResUser::clear_collect_speed() {
  collect_speed_ = 0;
  clear_has_collect_speed();
}
inline ::google::protobuf::int32 PlanetCityResUser::collect_speed() const {
  return collect_speed_;
}
inline void PlanetCityResUser::set_collect_speed(::google::protobuf::int32 value) {
  set_has_collect_speed();
  collect_speed_ = value;
}

// required int32 army_guid = 4;
inline bool PlanetCityResUser::has_army_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetCityResUser::set_has_army_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetCityResUser::clear_has_army_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetCityResUser::clear_army_guid() {
  army_guid_ = 0;
  clear_has_army_guid();
}
inline ::google::protobuf::int32 PlanetCityResUser::army_guid() const {
  return army_guid_;
}
inline void PlanetCityResUser::set_army_guid(::google::protobuf::int32 value) {
  set_has_army_guid();
  army_guid_ = value;
}

// -------------------------------------------------------------------

// PlanetCityRes

// required int32 id = 1;
inline bool PlanetCityRes::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetCityRes::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetCityRes::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetCityRes::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetCityRes::id() const {
  return id_;
}
inline void PlanetCityRes::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .PlanetCityResUser user_list = 2;
inline int PlanetCityRes::user_list_size() const {
  return user_list_.size();
}
inline void PlanetCityRes::clear_user_list() {
  user_list_.Clear();
}
inline const ::PlanetCityResUser& PlanetCityRes::user_list(int index) const {
  return user_list_.Get(index);
}
inline ::PlanetCityResUser* PlanetCityRes::mutable_user_list(int index) {
  return user_list_.Mutable(index);
}
inline ::PlanetCityResUser* PlanetCityRes::add_user_list() {
  return user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetCityResUser >&
PlanetCityRes::user_list() const {
  return user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetCityResUser >*
PlanetCityRes::mutable_user_list() {
  return &user_list_;
}

// required int32 cur_storage = 3;
inline bool PlanetCityRes::has_cur_storage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetCityRes::set_has_cur_storage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetCityRes::clear_has_cur_storage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetCityRes::clear_cur_storage() {
  cur_storage_ = 0;
  clear_has_cur_storage();
}
inline ::google::protobuf::int32 PlanetCityRes::cur_storage() const {
  return cur_storage_;
}
inline void PlanetCityRes::set_cur_storage(::google::protobuf::int32 value) {
  set_has_cur_storage();
  cur_storage_ = value;
}

// required int64 restore_start_time = 4;
inline bool PlanetCityRes::has_restore_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetCityRes::set_has_restore_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetCityRes::clear_has_restore_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetCityRes::clear_restore_start_time() {
  restore_start_time_ = GOOGLE_LONGLONG(0);
  clear_has_restore_start_time();
}
inline ::google::protobuf::int64 PlanetCityRes::restore_start_time() const {
  return restore_start_time_;
}
inline void PlanetCityRes::set_restore_start_time(::google::protobuf::int64 value) {
  set_has_restore_start_time();
  restore_start_time_ = value;
}

// optional string groupid = 5;
inline bool PlanetCityRes::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetCityRes::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetCityRes::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetCityRes::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& PlanetCityRes::groupid() const {
  return *groupid_;
}
inline void PlanetCityRes::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void PlanetCityRes::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void PlanetCityRes::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetCityRes::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}
inline ::std::string* PlanetCityRes::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetCityRes::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PlanetRuins

// required int32 id = 1;
inline bool PlanetRuins::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetRuins::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetRuins::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetRuins::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetRuins::id() const {
  return id_;
}
inline void PlanetRuins::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 begin_time = 2;
inline bool PlanetRuins::has_begin_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetRuins::set_has_begin_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetRuins::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetRuins::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::int64 PlanetRuins::begin_time() const {
  return begin_time_;
}
inline void PlanetRuins::set_begin_time(::google::protobuf::int64 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// optional int64 need_time = 3;
inline bool PlanetRuins::has_need_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetRuins::set_has_need_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetRuins::clear_has_need_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetRuins::clear_need_time() {
  need_time_ = GOOGLE_LONGLONG(0);
  clear_has_need_time();
}
inline ::google::protobuf::int64 PlanetRuins::need_time() const {
  return need_time_;
}
inline void PlanetRuins::set_need_time(::google::protobuf::int64 value) {
  set_has_need_time();
  need_time_ = value;
}

// optional string user_name = 4;
inline bool PlanetRuins::has_user_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetRuins::set_has_user_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetRuins::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetRuins::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetRuins::user_name() const {
  return *user_name_;
}
inline void PlanetRuins::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetRuins::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetRuins::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetRuins::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetRuins::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetRuins::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 army_guid = 5;
inline bool PlanetRuins::has_army_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetRuins::set_has_army_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetRuins::clear_has_army_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetRuins::clear_army_guid() {
  army_guid_ = 0;
  clear_has_army_guid();
}
inline ::google::protobuf::int32 PlanetRuins::army_guid() const {
  return army_guid_;
}
inline void PlanetRuins::set_army_guid(::google::protobuf::int32 value) {
  set_has_army_guid();
  army_guid_ = value;
}

// -------------------------------------------------------------------

// PlanetBase

// required string user_name = 1;
inline bool PlanetBase::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetBase::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetBase::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetBase::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetBase::user_name() const {
  return *user_name_;
}
inline void PlanetBase::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetBase::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetBase::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetBase::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetBase::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetBase::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string guarde_list = 2;
inline int PlanetBase::guarde_list_size() const {
  return guarde_list_.size();
}
inline void PlanetBase::clear_guarde_list() {
  guarde_list_.Clear();
}
inline const ::std::string& PlanetBase::guarde_list(int index) const {
  return guarde_list_.Get(index);
}
inline ::std::string* PlanetBase::mutable_guarde_list(int index) {
  return guarde_list_.Mutable(index);
}
inline void PlanetBase::set_guarde_list(int index, const ::std::string& value) {
  guarde_list_.Mutable(index)->assign(value);
}
inline void PlanetBase::set_guarde_list(int index, const char* value) {
  guarde_list_.Mutable(index)->assign(value);
}
inline void PlanetBase::set_guarde_list(int index, const char* value, size_t size) {
  guarde_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetBase::add_guarde_list() {
  return guarde_list_.Add();
}
inline void PlanetBase::add_guarde_list(const ::std::string& value) {
  guarde_list_.Add()->assign(value);
}
inline void PlanetBase::add_guarde_list(const char* value) {
  guarde_list_.Add()->assign(value);
}
inline void PlanetBase::add_guarde_list(const char* value, size_t size) {
  guarde_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetBase::guarde_list() const {
  return guarde_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetBase::mutable_guarde_list() {
  return &guarde_list_;
}

// required int32 destroy_value = 3;
inline bool PlanetBase::has_destroy_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetBase::set_has_destroy_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetBase::clear_has_destroy_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetBase::clear_destroy_value() {
  destroy_value_ = 0;
  clear_has_destroy_value();
}
inline ::google::protobuf::int32 PlanetBase::destroy_value() const {
  return destroy_value_;
}
inline void PlanetBase::set_destroy_value(::google::protobuf::int32 value) {
  set_has_destroy_value();
  destroy_value_ = value;
}

// optional int64 last_hurt_time = 4;
inline bool PlanetBase::has_last_hurt_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetBase::set_has_last_hurt_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetBase::clear_has_last_hurt_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetBase::clear_last_hurt_time() {
  last_hurt_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_hurt_time();
}
inline ::google::protobuf::int64 PlanetBase::last_hurt_time() const {
  return last_hurt_time_;
}
inline void PlanetBase::set_last_hurt_time(::google::protobuf::int64 value) {
  set_has_last_hurt_time();
  last_hurt_time_ = value;
}

// optional int64 last_sub_destroy_value_time = 5;
inline bool PlanetBase::has_last_sub_destroy_value_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetBase::set_has_last_sub_destroy_value_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetBase::clear_has_last_sub_destroy_value_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetBase::clear_last_sub_destroy_value_time() {
  last_sub_destroy_value_time_ = GOOGLE_LONGLONG(0);
  clear_has_last_sub_destroy_value_time();
}
inline ::google::protobuf::int64 PlanetBase::last_sub_destroy_value_time() const {
  return last_sub_destroy_value_time_;
}
inline void PlanetBase::set_last_sub_destroy_value_time(::google::protobuf::int64 value) {
  set_has_last_sub_destroy_value_time();
  last_sub_destroy_value_time_ = value;
}

// optional .OtherUserInfo info = 6;
inline bool PlanetBase::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetBase::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetBase::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetBase::clear_info() {
  if (info_ != NULL) info_->::OtherUserInfo::Clear();
  clear_has_info();
}
inline const ::OtherUserInfo& PlanetBase::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::OtherUserInfo* PlanetBase::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::OtherUserInfo;
  return info_;
}
inline ::OtherUserInfo* PlanetBase::release_info() {
  clear_has_info();
  ::OtherUserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void PlanetBase::set_allocated_info(::OtherUserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional int64 shield_start_time = 7;
inline bool PlanetBase::has_shield_start_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanetBase::set_has_shield_start_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanetBase::clear_has_shield_start_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanetBase::clear_shield_start_time() {
  shield_start_time_ = GOOGLE_LONGLONG(0);
  clear_has_shield_start_time();
}
inline ::google::protobuf::int64 PlanetBase::shield_start_time() const {
  return shield_start_time_;
}
inline void PlanetBase::set_shield_start_time(::google::protobuf::int64 value) {
  set_has_shield_start_time();
  shield_start_time_ = value;
}

// optional int64 shield_time = 8;
inline bool PlanetBase::has_shield_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanetBase::set_has_shield_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanetBase::clear_has_shield_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanetBase::clear_shield_time() {
  shield_time_ = GOOGLE_LONGLONG(0);
  clear_has_shield_time();
}
inline ::google::protobuf::int64 PlanetBase::shield_time() const {
  return shield_time_;
}
inline void PlanetBase::set_shield_time(::google::protobuf::int64 value) {
  set_has_shield_time();
  shield_time_ = value;
}

// optional int32 shield_type = 9;
inline bool PlanetBase::has_shield_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlanetBase::set_has_shield_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlanetBase::clear_has_shield_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlanetBase::clear_shield_type() {
  shield_type_ = 0;
  clear_has_shield_type();
}
inline ::google::protobuf::int32 PlanetBase::shield_type() const {
  return shield_type_;
}
inline void PlanetBase::set_shield_type(::google::protobuf::int32 value) {
  set_has_shield_type();
  shield_type_ = value;
}

// -------------------------------------------------------------------

// PlanetBossUser

// required string user_name = 1;
inline bool PlanetBossUser::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetBossUser::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetBossUser::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetBossUser::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetBossUser::user_name() const {
  return *user_name_;
}
inline void PlanetBossUser::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetBossUser::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetBossUser::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetBossUser::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetBossUser::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetBossUser::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 tech_id = 2;
inline bool PlanetBossUser::has_tech_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetBossUser::set_has_tech_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetBossUser::clear_has_tech_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetBossUser::clear_tech_id() {
  tech_id_ = 0;
  clear_has_tech_id();
}
inline ::google::protobuf::int32 PlanetBossUser::tech_id() const {
  return tech_id_;
}
inline void PlanetBossUser::set_tech_id(::google::protobuf::int32 value) {
  set_has_tech_id();
  tech_id_ = value;
}

// required int64 start_time = 3;
inline bool PlanetBossUser::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetBossUser::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetBossUser::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetBossUser::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 PlanetBossUser::start_time() const {
  return start_time_;
}
inline void PlanetBossUser::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
}

// required int32 attack_count = 4;
inline bool PlanetBossUser::has_attack_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetBossUser::set_has_attack_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetBossUser::clear_has_attack_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetBossUser::clear_attack_count() {
  attack_count_ = 0;
  clear_has_attack_count();
}
inline ::google::protobuf::int32 PlanetBossUser::attack_count() const {
  return attack_count_;
}
inline void PlanetBossUser::set_attack_count(::google::protobuf::int32 value) {
  set_has_attack_count();
  attack_count_ = value;
}

// required string boss_global_key = 5;
inline bool PlanetBossUser::has_boss_global_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetBossUser::set_has_boss_global_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetBossUser::clear_has_boss_global_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetBossUser::clear_boss_global_key() {
  if (boss_global_key_ != &::google::protobuf::internal::kEmptyString) {
    boss_global_key_->clear();
  }
  clear_has_boss_global_key();
}
inline const ::std::string& PlanetBossUser::boss_global_key() const {
  return *boss_global_key_;
}
inline void PlanetBossUser::set_boss_global_key(const ::std::string& value) {
  set_has_boss_global_key();
  if (boss_global_key_ == &::google::protobuf::internal::kEmptyString) {
    boss_global_key_ = new ::std::string;
  }
  boss_global_key_->assign(value);
}
inline void PlanetBossUser::set_boss_global_key(const char* value) {
  set_has_boss_global_key();
  if (boss_global_key_ == &::google::protobuf::internal::kEmptyString) {
    boss_global_key_ = new ::std::string;
  }
  boss_global_key_->assign(value);
}
inline void PlanetBossUser::set_boss_global_key(const char* value, size_t size) {
  set_has_boss_global_key();
  if (boss_global_key_ == &::google::protobuf::internal::kEmptyString) {
    boss_global_key_ = new ::std::string;
  }
  boss_global_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetBossUser::mutable_boss_global_key() {
  set_has_boss_global_key();
  if (boss_global_key_ == &::google::protobuf::internal::kEmptyString) {
    boss_global_key_ = new ::std::string;
  }
  return boss_global_key_;
}
inline ::std::string* PlanetBossUser::release_boss_global_key() {
  clear_has_boss_global_key();
  if (boss_global_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = boss_global_key_;
    boss_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetBossUser::set_allocated_boss_global_key(::std::string* boss_global_key) {
  if (boss_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_global_key_;
  }
  if (boss_global_key) {
    set_has_boss_global_key();
    boss_global_key_ = boss_global_key;
  } else {
    clear_has_boss_global_key();
    boss_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PlanetBoss

// required int32 id = 1;
inline bool PlanetBoss::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetBoss::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetBoss::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetBoss::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetBoss::id() const {
  return id_;
}
inline void PlanetBoss::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int64 create_time = 2;
inline bool PlanetBoss::has_create_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetBoss::set_has_create_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetBoss::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetBoss::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::int64 PlanetBoss::create_time() const {
  return create_time_;
}
inline void PlanetBoss::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
}

// repeated int32 monster_hp_list = 3;
inline int PlanetBoss::monster_hp_list_size() const {
  return monster_hp_list_.size();
}
inline void PlanetBoss::clear_monster_hp_list() {
  monster_hp_list_.Clear();
}
inline ::google::protobuf::int32 PlanetBoss::monster_hp_list(int index) const {
  return monster_hp_list_.Get(index);
}
inline void PlanetBoss::set_monster_hp_list(int index, ::google::protobuf::int32 value) {
  monster_hp_list_.Set(index, value);
}
inline void PlanetBoss::add_monster_hp_list(::google::protobuf::int32 value) {
  monster_hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetBoss::monster_hp_list() const {
  return monster_hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetBoss::mutable_monster_hp_list() {
  return &monster_hp_list_;
}

// optional .PlanetBossUser user_info = 4;
inline bool PlanetBoss::has_user_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetBoss::set_has_user_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetBoss::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetBoss::clear_user_info() {
  if (user_info_ != NULL) user_info_->::PlanetBossUser::Clear();
  clear_has_user_info();
}
inline const ::PlanetBossUser& PlanetBoss::user_info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::PlanetBossUser* PlanetBoss::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::PlanetBossUser;
  return user_info_;
}
inline ::PlanetBossUser* PlanetBoss::release_user_info() {
  clear_has_user_info();
  ::PlanetBossUser* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void PlanetBoss::set_allocated_user_info(::PlanetBossUser* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
}

// -------------------------------------------------------------------

// PlanetMonster

// required int32 id = 1;
inline bool PlanetMonster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetMonster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetMonster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetMonster::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetMonster::id() const {
  return id_;
}
inline void PlanetMonster::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int64 create_time = 2;
inline bool PlanetMonster::has_create_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetMonster::set_has_create_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetMonster::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetMonster::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::int64 PlanetMonster::create_time() const {
  return create_time_;
}
inline void PlanetMonster::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
}

// required int32 isDead = 3;
inline bool PlanetMonster::has_isdead() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetMonster::set_has_isdead() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetMonster::clear_has_isdead() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetMonster::clear_isdead() {
  isdead_ = 0;
  clear_has_isdead();
}
inline ::google::protobuf::int32 PlanetMonster::isdead() const {
  return isdead_;
}
inline void PlanetMonster::set_isdead(::google::protobuf::int32 value) {
  set_has_isdead();
  isdead_ = value;
}

// optional int64 dead_time = 4;
inline bool PlanetMonster::has_dead_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetMonster::set_has_dead_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetMonster::clear_has_dead_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetMonster::clear_dead_time() {
  dead_time_ = GOOGLE_LONGLONG(0);
  clear_has_dead_time();
}
inline ::google::protobuf::int64 PlanetMonster::dead_time() const {
  return dead_time_;
}
inline void PlanetMonster::set_dead_time(::google::protobuf::int64 value) {
  set_has_dead_time();
  dead_time_ = value;
}

// repeated int32 monster_hp_list = 5;
inline int PlanetMonster::monster_hp_list_size() const {
  return monster_hp_list_.size();
}
inline void PlanetMonster::clear_monster_hp_list() {
  monster_hp_list_.Clear();
}
inline ::google::protobuf::int32 PlanetMonster::monster_hp_list(int index) const {
  return monster_hp_list_.Get(index);
}
inline void PlanetMonster::set_monster_hp_list(int index, ::google::protobuf::int32 value) {
  monster_hp_list_.Set(index, value);
}
inline void PlanetMonster::add_monster_hp_list(::google::protobuf::int32 value) {
  monster_hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetMonster::monster_hp_list() const {
  return monster_hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetMonster::mutable_monster_hp_list() {
  return &monster_hp_list_;
}

// -------------------------------------------------------------------

// PlanetCity

// required int32 id = 1;
inline bool PlanetCity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetCity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetCity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetCity::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetCity::id() const {
  return id_;
}
inline void PlanetCity::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required bool hasMonster = 2;
inline bool PlanetCity::has_hasmonster() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetCity::set_has_hasmonster() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetCity::clear_has_hasmonster() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetCity::clear_hasmonster() {
  hasmonster_ = false;
  clear_has_hasmonster();
}
inline bool PlanetCity::hasmonster() const {
  return hasmonster_;
}
inline void PlanetCity::set_hasmonster(bool value) {
  set_has_hasmonster();
  hasmonster_ = value;
}

// repeated int32 monster_hp_list = 3;
inline int PlanetCity::monster_hp_list_size() const {
  return monster_hp_list_.size();
}
inline void PlanetCity::clear_monster_hp_list() {
  monster_hp_list_.Clear();
}
inline ::google::protobuf::int32 PlanetCity::monster_hp_list(int index) const {
  return monster_hp_list_.Get(index);
}
inline void PlanetCity::set_monster_hp_list(int index, ::google::protobuf::int32 value) {
  monster_hp_list_.Set(index, value);
}
inline void PlanetCity::add_monster_hp_list(::google::protobuf::int32 value) {
  monster_hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetCity::monster_hp_list() const {
  return monster_hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetCity::mutable_monster_hp_list() {
  return &monster_hp_list_;
}

// required int32 status = 4;
inline bool PlanetCity::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetCity::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetCity::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetCity::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PlanetCity::status() const {
  return status_;
}
inline void PlanetCity::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int64 status_begin_time = 5;
inline bool PlanetCity::has_status_begin_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetCity::set_has_status_begin_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetCity::clear_has_status_begin_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetCity::clear_status_begin_time() {
  status_begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_status_begin_time();
}
inline ::google::protobuf::int64 PlanetCity::status_begin_time() const {
  return status_begin_time_;
}
inline void PlanetCity::set_status_begin_time(::google::protobuf::int64 value) {
  set_has_status_begin_time();
  status_begin_time_ = value;
}

// required int64 occupy_begin_time = 6;
inline bool PlanetCity::has_occupy_begin_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetCity::set_has_occupy_begin_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetCity::clear_has_occupy_begin_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetCity::clear_occupy_begin_time() {
  occupy_begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_occupy_begin_time();
}
inline ::google::protobuf::int64 PlanetCity::occupy_begin_time() const {
  return occupy_begin_time_;
}
inline void PlanetCity::set_occupy_begin_time(::google::protobuf::int64 value) {
  set_has_occupy_begin_time();
  occupy_begin_time_ = value;
}

// optional string user_name = 7;
inline bool PlanetCity::has_user_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanetCity::set_has_user_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanetCity::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanetCity::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetCity::user_name() const {
  return *user_name_;
}
inline void PlanetCity::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetCity::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetCity::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetCity::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetCity::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetCity::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string groupid = 8;
inline bool PlanetCity::has_groupid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanetCity::set_has_groupid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanetCity::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanetCity::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& PlanetCity::groupid() const {
  return *groupid_;
}
inline void PlanetCity::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void PlanetCity::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void PlanetCity::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetCity::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}
inline ::std::string* PlanetCity::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetCity::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string guarde_list = 9;
inline int PlanetCity::guarde_list_size() const {
  return guarde_list_.size();
}
inline void PlanetCity::clear_guarde_list() {
  guarde_list_.Clear();
}
inline const ::std::string& PlanetCity::guarde_list(int index) const {
  return guarde_list_.Get(index);
}
inline ::std::string* PlanetCity::mutable_guarde_list(int index) {
  return guarde_list_.Mutable(index);
}
inline void PlanetCity::set_guarde_list(int index, const ::std::string& value) {
  guarde_list_.Mutable(index)->assign(value);
}
inline void PlanetCity::set_guarde_list(int index, const char* value) {
  guarde_list_.Mutable(index)->assign(value);
}
inline void PlanetCity::set_guarde_list(int index, const char* value, size_t size) {
  guarde_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetCity::add_guarde_list() {
  return guarde_list_.Add();
}
inline void PlanetCity::add_guarde_list(const ::std::string& value) {
  guarde_list_.Add()->assign(value);
}
inline void PlanetCity::add_guarde_list(const char* value) {
  guarde_list_.Add()->assign(value);
}
inline void PlanetCity::add_guarde_list(const char* value, size_t size) {
  guarde_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetCity::guarde_list() const {
  return guarde_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetCity::mutable_guarde_list() {
  return &guarde_list_;
}

// optional .OtherGroupInfo temp_info = 10;
inline bool PlanetCity::has_temp_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlanetCity::set_has_temp_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlanetCity::clear_has_temp_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlanetCity::clear_temp_info() {
  if (temp_info_ != NULL) temp_info_->::OtherGroupInfo::Clear();
  clear_has_temp_info();
}
inline const ::OtherGroupInfo& PlanetCity::temp_info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return temp_info_ != NULL ? *temp_info_ : *default_instance().temp_info_;
#else
  return temp_info_ != NULL ? *temp_info_ : *default_instance_->temp_info_;
#endif
}
inline ::OtherGroupInfo* PlanetCity::mutable_temp_info() {
  set_has_temp_info();
  if (temp_info_ == NULL) temp_info_ = new ::OtherGroupInfo;
  return temp_info_;
}
inline ::OtherGroupInfo* PlanetCity::release_temp_info() {
  clear_has_temp_info();
  ::OtherGroupInfo* temp = temp_info_;
  temp_info_ = NULL;
  return temp;
}
inline void PlanetCity::set_allocated_temp_info(::OtherGroupInfo* temp_info) {
  delete temp_info_;
  temp_info_ = temp_info;
  if (temp_info) {
    set_has_temp_info();
  } else {
    clear_has_temp_info();
  }
}

// -------------------------------------------------------------------

// PlanetTowerAttackHp

// required string army_key = 1;
inline bool PlanetTowerAttackHp::has_army_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetTowerAttackHp::set_has_army_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetTowerAttackHp::clear_has_army_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetTowerAttackHp::clear_army_key() {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    army_key_->clear();
  }
  clear_has_army_key();
}
inline const ::std::string& PlanetTowerAttackHp::army_key() const {
  return *army_key_;
}
inline void PlanetTowerAttackHp::set_army_key(const ::std::string& value) {
  set_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    army_key_ = new ::std::string;
  }
  army_key_->assign(value);
}
inline void PlanetTowerAttackHp::set_army_key(const char* value) {
  set_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    army_key_ = new ::std::string;
  }
  army_key_->assign(value);
}
inline void PlanetTowerAttackHp::set_army_key(const char* value, size_t size) {
  set_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    army_key_ = new ::std::string;
  }
  army_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetTowerAttackHp::mutable_army_key() {
  set_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    army_key_ = new ::std::string;
  }
  return army_key_;
}
inline ::std::string* PlanetTowerAttackHp::release_army_key() {
  clear_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = army_key_;
    army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetTowerAttackHp::set_allocated_army_key(::std::string* army_key) {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  if (army_key) {
    set_has_army_key();
    army_key_ = army_key;
  } else {
    clear_has_army_key();
    army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 ship_hp_list = 4;
inline int PlanetTowerAttackHp::ship_hp_list_size() const {
  return ship_hp_list_.size();
}
inline void PlanetTowerAttackHp::clear_ship_hp_list() {
  ship_hp_list_.Clear();
}
inline ::google::protobuf::int32 PlanetTowerAttackHp::ship_hp_list(int index) const {
  return ship_hp_list_.Get(index);
}
inline void PlanetTowerAttackHp::set_ship_hp_list(int index, ::google::protobuf::int32 value) {
  ship_hp_list_.Set(index, value);
}
inline void PlanetTowerAttackHp::add_ship_hp_list(::google::protobuf::int32 value) {
  ship_hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetTowerAttackHp::ship_hp_list() const {
  return ship_hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetTowerAttackHp::mutable_ship_hp_list() {
  return &ship_hp_list_;
}

// -------------------------------------------------------------------

// PlanetWangZuoTower

// required int32 id = 1;
inline bool PlanetWangZuoTower::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetWangZuoTower::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetWangZuoTower::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetWangZuoTower::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetWangZuoTower::id() const {
  return id_;
}
inline void PlanetWangZuoTower::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 status = 2;
inline bool PlanetWangZuoTower::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetWangZuoTower::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetWangZuoTower::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetWangZuoTower::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PlanetWangZuoTower::status() const {
  return status_;
}
inline void PlanetWangZuoTower::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional bool is_attack = 3;
inline bool PlanetWangZuoTower::has_is_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetWangZuoTower::set_has_is_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetWangZuoTower::clear_has_is_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetWangZuoTower::clear_is_attack() {
  is_attack_ = false;
  clear_has_is_attack();
}
inline bool PlanetWangZuoTower::is_attack() const {
  return is_attack_;
}
inline void PlanetWangZuoTower::set_is_attack(bool value) {
  set_has_is_attack();
  is_attack_ = value;
}

// required int64 occupy_begin_time = 4;
inline bool PlanetWangZuoTower::has_occupy_begin_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetWangZuoTower::set_has_occupy_begin_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetWangZuoTower::clear_has_occupy_begin_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetWangZuoTower::clear_occupy_begin_time() {
  occupy_begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_occupy_begin_time();
}
inline ::google::protobuf::int64 PlanetWangZuoTower::occupy_begin_time() const {
  return occupy_begin_time_;
}
inline void PlanetWangZuoTower::set_occupy_begin_time(::google::protobuf::int64 value) {
  set_has_occupy_begin_time();
  occupy_begin_time_ = value;
}

// optional string user_name = 5;
inline bool PlanetWangZuoTower::has_user_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetWangZuoTower::set_has_user_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetWangZuoTower::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetWangZuoTower::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetWangZuoTower::user_name() const {
  return *user_name_;
}
inline void PlanetWangZuoTower::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetWangZuoTower::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetWangZuoTower::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuoTower::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetWangZuoTower::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetWangZuoTower::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string groupid = 6;
inline bool PlanetWangZuoTower::has_groupid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetWangZuoTower::set_has_groupid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetWangZuoTower::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetWangZuoTower::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& PlanetWangZuoTower::groupid() const {
  return *groupid_;
}
inline void PlanetWangZuoTower::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void PlanetWangZuoTower::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void PlanetWangZuoTower::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuoTower::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}
inline ::std::string* PlanetWangZuoTower::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetWangZuoTower::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string guarde_list = 7;
inline int PlanetWangZuoTower::guarde_list_size() const {
  return guarde_list_.size();
}
inline void PlanetWangZuoTower::clear_guarde_list() {
  guarde_list_.Clear();
}
inline const ::std::string& PlanetWangZuoTower::guarde_list(int index) const {
  return guarde_list_.Get(index);
}
inline ::std::string* PlanetWangZuoTower::mutable_guarde_list(int index) {
  return guarde_list_.Mutable(index);
}
inline void PlanetWangZuoTower::set_guarde_list(int index, const ::std::string& value) {
  guarde_list_.Mutable(index)->assign(value);
}
inline void PlanetWangZuoTower::set_guarde_list(int index, const char* value) {
  guarde_list_.Mutable(index)->assign(value);
}
inline void PlanetWangZuoTower::set_guarde_list(int index, const char* value, size_t size) {
  guarde_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuoTower::add_guarde_list() {
  return guarde_list_.Add();
}
inline void PlanetWangZuoTower::add_guarde_list(const ::std::string& value) {
  guarde_list_.Add()->assign(value);
}
inline void PlanetWangZuoTower::add_guarde_list(const char* value) {
  guarde_list_.Add()->assign(value);
}
inline void PlanetWangZuoTower::add_guarde_list(const char* value, size_t size) {
  guarde_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetWangZuoTower::guarde_list() const {
  return guarde_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetWangZuoTower::mutable_guarde_list() {
  return &guarde_list_;
}

// optional .OtherGroupInfo temp_info = 8;
inline bool PlanetWangZuoTower::has_temp_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanetWangZuoTower::set_has_temp_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanetWangZuoTower::clear_has_temp_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanetWangZuoTower::clear_temp_info() {
  if (temp_info_ != NULL) temp_info_->::OtherGroupInfo::Clear();
  clear_has_temp_info();
}
inline const ::OtherGroupInfo& PlanetWangZuoTower::temp_info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return temp_info_ != NULL ? *temp_info_ : *default_instance().temp_info_;
#else
  return temp_info_ != NULL ? *temp_info_ : *default_instance_->temp_info_;
#endif
}
inline ::OtherGroupInfo* PlanetWangZuoTower::mutable_temp_info() {
  set_has_temp_info();
  if (temp_info_ == NULL) temp_info_ = new ::OtherGroupInfo;
  return temp_info_;
}
inline ::OtherGroupInfo* PlanetWangZuoTower::release_temp_info() {
  clear_has_temp_info();
  ::OtherGroupInfo* temp = temp_info_;
  temp_info_ = NULL;
  return temp;
}
inline void PlanetWangZuoTower::set_allocated_temp_info(::OtherGroupInfo* temp_info) {
  delete temp_info_;
  temp_info_ = temp_info;
  if (temp_info) {
    set_has_temp_info();
  } else {
    clear_has_temp_info();
  }
}

// optional .OtherUserInfo user_info = 9;
inline bool PlanetWangZuoTower::has_user_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlanetWangZuoTower::set_has_user_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlanetWangZuoTower::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlanetWangZuoTower::clear_user_info() {
  if (user_info_ != NULL) user_info_->::OtherUserInfo::Clear();
  clear_has_user_info();
}
inline const ::OtherUserInfo& PlanetWangZuoTower::user_info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::OtherUserInfo* PlanetWangZuoTower::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::OtherUserInfo;
  return user_info_;
}
inline ::OtherUserInfo* PlanetWangZuoTower::release_user_info() {
  clear_has_user_info();
  ::OtherUserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void PlanetWangZuoTower::set_allocated_user_info(::OtherUserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
}

// repeated .PlanetTowerAttackHp attack_hp = 10;
inline int PlanetWangZuoTower::attack_hp_size() const {
  return attack_hp_.size();
}
inline void PlanetWangZuoTower::clear_attack_hp() {
  attack_hp_.Clear();
}
inline const ::PlanetTowerAttackHp& PlanetWangZuoTower::attack_hp(int index) const {
  return attack_hp_.Get(index);
}
inline ::PlanetTowerAttackHp* PlanetWangZuoTower::mutable_attack_hp(int index) {
  return attack_hp_.Mutable(index);
}
inline ::PlanetTowerAttackHp* PlanetWangZuoTower::add_attack_hp() {
  return attack_hp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetTowerAttackHp >&
PlanetWangZuoTower::attack_hp() const {
  return attack_hp_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetTowerAttackHp >*
PlanetWangZuoTower::mutable_attack_hp() {
  return &attack_hp_;
}

// -------------------------------------------------------------------

// PlanetWangZuo

// required int32 id = 1;
inline bool PlanetWangZuo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetWangZuo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetWangZuo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetWangZuo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetWangZuo::id() const {
  return id_;
}
inline void PlanetWangZuo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 status = 2;
inline bool PlanetWangZuo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetWangZuo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetWangZuo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetWangZuo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PlanetWangZuo::status() const {
  return status_;
}
inline void PlanetWangZuo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int64 status_begin_time = 3;
inline bool PlanetWangZuo::has_status_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetWangZuo::set_has_status_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetWangZuo::clear_has_status_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetWangZuo::clear_status_begin_time() {
  status_begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_status_begin_time();
}
inline ::google::protobuf::int64 PlanetWangZuo::status_begin_time() const {
  return status_begin_time_;
}
inline void PlanetWangZuo::set_status_begin_time(::google::protobuf::int64 value) {
  set_has_status_begin_time();
  status_begin_time_ = value;
}

// required int64 occupy_begin_time = 4;
inline bool PlanetWangZuo::has_occupy_begin_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetWangZuo::set_has_occupy_begin_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetWangZuo::clear_has_occupy_begin_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetWangZuo::clear_occupy_begin_time() {
  occupy_begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_occupy_begin_time();
}
inline ::google::protobuf::int64 PlanetWangZuo::occupy_begin_time() const {
  return occupy_begin_time_;
}
inline void PlanetWangZuo::set_occupy_begin_time(::google::protobuf::int64 value) {
  set_has_occupy_begin_time();
  occupy_begin_time_ = value;
}

// required int64 create_time = 5;
inline bool PlanetWangZuo::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetWangZuo::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetWangZuo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetWangZuo::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::int64 PlanetWangZuo::create_time() const {
  return create_time_;
}
inline void PlanetWangZuo::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional string user_name = 6;
inline bool PlanetWangZuo::has_user_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetWangZuo::set_has_user_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetWangZuo::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetWangZuo::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetWangZuo::user_name() const {
  return *user_name_;
}
inline void PlanetWangZuo::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetWangZuo::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetWangZuo::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuo::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetWangZuo::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetWangZuo::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string old_user_name = 7;
inline bool PlanetWangZuo::has_old_user_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanetWangZuo::set_has_old_user_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanetWangZuo::clear_has_old_user_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanetWangZuo::clear_old_user_name() {
  if (old_user_name_ != &::google::protobuf::internal::kEmptyString) {
    old_user_name_->clear();
  }
  clear_has_old_user_name();
}
inline const ::std::string& PlanetWangZuo::old_user_name() const {
  return *old_user_name_;
}
inline void PlanetWangZuo::set_old_user_name(const ::std::string& value) {
  set_has_old_user_name();
  if (old_user_name_ == &::google::protobuf::internal::kEmptyString) {
    old_user_name_ = new ::std::string;
  }
  old_user_name_->assign(value);
}
inline void PlanetWangZuo::set_old_user_name(const char* value) {
  set_has_old_user_name();
  if (old_user_name_ == &::google::protobuf::internal::kEmptyString) {
    old_user_name_ = new ::std::string;
  }
  old_user_name_->assign(value);
}
inline void PlanetWangZuo::set_old_user_name(const char* value, size_t size) {
  set_has_old_user_name();
  if (old_user_name_ == &::google::protobuf::internal::kEmptyString) {
    old_user_name_ = new ::std::string;
  }
  old_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuo::mutable_old_user_name() {
  set_has_old_user_name();
  if (old_user_name_ == &::google::protobuf::internal::kEmptyString) {
    old_user_name_ = new ::std::string;
  }
  return old_user_name_;
}
inline ::std::string* PlanetWangZuo::release_old_user_name() {
  clear_has_old_user_name();
  if (old_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = old_user_name_;
    old_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetWangZuo::set_allocated_old_user_name(::std::string* old_user_name) {
  if (old_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete old_user_name_;
  }
  if (old_user_name) {
    set_has_old_user_name();
    old_user_name_ = old_user_name;
  } else {
    clear_has_old_user_name();
    old_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string groupid = 8;
inline bool PlanetWangZuo::has_groupid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanetWangZuo::set_has_groupid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanetWangZuo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanetWangZuo::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& PlanetWangZuo::groupid() const {
  return *groupid_;
}
inline void PlanetWangZuo::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void PlanetWangZuo::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void PlanetWangZuo::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuo::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}
inline ::std::string* PlanetWangZuo::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetWangZuo::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string old_groupid = 9;
inline bool PlanetWangZuo::has_old_groupid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlanetWangZuo::set_has_old_groupid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlanetWangZuo::clear_has_old_groupid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlanetWangZuo::clear_old_groupid() {
  if (old_groupid_ != &::google::protobuf::internal::kEmptyString) {
    old_groupid_->clear();
  }
  clear_has_old_groupid();
}
inline const ::std::string& PlanetWangZuo::old_groupid() const {
  return *old_groupid_;
}
inline void PlanetWangZuo::set_old_groupid(const ::std::string& value) {
  set_has_old_groupid();
  if (old_groupid_ == &::google::protobuf::internal::kEmptyString) {
    old_groupid_ = new ::std::string;
  }
  old_groupid_->assign(value);
}
inline void PlanetWangZuo::set_old_groupid(const char* value) {
  set_has_old_groupid();
  if (old_groupid_ == &::google::protobuf::internal::kEmptyString) {
    old_groupid_ = new ::std::string;
  }
  old_groupid_->assign(value);
}
inline void PlanetWangZuo::set_old_groupid(const char* value, size_t size) {
  set_has_old_groupid();
  if (old_groupid_ == &::google::protobuf::internal::kEmptyString) {
    old_groupid_ = new ::std::string;
  }
  old_groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuo::mutable_old_groupid() {
  set_has_old_groupid();
  if (old_groupid_ == &::google::protobuf::internal::kEmptyString) {
    old_groupid_ = new ::std::string;
  }
  return old_groupid_;
}
inline ::std::string* PlanetWangZuo::release_old_groupid() {
  clear_has_old_groupid();
  if (old_groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = old_groupid_;
    old_groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetWangZuo::set_allocated_old_groupid(::std::string* old_groupid) {
  if (old_groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete old_groupid_;
  }
  if (old_groupid) {
    set_has_old_groupid();
    old_groupid_ = old_groupid;
  } else {
    clear_has_old_groupid();
    old_groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string guarde_list = 10;
inline int PlanetWangZuo::guarde_list_size() const {
  return guarde_list_.size();
}
inline void PlanetWangZuo::clear_guarde_list() {
  guarde_list_.Clear();
}
inline const ::std::string& PlanetWangZuo::guarde_list(int index) const {
  return guarde_list_.Get(index);
}
inline ::std::string* PlanetWangZuo::mutable_guarde_list(int index) {
  return guarde_list_.Mutable(index);
}
inline void PlanetWangZuo::set_guarde_list(int index, const ::std::string& value) {
  guarde_list_.Mutable(index)->assign(value);
}
inline void PlanetWangZuo::set_guarde_list(int index, const char* value) {
  guarde_list_.Mutable(index)->assign(value);
}
inline void PlanetWangZuo::set_guarde_list(int index, const char* value, size_t size) {
  guarde_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuo::add_guarde_list() {
  return guarde_list_.Add();
}
inline void PlanetWangZuo::add_guarde_list(const ::std::string& value) {
  guarde_list_.Add()->assign(value);
}
inline void PlanetWangZuo::add_guarde_list(const char* value) {
  guarde_list_.Add()->assign(value);
}
inline void PlanetWangZuo::add_guarde_list(const char* value, size_t size) {
  guarde_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetWangZuo::guarde_list() const {
  return guarde_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetWangZuo::mutable_guarde_list() {
  return &guarde_list_;
}

// optional .OtherGroupInfo temp_info = 11;
inline bool PlanetWangZuo::has_temp_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlanetWangZuo::set_has_temp_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlanetWangZuo::clear_has_temp_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlanetWangZuo::clear_temp_info() {
  if (temp_info_ != NULL) temp_info_->::OtherGroupInfo::Clear();
  clear_has_temp_info();
}
inline const ::OtherGroupInfo& PlanetWangZuo::temp_info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return temp_info_ != NULL ? *temp_info_ : *default_instance().temp_info_;
#else
  return temp_info_ != NULL ? *temp_info_ : *default_instance_->temp_info_;
#endif
}
inline ::OtherGroupInfo* PlanetWangZuo::mutable_temp_info() {
  set_has_temp_info();
  if (temp_info_ == NULL) temp_info_ = new ::OtherGroupInfo;
  return temp_info_;
}
inline ::OtherGroupInfo* PlanetWangZuo::release_temp_info() {
  clear_has_temp_info();
  ::OtherGroupInfo* temp = temp_info_;
  temp_info_ = NULL;
  return temp;
}
inline void PlanetWangZuo::set_allocated_temp_info(::OtherGroupInfo* temp_info) {
  delete temp_info_;
  temp_info_ = temp_info;
  if (temp_info) {
    set_has_temp_info();
  } else {
    clear_has_temp_info();
  }
}

// optional .OtherUserInfo user_info = 12;
inline bool PlanetWangZuo::has_user_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlanetWangZuo::set_has_user_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlanetWangZuo::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlanetWangZuo::clear_user_info() {
  if (user_info_ != NULL) user_info_->::OtherUserInfo::Clear();
  clear_has_user_info();
}
inline const ::OtherUserInfo& PlanetWangZuo::user_info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::OtherUserInfo* PlanetWangZuo::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::OtherUserInfo;
  return user_info_;
}
inline ::OtherUserInfo* PlanetWangZuo::release_user_info() {
  clear_has_user_info();
  ::OtherUserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void PlanetWangZuo::set_allocated_user_info(::OtherUserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
}

// -------------------------------------------------------------------

// PlanetPoint

// required int32 x = 1;
inline bool PlanetPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 PlanetPoint::x() const {
  return x_;
}
inline void PlanetPoint::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool PlanetPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 PlanetPoint::y() const {
  return y_;
}
inline void PlanetPoint::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// PlanetElement

// required int32 guid = 1;
inline bool PlanetElement::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetElement::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetElement::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetElement::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 PlanetElement::guid() const {
  return guid_;
}
inline void PlanetElement::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// required string global_key = 2;
inline bool PlanetElement::has_global_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetElement::set_has_global_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetElement::clear_has_global_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetElement::clear_global_key() {
  if (global_key_ != &::google::protobuf::internal::kEmptyString) {
    global_key_->clear();
  }
  clear_has_global_key();
}
inline const ::std::string& PlanetElement::global_key() const {
  return *global_key_;
}
inline void PlanetElement::set_global_key(const ::std::string& value) {
  set_has_global_key();
  if (global_key_ == &::google::protobuf::internal::kEmptyString) {
    global_key_ = new ::std::string;
  }
  global_key_->assign(value);
}
inline void PlanetElement::set_global_key(const char* value) {
  set_has_global_key();
  if (global_key_ == &::google::protobuf::internal::kEmptyString) {
    global_key_ = new ::std::string;
  }
  global_key_->assign(value);
}
inline void PlanetElement::set_global_key(const char* value, size_t size) {
  set_has_global_key();
  if (global_key_ == &::google::protobuf::internal::kEmptyString) {
    global_key_ = new ::std::string;
  }
  global_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetElement::mutable_global_key() {
  set_has_global_key();
  if (global_key_ == &::google::protobuf::internal::kEmptyString) {
    global_key_ = new ::std::string;
  }
  return global_key_;
}
inline ::std::string* PlanetElement::release_global_key() {
  clear_has_global_key();
  if (global_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = global_key_;
    global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetElement::set_allocated_global_key(::std::string* global_key) {
  if (global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete global_key_;
  }
  if (global_key) {
    set_has_global_key();
    global_key_ = global_key;
  } else {
    clear_has_global_key();
    global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PlanetPoint pos_list = 3;
inline int PlanetElement::pos_list_size() const {
  return pos_list_.size();
}
inline void PlanetElement::clear_pos_list() {
  pos_list_.Clear();
}
inline const ::PlanetPoint& PlanetElement::pos_list(int index) const {
  return pos_list_.Get(index);
}
inline ::PlanetPoint* PlanetElement::mutable_pos_list(int index) {
  return pos_list_.Mutable(index);
}
inline ::PlanetPoint* PlanetElement::add_pos_list() {
  return pos_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetPoint >&
PlanetElement::pos_list() const {
  return pos_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetPoint >*
PlanetElement::mutable_pos_list() {
  return &pos_list_;
}

// required int32 type = 4;
inline bool PlanetElement::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetElement::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetElement::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetElement::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PlanetElement::type() const {
  return type_;
}
inline void PlanetElement::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .PlanetBase base_data = 5;
inline bool PlanetElement::has_base_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetElement::set_has_base_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetElement::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetElement::clear_base_data() {
  if (base_data_ != NULL) base_data_->::PlanetBase::Clear();
  clear_has_base_data();
}
inline const ::PlanetBase& PlanetElement::base_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return base_data_ != NULL ? *base_data_ : *default_instance().base_data_;
#else
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
#endif
}
inline ::PlanetBase* PlanetElement::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::PlanetBase;
  return base_data_;
}
inline ::PlanetBase* PlanetElement::release_base_data() {
  clear_has_base_data();
  ::PlanetBase* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_base_data(::PlanetBase* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional .PlanetRes res_data = 6;
inline bool PlanetElement::has_res_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetElement::set_has_res_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetElement::clear_has_res_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetElement::clear_res_data() {
  if (res_data_ != NULL) res_data_->::PlanetRes::Clear();
  clear_has_res_data();
}
inline const ::PlanetRes& PlanetElement::res_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return res_data_ != NULL ? *res_data_ : *default_instance().res_data_;
#else
  return res_data_ != NULL ? *res_data_ : *default_instance_->res_data_;
#endif
}
inline ::PlanetRes* PlanetElement::mutable_res_data() {
  set_has_res_data();
  if (res_data_ == NULL) res_data_ = new ::PlanetRes;
  return res_data_;
}
inline ::PlanetRes* PlanetElement::release_res_data() {
  clear_has_res_data();
  ::PlanetRes* temp = res_data_;
  res_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_res_data(::PlanetRes* res_data) {
  delete res_data_;
  res_data_ = res_data;
  if (res_data) {
    set_has_res_data();
  } else {
    clear_has_res_data();
  }
}

// optional .PlanetRuins ruins_data = 7;
inline bool PlanetElement::has_ruins_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanetElement::set_has_ruins_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanetElement::clear_has_ruins_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanetElement::clear_ruins_data() {
  if (ruins_data_ != NULL) ruins_data_->::PlanetRuins::Clear();
  clear_has_ruins_data();
}
inline const ::PlanetRuins& PlanetElement::ruins_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return ruins_data_ != NULL ? *ruins_data_ : *default_instance().ruins_data_;
#else
  return ruins_data_ != NULL ? *ruins_data_ : *default_instance_->ruins_data_;
#endif
}
inline ::PlanetRuins* PlanetElement::mutable_ruins_data() {
  set_has_ruins_data();
  if (ruins_data_ == NULL) ruins_data_ = new ::PlanetRuins;
  return ruins_data_;
}
inline ::PlanetRuins* PlanetElement::release_ruins_data() {
  clear_has_ruins_data();
  ::PlanetRuins* temp = ruins_data_;
  ruins_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_ruins_data(::PlanetRuins* ruins_data) {
  delete ruins_data_;
  ruins_data_ = ruins_data;
  if (ruins_data) {
    set_has_ruins_data();
  } else {
    clear_has_ruins_data();
  }
}

// optional .PlanetBoss boss_data = 8;
inline bool PlanetElement::has_boss_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanetElement::set_has_boss_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanetElement::clear_has_boss_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanetElement::clear_boss_data() {
  if (boss_data_ != NULL) boss_data_->::PlanetBoss::Clear();
  clear_has_boss_data();
}
inline const ::PlanetBoss& PlanetElement::boss_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return boss_data_ != NULL ? *boss_data_ : *default_instance().boss_data_;
#else
  return boss_data_ != NULL ? *boss_data_ : *default_instance_->boss_data_;
#endif
}
inline ::PlanetBoss* PlanetElement::mutable_boss_data() {
  set_has_boss_data();
  if (boss_data_ == NULL) boss_data_ = new ::PlanetBoss;
  return boss_data_;
}
inline ::PlanetBoss* PlanetElement::release_boss_data() {
  clear_has_boss_data();
  ::PlanetBoss* temp = boss_data_;
  boss_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_boss_data(::PlanetBoss* boss_data) {
  delete boss_data_;
  boss_data_ = boss_data;
  if (boss_data) {
    set_has_boss_data();
  } else {
    clear_has_boss_data();
  }
}

// optional .PlanetCity city_data = 9;
inline bool PlanetElement::has_city_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlanetElement::set_has_city_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlanetElement::clear_has_city_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlanetElement::clear_city_data() {
  if (city_data_ != NULL) city_data_->::PlanetCity::Clear();
  clear_has_city_data();
}
inline const ::PlanetCity& PlanetElement::city_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return city_data_ != NULL ? *city_data_ : *default_instance().city_data_;
#else
  return city_data_ != NULL ? *city_data_ : *default_instance_->city_data_;
#endif
}
inline ::PlanetCity* PlanetElement::mutable_city_data() {
  set_has_city_data();
  if (city_data_ == NULL) city_data_ = new ::PlanetCity;
  return city_data_;
}
inline ::PlanetCity* PlanetElement::release_city_data() {
  clear_has_city_data();
  ::PlanetCity* temp = city_data_;
  city_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_city_data(::PlanetCity* city_data) {
  delete city_data_;
  city_data_ = city_data;
  if (city_data) {
    set_has_city_data();
  } else {
    clear_has_city_data();
  }
}

// optional .PlanetCityRes city_res_data = 10;
inline bool PlanetElement::has_city_res_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlanetElement::set_has_city_res_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlanetElement::clear_has_city_res_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlanetElement::clear_city_res_data() {
  if (city_res_data_ != NULL) city_res_data_->::PlanetCityRes::Clear();
  clear_has_city_res_data();
}
inline const ::PlanetCityRes& PlanetElement::city_res_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return city_res_data_ != NULL ? *city_res_data_ : *default_instance().city_res_data_;
#else
  return city_res_data_ != NULL ? *city_res_data_ : *default_instance_->city_res_data_;
#endif
}
inline ::PlanetCityRes* PlanetElement::mutable_city_res_data() {
  set_has_city_res_data();
  if (city_res_data_ == NULL) city_res_data_ = new ::PlanetCityRes;
  return city_res_data_;
}
inline ::PlanetCityRes* PlanetElement::release_city_res_data() {
  clear_has_city_res_data();
  ::PlanetCityRes* temp = city_res_data_;
  city_res_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_city_res_data(::PlanetCityRes* city_res_data) {
  delete city_res_data_;
  city_res_data_ = city_res_data;
  if (city_res_data) {
    set_has_city_res_data();
  } else {
    clear_has_city_res_data();
  }
}

// optional .PlanetMonster monster_data = 11;
inline bool PlanetElement::has_monster_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlanetElement::set_has_monster_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlanetElement::clear_has_monster_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlanetElement::clear_monster_data() {
  if (monster_data_ != NULL) monster_data_->::PlanetMonster::Clear();
  clear_has_monster_data();
}
inline const ::PlanetMonster& PlanetElement::monster_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return monster_data_ != NULL ? *monster_data_ : *default_instance().monster_data_;
#else
  return monster_data_ != NULL ? *monster_data_ : *default_instance_->monster_data_;
#endif
}
inline ::PlanetMonster* PlanetElement::mutable_monster_data() {
  set_has_monster_data();
  if (monster_data_ == NULL) monster_data_ = new ::PlanetMonster;
  return monster_data_;
}
inline ::PlanetMonster* PlanetElement::release_monster_data() {
  clear_has_monster_data();
  ::PlanetMonster* temp = monster_data_;
  monster_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_monster_data(::PlanetMonster* monster_data) {
  delete monster_data_;
  monster_data_ = monster_data;
  if (monster_data) {
    set_has_monster_data();
  } else {
    clear_has_monster_data();
  }
}

// optional .PlanetWangZuo wangzuo_data = 12;
inline bool PlanetElement::has_wangzuo_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlanetElement::set_has_wangzuo_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlanetElement::clear_has_wangzuo_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlanetElement::clear_wangzuo_data() {
  if (wangzuo_data_ != NULL) wangzuo_data_->::PlanetWangZuo::Clear();
  clear_has_wangzuo_data();
}
inline const ::PlanetWangZuo& PlanetElement::wangzuo_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return wangzuo_data_ != NULL ? *wangzuo_data_ : *default_instance().wangzuo_data_;
#else
  return wangzuo_data_ != NULL ? *wangzuo_data_ : *default_instance_->wangzuo_data_;
#endif
}
inline ::PlanetWangZuo* PlanetElement::mutable_wangzuo_data() {
  set_has_wangzuo_data();
  if (wangzuo_data_ == NULL) wangzuo_data_ = new ::PlanetWangZuo;
  return wangzuo_data_;
}
inline ::PlanetWangZuo* PlanetElement::release_wangzuo_data() {
  clear_has_wangzuo_data();
  ::PlanetWangZuo* temp = wangzuo_data_;
  wangzuo_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_wangzuo_data(::PlanetWangZuo* wangzuo_data) {
  delete wangzuo_data_;
  wangzuo_data_ = wangzuo_data;
  if (wangzuo_data) {
    set_has_wangzuo_data();
  } else {
    clear_has_wangzuo_data();
  }
}

// optional .PlanetWangZuoTower tower_data = 13;
inline bool PlanetElement::has_tower_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlanetElement::set_has_tower_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlanetElement::clear_has_tower_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlanetElement::clear_tower_data() {
  if (tower_data_ != NULL) tower_data_->::PlanetWangZuoTower::Clear();
  clear_has_tower_data();
}
inline const ::PlanetWangZuoTower& PlanetElement::tower_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return tower_data_ != NULL ? *tower_data_ : *default_instance().tower_data_;
#else
  return tower_data_ != NULL ? *tower_data_ : *default_instance_->tower_data_;
#endif
}
inline ::PlanetWangZuoTower* PlanetElement::mutable_tower_data() {
  set_has_tower_data();
  if (tower_data_ == NULL) tower_data_ = new ::PlanetWangZuoTower;
  return tower_data_;
}
inline ::PlanetWangZuoTower* PlanetElement::release_tower_data() {
  clear_has_tower_data();
  ::PlanetWangZuoTower* temp = tower_data_;
  tower_data_ = NULL;
  return temp;
}
inline void PlanetElement::set_allocated_tower_data(::PlanetWangZuoTower* tower_data) {
  delete tower_data_;
  tower_data_ = tower_data;
  if (tower_data) {
    set_has_tower_data();
  } else {
    clear_has_tower_data();
  }
}

// -------------------------------------------------------------------

// PlanetNode

// required int32 id = 1;
inline bool PlanetNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetNode::id() const {
  return id_;
}
inline void PlanetNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .PlanetElement element_list = 2;
inline int PlanetNode::element_list_size() const {
  return element_list_.size();
}
inline void PlanetNode::clear_element_list() {
  element_list_.Clear();
}
inline const ::PlanetElement& PlanetNode::element_list(int index) const {
  return element_list_.Get(index);
}
inline ::PlanetElement* PlanetNode::mutable_element_list(int index) {
  return element_list_.Mutable(index);
}
inline ::PlanetElement* PlanetNode::add_element_list() {
  return element_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetElement >&
PlanetNode::element_list() const {
  return element_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetElement >*
PlanetNode::mutable_element_list() {
  return &element_list_;
}

// repeated string army_line_key_list = 3;
inline int PlanetNode::army_line_key_list_size() const {
  return army_line_key_list_.size();
}
inline void PlanetNode::clear_army_line_key_list() {
  army_line_key_list_.Clear();
}
inline const ::std::string& PlanetNode::army_line_key_list(int index) const {
  return army_line_key_list_.Get(index);
}
inline ::std::string* PlanetNode::mutable_army_line_key_list(int index) {
  return army_line_key_list_.Mutable(index);
}
inline void PlanetNode::set_army_line_key_list(int index, const ::std::string& value) {
  army_line_key_list_.Mutable(index)->assign(value);
}
inline void PlanetNode::set_army_line_key_list(int index, const char* value) {
  army_line_key_list_.Mutable(index)->assign(value);
}
inline void PlanetNode::set_army_line_key_list(int index, const char* value, size_t size) {
  army_line_key_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetNode::add_army_line_key_list() {
  return army_line_key_list_.Add();
}
inline void PlanetNode::add_army_line_key_list(const ::std::string& value) {
  army_line_key_list_.Add()->assign(value);
}
inline void PlanetNode::add_army_line_key_list(const char* value) {
  army_line_key_list_.Add()->assign(value);
}
inline void PlanetNode::add_army_line_key_list(const char* value, size_t size) {
  army_line_key_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetNode::army_line_key_list() const {
  return army_line_key_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetNode::mutable_army_line_key_list() {
  return &army_line_key_list_;
}

// -------------------------------------------------------------------

// PlanetArmyLine

// required string user_key = 1;
inline bool PlanetArmyLine::has_user_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetArmyLine::set_has_user_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetArmyLine::clear_has_user_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetArmyLine::clear_user_key() {
  if (user_key_ != &::google::protobuf::internal::kEmptyString) {
    user_key_->clear();
  }
  clear_has_user_key();
}
inline const ::std::string& PlanetArmyLine::user_key() const {
  return *user_key_;
}
inline void PlanetArmyLine::set_user_key(const ::std::string& value) {
  set_has_user_key();
  if (user_key_ == &::google::protobuf::internal::kEmptyString) {
    user_key_ = new ::std::string;
  }
  user_key_->assign(value);
}
inline void PlanetArmyLine::set_user_key(const char* value) {
  set_has_user_key();
  if (user_key_ == &::google::protobuf::internal::kEmptyString) {
    user_key_ = new ::std::string;
  }
  user_key_->assign(value);
}
inline void PlanetArmyLine::set_user_key(const char* value, size_t size) {
  set_has_user_key();
  if (user_key_ == &::google::protobuf::internal::kEmptyString) {
    user_key_ = new ::std::string;
  }
  user_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetArmyLine::mutable_user_key() {
  set_has_user_key();
  if (user_key_ == &::google::protobuf::internal::kEmptyString) {
    user_key_ = new ::std::string;
  }
  return user_key_;
}
inline ::std::string* PlanetArmyLine::release_user_key() {
  clear_has_user_key();
  if (user_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_key_;
    user_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetArmyLine::set_allocated_user_key(::std::string* user_key) {
  if (user_key_ != &::google::protobuf::internal::kEmptyString) {
    delete user_key_;
  }
  if (user_key) {
    set_has_user_key();
    user_key_ = user_key;
  } else {
    clear_has_user_key();
    user_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 node_id_list = 2;
inline int PlanetArmyLine::node_id_list_size() const {
  return node_id_list_.size();
}
inline void PlanetArmyLine::clear_node_id_list() {
  node_id_list_.Clear();
}
inline ::google::protobuf::int32 PlanetArmyLine::node_id_list(int index) const {
  return node_id_list_.Get(index);
}
inline void PlanetArmyLine::set_node_id_list(int index, ::google::protobuf::int32 value) {
  node_id_list_.Set(index, value);
}
inline void PlanetArmyLine::add_node_id_list(::google::protobuf::int32 value) {
  node_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetArmyLine::node_id_list() const {
  return node_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetArmyLine::mutable_node_id_list() {
  return &node_id_list_;
}

// repeated .PlanetPoint move_list = 3;
inline int PlanetArmyLine::move_list_size() const {
  return move_list_.size();
}
inline void PlanetArmyLine::clear_move_list() {
  move_list_.Clear();
}
inline const ::PlanetPoint& PlanetArmyLine::move_list(int index) const {
  return move_list_.Get(index);
}
inline ::PlanetPoint* PlanetArmyLine::mutable_move_list(int index) {
  return move_list_.Mutable(index);
}
inline ::PlanetPoint* PlanetArmyLine::add_move_list() {
  return move_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetPoint >&
PlanetArmyLine::move_list() const {
  return move_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetPoint >*
PlanetArmyLine::mutable_move_list() {
  return &move_list_;
}

// required int64 begin_time = 4;
inline bool PlanetArmyLine::has_begin_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetArmyLine::set_has_begin_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetArmyLine::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetArmyLine::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::int64 PlanetArmyLine::begin_time() const {
  return begin_time_;
}
inline void PlanetArmyLine::set_begin_time(::google::protobuf::int64 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// required int64 need_time = 5;
inline bool PlanetArmyLine::has_need_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetArmyLine::set_has_need_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetArmyLine::clear_has_need_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetArmyLine::clear_need_time() {
  need_time_ = GOOGLE_LONGLONG(0);
  clear_has_need_time();
}
inline ::google::protobuf::int64 PlanetArmyLine::need_time() const {
  return need_time_;
}
inline void PlanetArmyLine::set_need_time(::google::protobuf::int64 value) {
  set_has_need_time();
  need_time_ = value;
}

// required int64 sub_time = 6;
inline bool PlanetArmyLine::has_sub_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetArmyLine::set_has_sub_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetArmyLine::clear_has_sub_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetArmyLine::clear_sub_time() {
  sub_time_ = GOOGLE_LONGLONG(0);
  clear_has_sub_time();
}
inline ::google::protobuf::int64 PlanetArmyLine::sub_time() const {
  return sub_time_;
}
inline void PlanetArmyLine::set_sub_time(::google::protobuf::int64 value) {
  set_has_sub_time();
  sub_time_ = value;
}

// optional int32 status = 7;
inline bool PlanetArmyLine::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanetArmyLine::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanetArmyLine::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanetArmyLine::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PlanetArmyLine::status() const {
  return status_;
}
inline void PlanetArmyLine::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 status_machine = 8;
inline bool PlanetArmyLine::has_status_machine() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanetArmyLine::set_has_status_machine() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanetArmyLine::clear_has_status_machine() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanetArmyLine::clear_status_machine() {
  status_machine_ = 0;
  clear_has_status_machine();
}
inline ::google::protobuf::int32 PlanetArmyLine::status_machine() const {
  return status_machine_;
}
inline void PlanetArmyLine::set_status_machine(::google::protobuf::int32 value) {
  set_has_status_machine();
  status_machine_ = value;
}

// -------------------------------------------------------------------

// PlanetArmy

// required int32 guid = 1;
inline bool PlanetArmy::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetArmy::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetArmy::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetArmy::clear_guid() {
  guid_ = 0;
  clear_has_guid();
}
inline ::google::protobuf::int32 PlanetArmy::guid() const {
  return guid_;
}
inline void PlanetArmy::set_guid(::google::protobuf::int32 value) {
  set_has_guid();
  guid_ = value;
}

// required string army_key = 2;
inline bool PlanetArmy::has_army_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetArmy::set_has_army_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetArmy::clear_has_army_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetArmy::clear_army_key() {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    army_key_->clear();
  }
  clear_has_army_key();
}
inline const ::std::string& PlanetArmy::army_key() const {
  return *army_key_;
}
inline void PlanetArmy::set_army_key(const ::std::string& value) {
  set_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    army_key_ = new ::std::string;
  }
  army_key_->assign(value);
}
inline void PlanetArmy::set_army_key(const char* value) {
  set_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    army_key_ = new ::std::string;
  }
  army_key_->assign(value);
}
inline void PlanetArmy::set_army_key(const char* value, size_t size) {
  set_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    army_key_ = new ::std::string;
  }
  army_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetArmy::mutable_army_key() {
  set_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    army_key_ = new ::std::string;
  }
  return army_key_;
}
inline ::std::string* PlanetArmy::release_army_key() {
  clear_has_army_key();
  if (army_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = army_key_;
    army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetArmy::set_allocated_army_key(::std::string* army_key) {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  if (army_key) {
    set_has_army_key();
    army_key_ = army_key;
  } else {
    clear_has_army_key();
    army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 lineup = 3;
inline int PlanetArmy::lineup_size() const {
  return lineup_.size();
}
inline void PlanetArmy::clear_lineup() {
  lineup_.Clear();
}
inline ::google::protobuf::int32 PlanetArmy::lineup(int index) const {
  return lineup_.Get(index);
}
inline void PlanetArmy::set_lineup(int index, ::google::protobuf::int32 value) {
  lineup_.Set(index, value);
}
inline void PlanetArmy::add_lineup(::google::protobuf::int32 value) {
  lineup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetArmy::lineup() const {
  return lineup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetArmy::mutable_lineup() {
  return &lineup_;
}

// repeated int32 lineup_hp = 4;
inline int PlanetArmy::lineup_hp_size() const {
  return lineup_hp_.size();
}
inline void PlanetArmy::clear_lineup_hp() {
  lineup_hp_.Clear();
}
inline ::google::protobuf::int32 PlanetArmy::lineup_hp(int index) const {
  return lineup_hp_.Get(index);
}
inline void PlanetArmy::set_lineup_hp(int index, ::google::protobuf::int32 value) {
  lineup_hp_.Set(index, value);
}
inline void PlanetArmy::add_lineup_hp(::google::protobuf::int32 value) {
  lineup_hp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetArmy::lineup_hp() const {
  return lineup_hp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetArmy::mutable_lineup_hp() {
  return &lineup_hp_;
}

// repeated .AirShip ship_list = 5;
inline int PlanetArmy::ship_list_size() const {
  return ship_list_.size();
}
inline void PlanetArmy::clear_ship_list() {
  ship_list_.Clear();
}
inline const ::AirShip& PlanetArmy::ship_list(int index) const {
  return ship_list_.Get(index);
}
inline ::AirShip* PlanetArmy::mutable_ship_list(int index) {
  return ship_list_.Mutable(index);
}
inline ::AirShip* PlanetArmy::add_ship_list() {
  return ship_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
PlanetArmy::ship_list() const {
  return ship_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
PlanetArmy::mutable_ship_list() {
  return &ship_list_;
}

// required int32 status = 6;
inline bool PlanetArmy::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetArmy::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetArmy::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetArmy::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PlanetArmy::status() const {
  return status_;
}
inline void PlanetArmy::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required int32 status_machine = 7;
inline bool PlanetArmy::has_status_machine() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanetArmy::set_has_status_machine() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanetArmy::clear_has_status_machine() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanetArmy::clear_status_machine() {
  status_machine_ = 0;
  clear_has_status_machine();
}
inline ::google::protobuf::int32 PlanetArmy::status_machine() const {
  return status_machine_;
}
inline void PlanetArmy::set_status_machine(::google::protobuf::int32 value) {
  set_has_status_machine();
  status_machine_ = value;
}

// required int64 begin_time = 8;
inline bool PlanetArmy::has_begin_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanetArmy::set_has_begin_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanetArmy::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanetArmy::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_begin_time();
}
inline ::google::protobuf::int64 PlanetArmy::begin_time() const {
  return begin_time_;
}
inline void PlanetArmy::set_begin_time(::google::protobuf::int64 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// repeated .Item item_list = 9;
inline int PlanetArmy::item_list_size() const {
  return item_list_.size();
}
inline void PlanetArmy::clear_item_list() {
  item_list_.Clear();
}
inline const ::Item& PlanetArmy::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::Item* PlanetArmy::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::Item* PlanetArmy::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Item >&
PlanetArmy::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Item >*
PlanetArmy::mutable_item_list() {
  return &item_list_;
}

// required string element_global_key = 10;
inline bool PlanetArmy::has_element_global_key() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlanetArmy::set_has_element_global_key() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlanetArmy::clear_has_element_global_key() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlanetArmy::clear_element_global_key() {
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    element_global_key_->clear();
  }
  clear_has_element_global_key();
}
inline const ::std::string& PlanetArmy::element_global_key() const {
  return *element_global_key_;
}
inline void PlanetArmy::set_element_global_key(const ::std::string& value) {
  set_has_element_global_key();
  if (element_global_key_ == &::google::protobuf::internal::kEmptyString) {
    element_global_key_ = new ::std::string;
  }
  element_global_key_->assign(value);
}
inline void PlanetArmy::set_element_global_key(const char* value) {
  set_has_element_global_key();
  if (element_global_key_ == &::google::protobuf::internal::kEmptyString) {
    element_global_key_ = new ::std::string;
  }
  element_global_key_->assign(value);
}
inline void PlanetArmy::set_element_global_key(const char* value, size_t size) {
  set_has_element_global_key();
  if (element_global_key_ == &::google::protobuf::internal::kEmptyString) {
    element_global_key_ = new ::std::string;
  }
  element_global_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetArmy::mutable_element_global_key() {
  set_has_element_global_key();
  if (element_global_key_ == &::google::protobuf::internal::kEmptyString) {
    element_global_key_ = new ::std::string;
  }
  return element_global_key_;
}
inline ::std::string* PlanetArmy::release_element_global_key() {
  clear_has_element_global_key();
  if (element_global_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = element_global_key_;
    element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetArmy::set_allocated_element_global_key(::std::string* element_global_key) {
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete element_global_key_;
  }
  if (element_global_key) {
    set_has_element_global_key();
    element_global_key_ = element_global_key;
  } else {
    clear_has_element_global_key();
    element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PlanetArmyLine line = 11;
inline bool PlanetArmy::has_line() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlanetArmy::set_has_line() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlanetArmy::clear_has_line() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlanetArmy::clear_line() {
  if (line_ != NULL) line_->::PlanetArmyLine::Clear();
  clear_has_line();
}
inline const ::PlanetArmyLine& PlanetArmy::line() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return line_ != NULL ? *line_ : *default_instance().line_;
#else
  return line_ != NULL ? *line_ : *default_instance_->line_;
#endif
}
inline ::PlanetArmyLine* PlanetArmy::mutable_line() {
  set_has_line();
  if (line_ == NULL) line_ = new ::PlanetArmyLine;
  return line_;
}
inline ::PlanetArmyLine* PlanetArmy::release_line() {
  clear_has_line();
  ::PlanetArmyLine* temp = line_;
  line_ = NULL;
  return temp;
}
inline void PlanetArmy::set_allocated_line(::PlanetArmyLine* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
}

// repeated string army_key_list = 12;
inline int PlanetArmy::army_key_list_size() const {
  return army_key_list_.size();
}
inline void PlanetArmy::clear_army_key_list() {
  army_key_list_.Clear();
}
inline const ::std::string& PlanetArmy::army_key_list(int index) const {
  return army_key_list_.Get(index);
}
inline ::std::string* PlanetArmy::mutable_army_key_list(int index) {
  return army_key_list_.Mutable(index);
}
inline void PlanetArmy::set_army_key_list(int index, const ::std::string& value) {
  army_key_list_.Mutable(index)->assign(value);
}
inline void PlanetArmy::set_army_key_list(int index, const char* value) {
  army_key_list_.Mutable(index)->assign(value);
}
inline void PlanetArmy::set_army_key_list(int index, const char* value, size_t size) {
  army_key_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetArmy::add_army_key_list() {
  return army_key_list_.Add();
}
inline void PlanetArmy::add_army_key_list(const ::std::string& value) {
  army_key_list_.Add()->assign(value);
}
inline void PlanetArmy::add_army_key_list(const char* value) {
  army_key_list_.Add()->assign(value);
}
inline void PlanetArmy::add_army_key_list(const char* value, size_t size) {
  army_key_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetArmy::army_key_list() const {
  return army_key_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetArmy::mutable_army_key_list() {
  return &army_key_list_;
}

// optional string accompany_army_key = 13;
inline bool PlanetArmy::has_accompany_army_key() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlanetArmy::set_has_accompany_army_key() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlanetArmy::clear_has_accompany_army_key() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlanetArmy::clear_accompany_army_key() {
  if (accompany_army_key_ != &::google::protobuf::internal::kEmptyString) {
    accompany_army_key_->clear();
  }
  clear_has_accompany_army_key();
}
inline const ::std::string& PlanetArmy::accompany_army_key() const {
  return *accompany_army_key_;
}
inline void PlanetArmy::set_accompany_army_key(const ::std::string& value) {
  set_has_accompany_army_key();
  if (accompany_army_key_ == &::google::protobuf::internal::kEmptyString) {
    accompany_army_key_ = new ::std::string;
  }
  accompany_army_key_->assign(value);
}
inline void PlanetArmy::set_accompany_army_key(const char* value) {
  set_has_accompany_army_key();
  if (accompany_army_key_ == &::google::protobuf::internal::kEmptyString) {
    accompany_army_key_ = new ::std::string;
  }
  accompany_army_key_->assign(value);
}
inline void PlanetArmy::set_accompany_army_key(const char* value, size_t size) {
  set_has_accompany_army_key();
  if (accompany_army_key_ == &::google::protobuf::internal::kEmptyString) {
    accompany_army_key_ = new ::std::string;
  }
  accompany_army_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetArmy::mutable_accompany_army_key() {
  set_has_accompany_army_key();
  if (accompany_army_key_ == &::google::protobuf::internal::kEmptyString) {
    accompany_army_key_ = new ::std::string;
  }
  return accompany_army_key_;
}
inline ::std::string* PlanetArmy::release_accompany_army_key() {
  clear_has_accompany_army_key();
  if (accompany_army_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accompany_army_key_;
    accompany_army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetArmy::set_allocated_accompany_army_key(::std::string* accompany_army_key) {
  if (accompany_army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete accompany_army_key_;
  }
  if (accompany_army_key) {
    set_has_accompany_army_key();
    accompany_army_key_ = accompany_army_key;
  } else {
    clear_has_accompany_army_key();
    accompany_army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 tech_durable_param = 14;
inline bool PlanetArmy::has_tech_durable_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlanetArmy::set_has_tech_durable_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlanetArmy::clear_has_tech_durable_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlanetArmy::clear_tech_durable_param() {
  tech_durable_param_ = 0;
  clear_has_tech_durable_param();
}
inline ::google::protobuf::int32 PlanetArmy::tech_durable_param() const {
  return tech_durable_param_;
}
inline void PlanetArmy::set_tech_durable_param(::google::protobuf::int32 value) {
  set_has_tech_durable_param();
  tech_durable_param_ = value;
}

// optional int32 next_status_machine = 15;
inline bool PlanetArmy::has_next_status_machine() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlanetArmy::set_has_next_status_machine() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlanetArmy::clear_has_next_status_machine() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlanetArmy::clear_next_status_machine() {
  next_status_machine_ = 0;
  clear_has_next_status_machine();
}
inline ::google::protobuf::int32 PlanetArmy::next_status_machine() const {
  return next_status_machine_;
}
inline void PlanetArmy::set_next_status_machine(::google::protobuf::int32 value) {
  set_has_next_status_machine();
  next_status_machine_ = value;
}

// repeated string req_army_key_list = 16;
inline int PlanetArmy::req_army_key_list_size() const {
  return req_army_key_list_.size();
}
inline void PlanetArmy::clear_req_army_key_list() {
  req_army_key_list_.Clear();
}
inline const ::std::string& PlanetArmy::req_army_key_list(int index) const {
  return req_army_key_list_.Get(index);
}
inline ::std::string* PlanetArmy::mutable_req_army_key_list(int index) {
  return req_army_key_list_.Mutable(index);
}
inline void PlanetArmy::set_req_army_key_list(int index, const ::std::string& value) {
  req_army_key_list_.Mutable(index)->assign(value);
}
inline void PlanetArmy::set_req_army_key_list(int index, const char* value) {
  req_army_key_list_.Mutable(index)->assign(value);
}
inline void PlanetArmy::set_req_army_key_list(int index, const char* value, size_t size) {
  req_army_key_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetArmy::add_req_army_key_list() {
  return req_army_key_list_.Add();
}
inline void PlanetArmy::add_req_army_key_list(const ::std::string& value) {
  req_army_key_list_.Add()->assign(value);
}
inline void PlanetArmy::add_req_army_key_list(const char* value) {
  req_army_key_list_.Add()->assign(value);
}
inline void PlanetArmy::add_req_army_key_list(const char* value, size_t size) {
  req_army_key_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetArmy::req_army_key_list() const {
  return req_army_key_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetArmy::mutable_req_army_key_list() {
  return &req_army_key_list_;
}

// optional int64 mass_time = 17;
inline bool PlanetArmy::has_mass_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlanetArmy::set_has_mass_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlanetArmy::clear_has_mass_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlanetArmy::clear_mass_time() {
  mass_time_ = GOOGLE_LONGLONG(0);
  clear_has_mass_time();
}
inline ::google::protobuf::int64 PlanetArmy::mass_time() const {
  return mass_time_;
}
inline void PlanetArmy::set_mass_time(::google::protobuf::int64 value) {
  set_has_mass_time();
  mass_time_ = value;
}

// required int32 speed = 18;
inline bool PlanetArmy::has_speed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlanetArmy::set_has_speed() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlanetArmy::clear_has_speed() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlanetArmy::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 PlanetArmy::speed() const {
  return speed_;
}
inline void PlanetArmy::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
}

// optional int64 accompany_begin_time = 19;
inline bool PlanetArmy::has_accompany_begin_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlanetArmy::set_has_accompany_begin_time() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlanetArmy::clear_has_accompany_begin_time() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlanetArmy::clear_accompany_begin_time() {
  accompany_begin_time_ = GOOGLE_LONGLONG(0);
  clear_has_accompany_begin_time();
}
inline ::google::protobuf::int64 PlanetArmy::accompany_begin_time() const {
  return accompany_begin_time_;
}
inline void PlanetArmy::set_accompany_begin_time(::google::protobuf::int64 value) {
  set_has_accompany_begin_time();
  accompany_begin_time_ = value;
}

// -------------------------------------------------------------------

// PlanetMark

// required string name = 1;
inline bool PlanetMark::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetMark::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetMark::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetMark::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlanetMark::name() const {
  return *name_;
}
inline void PlanetMark::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlanetMark::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlanetMark::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetMark::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlanetMark::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetMark::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .PlanetPoint pos = 2;
inline bool PlanetMark::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetMark::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetMark::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetMark::clear_pos() {
  if (pos_ != NULL) pos_->::PlanetPoint::Clear();
  clear_has_pos();
}
inline const ::PlanetPoint& PlanetMark::pos() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pos_ != NULL ? *pos_ : *default_instance().pos_;
#else
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
#endif
}
inline ::PlanetPoint* PlanetMark::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PlanetPoint;
  return pos_;
}
inline ::PlanetPoint* PlanetMark::release_pos() {
  clear_has_pos();
  ::PlanetPoint* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void PlanetMark::set_allocated_pos(::PlanetPoint* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// PlanetSevenDaysData

// optional int32 attack_monster_times = 1;
inline bool PlanetSevenDaysData::has_attack_monster_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetSevenDaysData::set_has_attack_monster_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetSevenDaysData::clear_has_attack_monster_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetSevenDaysData::clear_attack_monster_times() {
  attack_monster_times_ = 0;
  clear_has_attack_monster_times();
}
inline ::google::protobuf::int32 PlanetSevenDaysData::attack_monster_times() const {
  return attack_monster_times_;
}
inline void PlanetSevenDaysData::set_attack_monster_times(::google::protobuf::int32 value) {
  set_has_attack_monster_times();
  attack_monster_times_ = value;
}

// optional int32 base_attack_times = 2;
inline bool PlanetSevenDaysData::has_base_attack_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetSevenDaysData::set_has_base_attack_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetSevenDaysData::clear_has_base_attack_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetSevenDaysData::clear_base_attack_times() {
  base_attack_times_ = 0;
  clear_has_base_attack_times();
}
inline ::google::protobuf::int32 PlanetSevenDaysData::base_attack_times() const {
  return base_attack_times_;
}
inline void PlanetSevenDaysData::set_base_attack_times(::google::protobuf::int32 value) {
  set_has_base_attack_times();
  base_attack_times_ = value;
}

// optional int32 colloct_level_times_list_day = 3;
inline bool PlanetSevenDaysData::has_colloct_level_times_list_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetSevenDaysData::set_has_colloct_level_times_list_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetSevenDaysData::clear_has_colloct_level_times_list_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetSevenDaysData::clear_colloct_level_times_list_day() {
  colloct_level_times_list_day_ = 0;
  clear_has_colloct_level_times_list_day();
}
inline ::google::protobuf::int32 PlanetSevenDaysData::colloct_level_times_list_day() const {
  return colloct_level_times_list_day_;
}
inline void PlanetSevenDaysData::set_colloct_level_times_list_day(::google::protobuf::int32 value) {
  set_has_colloct_level_times_list_day();
  colloct_level_times_list_day_ = value;
}

// optional int32 ruins_level_times_list_day = 4;
inline bool PlanetSevenDaysData::has_ruins_level_times_list_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetSevenDaysData::set_has_ruins_level_times_list_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetSevenDaysData::clear_has_ruins_level_times_list_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetSevenDaysData::clear_ruins_level_times_list_day() {
  ruins_level_times_list_day_ = 0;
  clear_has_ruins_level_times_list_day();
}
inline ::google::protobuf::int32 PlanetSevenDaysData::ruins_level_times_list_day() const {
  return ruins_level_times_list_day_;
}
inline void PlanetSevenDaysData::set_ruins_level_times_list_day(::google::protobuf::int32 value) {
  set_has_ruins_level_times_list_day();
  ruins_level_times_list_day_ = value;
}

// optional int32 fishing_level_times_list_day = 5;
inline bool PlanetSevenDaysData::has_fishing_level_times_list_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanetSevenDaysData::set_has_fishing_level_times_list_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanetSevenDaysData::clear_has_fishing_level_times_list_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanetSevenDaysData::clear_fishing_level_times_list_day() {
  fishing_level_times_list_day_ = 0;
  clear_has_fishing_level_times_list_day();
}
inline ::google::protobuf::int32 PlanetSevenDaysData::fishing_level_times_list_day() const {
  return fishing_level_times_list_day_;
}
inline void PlanetSevenDaysData::set_fishing_level_times_list_day(::google::protobuf::int32 value) {
  set_has_fishing_level_times_list_day();
  fishing_level_times_list_day_ = value;
}

// optional int32 boss_level_times_list_day = 6;
inline bool PlanetSevenDaysData::has_boss_level_times_list_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetSevenDaysData::set_has_boss_level_times_list_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetSevenDaysData::clear_has_boss_level_times_list_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetSevenDaysData::clear_boss_level_times_list_day() {
  boss_level_times_list_day_ = 0;
  clear_has_boss_level_times_list_day();
}
inline ::google::protobuf::int32 PlanetSevenDaysData::boss_level_times_list_day() const {
  return boss_level_times_list_day_;
}
inline void PlanetSevenDaysData::set_boss_level_times_list_day(::google::protobuf::int32 value) {
  set_has_boss_level_times_list_day();
  boss_level_times_list_day_ = value;
}

// -------------------------------------------------------------------

// PlanetUser

// required string user_name = 1;
inline bool PlanetUser::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetUser::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetUser::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetUser::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetUser::user_name() const {
  return *user_name_;
}
inline void PlanetUser::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetUser::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetUser::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetUser::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetUser::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetUser::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 nation = 2;
inline bool PlanetUser::has_nation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetUser::set_has_nation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetUser::clear_has_nation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetUser::clear_nation() {
  nation_ = 0;
  clear_has_nation();
}
inline ::google::protobuf::int32 PlanetUser::nation() const {
  return nation_;
}
inline void PlanetUser::set_nation(::google::protobuf::int32 value) {
  set_has_nation();
  nation_ = value;
}

// repeated .PlanetArmy army_list = 3;
inline int PlanetUser::army_list_size() const {
  return army_list_.size();
}
inline void PlanetUser::clear_army_list() {
  army_list_.Clear();
}
inline const ::PlanetArmy& PlanetUser::army_list(int index) const {
  return army_list_.Get(index);
}
inline ::PlanetArmy* PlanetUser::mutable_army_list(int index) {
  return army_list_.Mutable(index);
}
inline ::PlanetArmy* PlanetUser::add_army_list() {
  return army_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetArmy >&
PlanetUser::army_list() const {
  return army_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetArmy >*
PlanetUser::mutable_army_list() {
  return &army_list_;
}

// required string base_global_key = 4;
inline bool PlanetUser::has_base_global_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetUser::set_has_base_global_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetUser::clear_has_base_global_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetUser::clear_base_global_key() {
  if (base_global_key_ != &::google::protobuf::internal::kEmptyString) {
    base_global_key_->clear();
  }
  clear_has_base_global_key();
}
inline const ::std::string& PlanetUser::base_global_key() const {
  return *base_global_key_;
}
inline void PlanetUser::set_base_global_key(const ::std::string& value) {
  set_has_base_global_key();
  if (base_global_key_ == &::google::protobuf::internal::kEmptyString) {
    base_global_key_ = new ::std::string;
  }
  base_global_key_->assign(value);
}
inline void PlanetUser::set_base_global_key(const char* value) {
  set_has_base_global_key();
  if (base_global_key_ == &::google::protobuf::internal::kEmptyString) {
    base_global_key_ = new ::std::string;
  }
  base_global_key_->assign(value);
}
inline void PlanetUser::set_base_global_key(const char* value, size_t size) {
  set_has_base_global_key();
  if (base_global_key_ == &::google::protobuf::internal::kEmptyString) {
    base_global_key_ = new ::std::string;
  }
  base_global_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetUser::mutable_base_global_key() {
  set_has_base_global_key();
  if (base_global_key_ == &::google::protobuf::internal::kEmptyString) {
    base_global_key_ = new ::std::string;
  }
  return base_global_key_;
}
inline ::std::string* PlanetUser::release_base_global_key() {
  clear_has_base_global_key();
  if (base_global_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = base_global_key_;
    base_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetUser::set_allocated_base_global_key(::std::string* base_global_key) {
  if (base_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete base_global_key_;
  }
  if (base_global_key) {
    set_has_base_global_key();
    base_global_key_ = base_global_key;
  } else {
    clear_has_base_global_key();
    base_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PlanetMark mark_list = 5;
inline int PlanetUser::mark_list_size() const {
  return mark_list_.size();
}
inline void PlanetUser::clear_mark_list() {
  mark_list_.Clear();
}
inline const ::PlanetMark& PlanetUser::mark_list(int index) const {
  return mark_list_.Get(index);
}
inline ::PlanetMark* PlanetUser::mutable_mark_list(int index) {
  return mark_list_.Mutable(index);
}
inline ::PlanetMark* PlanetUser::add_mark_list() {
  return mark_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetMark >&
PlanetUser::mark_list() const {
  return mark_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetMark >*
PlanetUser::mutable_mark_list() {
  return &mark_list_;
}

// repeated string attack_me_list = 6;
inline int PlanetUser::attack_me_list_size() const {
  return attack_me_list_.size();
}
inline void PlanetUser::clear_attack_me_list() {
  attack_me_list_.Clear();
}
inline const ::std::string& PlanetUser::attack_me_list(int index) const {
  return attack_me_list_.Get(index);
}
inline ::std::string* PlanetUser::mutable_attack_me_list(int index) {
  return attack_me_list_.Mutable(index);
}
inline void PlanetUser::set_attack_me_list(int index, const ::std::string& value) {
  attack_me_list_.Mutable(index)->assign(value);
}
inline void PlanetUser::set_attack_me_list(int index, const char* value) {
  attack_me_list_.Mutable(index)->assign(value);
}
inline void PlanetUser::set_attack_me_list(int index, const char* value, size_t size) {
  attack_me_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetUser::add_attack_me_list() {
  return attack_me_list_.Add();
}
inline void PlanetUser::add_attack_me_list(const ::std::string& value) {
  attack_me_list_.Add()->assign(value);
}
inline void PlanetUser::add_attack_me_list(const char* value) {
  attack_me_list_.Add()->assign(value);
}
inline void PlanetUser::add_attack_me_list(const char* value, size_t size) {
  attack_me_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetUser::attack_me_list() const {
  return attack_me_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetUser::mutable_attack_me_list() {
  return &attack_me_list_;
}

// repeated int32 colloct_level_times_list = 7;
inline int PlanetUser::colloct_level_times_list_size() const {
  return colloct_level_times_list_.size();
}
inline void PlanetUser::clear_colloct_level_times_list() {
  colloct_level_times_list_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::colloct_level_times_list(int index) const {
  return colloct_level_times_list_.Get(index);
}
inline void PlanetUser::set_colloct_level_times_list(int index, ::google::protobuf::int32 value) {
  colloct_level_times_list_.Set(index, value);
}
inline void PlanetUser::add_colloct_level_times_list(::google::protobuf::int32 value) {
  colloct_level_times_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::colloct_level_times_list() const {
  return colloct_level_times_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_colloct_level_times_list() {
  return &colloct_level_times_list_;
}

// repeated int32 colloct_count = 8;
inline int PlanetUser::colloct_count_size() const {
  return colloct_count_.size();
}
inline void PlanetUser::clear_colloct_count() {
  colloct_count_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::colloct_count(int index) const {
  return colloct_count_.Get(index);
}
inline void PlanetUser::set_colloct_count(int index, ::google::protobuf::int32 value) {
  colloct_count_.Set(index, value);
}
inline void PlanetUser::add_colloct_count(::google::protobuf::int32 value) {
  colloct_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::colloct_count() const {
  return colloct_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_colloct_count() {
  return &colloct_count_;
}

// repeated int32 ruins_level_times_list = 9;
inline int PlanetUser::ruins_level_times_list_size() const {
  return ruins_level_times_list_.size();
}
inline void PlanetUser::clear_ruins_level_times_list() {
  ruins_level_times_list_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::ruins_level_times_list(int index) const {
  return ruins_level_times_list_.Get(index);
}
inline void PlanetUser::set_ruins_level_times_list(int index, ::google::protobuf::int32 value) {
  ruins_level_times_list_.Set(index, value);
}
inline void PlanetUser::add_ruins_level_times_list(::google::protobuf::int32 value) {
  ruins_level_times_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::ruins_level_times_list() const {
  return ruins_level_times_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_ruins_level_times_list() {
  return &ruins_level_times_list_;
}

// repeated int32 fishing_level_times_list = 10;
inline int PlanetUser::fishing_level_times_list_size() const {
  return fishing_level_times_list_.size();
}
inline void PlanetUser::clear_fishing_level_times_list() {
  fishing_level_times_list_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::fishing_level_times_list(int index) const {
  return fishing_level_times_list_.Get(index);
}
inline void PlanetUser::set_fishing_level_times_list(int index, ::google::protobuf::int32 value) {
  fishing_level_times_list_.Set(index, value);
}
inline void PlanetUser::add_fishing_level_times_list(::google::protobuf::int32 value) {
  fishing_level_times_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::fishing_level_times_list() const {
  return fishing_level_times_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_fishing_level_times_list() {
  return &fishing_level_times_list_;
}

// repeated int32 boss_level_times_list = 11;
inline int PlanetUser::boss_level_times_list_size() const {
  return boss_level_times_list_.size();
}
inline void PlanetUser::clear_boss_level_times_list() {
  boss_level_times_list_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::boss_level_times_list(int index) const {
  return boss_level_times_list_.Get(index);
}
inline void PlanetUser::set_boss_level_times_list(int index, ::google::protobuf::int32 value) {
  boss_level_times_list_.Set(index, value);
}
inline void PlanetUser::add_boss_level_times_list(::google::protobuf::int32 value) {
  boss_level_times_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::boss_level_times_list() const {
  return boss_level_times_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_boss_level_times_list() {
  return &boss_level_times_list_;
}

// optional int32 attack_city_win_times = 12;
inline bool PlanetUser::has_attack_city_win_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlanetUser::set_has_attack_city_win_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlanetUser::clear_has_attack_city_win_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlanetUser::clear_attack_city_win_times() {
  attack_city_win_times_ = 0;
  clear_has_attack_city_win_times();
}
inline ::google::protobuf::int32 PlanetUser::attack_city_win_times() const {
  return attack_city_win_times_;
}
inline void PlanetUser::set_attack_city_win_times(::google::protobuf::int32 value) {
  set_has_attack_city_win_times();
  attack_city_win_times_ = value;
}

// optional int32 attack_win_times = 13;
inline bool PlanetUser::has_attack_win_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlanetUser::set_has_attack_win_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlanetUser::clear_has_attack_win_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlanetUser::clear_attack_win_times() {
  attack_win_times_ = 0;
  clear_has_attack_win_times();
}
inline ::google::protobuf::int32 PlanetUser::attack_win_times() const {
  return attack_win_times_;
}
inline void PlanetUser::set_attack_win_times(::google::protobuf::int32 value) {
  set_has_attack_win_times();
  attack_win_times_ = value;
}

// optional int32 base_defense_win_times = 14;
inline bool PlanetUser::has_base_defense_win_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlanetUser::set_has_base_defense_win_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlanetUser::clear_has_base_defense_win_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlanetUser::clear_base_defense_win_times() {
  base_defense_win_times_ = 0;
  clear_has_base_defense_win_times();
}
inline ::google::protobuf::int32 PlanetUser::base_defense_win_times() const {
  return base_defense_win_times_;
}
inline void PlanetUser::set_base_defense_win_times(::google::protobuf::int32 value) {
  set_has_base_defense_win_times();
  base_defense_win_times_ = value;
}

// repeated int32 move_base_times_list = 15;
inline int PlanetUser::move_base_times_list_size() const {
  return move_base_times_list_.size();
}
inline void PlanetUser::clear_move_base_times_list() {
  move_base_times_list_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::move_base_times_list(int index) const {
  return move_base_times_list_.Get(index);
}
inline void PlanetUser::set_move_base_times_list(int index, ::google::protobuf::int32 value) {
  move_base_times_list_.Set(index, value);
}
inline void PlanetUser::add_move_base_times_list(::google::protobuf::int32 value) {
  move_base_times_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::move_base_times_list() const {
  return move_base_times_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_move_base_times_list() {
  return &move_base_times_list_;
}

// repeated int32 attack_monster_times = 16;
inline int PlanetUser::attack_monster_times_size() const {
  return attack_monster_times_.size();
}
inline void PlanetUser::clear_attack_monster_times() {
  attack_monster_times_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::attack_monster_times(int index) const {
  return attack_monster_times_.Get(index);
}
inline void PlanetUser::set_attack_monster_times(int index, ::google::protobuf::int32 value) {
  attack_monster_times_.Set(index, value);
}
inline void PlanetUser::add_attack_monster_times(::google::protobuf::int32 value) {
  attack_monster_times_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::attack_monster_times() const {
  return attack_monster_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_attack_monster_times() {
  return &attack_monster_times_;
}

// optional int32 base_attack_times = 17;
inline bool PlanetUser::has_base_attack_times() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlanetUser::set_has_base_attack_times() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlanetUser::clear_has_base_attack_times() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlanetUser::clear_base_attack_times() {
  base_attack_times_ = 0;
  clear_has_base_attack_times();
}
inline ::google::protobuf::int32 PlanetUser::base_attack_times() const {
  return base_attack_times_;
}
inline void PlanetUser::set_base_attack_times(::google::protobuf::int32 value) {
  set_has_base_attack_times();
  base_attack_times_ = value;
}

// repeated int32 colloct_level_times_list_day = 18;
inline int PlanetUser::colloct_level_times_list_day_size() const {
  return colloct_level_times_list_day_.size();
}
inline void PlanetUser::clear_colloct_level_times_list_day() {
  colloct_level_times_list_day_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::colloct_level_times_list_day(int index) const {
  return colloct_level_times_list_day_.Get(index);
}
inline void PlanetUser::set_colloct_level_times_list_day(int index, ::google::protobuf::int32 value) {
  colloct_level_times_list_day_.Set(index, value);
}
inline void PlanetUser::add_colloct_level_times_list_day(::google::protobuf::int32 value) {
  colloct_level_times_list_day_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::colloct_level_times_list_day() const {
  return colloct_level_times_list_day_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_colloct_level_times_list_day() {
  return &colloct_level_times_list_day_;
}

// repeated int32 ruins_level_times_list_day = 19;
inline int PlanetUser::ruins_level_times_list_day_size() const {
  return ruins_level_times_list_day_.size();
}
inline void PlanetUser::clear_ruins_level_times_list_day() {
  ruins_level_times_list_day_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::ruins_level_times_list_day(int index) const {
  return ruins_level_times_list_day_.Get(index);
}
inline void PlanetUser::set_ruins_level_times_list_day(int index, ::google::protobuf::int32 value) {
  ruins_level_times_list_day_.Set(index, value);
}
inline void PlanetUser::add_ruins_level_times_list_day(::google::protobuf::int32 value) {
  ruins_level_times_list_day_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::ruins_level_times_list_day() const {
  return ruins_level_times_list_day_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_ruins_level_times_list_day() {
  return &ruins_level_times_list_day_;
}

// repeated int32 fishing_level_times_list_day = 20;
inline int PlanetUser::fishing_level_times_list_day_size() const {
  return fishing_level_times_list_day_.size();
}
inline void PlanetUser::clear_fishing_level_times_list_day() {
  fishing_level_times_list_day_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::fishing_level_times_list_day(int index) const {
  return fishing_level_times_list_day_.Get(index);
}
inline void PlanetUser::set_fishing_level_times_list_day(int index, ::google::protobuf::int32 value) {
  fishing_level_times_list_day_.Set(index, value);
}
inline void PlanetUser::add_fishing_level_times_list_day(::google::protobuf::int32 value) {
  fishing_level_times_list_day_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::fishing_level_times_list_day() const {
  return fishing_level_times_list_day_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_fishing_level_times_list_day() {
  return &fishing_level_times_list_day_;
}

// repeated int32 boss_level_times_list_day = 21;
inline int PlanetUser::boss_level_times_list_day_size() const {
  return boss_level_times_list_day_.size();
}
inline void PlanetUser::clear_boss_level_times_list_day() {
  boss_level_times_list_day_.Clear();
}
inline ::google::protobuf::int32 PlanetUser::boss_level_times_list_day(int index) const {
  return boss_level_times_list_day_.Get(index);
}
inline void PlanetUser::set_boss_level_times_list_day(int index, ::google::protobuf::int32 value) {
  boss_level_times_list_day_.Set(index, value);
}
inline void PlanetUser::add_boss_level_times_list_day(::google::protobuf::int32 value) {
  boss_level_times_list_day_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetUser::boss_level_times_list_day() const {
  return boss_level_times_list_day_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetUser::mutable_boss_level_times_list_day() {
  return &boss_level_times_list_day_;
}

// optional .PlanetSevenDaysData seven_days_data = 22;
inline bool PlanetUser::has_seven_days_data() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PlanetUser::set_has_seven_days_data() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PlanetUser::clear_has_seven_days_data() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PlanetUser::clear_seven_days_data() {
  if (seven_days_data_ != NULL) seven_days_data_->::PlanetSevenDaysData::Clear();
  clear_has_seven_days_data();
}
inline const ::PlanetSevenDaysData& PlanetUser::seven_days_data() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return seven_days_data_ != NULL ? *seven_days_data_ : *default_instance().seven_days_data_;
#else
  return seven_days_data_ != NULL ? *seven_days_data_ : *default_instance_->seven_days_data_;
#endif
}
inline ::PlanetSevenDaysData* PlanetUser::mutable_seven_days_data() {
  set_has_seven_days_data();
  if (seven_days_data_ == NULL) seven_days_data_ = new ::PlanetSevenDaysData;
  return seven_days_data_;
}
inline ::PlanetSevenDaysData* PlanetUser::release_seven_days_data() {
  clear_has_seven_days_data();
  ::PlanetSevenDaysData* temp = seven_days_data_;
  seven_days_data_ = NULL;
  return temp;
}
inline void PlanetUser::set_allocated_seven_days_data(::PlanetSevenDaysData* seven_days_data) {
  delete seven_days_data_;
  seven_days_data_ = seven_days_data;
  if (seven_days_data) {
    set_has_seven_days_data();
  } else {
    clear_has_seven_days_data();
  }
}

// -------------------------------------------------------------------

// PlanetMailUser

// optional .OtherUserInfo info = 1;
inline bool PlanetMailUser::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetMailUser::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetMailUser::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetMailUser::clear_info() {
  if (info_ != NULL) info_->::OtherUserInfo::Clear();
  clear_has_info();
}
inline const ::OtherUserInfo& PlanetMailUser::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::OtherUserInfo* PlanetMailUser::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::OtherUserInfo;
  return info_;
}
inline ::OtherUserInfo* PlanetMailUser::release_info() {
  clear_has_info();
  ::OtherUserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void PlanetMailUser::set_allocated_info(::OtherUserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// repeated .PlanetPoint pos_list = 2;
inline int PlanetMailUser::pos_list_size() const {
  return pos_list_.size();
}
inline void PlanetMailUser::clear_pos_list() {
  pos_list_.Clear();
}
inline const ::PlanetPoint& PlanetMailUser::pos_list(int index) const {
  return pos_list_.Get(index);
}
inline ::PlanetPoint* PlanetMailUser::mutable_pos_list(int index) {
  return pos_list_.Mutable(index);
}
inline ::PlanetPoint* PlanetMailUser::add_pos_list() {
  return pos_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetPoint >&
PlanetMailUser::pos_list() const {
  return pos_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetPoint >*
PlanetMailUser::mutable_pos_list() {
  return &pos_list_;
}

// repeated int32 ship_hp_list = 4;
inline int PlanetMailUser::ship_hp_list_size() const {
  return ship_hp_list_.size();
}
inline void PlanetMailUser::clear_ship_hp_list() {
  ship_hp_list_.Clear();
}
inline ::google::protobuf::int32 PlanetMailUser::ship_hp_list(int index) const {
  return ship_hp_list_.Get(index);
}
inline void PlanetMailUser::set_ship_hp_list(int index, ::google::protobuf::int32 value) {
  ship_hp_list_.Set(index, value);
}
inline void PlanetMailUser::add_ship_hp_list(::google::protobuf::int32 value) {
  ship_hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetMailUser::ship_hp_list() const {
  return ship_hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetMailUser::mutable_ship_hp_list() {
  return &ship_hp_list_;
}

// repeated .AirShip ship_list = 5;
inline int PlanetMailUser::ship_list_size() const {
  return ship_list_.size();
}
inline void PlanetMailUser::clear_ship_list() {
  ship_list_.Clear();
}
inline const ::AirShip& PlanetMailUser::ship_list(int index) const {
  return ship_list_.Get(index);
}
inline ::AirShip* PlanetMailUser::mutable_ship_list(int index) {
  return ship_list_.Mutable(index);
}
inline ::AirShip* PlanetMailUser::add_ship_list() {
  return ship_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
PlanetMailUser::ship_list() const {
  return ship_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
PlanetMailUser::mutable_ship_list() {
  return &ship_list_;
}

// repeated int32 pre_ship_energy_level_list = 6;
inline int PlanetMailUser::pre_ship_energy_level_list_size() const {
  return pre_ship_energy_level_list_.size();
}
inline void PlanetMailUser::clear_pre_ship_energy_level_list() {
  pre_ship_energy_level_list_.Clear();
}
inline ::google::protobuf::int32 PlanetMailUser::pre_ship_energy_level_list(int index) const {
  return pre_ship_energy_level_list_.Get(index);
}
inline void PlanetMailUser::set_pre_ship_energy_level_list(int index, ::google::protobuf::int32 value) {
  pre_ship_energy_level_list_.Set(index, value);
}
inline void PlanetMailUser::add_pre_ship_energy_level_list(::google::protobuf::int32 value) {
  pre_ship_energy_level_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetMailUser::pre_ship_energy_level_list() const {
  return pre_ship_energy_level_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetMailUser::mutable_pre_ship_energy_level_list() {
  return &pre_ship_energy_level_list_;
}

// -------------------------------------------------------------------

// PlanetArmyInfo

// required .PlanetElement my_base = 1;
inline bool PlanetArmyInfo::has_my_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetArmyInfo::set_has_my_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetArmyInfo::clear_has_my_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetArmyInfo::clear_my_base() {
  if (my_base_ != NULL) my_base_->::PlanetElement::Clear();
  clear_has_my_base();
}
inline const ::PlanetElement& PlanetArmyInfo::my_base() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return my_base_ != NULL ? *my_base_ : *default_instance().my_base_;
#else
  return my_base_ != NULL ? *my_base_ : *default_instance_->my_base_;
#endif
}
inline ::PlanetElement* PlanetArmyInfo::mutable_my_base() {
  set_has_my_base();
  if (my_base_ == NULL) my_base_ = new ::PlanetElement;
  return my_base_;
}
inline ::PlanetElement* PlanetArmyInfo::release_my_base() {
  clear_has_my_base();
  ::PlanetElement* temp = my_base_;
  my_base_ = NULL;
  return temp;
}
inline void PlanetArmyInfo::set_allocated_my_base(::PlanetElement* my_base) {
  delete my_base_;
  my_base_ = my_base;
  if (my_base) {
    set_has_my_base();
  } else {
    clear_has_my_base();
  }
}

// required .PlanetArmy army = 2;
inline bool PlanetArmyInfo::has_army() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetArmyInfo::set_has_army() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetArmyInfo::clear_has_army() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetArmyInfo::clear_army() {
  if (army_ != NULL) army_->::PlanetArmy::Clear();
  clear_has_army();
}
inline const ::PlanetArmy& PlanetArmyInfo::army() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return army_ != NULL ? *army_ : *default_instance().army_;
#else
  return army_ != NULL ? *army_ : *default_instance_->army_;
#endif
}
inline ::PlanetArmy* PlanetArmyInfo::mutable_army() {
  set_has_army();
  if (army_ == NULL) army_ = new ::PlanetArmy;
  return army_;
}
inline ::PlanetArmy* PlanetArmyInfo::release_army() {
  clear_has_army();
  ::PlanetArmy* temp = army_;
  army_ = NULL;
  return temp;
}
inline void PlanetArmyInfo::set_allocated_army(::PlanetArmy* army) {
  delete army_;
  army_ = army;
  if (army) {
    set_has_army();
  } else {
    clear_has_army();
  }
}

// required .PlanetElement target_element = 3;
inline bool PlanetArmyInfo::has_target_element() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetArmyInfo::set_has_target_element() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetArmyInfo::clear_has_target_element() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetArmyInfo::clear_target_element() {
  if (target_element_ != NULL) target_element_->::PlanetElement::Clear();
  clear_has_target_element();
}
inline const ::PlanetElement& PlanetArmyInfo::target_element() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return target_element_ != NULL ? *target_element_ : *default_instance().target_element_;
#else
  return target_element_ != NULL ? *target_element_ : *default_instance_->target_element_;
#endif
}
inline ::PlanetElement* PlanetArmyInfo::mutable_target_element() {
  set_has_target_element();
  if (target_element_ == NULL) target_element_ = new ::PlanetElement;
  return target_element_;
}
inline ::PlanetElement* PlanetArmyInfo::release_target_element() {
  clear_has_target_element();
  ::PlanetElement* temp = target_element_;
  target_element_ = NULL;
  return temp;
}
inline void PlanetArmyInfo::set_allocated_target_element(::PlanetElement* target_element) {
  delete target_element_;
  target_element_ = target_element;
  if (target_element) {
    set_has_target_element();
  } else {
    clear_has_target_element();
  }
}

// -------------------------------------------------------------------

// PlanetWangZuoTitle

// required string user_name = 1;
inline bool PlanetWangZuoTitle::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetWangZuoTitle::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetWangZuoTitle::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetWangZuoTitle::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetWangZuoTitle::user_name() const {
  return *user_name_;
}
inline void PlanetWangZuoTitle::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetWangZuoTitle::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetWangZuoTitle::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuoTitle::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetWangZuoTitle::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetWangZuoTitle::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 title = 2;
inline bool PlanetWangZuoTitle::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetWangZuoTitle::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetWangZuoTitle::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetWangZuoTitle::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 PlanetWangZuoTitle::title() const {
  return title_;
}
inline void PlanetWangZuoTitle::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
}

// -------------------------------------------------------------------

// PlanetWangZuoTitleList

// repeated .PlanetWangZuoTitle wangzuo_title_list = 1;
inline int PlanetWangZuoTitleList::wangzuo_title_list_size() const {
  return wangzuo_title_list_.size();
}
inline void PlanetWangZuoTitleList::clear_wangzuo_title_list() {
  wangzuo_title_list_.Clear();
}
inline const ::PlanetWangZuoTitle& PlanetWangZuoTitleList::wangzuo_title_list(int index) const {
  return wangzuo_title_list_.Get(index);
}
inline ::PlanetWangZuoTitle* PlanetWangZuoTitleList::mutable_wangzuo_title_list(int index) {
  return wangzuo_title_list_.Mutable(index);
}
inline ::PlanetWangZuoTitle* PlanetWangZuoTitleList::add_wangzuo_title_list() {
  return wangzuo_title_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoTitle >&
PlanetWangZuoTitleList::wangzuo_title_list() const {
  return wangzuo_title_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoTitle >*
PlanetWangZuoTitleList::mutable_wangzuo_title_list() {
  return &wangzuo_title_list_;
}

// -------------------------------------------------------------------

// PlanetWangZuoOccupy

// required string user_name = 1;
inline bool PlanetWangZuoOccupy::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetWangZuoOccupy::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetWangZuoOccupy::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetWangZuoOccupy::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PlanetWangZuoOccupy::user_name() const {
  return *user_name_;
}
inline void PlanetWangZuoOccupy::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetWangZuoOccupy::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PlanetWangZuoOccupy::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetWangZuoOccupy::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PlanetWangZuoOccupy::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlanetWangZuoOccupy::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 create_time = 2;
inline bool PlanetWangZuoOccupy::has_create_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetWangZuoOccupy::set_has_create_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetWangZuoOccupy::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetWangZuoOccupy::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::int64 PlanetWangZuoOccupy::create_time() const {
  return create_time_;
}
inline void PlanetWangZuoOccupy::set_create_time(::google::protobuf::int64 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional .OtherUserInfo info = 3;
inline bool PlanetWangZuoOccupy::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanetWangZuoOccupy::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanetWangZuoOccupy::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanetWangZuoOccupy::clear_info() {
  if (info_ != NULL) info_->::OtherUserInfo::Clear();
  clear_has_info();
}
inline const ::OtherUserInfo& PlanetWangZuoOccupy::info() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return info_ != NULL ? *info_ : *default_instance().info_;
#else
  return info_ != NULL ? *info_ : *default_instance_->info_;
#endif
}
inline ::OtherUserInfo* PlanetWangZuoOccupy::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::OtherUserInfo;
  return info_;
}
inline ::OtherUserInfo* PlanetWangZuoOccupy::release_info() {
  clear_has_info();
  ::OtherUserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void PlanetWangZuoOccupy::set_allocated_info(::OtherUserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// PlanetWangZuoOccupyList

// repeated .PlanetWangZuoOccupy occupy_list = 1;
inline int PlanetWangZuoOccupyList::occupy_list_size() const {
  return occupy_list_.size();
}
inline void PlanetWangZuoOccupyList::clear_occupy_list() {
  occupy_list_.Clear();
}
inline const ::PlanetWangZuoOccupy& PlanetWangZuoOccupyList::occupy_list(int index) const {
  return occupy_list_.Get(index);
}
inline ::PlanetWangZuoOccupy* PlanetWangZuoOccupyList::mutable_occupy_list(int index) {
  return occupy_list_.Mutable(index);
}
inline ::PlanetWangZuoOccupy* PlanetWangZuoOccupyList::add_occupy_list() {
  return occupy_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoOccupy >&
PlanetWangZuoOccupyList::occupy_list() const {
  return occupy_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetWangZuoOccupy >*
PlanetWangZuoOccupyList::mutable_occupy_list() {
  return &occupy_list_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Planet_2eproto__INCLUDED
