// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datablock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datablock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_datablock_2eproto() {
  delete DataBlock::default_instance_;
  delete DataBlockSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_datablock_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_datablock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DataBlock::default_instance_ = new DataBlock();
  DataBlockSet::default_instance_ = new DataBlockSet();
  DataBlock::default_instance_->InitAsDefaultInstance();
  DataBlockSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datablock_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_datablock_2eproto_once_);
void protobuf_AddDesc_datablock_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_datablock_2eproto_once_,
                 &protobuf_AddDesc_datablock_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datablock_2eproto {
  StaticDescriptorInitializer_datablock_2eproto() {
    protobuf_AddDesc_datablock_2eproto();
  }
} static_descriptor_initializer_datablock_2eproto_;
#endif

// ===================================================================

bool DataBlock_RetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataBlock_RetCode DataBlock::OK;
const DataBlock_RetCode DataBlock::NOT_MODIFIED;
const DataBlock_RetCode DataBlock::LOCKED;
const DataBlock_RetCode DataBlock::MISS;
const DataBlock_RetCode DataBlock::RetCode_MIN;
const DataBlock_RetCode DataBlock::RetCode_MAX;
const int DataBlock::RetCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataBlock::kIdFieldNumber;
const int DataBlock::kBuffFieldNumber;
const int DataBlock::kStampFieldNumber;
const int DataBlock::kLockFieldNumber;
const int DataBlock::kUnlockFieldNumber;
const int DataBlock::kRetcodeFieldNumber;
#endif  // !_MSC_VER

DataBlock::DataBlock()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataBlock::InitAsDefaultInstance() {
}

DataBlock::DataBlock(const DataBlock& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataBlock::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stamp_ = GOOGLE_ULONGLONG(0);
  lock_ = GOOGLE_ULONGLONG(0);
  unlock_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataBlock::~DataBlock() {
  SharedDtor();
}

void DataBlock::SharedDtor() {
  if (buff_ != &::google::protobuf::internal::kEmptyString) {
    delete buff_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataBlock& DataBlock::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_datablock_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_datablock_2eproto();
#endif
  return *default_instance_;
}

DataBlock* DataBlock::default_instance_ = NULL;

DataBlock* DataBlock::New() const {
  return new DataBlock;
}

void DataBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_buff()) {
      if (buff_ != &::google::protobuf::internal::kEmptyString) {
        buff_->clear();
      }
    }
    stamp_ = GOOGLE_ULONGLONG(0);
    lock_ = GOOGLE_ULONGLONG(0);
    unlock_ = 0;
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buff;
        break;
      }

      // optional bytes buff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_stamp;
        break;
      }

      // optional fixed64 stamp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_lock;
        break;
      }

      // optional fixed64 lock = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_retcode;
        break;
      }

      // optional .DataBlock.RetCode retcode = 6 [default = OK];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataBlock_RetCode_IsValid(value)) {
            set_retcode(static_cast< ::DataBlock_RetCode >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes buff = 2;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->buff(), output);
  }

  // optional fixed64 stamp = 3 [default = 0];
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->stamp(), output);
  }

  // optional fixed64 lock = 4 [default = 0];
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->lock(), output);
  }

  // optional int32 unlock = 5 [default = 0];
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unlock(), output);
  }

  // optional .DataBlock.RetCode retcode = 6 [default = OK];
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->retcode(), output);
  }

}

int DataBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes buff = 2;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buff());
    }

    // optional fixed64 stamp = 3 [default = 0];
    if (has_stamp()) {
      total_size += 1 + 8;
    }

    // optional fixed64 lock = 4 [default = 0];
    if (has_lock()) {
      total_size += 1 + 8;
    }

    // optional int32 unlock = 5 [default = 0];
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

    // optional .DataBlock.RetCode retcode = 6 [default = OK];
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataBlock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataBlock*>(&from));
}

void DataBlock::MergeFrom(const DataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buff()) {
      set_buff(from.buff());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
}

void DataBlock::CopyFrom(const DataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DataBlock::Swap(DataBlock* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buff_, other->buff_);
    std::swap(stamp_, other->stamp_);
    std::swap(lock_, other->lock_);
    std::swap(unlock_, other->unlock_);
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataBlock::GetTypeName() const {
  return "DataBlock";
}


// ===================================================================

bool DataBlockSet_Result_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DataBlockSet_Result DataBlockSet::FAIL;
const DataBlockSet_Result DataBlockSet::OK;
const DataBlockSet_Result DataBlockSet::LOCKED;
const DataBlockSet_Result DataBlockSet::MISS;
const DataBlockSet_Result DataBlockSet::NO_DATA;
const DataBlockSet_Result DataBlockSet::Result_MIN;
const DataBlockSet_Result DataBlockSet::Result_MAX;
const int DataBlockSet::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DataBlockSet::kBlocksFieldNumber;
const int DataBlockSet::kResultFieldNumber;
const int DataBlockSet::kNorespFieldNumber;
#endif  // !_MSC_VER

DataBlockSet::DataBlockSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DataBlockSet::InitAsDefaultInstance() {
}

DataBlockSet::DataBlockSet(const DataBlockSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DataBlockSet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  noresp_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataBlockSet::~DataBlockSet() {
  SharedDtor();
}

void DataBlockSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataBlockSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataBlockSet& DataBlockSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_datablock_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_datablock_2eproto();
#endif
  return *default_instance_;
}

DataBlockSet* DataBlockSet::default_instance_ = NULL;

DataBlockSet* DataBlockSet::New() const {
  return new DataBlockSet;
}

void DataBlockSet::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_ = 0;
    noresp_ = 1;
  }
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DataBlockSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataBlock blocks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blocks;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .DataBlockSet.Result result = 2 [default = OK];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DataBlockSet_Result_IsValid(value)) {
            set_result(static_cast< ::DataBlockSet_Result >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_noresp;
        break;
      }

      // optional int32 noresp = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noresp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noresp_)));
          set_has_noresp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataBlockSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DataBlock blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->blocks(i), output);
  }

  // optional .DataBlockSet.Result result = 2 [default = OK];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 noresp = 3 [default = 1];
  if (has_noresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->noresp(), output);
  }

}

int DataBlockSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .DataBlockSet.Result result = 2 [default = OK];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 noresp = 3 [default = 1];
    if (has_noresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noresp());
    }

  }
  // repeated .DataBlock blocks = 1;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataBlockSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataBlockSet*>(&from));
}

void DataBlockSet::MergeFrom(const DataBlockSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_noresp()) {
      set_noresp(from.noresp());
    }
  }
}

void DataBlockSet::CopyFrom(const DataBlockSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBlockSet::IsInitialized() const {

  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void DataBlockSet::Swap(DataBlockSet* other) {
  if (other != this) {
    blocks_.Swap(&other->blocks_);
    std::swap(result_, other->result_);
    std::swap(noresp_, other->noresp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataBlockSet::GetTypeName() const {
  return "DataBlockSet";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
