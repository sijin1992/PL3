// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_Group_2eproto() {
  delete HelpInfo::default_instance_;
  delete GroupTechnology::default_instance_;
  delete GroupUser::default_instance_;
  delete GroupMainData::default_instance_;
  delete GroupMainData_JoinInfo::default_instance_;
  delete GroupMainData_JoinCondition::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_Group_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_Group_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_Item_2eproto();
  HelpInfo::default_instance_ = new HelpInfo();
  GroupTechnology::default_instance_ = new GroupTechnology();
  GroupUser::default_instance_ = new GroupUser();
  GroupMainData::default_instance_ = new GroupMainData();
  GroupMainData_JoinInfo::default_instance_ = new GroupMainData_JoinInfo();
  GroupMainData_JoinCondition::default_instance_ = new GroupMainData_JoinCondition();
  HelpInfo::default_instance_->InitAsDefaultInstance();
  GroupTechnology::default_instance_->InitAsDefaultInstance();
  GroupUser::default_instance_->InitAsDefaultInstance();
  GroupMainData::default_instance_->InitAsDefaultInstance();
  GroupMainData_JoinInfo::default_instance_->InitAsDefaultInstance();
  GroupMainData_JoinCondition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Group_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_Group_2eproto_once_);
void protobuf_AddDesc_Group_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_Group_2eproto_once_,
                 &protobuf_AddDesc_Group_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Group_2eproto {
  StaticDescriptorInitializer_Group_2eproto() {
    protobuf_AddDesc_Group_2eproto();
  }
} static_descriptor_initializer_Group_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int HelpInfo::kUserNameFieldNumber;
const int HelpInfo::kTypeFieldNumber;
const int HelpInfo::kIdFieldNumber;
const int HelpInfo::kHelpUserNameListFieldNumber;
const int HelpInfo::kMaxHelpTimesFieldNumber;
#endif  // !_MSC_VER

HelpInfo::HelpInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HelpInfo::InitAsDefaultInstance() {
}

HelpInfo::HelpInfo(const HelpInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HelpInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  max_help_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelpInfo::~HelpInfo() {
  SharedDtor();
}

void HelpInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HelpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HelpInfo& HelpInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2eproto();
#endif
  return *default_instance_;
}

HelpInfo* HelpInfo::default_instance_ = NULL;

HelpInfo* HelpInfo::New() const {
  return new HelpInfo;
}

void HelpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    type_ = 0;
    max_help_times_ = 0;
  }
  id_.Clear();
  help_user_name_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HelpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectTag(34)) goto parse_help_user_name_list;
        break;
      }

      // repeated string help_user_name_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_user_name_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_help_user_name_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_help_user_name_list;
        if (input->ExpectTag(40)) goto parse_max_help_times;
        break;
      }

      // required int32 max_help_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_help_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_help_times_)));
          set_has_max_help_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HelpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->id(i), output);
  }

  // repeated string help_user_name_list = 4;
  for (int i = 0; i < this->help_user_name_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->help_user_name_list(i), output);
  }

  // required int32 max_help_times = 5;
  if (has_max_help_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_help_times(), output);
  }

}

int HelpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 max_help_times = 5;
    if (has_max_help_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_help_times());
    }

  }
  // repeated int32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  // repeated string help_user_name_list = 4;
  total_size += 1 * this->help_user_name_list_size();
  for (int i = 0; i < this->help_user_name_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->help_user_name_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelpInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HelpInfo*>(&from));
}

void HelpInfo::MergeFrom(const HelpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  help_user_name_list_.MergeFrom(from.help_user_name_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_max_help_times()) {
      set_max_help_times(from.max_help_times());
    }
  }
}

void HelpInfo::CopyFrom(const HelpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelpInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void HelpInfo::Swap(HelpInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(type_, other->type_);
    id_.Swap(&other->id_);
    help_user_name_list_.Swap(&other->help_user_name_list_);
    std::swap(max_help_times_, other->max_help_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HelpInfo::GetTypeName() const {
  return "HelpInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupTechnology::kTechIdFieldNumber;
const int GroupTechnology::kExpFieldNumber;
const int GroupTechnology::kBeginUpgradeTimeFieldNumber;
const int GroupTechnology::kStatusFieldNumber;
const int GroupTechnology::kCityBuffCountFieldNumber;
#endif  // !_MSC_VER

GroupTechnology::GroupTechnology()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupTechnology::InitAsDefaultInstance() {
}

GroupTechnology::GroupTechnology(const GroupTechnology& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupTechnology::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  exp_ = 0;
  begin_upgrade_time_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  city_buff_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupTechnology::~GroupTechnology() {
  SharedDtor();
}

void GroupTechnology::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupTechnology::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupTechnology& GroupTechnology::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2eproto();
#endif
  return *default_instance_;
}

GroupTechnology* GroupTechnology::default_instance_ = NULL;

GroupTechnology* GroupTechnology::New() const {
  return new GroupTechnology;
}

void GroupTechnology::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
    exp_ = 0;
    begin_upgrade_time_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    city_buff_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupTechnology::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin_upgrade_time;
        break;
      }

      // optional int64 begin_upgrade_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_upgrade_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_upgrade_time_)));
          set_has_begin_upgrade_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_city_buff_count;
        break;
      }

      // optional int32 city_buff_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_city_buff_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_buff_count_)));
          set_has_city_buff_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupTechnology::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int64 begin_upgrade_time = 3;
  if (has_begin_upgrade_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->begin_upgrade_time(), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // optional int32 city_buff_count = 5;
  if (has_city_buff_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->city_buff_count(), output);
  }

}

int GroupTechnology::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 begin_upgrade_time = 3;
    if (has_begin_upgrade_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_upgrade_time());
    }

    // required int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 city_buff_count = 5;
    if (has_city_buff_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_buff_count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupTechnology::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupTechnology*>(&from));
}

void GroupTechnology::MergeFrom(const GroupTechnology& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_begin_upgrade_time()) {
      set_begin_upgrade_time(from.begin_upgrade_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_city_buff_count()) {
      set_city_buff_count(from.city_buff_count());
    }
  }
}

void GroupTechnology::CopyFrom(const GroupTechnology& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupTechnology::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void GroupTechnology::Swap(GroupTechnology* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(exp_, other->exp_);
    std::swap(begin_upgrade_time_, other->begin_upgrade_time_);
    std::swap(status_, other->status_);
    std::swap(city_buff_count_, other->city_buff_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupTechnology::GetTypeName() const {
  return "GroupTechnology";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupUser::kGuidFieldNumber;
const int GroupUser::kUserNameFieldNumber;
const int GroupUser::kNicknameFieldNumber;
const int GroupUser::kJobFieldNumber;
const int GroupUser::kStatusFieldNumber;
const int GroupUser::kLastActFieldNumber;
const int GroupUser::kLastGongxianFieldNumber;
const int GroupUser::kUnlockTimeFieldNumber;
#endif  // !_MSC_VER

GroupUser::GroupUser()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupUser::InitAsDefaultInstance() {
}

GroupUser::GroupUser(const GroupUser& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupUser::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0;
  status_ = 0;
  last_act_ = GOOGLE_ULONGLONG(0);
  unlock_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupUser::~GroupUser() {
  SharedDtor();
}

void GroupUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupUser& GroupUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2eproto();
#endif
  return *default_instance_;
}

GroupUser* GroupUser::default_instance_ = NULL;

GroupUser* GroupUser::New() const {
  return new GroupUser;
}

void GroupUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    job_ = 0;
    status_ = 0;
    last_act_ = GOOGLE_ULONGLONG(0);
    unlock_time_ = GOOGLE_LONGLONG(0);
  }
  last_gongxian_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // required string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // required int32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_act;
        break;
      }

      // optional uint64 last_act = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_act_)));
          set_has_last_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_gongxian;
        break;
      }

      // repeated int32 last_gongxian = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_gongxian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_last_gongxian())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_last_gongxian())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_gongxian;
        if (input->ExpectTag(64)) goto parse_unlock_time;
        break;
      }

      // optional int64 unlock_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unlock_time_)));
          set_has_unlock_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // required int32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  // required int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional uint64 last_act = 6;
  if (has_last_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->last_act(), output);
  }

  // repeated int32 last_gongxian = 7;
  for (int i = 0; i < this->last_gongxian_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->last_gongxian(i), output);
  }

  // optional int64 unlock_time = 8;
  if (has_unlock_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->unlock_time(), output);
  }

}

int GroupUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // required int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional uint64 last_act = 6;
    if (has_last_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_act());
    }

    // optional int64 unlock_time = 8;
    if (has_unlock_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unlock_time());
    }

  }
  // repeated int32 last_gongxian = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->last_gongxian_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->last_gongxian(i));
    }
    total_size += 1 * this->last_gongxian_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUser::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupUser*>(&from));
}

void GroupUser::MergeFrom(const GroupUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_gongxian_.MergeFrom(from.last_gongxian_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_last_act()) {
      set_last_act(from.last_act());
    }
    if (from.has_unlock_time()) {
      set_unlock_time(from.unlock_time());
    }
  }
}

void GroupUser::CopyFrom(const GroupUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GroupUser::Swap(GroupUser* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(user_name_, other->user_name_);
    std::swap(nickname_, other->nickname_);
    std::swap(job_, other->job_);
    std::swap(status_, other->status_);
    std::swap(last_act_, other->last_act_);
    last_gongxian_.Swap(&other->last_gongxian_);
    std::swap(unlock_time_, other->unlock_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupUser::GetTypeName() const {
  return "GroupUser";
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMainData_JoinInfo::kUserNameFieldNumber;
const int GroupMainData_JoinInfo::kNicknameFieldNumber;
const int GroupMainData_JoinInfo::kJoinTimeFieldNumber;
#endif  // !_MSC_VER

GroupMainData_JoinInfo::GroupMainData_JoinInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupMainData_JoinInfo::InitAsDefaultInstance() {
}

GroupMainData_JoinInfo::GroupMainData_JoinInfo(const GroupMainData_JoinInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupMainData_JoinInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  join_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMainData_JoinInfo::~GroupMainData_JoinInfo() {
  SharedDtor();
}

void GroupMainData_JoinInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupMainData_JoinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupMainData_JoinInfo& GroupMainData_JoinInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2eproto();
#endif
  return *default_instance_;
}

GroupMainData_JoinInfo* GroupMainData_JoinInfo::default_instance_ = NULL;

GroupMainData_JoinInfo* GroupMainData_JoinInfo::New() const {
  return new GroupMainData_JoinInfo;
}

void GroupMainData_JoinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    join_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupMainData_JoinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_join_time;
        break;
      }

      // required int64 join_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupMainData_JoinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required int64 join_time = 3;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->join_time(), output);
  }

}

int GroupMainData_JoinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int64 join_time = 3;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->join_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMainData_JoinInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupMainData_JoinInfo*>(&from));
}

void GroupMainData_JoinInfo::MergeFrom(const GroupMainData_JoinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
  }
}

void GroupMainData_JoinInfo::CopyFrom(const GroupMainData_JoinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMainData_JoinInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupMainData_JoinInfo::Swap(GroupMainData_JoinInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nickname_, other->nickname_);
    std::swap(join_time_, other->join_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupMainData_JoinInfo::GetTypeName() const {
  return "GroupMainData.JoinInfo";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GroupMainData_JoinCondition::kNeedAllowFieldNumber;
const int GroupMainData_JoinCondition::kLevelFieldNumber;
const int GroupMainData_JoinCondition::kPowerFieldNumber;
#endif  // !_MSC_VER

GroupMainData_JoinCondition::GroupMainData_JoinCondition()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupMainData_JoinCondition::InitAsDefaultInstance() {
}

GroupMainData_JoinCondition::GroupMainData_JoinCondition(const GroupMainData_JoinCondition& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupMainData_JoinCondition::SharedCtor() {
  _cached_size_ = 0;
  needallow_ = false;
  level_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMainData_JoinCondition::~GroupMainData_JoinCondition() {
  SharedDtor();
}

void GroupMainData_JoinCondition::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GroupMainData_JoinCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupMainData_JoinCondition& GroupMainData_JoinCondition::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2eproto();
#endif
  return *default_instance_;
}

GroupMainData_JoinCondition* GroupMainData_JoinCondition::default_instance_ = NULL;

GroupMainData_JoinCondition* GroupMainData_JoinCondition::New() const {
  return new GroupMainData_JoinCondition;
}

void GroupMainData_JoinCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needallow_ = false;
    level_ = 0;
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupMainData_JoinCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool needAllow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needallow_)));
          set_has_needallow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // optional int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupMainData_JoinCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool needAllow = 1;
  if (has_needallow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->needallow(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

}

int GroupMainData_JoinCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool needAllow = 1;
    if (has_needallow()) {
      total_size += 1 + 1;
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMainData_JoinCondition::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupMainData_JoinCondition*>(&from));
}

void GroupMainData_JoinCondition::MergeFrom(const GroupMainData_JoinCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needallow()) {
      set_needallow(from.needallow());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
}

void GroupMainData_JoinCondition::CopyFrom(const GroupMainData_JoinCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMainData_JoinCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupMainData_JoinCondition::Swap(GroupMainData_JoinCondition* other) {
  if (other != this) {
    std::swap(needallow_, other->needallow_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupMainData_JoinCondition::GetTypeName() const {
  return "GroupMainData.JoinCondition";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GroupMainData::kGroupidFieldNumber;
const int GroupMainData::kNicknameFieldNumber;
const int GroupMainData::kStatusFieldNumber;
const int GroupMainData::kIconIdFieldNumber;
const int GroupMainData::kContributeFieldNumber;
const int GroupMainData::kExpFieldNumber;
const int GroupMainData::kLevelFieldNumber;
const int GroupMainData::kDayidFieldNumber;
const int GroupMainData::kUserListFieldNumber;
const int GroupMainData::kBroadcastFieldNumber;
const int GroupMainData::kBlurbFieldNumber;
const int GroupMainData::kGuidFieldNumber;
const int GroupMainData::kRankFieldNumber;
const int GroupMainData::kCreateTimeFieldNumber;
const int GroupMainData::kUnlockTimeFieldNumber;
const int GroupMainData::kJoinListFieldNumber;
const int GroupMainData::kJoinConditionFieldNumber;
const int GroupMainData::kTechListFieldNumber;
const int GroupMainData::kHelpListFieldNumber;
const int GroupMainData::kWorshipValueFieldNumber;
const int GroupMainData::kTodayWorshipTimesFieldNumber;
const int GroupMainData::kOccupyCityListFieldNumber;
const int GroupMainData::kEnlistListFieldNumber;
const int GroupMainData::kAttackOurListFieldNumber;
#endif  // !_MSC_VER

GroupMainData::GroupMainData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GroupMainData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  join_condition_ = const_cast< ::GroupMainData_JoinCondition*>(
      ::GroupMainData_JoinCondition::internal_default_instance());
#else
  join_condition_ = const_cast< ::GroupMainData_JoinCondition*>(&::GroupMainData_JoinCondition::default_instance());
#endif
}

GroupMainData::GroupMainData(const GroupMainData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GroupMainData::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  icon_id_ = 0;
  contribute_ = 0;
  exp_ = 0;
  level_ = 0;
  dayid_ = 0u;
  broadcast_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blurb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = 0;
  rank_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  unlock_time_ = GOOGLE_LONGLONG(0);
  join_condition_ = NULL;
  worship_value_ = 0;
  today_worship_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupMainData::~GroupMainData() {
  SharedDtor();
}

void GroupMainData::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (broadcast_ != &::google::protobuf::internal::kEmptyString) {
    delete broadcast_;
  }
  if (blurb_ != &::google::protobuf::internal::kEmptyString) {
    delete blurb_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete join_condition_;
  }
}

void GroupMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GroupMainData& GroupMainData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_Group_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2eproto();
#endif
  return *default_instance_;
}

GroupMainData* GroupMainData::default_instance_ = NULL;

GroupMainData* GroupMainData::New() const {
  return new GroupMainData;
}

void GroupMainData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    status_ = 0;
    icon_id_ = 0;
    contribute_ = 0;
    exp_ = 0;
    level_ = 0;
    dayid_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_broadcast()) {
      if (broadcast_ != &::google::protobuf::internal::kEmptyString) {
        broadcast_->clear();
      }
    }
    if (has_blurb()) {
      if (blurb_ != &::google::protobuf::internal::kEmptyString) {
        blurb_->clear();
      }
    }
    guid_ = 0;
    rank_ = 0;
    create_time_ = GOOGLE_LONGLONG(0);
    unlock_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_join_condition()) {
      if (join_condition_ != NULL) join_condition_->::GroupMainData_JoinCondition::Clear();
    }
    worship_value_ = 0;
    today_worship_times_ = 0;
  }
  user_list_.Clear();
  join_list_.Clear();
  tech_list_.Clear();
  help_list_.Clear();
  occupy_city_list_.Clear();
  enlist_list_.Clear();
  attack_our_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GroupMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon_id;
        break;
      }

      // optional int32 icon_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dayid;
        break;
      }

      // optional uint32 dayid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayid_)));
          set_has_dayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_user_list;
        break;
      }

      // repeated .GroupUser user_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_user_list;
        if (input->ExpectTag(82)) goto parse_broadcast;
        break;
      }

      // optional string broadcast = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broadcast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_blurb;
        break;
      }

      // optional string blurb = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blurb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blurb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_guid;
        break;
      }

      // optional int32 guid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_rank;
        break;
      }

      // optional int32 rank = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_create_time;
        break;
      }

      // optional int64 create_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_unlock_time;
        break;
      }

      // optional int64 unlock_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &unlock_time_)));
          set_has_unlock_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_join_list;
        break;
      }

      // repeated .GroupMainData.JoinInfo join_list = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_join_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_join_list;
        if (input->ExpectTag(138)) goto parse_join_condition;
        break;
      }

      // required .GroupMainData.JoinCondition join_condition = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_join_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tech_list;
        break;
      }

      // repeated .GroupTechnology tech_list = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tech_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tech_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_tech_list;
        if (input->ExpectTag(154)) goto parse_help_list;
        break;
      }

      // repeated .HelpInfo help_list = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_help_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_help_list;
        if (input->ExpectTag(160)) goto parse_worship_value;
        break;
      }

      // optional int32 worship_value = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worship_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worship_value_)));
          set_has_worship_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_today_worship_times;
        break;
      }

      // optional int32 today_worship_times = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_worship_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_worship_times_)));
          set_has_today_worship_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_occupy_city_list;
        break;
      }

      // repeated string occupy_city_list = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupy_city_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_occupy_city_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_occupy_city_list;
        if (input->ExpectTag(186)) goto parse_enlist_list;
        break;
      }

      // repeated string enlist_list = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enlist_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enlist_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_enlist_list;
        if (input->ExpectTag(194)) goto parse_attack_our_list;
        break;
      }

      // repeated string attack_our_list = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_our_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attack_our_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_attack_our_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional int32 icon_id = 4;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->icon_id(), output);
  }

  // optional int32 contribute = 5;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contribute(), output);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional uint32 dayid = 8;
  if (has_dayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dayid(), output);
  }

  // repeated .GroupUser user_list = 9;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->user_list(i), output);
  }

  // optional string broadcast = 10;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->broadcast(), output);
  }

  // optional string blurb = 11;
  if (has_blurb()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->blurb(), output);
  }

  // optional int32 guid = 12;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->guid(), output);
  }

  // optional int32 rank = 13;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rank(), output);
  }

  // optional int64 create_time = 14;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->create_time(), output);
  }

  // optional int64 unlock_time = 15;
  if (has_unlock_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->unlock_time(), output);
  }

  // repeated .GroupMainData.JoinInfo join_list = 16;
  for (int i = 0; i < this->join_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->join_list(i), output);
  }

  // required .GroupMainData.JoinCondition join_condition = 17;
  if (has_join_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->join_condition(), output);
  }

  // repeated .GroupTechnology tech_list = 18;
  for (int i = 0; i < this->tech_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->tech_list(i), output);
  }

  // repeated .HelpInfo help_list = 19;
  for (int i = 0; i < this->help_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->help_list(i), output);
  }

  // optional int32 worship_value = 20;
  if (has_worship_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->worship_value(), output);
  }

  // optional int32 today_worship_times = 21;
  if (has_today_worship_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->today_worship_times(), output);
  }

  // repeated string occupy_city_list = 22;
  for (int i = 0; i < this->occupy_city_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->occupy_city_list(i), output);
  }

  // repeated string enlist_list = 23;
  for (int i = 0; i < this->enlist_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->enlist_list(i), output);
  }

  // repeated string attack_our_list = 24;
  for (int i = 0; i < this->attack_our_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->attack_our_list(i), output);
  }

}

int GroupMainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 icon_id = 4;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // optional int32 contribute = 5;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

    // optional int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 dayid = 8;
    if (has_dayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayid());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string broadcast = 10;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broadcast());
    }

    // optional string blurb = 11;
    if (has_blurb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blurb());
    }

    // optional int32 guid = 12;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 rank = 13;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int64 create_time = 14;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional int64 unlock_time = 15;
    if (has_unlock_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->unlock_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .GroupMainData.JoinCondition join_condition = 17;
    if (has_join_condition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->join_condition());
    }

    // optional int32 worship_value = 20;
    if (has_worship_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worship_value());
    }

    // optional int32 today_worship_times = 21;
    if (has_today_worship_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_worship_times());
    }

  }
  // repeated .GroupUser user_list = 9;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  // repeated .GroupMainData.JoinInfo join_list = 16;
  total_size += 2 * this->join_list_size();
  for (int i = 0; i < this->join_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->join_list(i));
  }

  // repeated .GroupTechnology tech_list = 18;
  total_size += 2 * this->tech_list_size();
  for (int i = 0; i < this->tech_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tech_list(i));
  }

  // repeated .HelpInfo help_list = 19;
  total_size += 2 * this->help_list_size();
  for (int i = 0; i < this->help_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->help_list(i));
  }

  // repeated string occupy_city_list = 22;
  total_size += 2 * this->occupy_city_list_size();
  for (int i = 0; i < this->occupy_city_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->occupy_city_list(i));
  }

  // repeated string enlist_list = 23;
  total_size += 2 * this->enlist_list_size();
  for (int i = 0; i < this->enlist_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enlist_list(i));
  }

  // repeated string attack_our_list = 24;
  total_size += 2 * this->attack_our_list_size();
  for (int i = 0; i < this->attack_our_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attack_our_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMainData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupMainData*>(&from));
}

void GroupMainData::MergeFrom(const GroupMainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  join_list_.MergeFrom(from.join_list_);
  tech_list_.MergeFrom(from.tech_list_);
  help_list_.MergeFrom(from.help_list_);
  occupy_city_list_.MergeFrom(from.occupy_city_list_);
  enlist_list_.MergeFrom(from.enlist_list_);
  attack_our_list_.MergeFrom(from.attack_our_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_dayid()) {
      set_dayid(from.dayid());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_broadcast()) {
      set_broadcast(from.broadcast());
    }
    if (from.has_blurb()) {
      set_blurb(from.blurb());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_unlock_time()) {
      set_unlock_time(from.unlock_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_join_condition()) {
      mutable_join_condition()->::GroupMainData_JoinCondition::MergeFrom(from.join_condition());
    }
    if (from.has_worship_value()) {
      set_worship_value(from.worship_value());
    }
    if (from.has_today_worship_times()) {
      set_today_worship_times(from.today_worship_times());
    }
  }
}

void GroupMainData::CopyFrom(const GroupMainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMainData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00010007) != 0x00010007) return false;

  for (int i = 0; i < user_list_size(); i++) {
    if (!this->user_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < join_list_size(); i++) {
    if (!this->join_list(i).IsInitialized()) return false;
  }
  if (has_join_condition()) {
    if (!this->join_condition().IsInitialized()) return false;
  }
  for (int i = 0; i < tech_list_size(); i++) {
    if (!this->tech_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < help_list_size(); i++) {
    if (!this->help_list(i).IsInitialized()) return false;
  }
  return true;
}

void GroupMainData::Swap(GroupMainData* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(nickname_, other->nickname_);
    std::swap(status_, other->status_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(contribute_, other->contribute_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(dayid_, other->dayid_);
    user_list_.Swap(&other->user_list_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(blurb_, other->blurb_);
    std::swap(guid_, other->guid_);
    std::swap(rank_, other->rank_);
    std::swap(create_time_, other->create_time_);
    std::swap(unlock_time_, other->unlock_time_);
    join_list_.Swap(&other->join_list_);
    std::swap(join_condition_, other->join_condition_);
    tech_list_.Swap(&other->tech_list_);
    help_list_.Swap(&other->help_list_);
    std::swap(worship_value_, other->worship_value_);
    std::swap(today_worship_times_, other->today_worship_times_);
    occupy_city_list_.Swap(&other->occupy_city_list_);
    enlist_list_.Swap(&other->enlist_list_);
    attack_our_list_.Swap(&other->attack_our_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GroupMainData::GetTypeName() const {
  return "GroupMainData";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
