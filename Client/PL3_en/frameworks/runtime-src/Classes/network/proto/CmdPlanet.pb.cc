// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdPlanet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdPlanet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_CmdPlanet_2eproto() {
  delete PlanetGetReq::default_instance_;
  delete PlanetGetResp::default_instance_;
  delete PlanetCollectReq::default_instance_;
  delete PlanetCollectResp::default_instance_;
  delete PlanetRideBackReq::default_instance_;
  delete PlanetRideBackResp::default_instance_;
  delete PlanetRuinsReq::default_instance_;
  delete PlanetRuinsResp::default_instance_;
  delete PlanetRaidReq::default_instance_;
  delete PlanetRaidResp::default_instance_;
  delete PlanetSpeedUpReq::default_instance_;
  delete PlanetSpeedUpResp::default_instance_;
  delete PlanetShieldReq::default_instance_;
  delete PlanetShieldResp::default_instance_;
  delete PlanetMoveBaseReq::default_instance_;
  delete PlanetMoveBaseResp::default_instance_;
  delete PlanetMarkReq::default_instance_;
  delete PlanetMarkResp::default_instance_;
  delete PlanetTowerReq::default_instance_;
  delete PlanetTowerResp::default_instance_;
  delete PlanetWangZuoTitleReq::default_instance_;
  delete PLanetWangZuoTitleResp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CmdPlanet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CmdPlanet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_Planet_2eproto();
  ::protobuf_AddDesc_OtherInfo_2eproto();
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  PlanetGetReq::default_instance_ = new PlanetGetReq();
  PlanetGetResp::default_instance_ = new PlanetGetResp();
  PlanetCollectReq::default_instance_ = new PlanetCollectReq();
  PlanetCollectResp::default_instance_ = new PlanetCollectResp();
  PlanetRideBackReq::default_instance_ = new PlanetRideBackReq();
  PlanetRideBackResp::default_instance_ = new PlanetRideBackResp();
  PlanetRuinsReq::default_instance_ = new PlanetRuinsReq();
  PlanetRuinsResp::default_instance_ = new PlanetRuinsResp();
  PlanetRaidReq::default_instance_ = new PlanetRaidReq();
  PlanetRaidResp::default_instance_ = new PlanetRaidResp();
  PlanetSpeedUpReq::default_instance_ = new PlanetSpeedUpReq();
  PlanetSpeedUpResp::default_instance_ = new PlanetSpeedUpResp();
  PlanetShieldReq::default_instance_ = new PlanetShieldReq();
  PlanetShieldResp::default_instance_ = new PlanetShieldResp();
  PlanetMoveBaseReq::default_instance_ = new PlanetMoveBaseReq();
  PlanetMoveBaseResp::default_instance_ = new PlanetMoveBaseResp();
  PlanetMarkReq::default_instance_ = new PlanetMarkReq();
  PlanetMarkResp::default_instance_ = new PlanetMarkResp();
  PlanetTowerReq::default_instance_ = new PlanetTowerReq();
  PlanetTowerResp::default_instance_ = new PlanetTowerResp();
  PlanetWangZuoTitleReq::default_instance_ = new PlanetWangZuoTitleReq();
  PLanetWangZuoTitleResp::default_instance_ = new PLanetWangZuoTitleResp();
  PlanetGetReq::default_instance_->InitAsDefaultInstance();
  PlanetGetResp::default_instance_->InitAsDefaultInstance();
  PlanetCollectReq::default_instance_->InitAsDefaultInstance();
  PlanetCollectResp::default_instance_->InitAsDefaultInstance();
  PlanetRideBackReq::default_instance_->InitAsDefaultInstance();
  PlanetRideBackResp::default_instance_->InitAsDefaultInstance();
  PlanetRuinsReq::default_instance_->InitAsDefaultInstance();
  PlanetRuinsResp::default_instance_->InitAsDefaultInstance();
  PlanetRaidReq::default_instance_->InitAsDefaultInstance();
  PlanetRaidResp::default_instance_->InitAsDefaultInstance();
  PlanetSpeedUpReq::default_instance_->InitAsDefaultInstance();
  PlanetSpeedUpResp::default_instance_->InitAsDefaultInstance();
  PlanetShieldReq::default_instance_->InitAsDefaultInstance();
  PlanetShieldResp::default_instance_->InitAsDefaultInstance();
  PlanetMoveBaseReq::default_instance_->InitAsDefaultInstance();
  PlanetMoveBaseResp::default_instance_->InitAsDefaultInstance();
  PlanetMarkReq::default_instance_->InitAsDefaultInstance();
  PlanetMarkResp::default_instance_->InitAsDefaultInstance();
  PlanetTowerReq::default_instance_->InitAsDefaultInstance();
  PlanetTowerResp::default_instance_->InitAsDefaultInstance();
  PlanetWangZuoTitleReq::default_instance_->InitAsDefaultInstance();
  PLanetWangZuoTitleResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdPlanet_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CmdPlanet_2eproto_once_);
void protobuf_AddDesc_CmdPlanet_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CmdPlanet_2eproto_once_,
                 &protobuf_AddDesc_CmdPlanet_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdPlanet_2eproto {
  StaticDescriptorInitializer_CmdPlanet_2eproto() {
    protobuf_AddDesc_CmdPlanet_2eproto();
  }
} static_descriptor_initializer_CmdPlanet_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PlanetGetReq::kTypeFieldNumber;
const int PlanetGetReq::kNodeIdListFieldNumber;
const int PlanetGetReq::kElementGlobalKeyListFieldNumber;
const int PlanetGetReq::kArmyLineKeyListFieldNumber;
const int PlanetGetReq::kArmyKeyListFieldNumber;
#endif  // !_MSC_VER

PlanetGetReq::PlanetGetReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetGetReq::InitAsDefaultInstance() {
}

PlanetGetReq::PlanetGetReq(const PlanetGetReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetGetReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetGetReq::~PlanetGetReq() {
  SharedDtor();
}

void PlanetGetReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetGetReq& PlanetGetReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetGetReq* PlanetGetReq::default_instance_ = NULL;

PlanetGetReq* PlanetGetReq::New() const {
  return new PlanetGetReq;
}

void PlanetGetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  node_id_list_.Clear();
  element_global_key_list_.Clear();
  army_line_key_list_.Clear();
  army_key_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id_list;
        break;
      }

      // repeated int32 node_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_node_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_node_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id_list;
        if (input->ExpectTag(26)) goto parse_element_global_key_list;
        break;
      }

      // repeated string element_global_key_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_global_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_element_global_key_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_element_global_key_list;
        if (input->ExpectTag(34)) goto parse_army_line_key_list;
        break;
      }

      // repeated string army_line_key_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_line_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_army_line_key_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_army_line_key_list;
        if (input->ExpectTag(42)) goto parse_army_key_list;
        break;
      }

      // repeated string army_key_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_army_key_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_army_key_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 node_id_list = 2;
  for (int i = 0; i < this->node_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->node_id_list(i), output);
  }

  // repeated string element_global_key_list = 3;
  for (int i = 0; i < this->element_global_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->element_global_key_list(i), output);
  }

  // repeated string army_line_key_list = 4;
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->army_line_key_list(i), output);
  }

  // repeated string army_key_list = 5;
  for (int i = 0; i < this->army_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->army_key_list(i), output);
  }

}

int PlanetGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 node_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->node_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->node_id_list(i));
    }
    total_size += 1 * this->node_id_list_size() + data_size;
  }

  // repeated string element_global_key_list = 3;
  total_size += 1 * this->element_global_key_list_size();
  for (int i = 0; i < this->element_global_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->element_global_key_list(i));
  }

  // repeated string army_line_key_list = 4;
  total_size += 1 * this->army_line_key_list_size();
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->army_line_key_list(i));
  }

  // repeated string army_key_list = 5;
  total_size += 1 * this->army_key_list_size();
  for (int i = 0; i < this->army_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->army_key_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetGetReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetGetReq*>(&from));
}

void PlanetGetReq::MergeFrom(const PlanetGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_list_.MergeFrom(from.node_id_list_);
  element_global_key_list_.MergeFrom(from.element_global_key_list_);
  army_line_key_list_.MergeFrom(from.army_line_key_list_);
  army_key_list_.MergeFrom(from.army_key_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void PlanetGetReq::CopyFrom(const PlanetGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetGetReq::Swap(PlanetGetReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    node_id_list_.Swap(&other->node_id_list_);
    element_global_key_list_.Swap(&other->element_global_key_list_);
    army_line_key_list_.Swap(&other->army_line_key_list_);
    army_key_list_.Swap(&other->army_key_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetGetReq::GetTypeName() const {
  return "PlanetGetReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetGetResp::kResultFieldNumber;
const int PlanetGetResp::kUserSyncFieldNumber;
const int PlanetGetResp::kTypeFieldNumber;
const int PlanetGetResp::kPlanetUserFieldNumber;
const int PlanetGetResp::kNodeListFieldNumber;
const int PlanetGetResp::kElementListFieldNumber;
const int PlanetGetResp::kPlanetArmyLineListFieldNumber;
const int PlanetGetResp::kMailUserListFieldNumber;
const int PlanetGetResp::kArmyInfoListFieldNumber;
const int PlanetGetResp::kArmyListFieldNumber;
#endif  // !_MSC_VER

PlanetGetResp::PlanetGetResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetGetResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  planet_user_ = const_cast< ::PlanetUser*>(
      ::PlanetUser::internal_default_instance());
#else
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
#endif
}

PlanetGetResp::PlanetGetResp(const PlanetGetResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetGetResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  type_ = 0;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetGetResp::~PlanetGetResp() {
  SharedDtor();
}

void PlanetGetResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetGetResp& PlanetGetResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetGetResp* PlanetGetResp::default_instance_ = NULL;

PlanetGetResp* PlanetGetResp::New() const {
  return new PlanetGetResp;
}

void PlanetGetResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    type_ = 0;
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  node_list_.Clear();
  element_list_.Clear();
  planet_army_line_list_.Clear();
  mail_user_list_.Clear();
  army_info_list_.Clear();
  army_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_node_list;
        break;
      }

      // repeated .PlanetNode node_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_node_list;
        if (input->ExpectTag(50)) goto parse_element_list;
        break;
      }

      // repeated .PlanetElement element_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_element_list;
        if (input->ExpectTag(58)) goto parse_planet_army_line_list;
        break;
      }

      // repeated .PlanetArmyLine planet_army_line_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_army_line_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_planet_army_line_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_planet_army_line_list;
        if (input->ExpectTag(66)) goto parse_mail_user_list;
        break;
      }

      // repeated .PlanetMailUser mail_user_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mail_user_list;
        if (input->ExpectTag(74)) goto parse_army_info_list;
        break;
      }

      // repeated .PlanetArmyInfo army_info_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_army_info_list;
        if (input->ExpectTag(82)) goto parse_army_list;
        break;
      }

      // repeated .PlanetArmy army_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_army_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional .PlanetUser planet_user = 4;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->planet_user(), output);
  }

  // repeated .PlanetNode node_list = 5;
  for (int i = 0; i < this->node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->node_list(i), output);
  }

  // repeated .PlanetElement element_list = 6;
  for (int i = 0; i < this->element_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->element_list(i), output);
  }

  // repeated .PlanetArmyLine planet_army_line_list = 7;
  for (int i = 0; i < this->planet_army_line_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->planet_army_line_list(i), output);
  }

  // repeated .PlanetMailUser mail_user_list = 8;
  for (int i = 0; i < this->mail_user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->mail_user_list(i), output);
  }

  // repeated .PlanetArmyInfo army_info_list = 9;
  for (int i = 0; i < this->army_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->army_info_list(i), output);
  }

  // repeated .PlanetArmy army_list = 10;
  for (int i = 0; i < this->army_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->army_list(i), output);
  }

}

int PlanetGetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .PlanetUser planet_user = 4;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  // repeated .PlanetNode node_list = 5;
  total_size += 1 * this->node_list_size();
  for (int i = 0; i < this->node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_list(i));
  }

  // repeated .PlanetElement element_list = 6;
  total_size += 1 * this->element_list_size();
  for (int i = 0; i < this->element_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element_list(i));
  }

  // repeated .PlanetArmyLine planet_army_line_list = 7;
  total_size += 1 * this->planet_army_line_list_size();
  for (int i = 0; i < this->planet_army_line_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planet_army_line_list(i));
  }

  // repeated .PlanetMailUser mail_user_list = 8;
  total_size += 1 * this->mail_user_list_size();
  for (int i = 0; i < this->mail_user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_user_list(i));
  }

  // repeated .PlanetArmyInfo army_info_list = 9;
  total_size += 1 * this->army_info_list_size();
  for (int i = 0; i < this->army_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army_info_list(i));
  }

  // repeated .PlanetArmy army_list = 10;
  total_size += 1 * this->army_list_size();
  for (int i = 0; i < this->army_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetGetResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetGetResp*>(&from));
}

void PlanetGetResp::MergeFrom(const PlanetGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_list_.MergeFrom(from.node_list_);
  element_list_.MergeFrom(from.element_list_);
  planet_army_line_list_.MergeFrom(from.planet_army_line_list_);
  mail_user_list_.MergeFrom(from.mail_user_list_);
  army_info_list_.MergeFrom(from.army_info_list_);
  army_list_.MergeFrom(from.army_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
}

void PlanetGetResp::CopyFrom(const PlanetGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetGetResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  for (int i = 0; i < node_list_size(); i++) {
    if (!this->node_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < element_list_size(); i++) {
    if (!this->element_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < planet_army_line_list_size(); i++) {
    if (!this->planet_army_line_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mail_user_list_size(); i++) {
    if (!this->mail_user_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < army_info_list_size(); i++) {
    if (!this->army_info_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < army_list_size(); i++) {
    if (!this->army_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetGetResp::Swap(PlanetGetResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(type_, other->type_);
    std::swap(planet_user_, other->planet_user_);
    node_list_.Swap(&other->node_list_);
    element_list_.Swap(&other->element_list_);
    planet_army_line_list_.Swap(&other->planet_army_line_list_);
    mail_user_list_.Swap(&other->mail_user_list_);
    army_info_list_.Swap(&other->army_info_list_);
    army_list_.Swap(&other->army_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetGetResp::GetTypeName() const {
  return "PlanetGetResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetCollectReq::kResGlobalKeyFieldNumber;
const int PlanetCollectReq::kLineupFieldNumber;
#endif  // !_MSC_VER

PlanetCollectReq::PlanetCollectReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetCollectReq::InitAsDefaultInstance() {
}

PlanetCollectReq::PlanetCollectReq(const PlanetCollectReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCollectReq::SharedCtor() {
  _cached_size_ = 0;
  res_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCollectReq::~PlanetCollectReq() {
  SharedDtor();
}

void PlanetCollectReq::SharedDtor() {
  if (res_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete res_global_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetCollectReq& PlanetCollectReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetCollectReq* PlanetCollectReq::default_instance_ = NULL;

PlanetCollectReq* PlanetCollectReq::New() const {
  return new PlanetCollectReq;
}

void PlanetCollectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_res_global_key()) {
      if (res_global_key_ != &::google::protobuf::internal::kEmptyString) {
        res_global_key_->clear();
      }
    }
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string res_global_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_global_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string res_global_key = 1;
  if (has_res_global_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->res_global_key(), output);
  }

  // repeated int32 lineup = 2;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lineup(i), output);
  }

}

int PlanetCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string res_global_key = 1;
    if (has_res_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_global_key());
    }

  }
  // repeated int32 lineup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCollectReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetCollectReq*>(&from));
}

void PlanetCollectReq::MergeFrom(const PlanetCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res_global_key()) {
      set_res_global_key(from.res_global_key());
    }
  }
}

void PlanetCollectReq::CopyFrom(const PlanetCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCollectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetCollectReq::Swap(PlanetCollectReq* other) {
  if (other != this) {
    std::swap(res_global_key_, other->res_global_key_);
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetCollectReq::GetTypeName() const {
  return "PlanetCollectReq";
}


// ===================================================================

bool PlanetCollectResp_PlanetCollectRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::OK;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::FAIL;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::ERROR_TYPE;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::REQ_ERROR;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::LINEUP_ERROR;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::NO_DURABLE;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::FIXING;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::OUTING;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::ARMY_NUM_MAX;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::MY_RES;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::RES_MAX_LOAD;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::ERROR_GROUP;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::NO_STORAGE;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::ALREADY_COLLECT;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::PlanetCollectRet_MIN;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::PlanetCollectRet_MAX;
const int PlanetCollectResp::PlanetCollectRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlanetCollectResp::kResultFieldNumber;
const int PlanetCollectResp::kUserSyncFieldNumber;
const int PlanetCollectResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetCollectResp::PlanetCollectResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetCollectResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  planet_user_ = const_cast< ::PlanetUser*>(
      ::PlanetUser::internal_default_instance());
#else
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
#endif
}

PlanetCollectResp::PlanetCollectResp(const PlanetCollectResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCollectResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCollectResp::~PlanetCollectResp() {
  SharedDtor();
}

void PlanetCollectResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetCollectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetCollectResp& PlanetCollectResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetCollectResp* PlanetCollectResp::default_instance_ = NULL;

PlanetCollectResp* PlanetCollectResp::New() const {
  return new PlanetCollectResp;
}

void PlanetCollectResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetCollectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetCollectResp.PlanetCollectRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlanetCollectResp_PlanetCollectRet_IsValid(value)) {
            set_result(static_cast< ::PlanetCollectResp_PlanetCollectRet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCollectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetCollectResp.PlanetCollectRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->planet_user(), output);
  }

}

int PlanetCollectResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetCollectResp.PlanetCollectRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCollectResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetCollectResp*>(&from));
}

void PlanetCollectResp::MergeFrom(const PlanetCollectResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
}

void PlanetCollectResp::CopyFrom(const PlanetCollectResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCollectResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetCollectResp::Swap(PlanetCollectResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetCollectResp::GetTypeName() const {
  return "PlanetCollectResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRideBackReq::kTypeFieldNumber;
const int PlanetRideBackReq::kArmyGuidFieldNumber;
#endif  // !_MSC_VER

PlanetRideBackReq::PlanetRideBackReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetRideBackReq::InitAsDefaultInstance() {
}

PlanetRideBackReq::PlanetRideBackReq(const PlanetRideBackReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRideBackReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRideBackReq::~PlanetRideBackReq() {
  SharedDtor();
}

void PlanetRideBackReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetRideBackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetRideBackReq& PlanetRideBackReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetRideBackReq* PlanetRideBackReq::default_instance_ = NULL;

PlanetRideBackReq* PlanetRideBackReq::New() const {
  return new PlanetRideBackReq;
}

void PlanetRideBackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  army_guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetRideBackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_army_guid;
        break;
      }

      // repeated int32 army_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_army_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_army_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_army_guid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRideBackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 army_guid = 2;
  for (int i = 0; i < this->army_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->army_guid(i), output);
  }

}

int PlanetRideBackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 army_guid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->army_guid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->army_guid(i));
    }
    total_size += 1 * this->army_guid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRideBackReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetRideBackReq*>(&from));
}

void PlanetRideBackReq::MergeFrom(const PlanetRideBackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  army_guid_.MergeFrom(from.army_guid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void PlanetRideBackReq::CopyFrom(const PlanetRideBackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRideBackReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetRideBackReq::Swap(PlanetRideBackReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    army_guid_.Swap(&other->army_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetRideBackReq::GetTypeName() const {
  return "PlanetRideBackReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRideBackResp::kResultFieldNumber;
const int PlanetRideBackResp::kUserSyncFieldNumber;
const int PlanetRideBackResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetRideBackResp::PlanetRideBackResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetRideBackResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  planet_user_ = const_cast< ::PlanetUser*>(
      ::PlanetUser::internal_default_instance());
#else
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
#endif
}

PlanetRideBackResp::PlanetRideBackResp(const PlanetRideBackResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRideBackResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRideBackResp::~PlanetRideBackResp() {
  SharedDtor();
}

void PlanetRideBackResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetRideBackResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetRideBackResp& PlanetRideBackResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetRideBackResp* PlanetRideBackResp::default_instance_ = NULL;

PlanetRideBackResp* PlanetRideBackResp::New() const {
  return new PlanetRideBackResp;
}

void PlanetRideBackResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetRideBackResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRideBackResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->planet_user(), output);
  }

}

int PlanetRideBackResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRideBackResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetRideBackResp*>(&from));
}

void PlanetRideBackResp::MergeFrom(const PlanetRideBackResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
}

void PlanetRideBackResp::CopyFrom(const PlanetRideBackResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRideBackResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetRideBackResp::Swap(PlanetRideBackResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetRideBackResp::GetTypeName() const {
  return "PlanetRideBackResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRuinsReq::kElementGlobalKeyFieldNumber;
const int PlanetRuinsReq::kLineupFieldNumber;
#endif  // !_MSC_VER

PlanetRuinsReq::PlanetRuinsReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetRuinsReq::InitAsDefaultInstance() {
}

PlanetRuinsReq::PlanetRuinsReq(const PlanetRuinsReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRuinsReq::SharedCtor() {
  _cached_size_ = 0;
  element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRuinsReq::~PlanetRuinsReq() {
  SharedDtor();
}

void PlanetRuinsReq::SharedDtor() {
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete element_global_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetRuinsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetRuinsReq& PlanetRuinsReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetRuinsReq* PlanetRuinsReq::default_instance_ = NULL;

PlanetRuinsReq* PlanetRuinsReq::New() const {
  return new PlanetRuinsReq;
}

void PlanetRuinsReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_element_global_key()) {
      if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
        element_global_key_->clear();
      }
    }
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetRuinsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string element_global_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_global_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRuinsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string element_global_key = 1;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->element_global_key(), output);
  }

  // repeated int32 lineup = 2;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lineup(i), output);
  }

}

int PlanetRuinsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string element_global_key = 1;
    if (has_element_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_global_key());
    }

  }
  // repeated int32 lineup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRuinsReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetRuinsReq*>(&from));
}

void PlanetRuinsReq::MergeFrom(const PlanetRuinsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_element_global_key()) {
      set_element_global_key(from.element_global_key());
    }
  }
}

void PlanetRuinsReq::CopyFrom(const PlanetRuinsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRuinsReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetRuinsReq::Swap(PlanetRuinsReq* other) {
  if (other != this) {
    std::swap(element_global_key_, other->element_global_key_);
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetRuinsReq::GetTypeName() const {
  return "PlanetRuinsReq";
}


// ===================================================================

bool PlanetRuinsResp_PlanetRuinsRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::OK;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::FAIL;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::ERROR_TYPE;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::REQ_ERROR;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::LINEUP_ERROR;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::NO_DURABLE;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::FIXING;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::OUTING;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::ARMY_NUM_MAX;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::NO_TYPE;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::NO_STRENGTH;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::PlanetRuinsRet_MIN;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::PlanetRuinsRet_MAX;
const int PlanetRuinsResp::PlanetRuinsRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlanetRuinsResp::kResultFieldNumber;
const int PlanetRuinsResp::kUserSyncFieldNumber;
const int PlanetRuinsResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetRuinsResp::PlanetRuinsResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetRuinsResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  planet_user_ = const_cast< ::PlanetUser*>(
      ::PlanetUser::internal_default_instance());
#else
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
#endif
}

PlanetRuinsResp::PlanetRuinsResp(const PlanetRuinsResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRuinsResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRuinsResp::~PlanetRuinsResp() {
  SharedDtor();
}

void PlanetRuinsResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetRuinsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetRuinsResp& PlanetRuinsResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetRuinsResp* PlanetRuinsResp::default_instance_ = NULL;

PlanetRuinsResp* PlanetRuinsResp::New() const {
  return new PlanetRuinsResp;
}

void PlanetRuinsResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetRuinsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetRuinsResp.PlanetRuinsRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlanetRuinsResp_PlanetRuinsRet_IsValid(value)) {
            set_result(static_cast< ::PlanetRuinsResp_PlanetRuinsRet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRuinsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetRuinsResp.PlanetRuinsRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->planet_user(), output);
  }

}

int PlanetRuinsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetRuinsResp.PlanetRuinsRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRuinsResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetRuinsResp*>(&from));
}

void PlanetRuinsResp::MergeFrom(const PlanetRuinsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
}

void PlanetRuinsResp::CopyFrom(const PlanetRuinsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRuinsResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetRuinsResp::Swap(PlanetRuinsResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetRuinsResp::GetTypeName() const {
  return "PlanetRuinsResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRaidReq::kTypeListFieldNumber;
const int PlanetRaidReq::kElementGlobalKeyFieldNumber;
const int PlanetRaidReq::kLineupFieldNumber;
const int PlanetRaidReq::kArmyKeyFieldNumber;
const int PlanetRaidReq::kMassLevelFieldNumber;
#endif  // !_MSC_VER

PlanetRaidReq::PlanetRaidReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetRaidReq::InitAsDefaultInstance() {
}

PlanetRaidReq::PlanetRaidReq(const PlanetRaidReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRaidReq::SharedCtor() {
  _cached_size_ = 0;
  element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mass_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRaidReq::~PlanetRaidReq() {
  SharedDtor();
}

void PlanetRaidReq::SharedDtor() {
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete element_global_key_;
  }
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetRaidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetRaidReq& PlanetRaidReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetRaidReq* PlanetRaidReq::default_instance_ = NULL;

PlanetRaidReq* PlanetRaidReq::New() const {
  return new PlanetRaidReq;
}

void PlanetRaidReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_element_global_key()) {
      if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
        element_global_key_->clear();
      }
    }
    if (has_army_key()) {
      if (army_key_ != &::google::protobuf::internal::kEmptyString) {
        army_key_->clear();
      }
    }
    mass_level_ = 0;
  }
  type_list_.Clear();
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetRaidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 type_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_type_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type_list;
        if (input->ExpectTag(18)) goto parse_element_global_key;
        break;
      }

      // required string element_global_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_global_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        if (input->ExpectTag(34)) goto parse_army_key;
        break;
      }

      // optional string army_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_army_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mass_level;
        break;
      }

      // optional int32 mass_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mass_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_level_)));
          set_has_mass_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRaidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 type_list = 1;
  for (int i = 0; i < this->type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->type_list(i), output);
  }

  // required string element_global_key = 2;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->element_global_key(), output);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lineup(i), output);
  }

  // optional string army_key = 4;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->army_key(), output);
  }

  // optional int32 mass_level = 5;
  if (has_mass_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mass_level(), output);
  }

}

int PlanetRaidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string element_global_key = 2;
    if (has_element_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_global_key());
    }

    // optional string army_key = 4;
    if (has_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->army_key());
    }

    // optional int32 mass_level = 5;
    if (has_mass_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_level());
    }

  }
  // repeated int32 type_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type_list(i));
    }
    total_size += 1 * this->type_list_size() + data_size;
  }

  // repeated int32 lineup = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRaidReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetRaidReq*>(&from));
}

void PlanetRaidReq::MergeFrom(const PlanetRaidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_list_.MergeFrom(from.type_list_);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_element_global_key()) {
      set_element_global_key(from.element_global_key());
    }
    if (from.has_army_key()) {
      set_army_key(from.army_key());
    }
    if (from.has_mass_level()) {
      set_mass_level(from.mass_level());
    }
  }
}

void PlanetRaidReq::CopyFrom(const PlanetRaidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRaidReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PlanetRaidReq::Swap(PlanetRaidReq* other) {
  if (other != this) {
    type_list_.Swap(&other->type_list_);
    std::swap(element_global_key_, other->element_global_key_);
    lineup_.Swap(&other->lineup_);
    std::swap(army_key_, other->army_key_);
    std::swap(mass_level_, other->mass_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetRaidReq::GetTypeName() const {
  return "PlanetRaidReq";
}


// ===================================================================

bool PlanetRaidResp_PlanetRaidRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::OK;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::FAIL;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ERROR_TYPE;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::REQ_ERROR;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::LINEUP_ERROR;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_DURABLE;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::FIXING;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::OUTING;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ARMY_NUM_MAX;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NOT_OPEN;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ERROR_GROUP;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ERROR_STATUS;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_STRENGTH;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_GROUP;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ALREADY_GUARDE;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ALREADY_ACCOMPANY;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ALREADY_REQ_ACCOMPANY;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_GROUP_POWER;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_BASE_POWER;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::SHIELD;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_LAST_CITY_1;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_LAST_CITY_2;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_LAST_CITY_3;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::PlanetRaidRet_MIN;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::PlanetRaidRet_MAX;
const int PlanetRaidResp::PlanetRaidRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlanetRaidResp::kResultFieldNumber;
const int PlanetRaidResp::kUserSyncFieldNumber;
const int PlanetRaidResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetRaidResp::PlanetRaidResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetRaidResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  planet_user_ = const_cast< ::PlanetUser*>(
      ::PlanetUser::internal_default_instance());
#else
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
#endif
}

PlanetRaidResp::PlanetRaidResp(const PlanetRaidResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRaidResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRaidResp::~PlanetRaidResp() {
  SharedDtor();
}

void PlanetRaidResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetRaidResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetRaidResp& PlanetRaidResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetRaidResp* PlanetRaidResp::default_instance_ = NULL;

PlanetRaidResp* PlanetRaidResp::New() const {
  return new PlanetRaidResp;
}

void PlanetRaidResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetRaidResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetRaidResp.PlanetRaidRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlanetRaidResp_PlanetRaidRet_IsValid(value)) {
            set_result(static_cast< ::PlanetRaidResp_PlanetRaidRet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRaidResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetRaidResp.PlanetRaidRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->planet_user(), output);
  }

}

int PlanetRaidResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetRaidResp.PlanetRaidRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRaidResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetRaidResp*>(&from));
}

void PlanetRaidResp::MergeFrom(const PlanetRaidResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
}

void PlanetRaidResp::CopyFrom(const PlanetRaidResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRaidResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetRaidResp::Swap(PlanetRaidResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetRaidResp::GetTypeName() const {
  return "PlanetRaidResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetSpeedUpReq::kArmyKeyFieldNumber;
const int PlanetSpeedUpReq::kTypeFieldNumber;
#endif  // !_MSC_VER

PlanetSpeedUpReq::PlanetSpeedUpReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetSpeedUpReq::InitAsDefaultInstance() {
}

PlanetSpeedUpReq::PlanetSpeedUpReq(const PlanetSpeedUpReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetSpeedUpReq::SharedCtor() {
  _cached_size_ = 0;
  army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetSpeedUpReq::~PlanetSpeedUpReq() {
  SharedDtor();
}

void PlanetSpeedUpReq::SharedDtor() {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetSpeedUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetSpeedUpReq& PlanetSpeedUpReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetSpeedUpReq* PlanetSpeedUpReq::default_instance_ = NULL;

PlanetSpeedUpReq* PlanetSpeedUpReq::New() const {
  return new PlanetSpeedUpReq;
}

void PlanetSpeedUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_army_key()) {
      if (army_key_ != &::google::protobuf::internal::kEmptyString) {
        army_key_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetSpeedUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string army_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_army_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetSpeedUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string army_key = 1;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->army_key(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

}

int PlanetSpeedUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string army_key = 1;
    if (has_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->army_key());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetSpeedUpReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetSpeedUpReq*>(&from));
}

void PlanetSpeedUpReq::MergeFrom(const PlanetSpeedUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_key()) {
      set_army_key(from.army_key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void PlanetSpeedUpReq::CopyFrom(const PlanetSpeedUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetSpeedUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlanetSpeedUpReq::Swap(PlanetSpeedUpReq* other) {
  if (other != this) {
    std::swap(army_key_, other->army_key_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetSpeedUpReq::GetTypeName() const {
  return "PlanetSpeedUpReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetSpeedUpResp::kResultFieldNumber;
const int PlanetSpeedUpResp::kTypeFieldNumber;
const int PlanetSpeedUpResp::kUserSyncFieldNumber;
const int PlanetSpeedUpResp::kArmyFieldNumber;
#endif  // !_MSC_VER

PlanetSpeedUpResp::PlanetSpeedUpResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetSpeedUpResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  army_ = const_cast< ::PlanetArmy*>(
      ::PlanetArmy::internal_default_instance());
#else
  army_ = const_cast< ::PlanetArmy*>(&::PlanetArmy::default_instance());
#endif
}

PlanetSpeedUpResp::PlanetSpeedUpResp(const PlanetSpeedUpResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetSpeedUpResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  user_sync_ = NULL;
  army_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetSpeedUpResp::~PlanetSpeedUpResp() {
  SharedDtor();
}

void PlanetSpeedUpResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
    delete army_;
  }
}

void PlanetSpeedUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetSpeedUpResp& PlanetSpeedUpResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetSpeedUpResp* PlanetSpeedUpResp::default_instance_ = NULL;

PlanetSpeedUpResp* PlanetSpeedUpResp::New() const {
  return new PlanetSpeedUpResp;
}

void PlanetSpeedUpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    type_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_army()) {
      if (army_ != NULL) army_->::PlanetArmy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetSpeedUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_army;
        break;
      }

      // optional .PlanetArmy army = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetSpeedUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .UserSync user_sync = 3;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_sync(), output);
  }

  // optional .PlanetArmy army = 4;
  if (has_army()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->army(), output);
  }

}

int PlanetSpeedUpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .UserSync user_sync = 3;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetArmy army = 4;
    if (has_army()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetSpeedUpResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetSpeedUpResp*>(&from));
}

void PlanetSpeedUpResp::MergeFrom(const PlanetSpeedUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_army()) {
      mutable_army()->::PlanetArmy::MergeFrom(from.army());
    }
  }
}

void PlanetSpeedUpResp::CopyFrom(const PlanetSpeedUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetSpeedUpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_army()) {
    if (!this->army().IsInitialized()) return false;
  }
  return true;
}

void PlanetSpeedUpResp::Swap(PlanetSpeedUpResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(army_, other->army_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetSpeedUpResp::GetTypeName() const {
  return "PlanetSpeedUpResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetShieldReq::kItemIdFieldNumber;
#endif  // !_MSC_VER

PlanetShieldReq::PlanetShieldReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetShieldReq::InitAsDefaultInstance() {
}

PlanetShieldReq::PlanetShieldReq(const PlanetShieldReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetShieldReq::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetShieldReq::~PlanetShieldReq() {
  SharedDtor();
}

void PlanetShieldReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetShieldReq& PlanetShieldReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetShieldReq* PlanetShieldReq::default_instance_ = NULL;

PlanetShieldReq* PlanetShieldReq::New() const {
  return new PlanetShieldReq;
}

void PlanetShieldReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

}

int PlanetShieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetShieldReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetShieldReq*>(&from));
}

void PlanetShieldReq::MergeFrom(const PlanetShieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
}

void PlanetShieldReq::CopyFrom(const PlanetShieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetShieldReq::Swap(PlanetShieldReq* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetShieldReq::GetTypeName() const {
  return "PlanetShieldReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetShieldResp::kResultFieldNumber;
const int PlanetShieldResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

PlanetShieldResp::PlanetShieldResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetShieldResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

PlanetShieldResp::PlanetShieldResp(const PlanetShieldResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetShieldResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetShieldResp::~PlanetShieldResp() {
  SharedDtor();
}

void PlanetShieldResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void PlanetShieldResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetShieldResp& PlanetShieldResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetShieldResp* PlanetShieldResp::default_instance_ = NULL;

PlanetShieldResp* PlanetShieldResp::New() const {
  return new PlanetShieldResp;
}

void PlanetShieldResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetShieldResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetShieldResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

}

int PlanetShieldResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetShieldResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetShieldResp*>(&from));
}

void PlanetShieldResp::MergeFrom(const PlanetShieldResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
}

void PlanetShieldResp::CopyFrom(const PlanetShieldResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetShieldResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void PlanetShieldResp::Swap(PlanetShieldResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetShieldResp::GetTypeName() const {
  return "PlanetShieldResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMoveBaseReq::kTypeFieldNumber;
const int PlanetMoveBaseReq::kPosFieldNumber;
#endif  // !_MSC_VER

PlanetMoveBaseReq::PlanetMoveBaseReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetMoveBaseReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos_ = const_cast< ::PlanetPoint*>(
      ::PlanetPoint::internal_default_instance());
#else
  pos_ = const_cast< ::PlanetPoint*>(&::PlanetPoint::default_instance());
#endif
}

PlanetMoveBaseReq::PlanetMoveBaseReq(const PlanetMoveBaseReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMoveBaseReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMoveBaseReq::~PlanetMoveBaseReq() {
  SharedDtor();
}

void PlanetMoveBaseReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pos_;
  }
}

void PlanetMoveBaseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetMoveBaseReq& PlanetMoveBaseReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetMoveBaseReq* PlanetMoveBaseReq::default_instance_ = NULL;

PlanetMoveBaseReq* PlanetMoveBaseReq::New() const {
  return new PlanetMoveBaseReq;
}

void PlanetMoveBaseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PlanetPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetMoveBaseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .PlanetPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMoveBaseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .PlanetPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->pos(), output);
  }

}

int PlanetMoveBaseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .PlanetPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMoveBaseReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetMoveBaseReq*>(&from));
}

void PlanetMoveBaseReq::MergeFrom(const PlanetMoveBaseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::PlanetPoint::MergeFrom(from.pos());
    }
  }
}

void PlanetMoveBaseReq::CopyFrom(const PlanetMoveBaseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMoveBaseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void PlanetMoveBaseReq::Swap(PlanetMoveBaseReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetMoveBaseReq::GetTypeName() const {
  return "PlanetMoveBaseReq";
}


// ===================================================================

bool PlanetMoveBaseResp_PlanetMoveBaseRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::OK;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::FAIL;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::NO_ITEM;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::HAS_ELEMENT;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::ERROR_NATION;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::ERROR_CITY;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::ERROR_POS;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::PlanetMoveBaseRet_MIN;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::PlanetMoveBaseRet_MAX;
const int PlanetMoveBaseResp::PlanetMoveBaseRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlanetMoveBaseResp::kResultFieldNumber;
const int PlanetMoveBaseResp::kUserSyncFieldNumber;
const int PlanetMoveBaseResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetMoveBaseResp::PlanetMoveBaseResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetMoveBaseResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  planet_user_ = const_cast< ::PlanetUser*>(
      ::PlanetUser::internal_default_instance());
#else
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
#endif
}

PlanetMoveBaseResp::PlanetMoveBaseResp(const PlanetMoveBaseResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMoveBaseResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMoveBaseResp::~PlanetMoveBaseResp() {
  SharedDtor();
}

void PlanetMoveBaseResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetMoveBaseResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetMoveBaseResp& PlanetMoveBaseResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetMoveBaseResp* PlanetMoveBaseResp::default_instance_ = NULL;

PlanetMoveBaseResp* PlanetMoveBaseResp::New() const {
  return new PlanetMoveBaseResp;
}

void PlanetMoveBaseResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetMoveBaseResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetMoveBaseResp.PlanetMoveBaseRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlanetMoveBaseResp_PlanetMoveBaseRet_IsValid(value)) {
            set_result(static_cast< ::PlanetMoveBaseResp_PlanetMoveBaseRet >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMoveBaseResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetMoveBaseResp.PlanetMoveBaseRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->planet_user(), output);
  }

}

int PlanetMoveBaseResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetMoveBaseResp.PlanetMoveBaseRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMoveBaseResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetMoveBaseResp*>(&from));
}

void PlanetMoveBaseResp::MergeFrom(const PlanetMoveBaseResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
}

void PlanetMoveBaseResp::CopyFrom(const PlanetMoveBaseResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMoveBaseResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetMoveBaseResp::Swap(PlanetMoveBaseResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetMoveBaseResp::GetTypeName() const {
  return "PlanetMoveBaseResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMarkReq::kTypeFieldNumber;
const int PlanetMarkReq::kNameFieldNumber;
const int PlanetMarkReq::kPosFieldNumber;
#endif  // !_MSC_VER

PlanetMarkReq::PlanetMarkReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetMarkReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos_ = const_cast< ::PlanetPoint*>(
      ::PlanetPoint::internal_default_instance());
#else
  pos_ = const_cast< ::PlanetPoint*>(&::PlanetPoint::default_instance());
#endif
}

PlanetMarkReq::PlanetMarkReq(const PlanetMarkReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMarkReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMarkReq::~PlanetMarkReq() {
  SharedDtor();
}

void PlanetMarkReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pos_;
  }
}

void PlanetMarkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetMarkReq& PlanetMarkReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetMarkReq* PlanetMarkReq::default_instance_ = NULL;

PlanetMarkReq* PlanetMarkReq::New() const {
  return new PlanetMarkReq;
}

void PlanetMarkReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PlanetPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetMarkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .PlanetPoint pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMarkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .PlanetPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->pos(), output);
  }

}

int PlanetMarkReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .PlanetPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMarkReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetMarkReq*>(&from));
}

void PlanetMarkReq::MergeFrom(const PlanetMarkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pos()) {
      mutable_pos()->::PlanetPoint::MergeFrom(from.pos());
    }
  }
}

void PlanetMarkReq::CopyFrom(const PlanetMarkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMarkReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void PlanetMarkReq::Swap(PlanetMarkReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetMarkReq::GetTypeName() const {
  return "PlanetMarkReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMarkResp::kResultFieldNumber;
const int PlanetMarkResp::kUserSyncFieldNumber;
const int PlanetMarkResp::kMarkListFieldNumber;
#endif  // !_MSC_VER

PlanetMarkResp::PlanetMarkResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetMarkResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_sync_ = const_cast< ::UserSync*>(
      ::UserSync::internal_default_instance());
#else
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
#endif
}

PlanetMarkResp::PlanetMarkResp(const PlanetMarkResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMarkResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMarkResp::~PlanetMarkResp() {
  SharedDtor();
}

void PlanetMarkResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_sync_;
  }
}

void PlanetMarkResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetMarkResp& PlanetMarkResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetMarkResp* PlanetMarkResp::default_instance_ = NULL;

PlanetMarkResp* PlanetMarkResp::New() const {
  return new PlanetMarkResp;
}

void PlanetMarkResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  mark_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetMarkResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mark_list;
        break;
      }

      // repeated .PlanetMark mark_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mark_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mark_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMarkResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_sync(), output);
  }

  // repeated .PlanetMark mark_list = 3;
  for (int i = 0; i < this->mark_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->mark_list(i), output);
  }

}

int PlanetMarkResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .PlanetMark mark_list = 3;
  total_size += 1 * this->mark_list_size();
  for (int i = 0; i < this->mark_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mark_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMarkResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetMarkResp*>(&from));
}

void PlanetMarkResp::MergeFrom(const PlanetMarkResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_list_.MergeFrom(from.mark_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
}

void PlanetMarkResp::CopyFrom(const PlanetMarkResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMarkResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < mark_list_size(); i++) {
    if (!this->mark_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetMarkResp::Swap(PlanetMarkResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    mark_list_.Swap(&other->mark_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetMarkResp::GetTypeName() const {
  return "PlanetMarkResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetTowerReq::kTypeFieldNumber;
const int PlanetTowerReq::kElementGlobalKeyFieldNumber;
#endif  // !_MSC_VER

PlanetTowerReq::PlanetTowerReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetTowerReq::InitAsDefaultInstance() {
}

PlanetTowerReq::PlanetTowerReq(const PlanetTowerReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetTowerReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetTowerReq::~PlanetTowerReq() {
  SharedDtor();
}

void PlanetTowerReq::SharedDtor() {
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete element_global_key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetTowerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetTowerReq& PlanetTowerReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetTowerReq* PlanetTowerReq::default_instance_ = NULL;

PlanetTowerReq* PlanetTowerReq::New() const {
  return new PlanetTowerReq;
}

void PlanetTowerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_element_global_key()) {
      if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
        element_global_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetTowerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element_global_key;
        break;
      }

      // required string element_global_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_global_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetTowerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string element_global_key = 2;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->element_global_key(), output);
  }

}

int PlanetTowerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string element_global_key = 2;
    if (has_element_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_global_key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetTowerReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetTowerReq*>(&from));
}

void PlanetTowerReq::MergeFrom(const PlanetTowerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_element_global_key()) {
      set_element_global_key(from.element_global_key());
    }
  }
}

void PlanetTowerReq::CopyFrom(const PlanetTowerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetTowerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlanetTowerReq::Swap(PlanetTowerReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(element_global_key_, other->element_global_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetTowerReq::GetTypeName() const {
  return "PlanetTowerReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetTowerResp::kResultFieldNumber;
const int PlanetTowerResp::kElementFieldNumber;
#endif  // !_MSC_VER

PlanetTowerResp::PlanetTowerResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetTowerResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  element_ = const_cast< ::PlanetElement*>(
      ::PlanetElement::internal_default_instance());
#else
  element_ = const_cast< ::PlanetElement*>(&::PlanetElement::default_instance());
#endif
}

PlanetTowerResp::PlanetTowerResp(const PlanetTowerResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetTowerResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  element_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetTowerResp::~PlanetTowerResp() {
  SharedDtor();
}

void PlanetTowerResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete element_;
  }
}

void PlanetTowerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetTowerResp& PlanetTowerResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetTowerResp* PlanetTowerResp::default_instance_ = NULL;

PlanetTowerResp* PlanetTowerResp::New() const {
  return new PlanetTowerResp;
}

void PlanetTowerResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_element()) {
      if (element_ != NULL) element_->::PlanetElement::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetTowerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element;
        break;
      }

      // optional .PlanetElement element = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetTowerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .PlanetElement element = 2;
  if (has_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->element(), output);
  }

}

int PlanetTowerResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .PlanetElement element = 2;
    if (has_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetTowerResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetTowerResp*>(&from));
}

void PlanetTowerResp::MergeFrom(const PlanetTowerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_element()) {
      mutable_element()->::PlanetElement::MergeFrom(from.element());
    }
  }
}

void PlanetTowerResp::CopyFrom(const PlanetTowerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetTowerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_element()) {
    if (!this->element().IsInitialized()) return false;
  }
  return true;
}

void PlanetTowerResp::Swap(PlanetTowerResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(element_, other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetTowerResp::GetTypeName() const {
  return "PlanetTowerResp";
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetWangZuoTitleReq::kTypeFieldNumber;
const int PlanetWangZuoTitleReq::kUserNameFieldNumber;
const int PlanetWangZuoTitleReq::kTitleFieldNumber;
#endif  // !_MSC_VER

PlanetWangZuoTitleReq::PlanetWangZuoTitleReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlanetWangZuoTitleReq::InitAsDefaultInstance() {
}

PlanetWangZuoTitleReq::PlanetWangZuoTitleReq(const PlanetWangZuoTitleReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetWangZuoTitleReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetWangZuoTitleReq::~PlanetWangZuoTitleReq() {
  SharedDtor();
}

void PlanetWangZuoTitleReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlanetWangZuoTitleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlanetWangZuoTitleReq& PlanetWangZuoTitleReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PlanetWangZuoTitleReq* PlanetWangZuoTitleReq::default_instance_ = NULL;

PlanetWangZuoTitleReq* PlanetWangZuoTitleReq::New() const {
  return new PlanetWangZuoTitleReq;
}

void PlanetWangZuoTitleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    title_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlanetWangZuoTitleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_title;
        break;
      }

      // optional int32 title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetWangZuoTitleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // optional int32 title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->title(), output);
  }

}

int PlanetWangZuoTitleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int32 title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetWangZuoTitleReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlanetWangZuoTitleReq*>(&from));
}

void PlanetWangZuoTitleReq::MergeFrom(const PlanetWangZuoTitleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
}

void PlanetWangZuoTitleReq::CopyFrom(const PlanetWangZuoTitleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetWangZuoTitleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetWangZuoTitleReq::Swap(PlanetWangZuoTitleReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(user_name_, other->user_name_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlanetWangZuoTitleReq::GetTypeName() const {
  return "PlanetWangZuoTitleReq";
}


// ===================================================================

#ifndef _MSC_VER
const int PLanetWangZuoTitleResp::kResultFieldNumber;
const int PLanetWangZuoTitleResp::kTypeFieldNumber;
const int PLanetWangZuoTitleResp::kTitleListFieldNumber;
const int PLanetWangZuoTitleResp::kOccupyListFieldNumber;
const int PLanetWangZuoTitleResp::kUserListFieldNumber;
#endif  // !_MSC_VER

PLanetWangZuoTitleResp::PLanetWangZuoTitleResp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PLanetWangZuoTitleResp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  title_list_ = const_cast< ::PlanetWangZuoTitleList*>(
      ::PlanetWangZuoTitleList::internal_default_instance());
#else
  title_list_ = const_cast< ::PlanetWangZuoTitleList*>(&::PlanetWangZuoTitleList::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  occupy_list_ = const_cast< ::PlanetWangZuoOccupyList*>(
      ::PlanetWangZuoOccupyList::internal_default_instance());
#else
  occupy_list_ = const_cast< ::PlanetWangZuoOccupyList*>(&::PlanetWangZuoOccupyList::default_instance());
#endif
}

PLanetWangZuoTitleResp::PLanetWangZuoTitleResp(const PLanetWangZuoTitleResp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PLanetWangZuoTitleResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  title_list_ = NULL;
  occupy_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PLanetWangZuoTitleResp::~PLanetWangZuoTitleResp() {
  SharedDtor();
}

void PLanetWangZuoTitleResp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete title_list_;
    delete occupy_list_;
  }
}

void PLanetWangZuoTitleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PLanetWangZuoTitleResp& PLanetWangZuoTitleResp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CmdPlanet_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
#endif
  return *default_instance_;
}

PLanetWangZuoTitleResp* PLanetWangZuoTitleResp::default_instance_ = NULL;

PLanetWangZuoTitleResp* PLanetWangZuoTitleResp::New() const {
  return new PLanetWangZuoTitleResp;
}

void PLanetWangZuoTitleResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    type_ = 0;
    if (has_title_list()) {
      if (title_list_ != NULL) title_list_->::PlanetWangZuoTitleList::Clear();
    }
    if (has_occupy_list()) {
      if (occupy_list_ != NULL) occupy_list_->::PlanetWangZuoOccupyList::Clear();
    }
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PLanetWangZuoTitleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title_list;
        break;
      }

      // optional .PlanetWangZuoTitleList title_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_occupy_list;
        break;
      }

      // optional .PlanetWangZuoOccupyList occupy_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupy_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_occupy_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_list;
        break;
      }

      // repeated .OtherUserInfo user_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PLanetWangZuoTitleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .PlanetWangZuoTitleList title_list = 3;
  if (has_title_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->title_list(), output);
  }

  // optional .PlanetWangZuoOccupyList occupy_list = 4;
  if (has_occupy_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->occupy_list(), output);
  }

  // repeated .OtherUserInfo user_list = 5;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->user_list(i), output);
  }

}

int PLanetWangZuoTitleResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .PlanetWangZuoTitleList title_list = 3;
    if (has_title_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_list());
    }

    // optional .PlanetWangZuoOccupyList occupy_list = 4;
    if (has_occupy_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->occupy_list());
    }

  }
  // repeated .OtherUserInfo user_list = 5;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PLanetWangZuoTitleResp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PLanetWangZuoTitleResp*>(&from));
}

void PLanetWangZuoTitleResp::MergeFrom(const PLanetWangZuoTitleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_title_list()) {
      mutable_title_list()->::PlanetWangZuoTitleList::MergeFrom(from.title_list());
    }
    if (from.has_occupy_list()) {
      mutable_occupy_list()->::PlanetWangZuoOccupyList::MergeFrom(from.occupy_list());
    }
  }
}

void PLanetWangZuoTitleResp::CopyFrom(const PLanetWangZuoTitleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLanetWangZuoTitleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_title_list()) {
    if (!this->title_list().IsInitialized()) return false;
  }
  if (has_occupy_list()) {
    if (!this->occupy_list().IsInitialized()) return false;
  }
  for (int i = 0; i < user_list_size(); i++) {
    if (!this->user_list(i).IsInitialized()) return false;
  }
  return true;
}

void PLanetWangZuoTitleResp::Swap(PLanetWangZuoTitleResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(title_list_, other->title_list_);
    std::swap(occupy_list_, other->occupy_list_);
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PLanetWangZuoTitleResp::GetTypeName() const {
  return "PLanetWangZuoTitleResp";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
