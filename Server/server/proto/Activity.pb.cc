// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChangeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsumeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsumeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignInData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignInData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SevenDaysData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SevenDaysData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreditReturnData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreditReturnData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FirstRechargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstRechargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthFundData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthFundData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeShipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeShipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonthSignData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthSignData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Activity_2eproto() {
  protobuf_AddDesc_Activity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Activity.proto");
  GOOGLE_CHECK(file != NULL);
  ChangeData_descriptor_ = file->message_type(0);
  static const int ChangeData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeData, limit_list_),
  };
  ChangeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeData_descriptor_,
      ChangeData::default_instance_,
      ChangeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeData));
  RechargeData_descriptor_ = file->message_type(1);
  static const int RechargeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeData, recharge_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeData, getted_id_list_),
  };
  RechargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeData_descriptor_,
      RechargeData::default_instance_,
      RechargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeData));
  ConsumeData_descriptor_ = file->message_type(2);
  static const int ConsumeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeData, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeData, getted_id_list_),
  };
  ConsumeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsumeData_descriptor_,
      ConsumeData::default_instance_,
      ConsumeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsumeData));
  SignInData_descriptor_ = file->message_type(3);
  static const int SignInData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInData, cur_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInData, getted_today_),
  };
  SignInData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignInData_descriptor_,
      SignInData::default_instance_,
      SignInData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignInData));
  SevenDaysData_descriptor_ = file->message_type(4);
  static const int SevenDaysData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, getted_reward_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, building_levelup_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, home_levelup_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, ship_levelup_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, equip_strength_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, ship_break_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, already_challenge_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, win_challenge_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, contribute_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, recharge_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, consume_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, sign_in_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, lottery_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, money_lottery_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, trial_level_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, technology_levelup_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, weapon_levelup_count_),
  };
  SevenDaysData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SevenDaysData_descriptor_,
      SevenDaysData::default_instance_,
      SevenDaysData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDaysData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SevenDaysData));
  CreditReturnData_descriptor_ = file->message_type(5);
  static const int CreditReturnData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditReturnData, return_index_),
  };
  CreditReturnData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreditReturnData_descriptor_,
      CreditReturnData::default_instance_,
      CreditReturnData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditReturnData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreditReturnData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreditReturnData));
  OnlineData_descriptor_ = file->message_type(6);
  static const int OnlineData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineData, get_indexs_),
  };
  OnlineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineData_descriptor_,
      OnlineData::default_instance_,
      OnlineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineData));
  PowerData_descriptor_ = file->message_type(7);
  static const int PowerData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerData, get_indexs_),
  };
  PowerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerData_descriptor_,
      PowerData::default_instance_,
      PowerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerData));
  FirstRechargeData_descriptor_ = file->message_type(8);
  static const int FirstRechargeData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeData, getted_reward_),
  };
  FirstRechargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstRechargeData_descriptor_,
      FirstRechargeData::default_instance_,
      FirstRechargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstRechargeData));
  GrowthFundData_descriptor_ = file->message_type(9);
  static const int GrowthFundData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundData, purchased_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundData, get_indexs_),
  };
  GrowthFundData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthFundData_descriptor_,
      GrowthFundData::default_instance_,
      GrowthFundData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthFundData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthFundData));
  InvestData_descriptor_ = file->message_type(10);
  static const int InvestData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestData, start_time_),
  };
  InvestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvestData_descriptor_,
      InvestData::default_instance_,
      InvestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvestData));
  ChangeShipData_descriptor_ = file->message_type(11);
  static const int ChangeShipData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeShipData, getted_reward_),
  };
  ChangeShipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeShipData_descriptor_,
      ChangeShipData::default_instance_,
      ChangeShipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeShipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeShipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeShipData));
  MonthSignData_descriptor_ = file->message_type(12);
  static const int MonthSignData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignData, resign_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignData, get_nums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignData, get_rewards_),
  };
  MonthSignData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthSignData_descriptor_,
      MonthSignData::default_instance_,
      MonthSignData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthSignData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthSignData));
  Activity_descriptor_ = file->message_type(13);
  static const int Activity_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, change_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, recharge_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, sign_in_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, seven_days_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, first_recharge_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, credit_retrun_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, consume_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, online_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, power_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, growth_fund_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, invest_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, change_ship_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, month_sign_data_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Activity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeData_descriptor_, &ChangeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeData_descriptor_, &RechargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsumeData_descriptor_, &ConsumeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignInData_descriptor_, &SignInData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SevenDaysData_descriptor_, &SevenDaysData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreditReturnData_descriptor_, &CreditReturnData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineData_descriptor_, &OnlineData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerData_descriptor_, &PowerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstRechargeData_descriptor_, &FirstRechargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthFundData_descriptor_, &GrowthFundData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvestData_descriptor_, &InvestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeShipData_descriptor_, &ChangeShipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthSignData_descriptor_, &MonthSignData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Activity_2eproto() {
  delete ChangeData::default_instance_;
  delete ChangeData_reflection_;
  delete RechargeData::default_instance_;
  delete RechargeData_reflection_;
  delete ConsumeData::default_instance_;
  delete ConsumeData_reflection_;
  delete SignInData::default_instance_;
  delete SignInData_reflection_;
  delete SevenDaysData::default_instance_;
  delete SevenDaysData_reflection_;
  delete CreditReturnData::default_instance_;
  delete CreditReturnData_reflection_;
  delete OnlineData::default_instance_;
  delete OnlineData_reflection_;
  delete PowerData::default_instance_;
  delete PowerData_reflection_;
  delete FirstRechargeData::default_instance_;
  delete FirstRechargeData_reflection_;
  delete GrowthFundData::default_instance_;
  delete GrowthFundData_reflection_;
  delete InvestData::default_instance_;
  delete InvestData_reflection_;
  delete ChangeShipData::default_instance_;
  delete ChangeShipData_reflection_;
  delete MonthSignData::default_instance_;
  delete MonthSignData_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
}

void protobuf_AddDesc_Activity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_Stage_2eproto();
  ::protobuf_AddDesc_Trial_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Activity.proto\032\nItem.proto\032\013Stage.prot"
    "o\032\013Trial.proto\"\'\n\nChangeData\022\031\n\nlimit_li"
    "st\030\001 \003(\0132\005.Pair\">\n\014RechargeData\022\026\n\016recha"
    "rge_money\030\001 \002(\005\022\026\n\016getted_id_list\030\002 \003(\005\""
    "6\n\013ConsumeData\022\017\n\007consume\030\001 \002(\005\022\026\n\016gette"
    "d_id_list\030\002 \003(\005\"3\n\nSignInData\022\017\n\007cur_day"
    "\030\001 \002(\005\022\024\n\014getted_today\030\002 \002(\010\"\223\004\n\rSevenDa"
    "ysData\022\032\n\022getted_reward_list\030\001 \003(\005\022\036\n\nle"
    "vel_info\030\002 \003(\0132\n.LevelInfo\022\036\n\026building_l"
    "evelup_count\030\003 \001(\005\022\032\n\022home_levelup_count"
    "\030\004 \001(\005\022\032\n\022ship_levelup_count\030\005 \001(\005\022\034\n\024eq"
    "uip_strength_count\030\006 \001(\005\022\030\n\020ship_break_c"
    "ount\030\007 \001(\005\022\037\n\027already_challenge_times\030\010 "
    "\001(\005\022\033\n\023win_challenge_times\030\t \001(\005\022\030\n\020cont"
    "ribute_times\030\n \001(\005\022\026\n\016recharge_money\030\013 \001"
    "(\005\022\025\n\rconsume_money\030\014 \001(\005\022\024\n\014sign_in_day"
    "s\030\r \001(\005\022\025\n\rlottery_count\030\016 \001(\005\022\033\n\023money_"
    "lottery_count\030\017 \001(\005\022%\n\020trial_level_list\030"
    "\020 \003(\0132\013.TrialLevel\022 \n\030technology_levelup"
    "_count\030\021 \001(\005\022\034\n\024weapon_levelup_count\030\022 \001"
    "(\005\"(\n\020CreditReturnData\022\024\n\014return_index\030\001"
    " \002(\005\" \n\nOnlineData\022\022\n\nget_indexs\030\001 \003(\005\"\037"
    "\n\tPowerData\022\022\n\nget_indexs\030\001 \003(\005\"*\n\021First"
    "RechargeData\022\025\n\rgetted_reward\030\001 \002(\010\"7\n\016G"
    "rowthFundData\022\021\n\tpurchased\030\001 \002(\010\022\022\n\nget_"
    "indexs\030\002 \003(\005\"/\n\nInvestData\022\r\n\005index\030\001 \002("
    "\005\022\022\n\nstart_time\030\002 \002(\003\"\'\n\016ChangeShipData\022"
    "\025\n\rgetted_reward\030\001 \002(\010\"L\n\rMonthSignData\022"
    "\024\n\014resign_times\030\001 \002(\005\022\020\n\010get_nums\030\002 \003(\005\022"
    "\023\n\013get_rewards\030\003 \003(\010\"\305\004\n\010Activity\022\n\n\002id\030"
    "\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\022\n\nstart_time\030\003 \002(\003\022"
    "\020\n\010end_time\030\004 \002(\003\022 \n\013change_data\030\005 \001(\0132\013"
    ".ChangeData\022$\n\rrecharge_data\030\006 \001(\0132\r.Rec"
    "hargeData\022!\n\014sign_in_data\030\007 \001(\0132\013.SignIn"
    "Data\022\'\n\017seven_days_data\030\010 \001(\0132\016.SevenDay"
    "sData\022/\n\023first_recharge_data\030\t \001(\0132\022.Fir"
    "stRechargeData\022-\n\022credit_retrun_data\030\n \001"
    "(\0132\021.CreditReturnData\022\"\n\014consume_data\030\013 "
    "\001(\0132\014.ConsumeData\022 \n\013online_data\030\014 \001(\0132\013"
    ".OnlineData\022\036\n\npower_data\030\r \001(\0132\n.PowerD"
    "ata\022)\n\020growth_fund_data\030\016 \001(\0132\017.GrowthFu"
    "ndData\022 \n\013invest_data\030\017 \001(\0132\013.InvestData"
    "\022)\n\020change_ship_data\030\020 \001(\0132\017.ChangeShipD"
    "ata\022\'\n\017month_sign_data\030\021 \001(\0132\016.MonthSign"
    "Data", 1764);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Activity.proto", &protobuf_RegisterTypes);
  ChangeData::default_instance_ = new ChangeData();
  RechargeData::default_instance_ = new RechargeData();
  ConsumeData::default_instance_ = new ConsumeData();
  SignInData::default_instance_ = new SignInData();
  SevenDaysData::default_instance_ = new SevenDaysData();
  CreditReturnData::default_instance_ = new CreditReturnData();
  OnlineData::default_instance_ = new OnlineData();
  PowerData::default_instance_ = new PowerData();
  FirstRechargeData::default_instance_ = new FirstRechargeData();
  GrowthFundData::default_instance_ = new GrowthFundData();
  InvestData::default_instance_ = new InvestData();
  ChangeShipData::default_instance_ = new ChangeShipData();
  MonthSignData::default_instance_ = new MonthSignData();
  Activity::default_instance_ = new Activity();
  ChangeData::default_instance_->InitAsDefaultInstance();
  RechargeData::default_instance_->InitAsDefaultInstance();
  ConsumeData::default_instance_->InitAsDefaultInstance();
  SignInData::default_instance_->InitAsDefaultInstance();
  SevenDaysData::default_instance_->InitAsDefaultInstance();
  CreditReturnData::default_instance_->InitAsDefaultInstance();
  OnlineData::default_instance_->InitAsDefaultInstance();
  PowerData::default_instance_->InitAsDefaultInstance();
  FirstRechargeData::default_instance_->InitAsDefaultInstance();
  GrowthFundData::default_instance_->InitAsDefaultInstance();
  InvestData::default_instance_->InitAsDefaultInstance();
  ChangeShipData::default_instance_->InitAsDefaultInstance();
  MonthSignData::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_2eproto {
  StaticDescriptorInitializer_Activity_2eproto() {
    protobuf_AddDesc_Activity_2eproto();
  }
} static_descriptor_initializer_Activity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChangeData::kLimitListFieldNumber;
#endif  // !_MSC_VER

ChangeData::ChangeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeData::InitAsDefaultInstance() {
}

ChangeData::ChangeData(const ChangeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeData::~ChangeData() {
  SharedDtor();
}

void ChangeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeData_descriptor_;
}

const ChangeData& ChangeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

ChangeData* ChangeData::default_instance_ = NULL;

ChangeData* ChangeData::New() const {
  return new ChangeData;
}

void ChangeData::Clear() {
  limit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pair limit_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_limit_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pair limit_list = 1;
  for (int i = 0; i < this->limit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->limit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pair limit_list = 1;
  for (int i = 0; i < this->limit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->limit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeData::ByteSize() const {
  int total_size = 0;

  // repeated .Pair limit_list = 1;
  total_size += 1 * this->limit_list_size();
  for (int i = 0; i < this->limit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeData::MergeFrom(const ChangeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  limit_list_.MergeFrom(from.limit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeData::CopyFrom(const ChangeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeData::IsInitialized() const {

  for (int i = 0; i < limit_list_size(); i++) {
    if (!this->limit_list(i).IsInitialized()) return false;
  }
  return true;
}

void ChangeData::Swap(ChangeData* other) {
  if (other != this) {
    limit_list_.Swap(&other->limit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeData_descriptor_;
  metadata.reflection = ChangeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeData::kRechargeMoneyFieldNumber;
const int RechargeData::kGettedIdListFieldNumber;
#endif  // !_MSC_VER

RechargeData::RechargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeData::InitAsDefaultInstance() {
}

RechargeData::RechargeData(const RechargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeData::SharedCtor() {
  _cached_size_ = 0;
  recharge_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeData::~RechargeData() {
  SharedDtor();
}

void RechargeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeData_descriptor_;
}

const RechargeData& RechargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

RechargeData* RechargeData::default_instance_ = NULL;

RechargeData* RechargeData::New() const {
  return new RechargeData;
}

void RechargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recharge_money_ = 0;
  }
  getted_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 recharge_money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_money_)));
          set_has_recharge_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_id_list;
        break;
      }

      // repeated int32 getted_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_getted_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getted_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 recharge_money = 1;
  if (has_recharge_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->recharge_money(), output);
  }

  // repeated int32 getted_id_list = 2;
  for (int i = 0; i < this->getted_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->getted_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 recharge_money = 1;
  if (has_recharge_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->recharge_money(), target);
  }

  // repeated int32 getted_id_list = 2;
  for (int i = 0; i < this->getted_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->getted_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 recharge_money = 1;
    if (has_recharge_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_money());
    }

  }
  // repeated int32 getted_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->getted_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getted_id_list(i));
    }
    total_size += 1 * this->getted_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeData::MergeFrom(const RechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getted_id_list_.MergeFrom(from.getted_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recharge_money()) {
      set_recharge_money(from.recharge_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeData::CopyFrom(const RechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RechargeData::Swap(RechargeData* other) {
  if (other != this) {
    std::swap(recharge_money_, other->recharge_money_);
    getted_id_list_.Swap(&other->getted_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeData_descriptor_;
  metadata.reflection = RechargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumeData::kConsumeFieldNumber;
const int ConsumeData::kGettedIdListFieldNumber;
#endif  // !_MSC_VER

ConsumeData::ConsumeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConsumeData::InitAsDefaultInstance() {
}

ConsumeData::ConsumeData(const ConsumeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConsumeData::SharedCtor() {
  _cached_size_ = 0;
  consume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumeData::~ConsumeData() {
  SharedDtor();
}

void ConsumeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConsumeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsumeData_descriptor_;
}

const ConsumeData& ConsumeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

ConsumeData* ConsumeData::default_instance_ = NULL;

ConsumeData* ConsumeData::New() const {
  return new ConsumeData;
}

void ConsumeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    consume_ = 0;
  }
  getted_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsumeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 consume = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_id_list;
        break;
      }

      // repeated int32 getted_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_getted_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getted_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsumeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 consume = 1;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->consume(), output);
  }

  // repeated int32 getted_id_list = 2;
  for (int i = 0; i < this->getted_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->getted_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConsumeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 consume = 1;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->consume(), target);
  }

  // repeated int32 getted_id_list = 2;
  for (int i = 0; i < this->getted_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->getted_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConsumeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 consume = 1;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume());
    }

  }
  // repeated int32 getted_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->getted_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getted_id_list(i));
    }
    total_size += 1 * this->getted_id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsumeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsumeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsumeData::MergeFrom(const ConsumeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getted_id_list_.MergeFrom(from.getted_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsumeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeData::CopyFrom(const ConsumeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConsumeData::Swap(ConsumeData* other) {
  if (other != this) {
    std::swap(consume_, other->consume_);
    getted_id_list_.Swap(&other->getted_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsumeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsumeData_descriptor_;
  metadata.reflection = ConsumeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignInData::kCurDayFieldNumber;
const int SignInData::kGettedTodayFieldNumber;
#endif  // !_MSC_VER

SignInData::SignInData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignInData::InitAsDefaultInstance() {
}

SignInData::SignInData(const SignInData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignInData::SharedCtor() {
  _cached_size_ = 0;
  cur_day_ = 0;
  getted_today_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignInData::~SignInData() {
  SharedDtor();
}

void SignInData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignInData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignInData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignInData_descriptor_;
}

const SignInData& SignInData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

SignInData* SignInData::default_instance_ = NULL;

SignInData* SignInData::New() const {
  return new SignInData;
}

void SignInData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_day_ = 0;
    getted_today_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignInData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cur_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_day_)));
          set_has_cur_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getted_today;
        break;
      }

      // required bool getted_today = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_today:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getted_today_)));
          set_has_getted_today();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignInData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cur_day = 1;
  if (has_cur_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_day(), output);
  }

  // required bool getted_today = 2;
  if (has_getted_today()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->getted_today(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignInData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cur_day = 1;
  if (has_cur_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_day(), target);
  }

  // required bool getted_today = 2;
  if (has_getted_today()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->getted_today(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignInData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cur_day = 1;
    if (has_cur_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_day());
    }

    // required bool getted_today = 2;
    if (has_getted_today()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignInData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignInData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignInData::MergeFrom(const SignInData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_day()) {
      set_cur_day(from.cur_day());
    }
    if (from.has_getted_today()) {
      set_getted_today(from.getted_today());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignInData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInData::CopyFrom(const SignInData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignInData::Swap(SignInData* other) {
  if (other != this) {
    std::swap(cur_day_, other->cur_day_);
    std::swap(getted_today_, other->getted_today_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignInData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignInData_descriptor_;
  metadata.reflection = SignInData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDaysData::kGettedRewardListFieldNumber;
const int SevenDaysData::kLevelInfoFieldNumber;
const int SevenDaysData::kBuildingLevelupCountFieldNumber;
const int SevenDaysData::kHomeLevelupCountFieldNumber;
const int SevenDaysData::kShipLevelupCountFieldNumber;
const int SevenDaysData::kEquipStrengthCountFieldNumber;
const int SevenDaysData::kShipBreakCountFieldNumber;
const int SevenDaysData::kAlreadyChallengeTimesFieldNumber;
const int SevenDaysData::kWinChallengeTimesFieldNumber;
const int SevenDaysData::kContributeTimesFieldNumber;
const int SevenDaysData::kRechargeMoneyFieldNumber;
const int SevenDaysData::kConsumeMoneyFieldNumber;
const int SevenDaysData::kSignInDaysFieldNumber;
const int SevenDaysData::kLotteryCountFieldNumber;
const int SevenDaysData::kMoneyLotteryCountFieldNumber;
const int SevenDaysData::kTrialLevelListFieldNumber;
const int SevenDaysData::kTechnologyLevelupCountFieldNumber;
const int SevenDaysData::kWeaponLevelupCountFieldNumber;
#endif  // !_MSC_VER

SevenDaysData::SevenDaysData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SevenDaysData::InitAsDefaultInstance() {
}

SevenDaysData::SevenDaysData(const SevenDaysData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SevenDaysData::SharedCtor() {
  _cached_size_ = 0;
  building_levelup_count_ = 0;
  home_levelup_count_ = 0;
  ship_levelup_count_ = 0;
  equip_strength_count_ = 0;
  ship_break_count_ = 0;
  already_challenge_times_ = 0;
  win_challenge_times_ = 0;
  contribute_times_ = 0;
  recharge_money_ = 0;
  consume_money_ = 0;
  sign_in_days_ = 0;
  lottery_count_ = 0;
  money_lottery_count_ = 0;
  technology_levelup_count_ = 0;
  weapon_levelup_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDaysData::~SevenDaysData() {
  SharedDtor();
}

void SevenDaysData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SevenDaysData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SevenDaysData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDaysData_descriptor_;
}

const SevenDaysData& SevenDaysData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

SevenDaysData* SevenDaysData::default_instance_ = NULL;

SevenDaysData* SevenDaysData::New() const {
  return new SevenDaysData;
}

void SevenDaysData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    building_levelup_count_ = 0;
    home_levelup_count_ = 0;
    ship_levelup_count_ = 0;
    equip_strength_count_ = 0;
    ship_break_count_ = 0;
    already_challenge_times_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    win_challenge_times_ = 0;
    contribute_times_ = 0;
    recharge_money_ = 0;
    consume_money_ = 0;
    sign_in_days_ = 0;
    lottery_count_ = 0;
    money_lottery_count_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    technology_levelup_count_ = 0;
    weapon_levelup_count_ = 0;
  }
  getted_reward_list_.Clear();
  level_info_.Clear();
  trial_level_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SevenDaysData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 getted_reward_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getted_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_getted_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getted_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_getted_reward_list;
        if (input->ExpectTag(18)) goto parse_level_info;
        break;
      }

      // repeated .LevelInfo level_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_level_info;
        if (input->ExpectTag(24)) goto parse_building_levelup_count;
        break;
      }

      // optional int32 building_levelup_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &building_levelup_count_)));
          set_has_building_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_home_levelup_count;
        break;
      }

      // optional int32 home_levelup_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_home_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &home_levelup_count_)));
          set_has_home_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ship_levelup_count;
        break;
      }

      // optional int32 ship_levelup_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_levelup_count_)));
          set_has_ship_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equip_strength_count;
        break;
      }

      // optional int32 equip_strength_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_strength_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_strength_count_)));
          set_has_equip_strength_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ship_break_count;
        break;
      }

      // optional int32 ship_break_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_break_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_break_count_)));
          set_has_ship_break_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_already_challenge_times;
        break;
      }

      // optional int32 already_challenge_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &already_challenge_times_)));
          set_has_already_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_win_challenge_times;
        break;
      }

      // optional int32 win_challenge_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_challenge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_challenge_times_)));
          set_has_win_challenge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_contribute_times;
        break;
      }

      // optional int32 contribute_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_times_)));
          set_has_contribute_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_recharge_money;
        break;
      }

      // optional int32 recharge_money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_money_)));
          set_has_recharge_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_consume_money;
        break;
      }

      // optional int32 consume_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_money_)));
          set_has_consume_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sign_in_days;
        break;
      }

      // optional int32 sign_in_days = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_in_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_in_days_)));
          set_has_sign_in_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lottery_count;
        break;
      }

      // optional int32 lottery_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_count_)));
          set_has_lottery_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_money_lottery_count;
        break;
      }

      // optional int32 money_lottery_count = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_lottery_count_)));
          set_has_money_lottery_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_trial_level_list;
        break;
      }

      // repeated .TrialLevel trial_level_list = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trial_level_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trial_level_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_trial_level_list;
        if (input->ExpectTag(136)) goto parse_technology_levelup_count;
        break;
      }

      // optional int32 technology_levelup_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_technology_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &technology_levelup_count_)));
          set_has_technology_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_weapon_levelup_count;
        break;
      }

      // optional int32 weapon_levelup_count = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_levelup_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_levelup_count_)));
          set_has_weapon_levelup_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SevenDaysData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 getted_reward_list = 1;
  for (int i = 0; i < this->getted_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->getted_reward_list(i), output);
  }

  // repeated .LevelInfo level_info = 2;
  for (int i = 0; i < this->level_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->level_info(i), output);
  }

  // optional int32 building_levelup_count = 3;
  if (has_building_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->building_levelup_count(), output);
  }

  // optional int32 home_levelup_count = 4;
  if (has_home_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->home_levelup_count(), output);
  }

  // optional int32 ship_levelup_count = 5;
  if (has_ship_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ship_levelup_count(), output);
  }

  // optional int32 equip_strength_count = 6;
  if (has_equip_strength_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->equip_strength_count(), output);
  }

  // optional int32 ship_break_count = 7;
  if (has_ship_break_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ship_break_count(), output);
  }

  // optional int32 already_challenge_times = 8;
  if (has_already_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->already_challenge_times(), output);
  }

  // optional int32 win_challenge_times = 9;
  if (has_win_challenge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->win_challenge_times(), output);
  }

  // optional int32 contribute_times = 10;
  if (has_contribute_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->contribute_times(), output);
  }

  // optional int32 recharge_money = 11;
  if (has_recharge_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->recharge_money(), output);
  }

  // optional int32 consume_money = 12;
  if (has_consume_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->consume_money(), output);
  }

  // optional int32 sign_in_days = 13;
  if (has_sign_in_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->sign_in_days(), output);
  }

  // optional int32 lottery_count = 14;
  if (has_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->lottery_count(), output);
  }

  // optional int32 money_lottery_count = 15;
  if (has_money_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->money_lottery_count(), output);
  }

  // repeated .TrialLevel trial_level_list = 16;
  for (int i = 0; i < this->trial_level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->trial_level_list(i), output);
  }

  // optional int32 technology_levelup_count = 17;
  if (has_technology_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->technology_levelup_count(), output);
  }

  // optional int32 weapon_levelup_count = 18;
  if (has_weapon_levelup_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->weapon_levelup_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SevenDaysData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 getted_reward_list = 1;
  for (int i = 0; i < this->getted_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->getted_reward_list(i), target);
  }

  // repeated .LevelInfo level_info = 2;
  for (int i = 0; i < this->level_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->level_info(i), target);
  }

  // optional int32 building_levelup_count = 3;
  if (has_building_levelup_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->building_levelup_count(), target);
  }

  // optional int32 home_levelup_count = 4;
  if (has_home_levelup_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->home_levelup_count(), target);
  }

  // optional int32 ship_levelup_count = 5;
  if (has_ship_levelup_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ship_levelup_count(), target);
  }

  // optional int32 equip_strength_count = 6;
  if (has_equip_strength_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->equip_strength_count(), target);
  }

  // optional int32 ship_break_count = 7;
  if (has_ship_break_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ship_break_count(), target);
  }

  // optional int32 already_challenge_times = 8;
  if (has_already_challenge_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->already_challenge_times(), target);
  }

  // optional int32 win_challenge_times = 9;
  if (has_win_challenge_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->win_challenge_times(), target);
  }

  // optional int32 contribute_times = 10;
  if (has_contribute_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->contribute_times(), target);
  }

  // optional int32 recharge_money = 11;
  if (has_recharge_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->recharge_money(), target);
  }

  // optional int32 consume_money = 12;
  if (has_consume_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->consume_money(), target);
  }

  // optional int32 sign_in_days = 13;
  if (has_sign_in_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->sign_in_days(), target);
  }

  // optional int32 lottery_count = 14;
  if (has_lottery_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->lottery_count(), target);
  }

  // optional int32 money_lottery_count = 15;
  if (has_money_lottery_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->money_lottery_count(), target);
  }

  // repeated .TrialLevel trial_level_list = 16;
  for (int i = 0; i < this->trial_level_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->trial_level_list(i), target);
  }

  // optional int32 technology_levelup_count = 17;
  if (has_technology_levelup_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->technology_levelup_count(), target);
  }

  // optional int32 weapon_levelup_count = 18;
  if (has_weapon_levelup_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->weapon_levelup_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SevenDaysData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 building_levelup_count = 3;
    if (has_building_levelup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->building_levelup_count());
    }

    // optional int32 home_levelup_count = 4;
    if (has_home_levelup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->home_levelup_count());
    }

    // optional int32 ship_levelup_count = 5;
    if (has_ship_levelup_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_levelup_count());
    }

    // optional int32 equip_strength_count = 6;
    if (has_equip_strength_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_strength_count());
    }

    // optional int32 ship_break_count = 7;
    if (has_ship_break_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_break_count());
    }

    // optional int32 already_challenge_times = 8;
    if (has_already_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->already_challenge_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 win_challenge_times = 9;
    if (has_win_challenge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_challenge_times());
    }

    // optional int32 contribute_times = 10;
    if (has_contribute_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute_times());
    }

    // optional int32 recharge_money = 11;
    if (has_recharge_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_money());
    }

    // optional int32 consume_money = 12;
    if (has_consume_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_money());
    }

    // optional int32 sign_in_days = 13;
    if (has_sign_in_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_in_days());
    }

    // optional int32 lottery_count = 14;
    if (has_lottery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery_count());
    }

    // optional int32 money_lottery_count = 15;
    if (has_money_lottery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_lottery_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 technology_levelup_count = 17;
    if (has_technology_levelup_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->technology_levelup_count());
    }

    // optional int32 weapon_levelup_count = 18;
    if (has_weapon_levelup_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_levelup_count());
    }

  }
  // repeated int32 getted_reward_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->getted_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getted_reward_list(i));
    }
    total_size += 1 * this->getted_reward_list_size() + data_size;
  }

  // repeated .LevelInfo level_info = 2;
  total_size += 1 * this->level_info_size();
  for (int i = 0; i < this->level_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_info(i));
  }

  // repeated .TrialLevel trial_level_list = 16;
  total_size += 2 * this->trial_level_list_size();
  for (int i = 0; i < this->trial_level_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trial_level_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDaysData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SevenDaysData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SevenDaysData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SevenDaysData::MergeFrom(const SevenDaysData& from) {
  GOOGLE_CHECK_NE(&from, this);
  getted_reward_list_.MergeFrom(from.getted_reward_list_);
  level_info_.MergeFrom(from.level_info_);
  trial_level_list_.MergeFrom(from.trial_level_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_building_levelup_count()) {
      set_building_levelup_count(from.building_levelup_count());
    }
    if (from.has_home_levelup_count()) {
      set_home_levelup_count(from.home_levelup_count());
    }
    if (from.has_ship_levelup_count()) {
      set_ship_levelup_count(from.ship_levelup_count());
    }
    if (from.has_equip_strength_count()) {
      set_equip_strength_count(from.equip_strength_count());
    }
    if (from.has_ship_break_count()) {
      set_ship_break_count(from.ship_break_count());
    }
    if (from.has_already_challenge_times()) {
      set_already_challenge_times(from.already_challenge_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_win_challenge_times()) {
      set_win_challenge_times(from.win_challenge_times());
    }
    if (from.has_contribute_times()) {
      set_contribute_times(from.contribute_times());
    }
    if (from.has_recharge_money()) {
      set_recharge_money(from.recharge_money());
    }
    if (from.has_consume_money()) {
      set_consume_money(from.consume_money());
    }
    if (from.has_sign_in_days()) {
      set_sign_in_days(from.sign_in_days());
    }
    if (from.has_lottery_count()) {
      set_lottery_count(from.lottery_count());
    }
    if (from.has_money_lottery_count()) {
      set_money_lottery_count(from.money_lottery_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_technology_levelup_count()) {
      set_technology_levelup_count(from.technology_levelup_count());
    }
    if (from.has_weapon_levelup_count()) {
      set_weapon_levelup_count(from.weapon_levelup_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SevenDaysData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDaysData::CopyFrom(const SevenDaysData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDaysData::IsInitialized() const {

  for (int i = 0; i < level_info_size(); i++) {
    if (!this->level_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < trial_level_list_size(); i++) {
    if (!this->trial_level_list(i).IsInitialized()) return false;
  }
  return true;
}

void SevenDaysData::Swap(SevenDaysData* other) {
  if (other != this) {
    getted_reward_list_.Swap(&other->getted_reward_list_);
    level_info_.Swap(&other->level_info_);
    std::swap(building_levelup_count_, other->building_levelup_count_);
    std::swap(home_levelup_count_, other->home_levelup_count_);
    std::swap(ship_levelup_count_, other->ship_levelup_count_);
    std::swap(equip_strength_count_, other->equip_strength_count_);
    std::swap(ship_break_count_, other->ship_break_count_);
    std::swap(already_challenge_times_, other->already_challenge_times_);
    std::swap(win_challenge_times_, other->win_challenge_times_);
    std::swap(contribute_times_, other->contribute_times_);
    std::swap(recharge_money_, other->recharge_money_);
    std::swap(consume_money_, other->consume_money_);
    std::swap(sign_in_days_, other->sign_in_days_);
    std::swap(lottery_count_, other->lottery_count_);
    std::swap(money_lottery_count_, other->money_lottery_count_);
    trial_level_list_.Swap(&other->trial_level_list_);
    std::swap(technology_levelup_count_, other->technology_levelup_count_);
    std::swap(weapon_levelup_count_, other->weapon_levelup_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SevenDaysData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SevenDaysData_descriptor_;
  metadata.reflection = SevenDaysData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreditReturnData::kReturnIndexFieldNumber;
#endif  // !_MSC_VER

CreditReturnData::CreditReturnData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreditReturnData::InitAsDefaultInstance() {
}

CreditReturnData::CreditReturnData(const CreditReturnData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreditReturnData::SharedCtor() {
  _cached_size_ = 0;
  return_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreditReturnData::~CreditReturnData() {
  SharedDtor();
}

void CreditReturnData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreditReturnData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreditReturnData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreditReturnData_descriptor_;
}

const CreditReturnData& CreditReturnData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

CreditReturnData* CreditReturnData::default_instance_ = NULL;

CreditReturnData* CreditReturnData::New() const {
  return new CreditReturnData;
}

void CreditReturnData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    return_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreditReturnData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 return_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_index_)));
          set_has_return_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreditReturnData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 return_index = 1;
  if (has_return_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->return_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreditReturnData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 return_index = 1;
  if (has_return_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->return_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreditReturnData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 return_index = 1;
    if (has_return_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreditReturnData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreditReturnData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreditReturnData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreditReturnData::MergeFrom(const CreditReturnData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_return_index()) {
      set_return_index(from.return_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreditReturnData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreditReturnData::CopyFrom(const CreditReturnData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditReturnData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreditReturnData::Swap(CreditReturnData* other) {
  if (other != this) {
    std::swap(return_index_, other->return_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreditReturnData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreditReturnData_descriptor_;
  metadata.reflection = CreditReturnData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineData::kGetIndexsFieldNumber;
#endif  // !_MSC_VER

OnlineData::OnlineData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineData::InitAsDefaultInstance() {
}

OnlineData::OnlineData(const OnlineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineData::~OnlineData() {
  SharedDtor();
}

void OnlineData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineData_descriptor_;
}

const OnlineData& OnlineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

OnlineData* OnlineData::default_instance_ = NULL;

OnlineData* OnlineData::New() const {
  return new OnlineData;
}

void OnlineData::Clear() {
  get_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 get_indexs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_get_indexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_indexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_get_indexs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 get_indexs = 1;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->get_indexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 get_indexs = 1;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->get_indexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineData::ByteSize() const {
  int total_size = 0;

  // repeated int32 get_indexs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_indexs(i));
    }
    total_size += 1 * this->get_indexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineData::MergeFrom(const OnlineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_indexs_.MergeFrom(from.get_indexs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineData::CopyFrom(const OnlineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineData::IsInitialized() const {

  return true;
}

void OnlineData::Swap(OnlineData* other) {
  if (other != this) {
    get_indexs_.Swap(&other->get_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineData_descriptor_;
  metadata.reflection = OnlineData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerData::kGetIndexsFieldNumber;
#endif  // !_MSC_VER

PowerData::PowerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerData::InitAsDefaultInstance() {
}

PowerData::PowerData(const PowerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerData::~PowerData() {
  SharedDtor();
}

void PowerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerData_descriptor_;
}

const PowerData& PowerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

PowerData* PowerData::default_instance_ = NULL;

PowerData* PowerData::New() const {
  return new PowerData;
}

void PowerData::Clear() {
  get_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 get_indexs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_get_indexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_indexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_get_indexs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 get_indexs = 1;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->get_indexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 get_indexs = 1;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->get_indexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerData::ByteSize() const {
  int total_size = 0;

  // repeated int32 get_indexs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_indexs(i));
    }
    total_size += 1 * this->get_indexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerData::MergeFrom(const PowerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_indexs_.MergeFrom(from.get_indexs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerData::CopyFrom(const PowerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerData::IsInitialized() const {

  return true;
}

void PowerData::Swap(PowerData* other) {
  if (other != this) {
    get_indexs_.Swap(&other->get_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerData_descriptor_;
  metadata.reflection = PowerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FirstRechargeData::kGettedRewardFieldNumber;
#endif  // !_MSC_VER

FirstRechargeData::FirstRechargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FirstRechargeData::InitAsDefaultInstance() {
}

FirstRechargeData::FirstRechargeData(const FirstRechargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FirstRechargeData::SharedCtor() {
  _cached_size_ = 0;
  getted_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstRechargeData::~FirstRechargeData() {
  SharedDtor();
}

void FirstRechargeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FirstRechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstRechargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstRechargeData_descriptor_;
}

const FirstRechargeData& FirstRechargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

FirstRechargeData* FirstRechargeData::default_instance_ = NULL;

FirstRechargeData* FirstRechargeData::New() const {
  return new FirstRechargeData;
}

void FirstRechargeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    getted_reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstRechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool getted_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getted_reward_)));
          set_has_getted_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FirstRechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool getted_reward = 1;
  if (has_getted_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->getted_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FirstRechargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool getted_reward = 1;
  if (has_getted_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->getted_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FirstRechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool getted_reward = 1;
    if (has_getted_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstRechargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstRechargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstRechargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstRechargeData::MergeFrom(const FirstRechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_getted_reward()) {
      set_getted_reward(from.getted_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstRechargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstRechargeData::CopyFrom(const FirstRechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstRechargeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FirstRechargeData::Swap(FirstRechargeData* other) {
  if (other != this) {
    std::swap(getted_reward_, other->getted_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstRechargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstRechargeData_descriptor_;
  metadata.reflection = FirstRechargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthFundData::kPurchasedFieldNumber;
const int GrowthFundData::kGetIndexsFieldNumber;
#endif  // !_MSC_VER

GrowthFundData::GrowthFundData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowthFundData::InitAsDefaultInstance() {
}

GrowthFundData::GrowthFundData(const GrowthFundData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowthFundData::SharedCtor() {
  _cached_size_ = 0;
  purchased_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthFundData::~GrowthFundData() {
  SharedDtor();
}

void GrowthFundData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowthFundData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthFundData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthFundData_descriptor_;
}

const GrowthFundData& GrowthFundData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

GrowthFundData* GrowthFundData::default_instance_ = NULL;

GrowthFundData* GrowthFundData::New() const {
  return new GrowthFundData;
}

void GrowthFundData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    purchased_ = false;
  }
  get_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthFundData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool purchased = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &purchased_)));
          set_has_purchased();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_indexs;
        break;
      }

      // repeated int32 get_indexs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_get_indexs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_indexs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_indexs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowthFundData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool purchased = 1;
  if (has_purchased()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->purchased(), output);
  }

  // repeated int32 get_indexs = 2;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->get_indexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowthFundData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool purchased = 1;
  if (has_purchased()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->purchased(), target);
  }

  // repeated int32 get_indexs = 2;
  for (int i = 0; i < this->get_indexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->get_indexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowthFundData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool purchased = 1;
    if (has_purchased()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 get_indexs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_indexs(i));
    }
    total_size += 1 * this->get_indexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthFundData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthFundData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthFundData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthFundData::MergeFrom(const GrowthFundData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_indexs_.MergeFrom(from.get_indexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_purchased()) {
      set_purchased(from.purchased());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthFundData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthFundData::CopyFrom(const GrowthFundData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthFundData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GrowthFundData::Swap(GrowthFundData* other) {
  if (other != this) {
    std::swap(purchased_, other->purchased_);
    get_indexs_.Swap(&other->get_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthFundData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthFundData_descriptor_;
  metadata.reflection = GrowthFundData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvestData::kIndexFieldNumber;
const int InvestData::kStartTimeFieldNumber;
#endif  // !_MSC_VER

InvestData::InvestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvestData::InitAsDefaultInstance() {
}

InvestData::InvestData(const InvestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvestData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvestData::~InvestData() {
  SharedDtor();
}

void InvestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvestData_descriptor_;
}

const InvestData& InvestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

InvestData* InvestData::default_instance_ = NULL;

InvestData* InvestData::New() const {
  return new InvestData;
}

void InvestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvestData::MergeFrom(const InvestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestData::CopyFrom(const InvestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void InvestData::Swap(InvestData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvestData_descriptor_;
  metadata.reflection = InvestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeShipData::kGettedRewardFieldNumber;
#endif  // !_MSC_VER

ChangeShipData::ChangeShipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeShipData::InitAsDefaultInstance() {
}

ChangeShipData::ChangeShipData(const ChangeShipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeShipData::SharedCtor() {
  _cached_size_ = 0;
  getted_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeShipData::~ChangeShipData() {
  SharedDtor();
}

void ChangeShipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeShipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeShipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeShipData_descriptor_;
}

const ChangeShipData& ChangeShipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

ChangeShipData* ChangeShipData::default_instance_ = NULL;

ChangeShipData* ChangeShipData::New() const {
  return new ChangeShipData;
}

void ChangeShipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    getted_reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeShipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool getted_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &getted_reward_)));
          set_has_getted_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeShipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool getted_reward = 1;
  if (has_getted_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->getted_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeShipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool getted_reward = 1;
  if (has_getted_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->getted_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeShipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool getted_reward = 1;
    if (has_getted_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeShipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeShipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeShipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeShipData::MergeFrom(const ChangeShipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_getted_reward()) {
      set_getted_reward(from.getted_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeShipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeShipData::CopyFrom(const ChangeShipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeShipData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeShipData::Swap(ChangeShipData* other) {
  if (other != this) {
    std::swap(getted_reward_, other->getted_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeShipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeShipData_descriptor_;
  metadata.reflection = ChangeShipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonthSignData::kResignTimesFieldNumber;
const int MonthSignData::kGetNumsFieldNumber;
const int MonthSignData::kGetRewardsFieldNumber;
#endif  // !_MSC_VER

MonthSignData::MonthSignData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonthSignData::InitAsDefaultInstance() {
}

MonthSignData::MonthSignData(const MonthSignData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonthSignData::SharedCtor() {
  _cached_size_ = 0;
  resign_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthSignData::~MonthSignData() {
  SharedDtor();
}

void MonthSignData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonthSignData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthSignData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthSignData_descriptor_;
}

const MonthSignData& MonthSignData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

MonthSignData* MonthSignData::default_instance_ = NULL;

MonthSignData* MonthSignData::New() const {
  return new MonthSignData;
}

void MonthSignData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resign_times_ = 0;
  }
  get_nums_.Clear();
  get_rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthSignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resign_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resign_times_)));
          set_has_resign_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_nums;
        break;
      }

      // repeated int32 get_nums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_get_nums())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_nums())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_nums;
        if (input->ExpectTag(24)) goto parse_get_rewards;
        break;
      }

      // repeated bool get_rewards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_rewards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_get_rewards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_get_rewards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonthSignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 resign_times = 1;
  if (has_resign_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resign_times(), output);
  }

  // repeated int32 get_nums = 2;
  for (int i = 0; i < this->get_nums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->get_nums(i), output);
  }

  // repeated bool get_rewards = 3;
  for (int i = 0; i < this->get_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->get_rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonthSignData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 resign_times = 1;
  if (has_resign_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resign_times(), target);
  }

  // repeated int32 get_nums = 2;
  for (int i = 0; i < this->get_nums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->get_nums(i), target);
  }

  // repeated bool get_rewards = 3;
  for (int i = 0; i < this->get_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->get_rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonthSignData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 resign_times = 1;
    if (has_resign_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resign_times());
    }

  }
  // repeated int32 get_nums = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_nums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_nums(i));
    }
    total_size += 1 * this->get_nums_size() + data_size;
  }

  // repeated bool get_rewards = 3;
  {
    int data_size = 0;
    data_size = 1 * this->get_rewards_size();
    total_size += 1 * this->get_rewards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthSignData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthSignData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthSignData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthSignData::MergeFrom(const MonthSignData& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_nums_.MergeFrom(from.get_nums_);
  get_rewards_.MergeFrom(from.get_rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resign_times()) {
      set_resign_times(from.resign_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthSignData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthSignData::CopyFrom(const MonthSignData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthSignData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MonthSignData::Swap(MonthSignData* other) {
  if (other != this) {
    std::swap(resign_times_, other->resign_times_);
    get_nums_.Swap(&other->get_nums_);
    get_rewards_.Swap(&other->get_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthSignData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthSignData_descriptor_;
  metadata.reflection = MonthSignData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kIdFieldNumber;
const int Activity::kTypeFieldNumber;
const int Activity::kStartTimeFieldNumber;
const int Activity::kEndTimeFieldNumber;
const int Activity::kChangeDataFieldNumber;
const int Activity::kRechargeDataFieldNumber;
const int Activity::kSignInDataFieldNumber;
const int Activity::kSevenDaysDataFieldNumber;
const int Activity::kFirstRechargeDataFieldNumber;
const int Activity::kCreditRetrunDataFieldNumber;
const int Activity::kConsumeDataFieldNumber;
const int Activity::kOnlineDataFieldNumber;
const int Activity::kPowerDataFieldNumber;
const int Activity::kGrowthFundDataFieldNumber;
const int Activity::kInvestDataFieldNumber;
const int Activity::kChangeShipDataFieldNumber;
const int Activity::kMonthSignDataFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity::InitAsDefaultInstance() {
  change_data_ = const_cast< ::ChangeData*>(&::ChangeData::default_instance());
  recharge_data_ = const_cast< ::RechargeData*>(&::RechargeData::default_instance());
  sign_in_data_ = const_cast< ::SignInData*>(&::SignInData::default_instance());
  seven_days_data_ = const_cast< ::SevenDaysData*>(&::SevenDaysData::default_instance());
  first_recharge_data_ = const_cast< ::FirstRechargeData*>(&::FirstRechargeData::default_instance());
  credit_retrun_data_ = const_cast< ::CreditReturnData*>(&::CreditReturnData::default_instance());
  consume_data_ = const_cast< ::ConsumeData*>(&::ConsumeData::default_instance());
  online_data_ = const_cast< ::OnlineData*>(&::OnlineData::default_instance());
  power_data_ = const_cast< ::PowerData*>(&::PowerData::default_instance());
  growth_fund_data_ = const_cast< ::GrowthFundData*>(&::GrowthFundData::default_instance());
  invest_data_ = const_cast< ::InvestData*>(&::InvestData::default_instance());
  change_ship_data_ = const_cast< ::ChangeShipData*>(&::ChangeShipData::default_instance());
  month_sign_data_ = const_cast< ::MonthSignData*>(&::MonthSignData::default_instance());
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  change_data_ = NULL;
  recharge_data_ = NULL;
  sign_in_data_ = NULL;
  seven_days_data_ = NULL;
  first_recharge_data_ = NULL;
  credit_retrun_data_ = NULL;
  consume_data_ = NULL;
  online_data_ = NULL;
  power_data_ = NULL;
  growth_fund_data_ = NULL;
  invest_data_ = NULL;
  change_ship_data_ = NULL;
  month_sign_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  SharedDtor();
}

void Activity::SharedDtor() {
  if (this != default_instance_) {
    delete change_data_;
    delete recharge_data_;
    delete sign_in_data_;
    delete seven_days_data_;
    delete first_recharge_data_;
    delete credit_retrun_data_;
    delete consume_data_;
    delete online_data_;
    delete power_data_;
    delete growth_fund_data_;
    delete invest_data_;
    delete change_ship_data_;
    delete month_sign_data_;
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2eproto();
  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    if (has_change_data()) {
      if (change_data_ != NULL) change_data_->::ChangeData::Clear();
    }
    if (has_recharge_data()) {
      if (recharge_data_ != NULL) recharge_data_->::RechargeData::Clear();
    }
    if (has_sign_in_data()) {
      if (sign_in_data_ != NULL) sign_in_data_->::SignInData::Clear();
    }
    if (has_seven_days_data()) {
      if (seven_days_data_ != NULL) seven_days_data_->::SevenDaysData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_first_recharge_data()) {
      if (first_recharge_data_ != NULL) first_recharge_data_->::FirstRechargeData::Clear();
    }
    if (has_credit_retrun_data()) {
      if (credit_retrun_data_ != NULL) credit_retrun_data_->::CreditReturnData::Clear();
    }
    if (has_consume_data()) {
      if (consume_data_ != NULL) consume_data_->::ConsumeData::Clear();
    }
    if (has_online_data()) {
      if (online_data_ != NULL) online_data_->::OnlineData::Clear();
    }
    if (has_power_data()) {
      if (power_data_ != NULL) power_data_->::PowerData::Clear();
    }
    if (has_growth_fund_data()) {
      if (growth_fund_data_ != NULL) growth_fund_data_->::GrowthFundData::Clear();
    }
    if (has_invest_data()) {
      if (invest_data_ != NULL) invest_data_->::InvestData::Clear();
    }
    if (has_change_ship_data()) {
      if (change_ship_data_ != NULL) change_ship_data_->::ChangeShipData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_month_sign_data()) {
      if (month_sign_data_ != NULL) month_sign_data_->::MonthSignData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_change_data;
        break;
      }

      // optional .ChangeData change_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recharge_data;
        break;
      }

      // optional .RechargeData recharge_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sign_in_data;
        break;
      }

      // optional .SignInData sign_in_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_in_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign_in_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_seven_days_data;
        break;
      }

      // optional .SevenDaysData seven_days_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seven_days_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seven_days_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_first_recharge_data;
        break;
      }

      // optional .FirstRechargeData first_recharge_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_recharge_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_recharge_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_credit_retrun_data;
        break;
      }

      // optional .CreditReturnData credit_retrun_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_credit_retrun_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credit_retrun_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_consume_data;
        break;
      }

      // optional .ConsumeData consume_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consume_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_online_data;
        break;
      }

      // optional .OnlineData online_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_power_data;
        break;
      }

      // optional .PowerData power_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_power_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_growth_fund_data;
        break;
      }

      // optional .GrowthFundData growth_fund_data = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growth_fund_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_growth_fund_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_invest_data;
        break;
      }

      // optional .InvestData invest_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invest_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invest_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_change_ship_data;
        break;
      }

      // optional .ChangeShipData change_ship_data = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_ship_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_ship_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_month_sign_data;
        break;
      }

      // optional .MonthSignData month_sign_data = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_month_sign_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_month_sign_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_time(), output);
  }

  // optional .ChangeData change_data = 5;
  if (has_change_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->change_data(), output);
  }

  // optional .RechargeData recharge_data = 6;
  if (has_recharge_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recharge_data(), output);
  }

  // optional .SignInData sign_in_data = 7;
  if (has_sign_in_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sign_in_data(), output);
  }

  // optional .SevenDaysData seven_days_data = 8;
  if (has_seven_days_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->seven_days_data(), output);
  }

  // optional .FirstRechargeData first_recharge_data = 9;
  if (has_first_recharge_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->first_recharge_data(), output);
  }

  // optional .CreditReturnData credit_retrun_data = 10;
  if (has_credit_retrun_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->credit_retrun_data(), output);
  }

  // optional .ConsumeData consume_data = 11;
  if (has_consume_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->consume_data(), output);
  }

  // optional .OnlineData online_data = 12;
  if (has_online_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->online_data(), output);
  }

  // optional .PowerData power_data = 13;
  if (has_power_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->power_data(), output);
  }

  // optional .GrowthFundData growth_fund_data = 14;
  if (has_growth_fund_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->growth_fund_data(), output);
  }

  // optional .InvestData invest_data = 15;
  if (has_invest_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->invest_data(), output);
  }

  // optional .ChangeShipData change_ship_data = 16;
  if (has_change_ship_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->change_ship_data(), output);
  }

  // optional .MonthSignData month_sign_data = 17;
  if (has_month_sign_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->month_sign_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_time(), target);
  }

  // optional .ChangeData change_data = 5;
  if (has_change_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->change_data(), target);
  }

  // optional .RechargeData recharge_data = 6;
  if (has_recharge_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recharge_data(), target);
  }

  // optional .SignInData sign_in_data = 7;
  if (has_sign_in_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sign_in_data(), target);
  }

  // optional .SevenDaysData seven_days_data = 8;
  if (has_seven_days_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->seven_days_data(), target);
  }

  // optional .FirstRechargeData first_recharge_data = 9;
  if (has_first_recharge_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->first_recharge_data(), target);
  }

  // optional .CreditReturnData credit_retrun_data = 10;
  if (has_credit_retrun_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->credit_retrun_data(), target);
  }

  // optional .ConsumeData consume_data = 11;
  if (has_consume_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->consume_data(), target);
  }

  // optional .OnlineData online_data = 12;
  if (has_online_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->online_data(), target);
  }

  // optional .PowerData power_data = 13;
  if (has_power_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->power_data(), target);
  }

  // optional .GrowthFundData growth_fund_data = 14;
  if (has_growth_fund_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->growth_fund_data(), target);
  }

  // optional .InvestData invest_data = 15;
  if (has_invest_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->invest_data(), target);
  }

  // optional .ChangeShipData change_ship_data = 16;
  if (has_change_ship_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->change_ship_data(), target);
  }

  // optional .MonthSignData month_sign_data = 17;
  if (has_month_sign_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->month_sign_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional .ChangeData change_data = 5;
    if (has_change_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_data());
    }

    // optional .RechargeData recharge_data = 6;
    if (has_recharge_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recharge_data());
    }

    // optional .SignInData sign_in_data = 7;
    if (has_sign_in_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign_in_data());
    }

    // optional .SevenDaysData seven_days_data = 8;
    if (has_seven_days_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seven_days_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .FirstRechargeData first_recharge_data = 9;
    if (has_first_recharge_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_recharge_data());
    }

    // optional .CreditReturnData credit_retrun_data = 10;
    if (has_credit_retrun_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->credit_retrun_data());
    }

    // optional .ConsumeData consume_data = 11;
    if (has_consume_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->consume_data());
    }

    // optional .OnlineData online_data = 12;
    if (has_online_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_data());
    }

    // optional .PowerData power_data = 13;
    if (has_power_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_data());
    }

    // optional .GrowthFundData growth_fund_data = 14;
    if (has_growth_fund_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->growth_fund_data());
    }

    // optional .InvestData invest_data = 15;
    if (has_invest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invest_data());
    }

    // optional .ChangeShipData change_ship_data = 16;
    if (has_change_ship_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_ship_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .MonthSignData month_sign_data = 17;
    if (has_month_sign_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->month_sign_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_change_data()) {
      mutable_change_data()->::ChangeData::MergeFrom(from.change_data());
    }
    if (from.has_recharge_data()) {
      mutable_recharge_data()->::RechargeData::MergeFrom(from.recharge_data());
    }
    if (from.has_sign_in_data()) {
      mutable_sign_in_data()->::SignInData::MergeFrom(from.sign_in_data());
    }
    if (from.has_seven_days_data()) {
      mutable_seven_days_data()->::SevenDaysData::MergeFrom(from.seven_days_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_first_recharge_data()) {
      mutable_first_recharge_data()->::FirstRechargeData::MergeFrom(from.first_recharge_data());
    }
    if (from.has_credit_retrun_data()) {
      mutable_credit_retrun_data()->::CreditReturnData::MergeFrom(from.credit_retrun_data());
    }
    if (from.has_consume_data()) {
      mutable_consume_data()->::ConsumeData::MergeFrom(from.consume_data());
    }
    if (from.has_online_data()) {
      mutable_online_data()->::OnlineData::MergeFrom(from.online_data());
    }
    if (from.has_power_data()) {
      mutable_power_data()->::PowerData::MergeFrom(from.power_data());
    }
    if (from.has_growth_fund_data()) {
      mutable_growth_fund_data()->::GrowthFundData::MergeFrom(from.growth_fund_data());
    }
    if (from.has_invest_data()) {
      mutable_invest_data()->::InvestData::MergeFrom(from.invest_data());
    }
    if (from.has_change_ship_data()) {
      mutable_change_ship_data()->::ChangeShipData::MergeFrom(from.change_ship_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_month_sign_data()) {
      mutable_month_sign_data()->::MonthSignData::MergeFrom(from.month_sign_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_change_data()) {
    if (!this->change_data().IsInitialized()) return false;
  }
  if (has_recharge_data()) {
    if (!this->recharge_data().IsInitialized()) return false;
  }
  if (has_sign_in_data()) {
    if (!this->sign_in_data().IsInitialized()) return false;
  }
  if (has_seven_days_data()) {
    if (!this->seven_days_data().IsInitialized()) return false;
  }
  if (has_first_recharge_data()) {
    if (!this->first_recharge_data().IsInitialized()) return false;
  }
  if (has_credit_retrun_data()) {
    if (!this->credit_retrun_data().IsInitialized()) return false;
  }
  if (has_consume_data()) {
    if (!this->consume_data().IsInitialized()) return false;
  }
  if (has_growth_fund_data()) {
    if (!this->growth_fund_data().IsInitialized()) return false;
  }
  if (has_invest_data()) {
    if (!this->invest_data().IsInitialized()) return false;
  }
  if (has_change_ship_data()) {
    if (!this->change_ship_data().IsInitialized()) return false;
  }
  if (has_month_sign_data()) {
    if (!this->month_sign_data().IsInitialized()) return false;
  }
  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(change_data_, other->change_data_);
    std::swap(recharge_data_, other->recharge_data_);
    std::swap(sign_in_data_, other->sign_in_data_);
    std::swap(seven_days_data_, other->seven_days_data_);
    std::swap(first_recharge_data_, other->first_recharge_data_);
    std::swap(credit_retrun_data_, other->credit_retrun_data_);
    std::swap(consume_data_, other->consume_data_);
    std::swap(online_data_, other->online_data_);
    std::swap(power_data_, other->power_data_);
    std::swap(growth_fund_data_, other->growth_fund_data_);
    std::swap(invest_data_, other->invest_data_);
    std::swap(change_ship_data_, other->change_ship_data_);
    std::swap(month_sign_data_, other->month_sign_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
