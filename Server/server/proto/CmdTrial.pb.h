// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdTrial.proto

#ifndef PROTOBUF_CmdTrial_2eproto__INCLUDED
#define PROTOBUF_CmdTrial_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AirShip.pb.h"
#include "Item.pb.h"
#include "Trial.pb.h"
#include "UserSync.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CmdTrial_2eproto();
void protobuf_AssignDesc_CmdTrial_2eproto();
void protobuf_ShutdownFile_CmdTrial_2eproto();

class TrialAddTicketReq;
class TrialAddTicketResp;
class TrialGetTimesReq;
class TrialGetTimesResp;
class TrialAreaReq;
class TrialAreaResp;
class TrialGetRewardReq;
class TrialGetRewardResp;
class TrialBuilding;
class TrialGetBuildingInfoReq;
class TrialGetBuildingInfoResp;
class TrialPveStartReq;
class TrialPveStartResp;
class TrialPveEndReq;
class TrialPveEndResp;

// ===================================================================

class TrialAddTicketReq : public ::google::protobuf::Message {
 public:
  TrialAddTicketReq();
  virtual ~TrialAddTicketReq();

  TrialAddTicketReq(const TrialAddTicketReq& from);

  inline TrialAddTicketReq& operator=(const TrialAddTicketReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialAddTicketReq& default_instance();

  void Swap(TrialAddTicketReq* other);

  // implements Message ----------------------------------------------

  TrialAddTicketReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialAddTicketReq& from);
  void MergeFrom(const TrialAddTicketReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrialAddTicketReq)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialAddTicketReq* default_instance_;
};
// -------------------------------------------------------------------

class TrialAddTicketResp : public ::google::protobuf::Message {
 public:
  TrialAddTicketResp();
  virtual ~TrialAddTicketResp();

  TrialAddTicketResp(const TrialAddTicketResp& from);

  inline TrialAddTicketResp& operator=(const TrialAddTicketResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialAddTicketResp& default_instance();

  void Swap(TrialAddTicketResp* other);

  // implements Message ----------------------------------------------

  TrialAddTicketResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialAddTicketResp& from);
  void MergeFrom(const TrialAddTicketResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // optional int32 ticket_num = 3;
  inline bool has_ticket_num() const;
  inline void clear_ticket_num();
  static const int kTicketNumFieldNumber = 3;
  inline ::google::protobuf::int32 ticket_num() const;
  inline void set_ticket_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrialAddTicketResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();
  inline void set_has_ticket_num();
  inline void clear_has_ticket_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 ticket_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialAddTicketResp* default_instance_;
};
// -------------------------------------------------------------------

class TrialGetTimesReq : public ::google::protobuf::Message {
 public:
  TrialGetTimesReq();
  virtual ~TrialGetTimesReq();

  TrialGetTimesReq(const TrialGetTimesReq& from);

  inline TrialGetTimesReq& operator=(const TrialGetTimesReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialGetTimesReq& default_instance();

  void Swap(TrialGetTimesReq* other);

  // implements Message ----------------------------------------------

  TrialGetTimesReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialGetTimesReq& from);
  void MergeFrom(const TrialGetTimesReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrialGetTimesReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialGetTimesReq* default_instance_;
};
// -------------------------------------------------------------------

class TrialGetTimesResp : public ::google::protobuf::Message {
 public:
  TrialGetTimesResp();
  virtual ~TrialGetTimesResp();

  TrialGetTimesResp(const TrialGetTimesResp& from);

  inline TrialGetTimesResp& operator=(const TrialGetTimesResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialGetTimesResp& default_instance();

  void Swap(TrialGetTimesResp* other);

  // implements Message ----------------------------------------------

  TrialGetTimesResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialGetTimesResp& from);
  void MergeFrom(const TrialGetTimesResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 ticket_num = 2;
  inline bool has_ticket_num() const;
  inline void clear_ticket_num();
  static const int kTicketNumFieldNumber = 2;
  inline ::google::protobuf::int32 ticket_num() const;
  inline void set_ticket_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrialGetTimesResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ticket_num();
  inline void clear_has_ticket_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 ticket_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialGetTimesResp* default_instance_;
};
// -------------------------------------------------------------------

class TrialAreaReq : public ::google::protobuf::Message {
 public:
  TrialAreaReq();
  virtual ~TrialAreaReq();

  TrialAreaReq(const TrialAreaReq& from);

  inline TrialAreaReq& operator=(const TrialAreaReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialAreaReq& default_instance();

  void Swap(TrialAreaReq* other);

  // implements Message ----------------------------------------------

  TrialAreaReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialAreaReq& from);
  void MergeFrom(const TrialAreaReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 area_id = 2;
  inline bool has_area_id() const;
  inline void clear_area_id();
  static const int kAreaIdFieldNumber = 2;
  inline ::google::protobuf::int32 area_id() const;
  inline void set_area_id(::google::protobuf::int32 value);

  // repeated int32 lineup = 3;
  inline int lineup_size() const;
  inline void clear_lineup();
  static const int kLineupFieldNumber = 3;
  inline ::google::protobuf::int32 lineup(int index) const;
  inline void set_lineup(int index, ::google::protobuf::int32 value);
  inline void add_lineup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lineup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lineup();

  // @@protoc_insertion_point(class_scope:TrialAreaReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_area_id();
  inline void clear_has_area_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 area_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lineup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialAreaReq* default_instance_;
};
// -------------------------------------------------------------------

class TrialAreaResp : public ::google::protobuf::Message {
 public:
  TrialAreaResp();
  virtual ~TrialAreaResp();

  TrialAreaResp(const TrialAreaResp& from);

  inline TrialAreaResp& operator=(const TrialAreaResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialAreaResp& default_instance();

  void Swap(TrialAreaResp* other);

  // implements Message ----------------------------------------------

  TrialAreaResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialAreaResp& from);
  void MergeFrom(const TrialAreaResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // @@protoc_insertion_point(class_scope:TrialAreaResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialAreaResp* default_instance_;
};
// -------------------------------------------------------------------

class TrialGetRewardReq : public ::google::protobuf::Message {
 public:
  TrialGetRewardReq();
  virtual ~TrialGetRewardReq();

  TrialGetRewardReq(const TrialGetRewardReq& from);

  inline TrialGetRewardReq& operator=(const TrialGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialGetRewardReq& default_instance();

  void Swap(TrialGetRewardReq* other);

  // implements Message ----------------------------------------------

  TrialGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialGetRewardReq& from);
  void MergeFrom(const TrialGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 copy_id = 1;
  inline bool has_copy_id() const;
  inline void clear_copy_id();
  static const int kCopyIdFieldNumber = 1;
  inline ::google::protobuf::int32 copy_id() const;
  inline void set_copy_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrialGetRewardReq)
 private:
  inline void set_has_copy_id();
  inline void clear_has_copy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 copy_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class TrialGetRewardResp : public ::google::protobuf::Message {
 public:
  TrialGetRewardResp();
  virtual ~TrialGetRewardResp();

  TrialGetRewardResp(const TrialGetRewardResp& from);

  inline TrialGetRewardResp& operator=(const TrialGetRewardResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialGetRewardResp& default_instance();

  void Swap(TrialGetRewardResp* other);

  // implements Message ----------------------------------------------

  TrialGetRewardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialGetRewardResp& from);
  void MergeFrom(const TrialGetRewardResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // optional int32 copy_id = 3;
  inline bool has_copy_id() const;
  inline void clear_copy_id();
  static const int kCopyIdFieldNumber = 3;
  inline ::google::protobuf::int32 copy_id() const;
  inline void set_copy_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrialGetRewardResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();
  inline void set_has_copy_id();
  inline void clear_has_copy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 copy_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialGetRewardResp* default_instance_;
};
// -------------------------------------------------------------------

class TrialBuilding : public ::google::protobuf::Message {
 public:
  TrialBuilding();
  virtual ~TrialBuilding();

  TrialBuilding(const TrialBuilding& from);

  inline TrialBuilding& operator=(const TrialBuilding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialBuilding& default_instance();

  void Swap(TrialBuilding* other);

  // implements Message ----------------------------------------------

  TrialBuilding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialBuilding& from);
  void MergeFrom(const TrialBuilding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // repeated int32 lineup = 2;
  inline int lineup_size() const;
  inline void clear_lineup();
  static const int kLineupFieldNumber = 2;
  inline ::google::protobuf::int32 lineup(int index) const;
  inline void set_lineup(int index, ::google::protobuf::int32 value);
  inline void add_lineup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lineup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lineup();

  // repeated int32 id_lineup = 3;
  inline int id_lineup_size() const;
  inline void clear_id_lineup();
  static const int kIdLineupFieldNumber = 3;
  inline ::google::protobuf::int32 id_lineup(int index) const;
  inline void set_id_lineup(int index, ::google::protobuf::int32 value);
  inline void add_id_lineup(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_lineup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_lineup();

  // @@protoc_insertion_point(class_scope:TrialBuilding)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lineup_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_lineup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialBuilding* default_instance_;
};
// -------------------------------------------------------------------

class TrialGetBuildingInfoReq : public ::google::protobuf::Message {
 public:
  TrialGetBuildingInfoReq();
  virtual ~TrialGetBuildingInfoReq();

  TrialGetBuildingInfoReq(const TrialGetBuildingInfoReq& from);

  inline TrialGetBuildingInfoReq& operator=(const TrialGetBuildingInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialGetBuildingInfoReq& default_instance();

  void Swap(TrialGetBuildingInfoReq* other);

  // implements Message ----------------------------------------------

  TrialGetBuildingInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialGetBuildingInfoReq& from);
  void MergeFrom(const TrialGetBuildingInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level_id = 1;
  inline bool has_level_id() const;
  inline void clear_level_id();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::int32 level_id() const;
  inline void set_level_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrialGetBuildingInfoReq)
 private:
  inline void set_has_level_id();
  inline void clear_has_level_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialGetBuildingInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class TrialGetBuildingInfoResp : public ::google::protobuf::Message {
 public:
  TrialGetBuildingInfoResp();
  virtual ~TrialGetBuildingInfoResp();

  TrialGetBuildingInfoResp(const TrialGetBuildingInfoResp& from);

  inline TrialGetBuildingInfoResp& operator=(const TrialGetBuildingInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialGetBuildingInfoResp& default_instance();

  void Swap(TrialGetBuildingInfoResp* other);

  // implements Message ----------------------------------------------

  TrialGetBuildingInfoResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialGetBuildingInfoResp& from);
  void MergeFrom(const TrialGetBuildingInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .TrialBuilding building_info = 3;
  inline bool has_building_info() const;
  inline void clear_building_info();
  static const int kBuildingInfoFieldNumber = 3;
  inline const ::TrialBuilding& building_info() const;
  inline ::TrialBuilding* mutable_building_info();
  inline ::TrialBuilding* release_building_info();
  inline void set_allocated_building_info(::TrialBuilding* building_info);

  // @@protoc_insertion_point(class_scope:TrialGetBuildingInfoResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_building_info();
  inline void clear_has_building_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  ::TrialBuilding* building_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialGetBuildingInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class TrialPveStartReq : public ::google::protobuf::Message {
 public:
  TrialPveStartReq();
  virtual ~TrialPveStartReq();

  TrialPveStartReq(const TrialPveStartReq& from);

  inline TrialPveStartReq& operator=(const TrialPveStartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialPveStartReq& default_instance();

  void Swap(TrialPveStartReq* other);

  // implements Message ----------------------------------------------

  TrialPveStartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialPveStartReq& from);
  void MergeFrom(const TrialPveStartReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 level_id = 2;
  inline bool has_level_id() const;
  inline void clear_level_id();
  static const int kLevelIdFieldNumber = 2;
  inline ::google::protobuf::int32 level_id() const;
  inline void set_level_id(::google::protobuf::int32 value);

  // optional string target_name = 3;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 3;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // @@protoc_insertion_point(class_scope:TrialPveStartReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level_id();
  inline void clear_has_level_id();
  inline void set_has_target_name();
  inline void clear_has_target_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_id_;
  ::std::string* target_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialPveStartReq* default_instance_;
};
// -------------------------------------------------------------------

class TrialPveStartResp : public ::google::protobuf::Message {
 public:
  TrialPveStartResp();
  virtual ~TrialPveStartResp();

  TrialPveStartResp(const TrialPveStartResp& from);

  inline TrialPveStartResp& operator=(const TrialPveStartResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialPveStartResp& default_instance();

  void Swap(TrialPveStartResp* other);

  // implements Message ----------------------------------------------

  TrialPveStartResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialPveStartResp& from);
  void MergeFrom(const TrialPveStartResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // repeated .AirShip attack_list = 3;
  inline int attack_list_size() const;
  inline void clear_attack_list();
  static const int kAttackListFieldNumber = 3;
  inline const ::AirShip& attack_list(int index) const;
  inline ::AirShip* mutable_attack_list(int index);
  inline ::AirShip* add_attack_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
      attack_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
      mutable_attack_list();

  // repeated .AirShip hurter_list = 4;
  inline int hurter_list_size() const;
  inline void clear_hurter_list();
  static const int kHurterListFieldNumber = 4;
  inline const ::AirShip& hurter_list(int index) const;
  inline ::AirShip* mutable_hurter_list(int index);
  inline ::AirShip* add_hurter_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
      hurter_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
      mutable_hurter_list();

  // optional int32 level_id = 5;
  inline bool has_level_id() const;
  inline void clear_level_id();
  static const int kLevelIdFieldNumber = 5;
  inline ::google::protobuf::int32 level_id() const;
  inline void set_level_id(::google::protobuf::int32 value);

  // repeated int32 hp_list = 6;
  inline int hp_list_size() const;
  inline void clear_hp_list();
  static const int kHpListFieldNumber = 6;
  inline ::google::protobuf::int32 hp_list(int index) const;
  inline void set_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hp_list();

  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TrialPveStartResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();
  inline void set_has_level_id();
  inline void clear_has_level_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::RepeatedPtrField< ::AirShip > attack_list_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 level_id_;
  ::google::protobuf::RepeatedPtrField< ::AirShip > hurter_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hp_list_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialPveStartResp* default_instance_;
};
// -------------------------------------------------------------------

class TrialPveEndReq : public ::google::protobuf::Message {
 public:
  TrialPveEndReq();
  virtual ~TrialPveEndReq();

  TrialPveEndReq(const TrialPveEndReq& from);

  inline TrialPveEndReq& operator=(const TrialPveEndReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialPveEndReq& default_instance();

  void Swap(TrialPveEndReq* other);

  // implements Message ----------------------------------------------

  TrialPveEndReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialPveEndReq& from);
  void MergeFrom(const TrialPveEndReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level_id = 1;
  inline bool has_level_id() const;
  inline void clear_level_id();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::int32 level_id() const;
  inline void set_level_id(::google::protobuf::int32 value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // repeated int32 hp_list = 4;
  inline int hp_list_size() const;
  inline void clear_hp_list();
  static const int kHpListFieldNumber = 4;
  inline ::google::protobuf::int32 hp_list(int index) const;
  inline void set_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hp_list();

  // @@protoc_insertion_point(class_scope:TrialPveEndReq)
 private:
  inline void set_has_level_id();
  inline void clear_has_level_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_id_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hp_list_;
  ::google::protobuf::int32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialPveEndReq* default_instance_;
};
// -------------------------------------------------------------------

class TrialPveEndResp : public ::google::protobuf::Message {
 public:
  TrialPveEndResp();
  virtual ~TrialPveEndResp();

  TrialPveEndResp(const TrialPveEndResp& from);

  inline TrialPveEndResp& operator=(const TrialPveEndResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialPveEndResp& default_instance();

  void Swap(TrialPveEndResp* other);

  // implements Message ----------------------------------------------

  TrialPveEndResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialPveEndResp& from);
  void MergeFrom(const TrialPveEndResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // optional int32 level_id = 3;
  inline bool has_level_id() const;
  inline void clear_level_id();
  static const int kLevelIdFieldNumber = 3;
  inline ::google::protobuf::int32 level_id() const;
  inline void set_level_id(::google::protobuf::int32 value);

  // optional bool reward_flag = 4;
  inline bool has_reward_flag() const;
  inline void clear_reward_flag();
  static const int kRewardFlagFieldNumber = 4;
  inline bool reward_flag() const;
  inline void set_reward_flag(bool value);

  // repeated .Pair get_item_list = 5;
  inline int get_item_list_size() const;
  inline void clear_get_item_list();
  static const int kGetItemListFieldNumber = 5;
  inline const ::Pair& get_item_list(int index) const;
  inline ::Pair* mutable_get_item_list(int index);
  inline ::Pair* add_get_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Pair >&
      get_item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pair >*
      mutable_get_item_list();

  // @@protoc_insertion_point(class_scope:TrialPveEndResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();
  inline void set_has_level_id();
  inline void clear_has_level_id();
  inline void set_has_reward_flag();
  inline void clear_has_reward_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 level_id_;
  ::google::protobuf::RepeatedPtrField< ::Pair > get_item_list_;
  bool reward_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CmdTrial_2eproto();
  friend void protobuf_AssignDesc_CmdTrial_2eproto();
  friend void protobuf_ShutdownFile_CmdTrial_2eproto();

  void InitAsDefaultInstance();
  static TrialPveEndResp* default_instance_;
};
// ===================================================================


// ===================================================================

// TrialAddTicketReq

// required int32 item_id = 1;
inline bool TrialAddTicketReq::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialAddTicketReq::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialAddTicketReq::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialAddTicketReq::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 TrialAddTicketReq::item_id() const {
  return item_id_;
}
inline void TrialAddTicketReq::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required int32 num = 2;
inline bool TrialAddTicketReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialAddTicketReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialAddTicketReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialAddTicketReq::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TrialAddTicketReq::num() const {
  return num_;
}
inline void TrialAddTicketReq::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// TrialAddTicketResp

// required int32 result = 1;
inline bool TrialAddTicketResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialAddTicketResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialAddTicketResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialAddTicketResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrialAddTicketResp::result() const {
  return result_;
}
inline void TrialAddTicketResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool TrialAddTicketResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialAddTicketResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialAddTicketResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialAddTicketResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& TrialAddTicketResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* TrialAddTicketResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* TrialAddTicketResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void TrialAddTicketResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// optional int32 ticket_num = 3;
inline bool TrialAddTicketResp::has_ticket_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialAddTicketResp::set_has_ticket_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrialAddTicketResp::clear_has_ticket_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrialAddTicketResp::clear_ticket_num() {
  ticket_num_ = 0;
  clear_has_ticket_num();
}
inline ::google::protobuf::int32 TrialAddTicketResp::ticket_num() const {
  return ticket_num_;
}
inline void TrialAddTicketResp::set_ticket_num(::google::protobuf::int32 value) {
  set_has_ticket_num();
  ticket_num_ = value;
}

// -------------------------------------------------------------------

// TrialGetTimesReq

// required int32 type = 1;
inline bool TrialGetTimesReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialGetTimesReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialGetTimesReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialGetTimesReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TrialGetTimesReq::type() const {
  return type_;
}
inline void TrialGetTimesReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TrialGetTimesResp

// required int32 result = 1;
inline bool TrialGetTimesResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialGetTimesResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialGetTimesResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialGetTimesResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrialGetTimesResp::result() const {
  return result_;
}
inline void TrialGetTimesResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 ticket_num = 2;
inline bool TrialGetTimesResp::has_ticket_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialGetTimesResp::set_has_ticket_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialGetTimesResp::clear_has_ticket_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialGetTimesResp::clear_ticket_num() {
  ticket_num_ = 0;
  clear_has_ticket_num();
}
inline ::google::protobuf::int32 TrialGetTimesResp::ticket_num() const {
  return ticket_num_;
}
inline void TrialGetTimesResp::set_ticket_num(::google::protobuf::int32 value) {
  set_has_ticket_num();
  ticket_num_ = value;
}

// -------------------------------------------------------------------

// TrialAreaReq

// required int32 type = 1;
inline bool TrialAreaReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialAreaReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialAreaReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialAreaReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TrialAreaReq::type() const {
  return type_;
}
inline void TrialAreaReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 area_id = 2;
inline bool TrialAreaReq::has_area_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialAreaReq::set_has_area_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialAreaReq::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialAreaReq::clear_area_id() {
  area_id_ = 0;
  clear_has_area_id();
}
inline ::google::protobuf::int32 TrialAreaReq::area_id() const {
  return area_id_;
}
inline void TrialAreaReq::set_area_id(::google::protobuf::int32 value) {
  set_has_area_id();
  area_id_ = value;
}

// repeated int32 lineup = 3;
inline int TrialAreaReq::lineup_size() const {
  return lineup_.size();
}
inline void TrialAreaReq::clear_lineup() {
  lineup_.Clear();
}
inline ::google::protobuf::int32 TrialAreaReq::lineup(int index) const {
  return lineup_.Get(index);
}
inline void TrialAreaReq::set_lineup(int index, ::google::protobuf::int32 value) {
  lineup_.Set(index, value);
}
inline void TrialAreaReq::add_lineup(::google::protobuf::int32 value) {
  lineup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrialAreaReq::lineup() const {
  return lineup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrialAreaReq::mutable_lineup() {
  return &lineup_;
}

// -------------------------------------------------------------------

// TrialAreaResp

// required int32 result = 1;
inline bool TrialAreaResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialAreaResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialAreaResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialAreaResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrialAreaResp::result() const {
  return result_;
}
inline void TrialAreaResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool TrialAreaResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialAreaResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialAreaResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialAreaResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& TrialAreaResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* TrialAreaResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* TrialAreaResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void TrialAreaResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// -------------------------------------------------------------------

// TrialGetRewardReq

// required int32 copy_id = 1;
inline bool TrialGetRewardReq::has_copy_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialGetRewardReq::set_has_copy_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialGetRewardReq::clear_has_copy_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialGetRewardReq::clear_copy_id() {
  copy_id_ = 0;
  clear_has_copy_id();
}
inline ::google::protobuf::int32 TrialGetRewardReq::copy_id() const {
  return copy_id_;
}
inline void TrialGetRewardReq::set_copy_id(::google::protobuf::int32 value) {
  set_has_copy_id();
  copy_id_ = value;
}

// -------------------------------------------------------------------

// TrialGetRewardResp

// required int32 result = 1;
inline bool TrialGetRewardResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialGetRewardResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialGetRewardResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialGetRewardResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrialGetRewardResp::result() const {
  return result_;
}
inline void TrialGetRewardResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool TrialGetRewardResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialGetRewardResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialGetRewardResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialGetRewardResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& TrialGetRewardResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* TrialGetRewardResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* TrialGetRewardResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void TrialGetRewardResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// optional int32 copy_id = 3;
inline bool TrialGetRewardResp::has_copy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialGetRewardResp::set_has_copy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrialGetRewardResp::clear_has_copy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrialGetRewardResp::clear_copy_id() {
  copy_id_ = 0;
  clear_has_copy_id();
}
inline ::google::protobuf::int32 TrialGetRewardResp::copy_id() const {
  return copy_id_;
}
inline void TrialGetRewardResp::set_copy_id(::google::protobuf::int32 value) {
  set_has_copy_id();
  copy_id_ = value;
}

// -------------------------------------------------------------------

// TrialBuilding

// required string user_name = 1;
inline bool TrialBuilding::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialBuilding::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialBuilding::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialBuilding::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& TrialBuilding::user_name() const {
  return *user_name_;
}
inline void TrialBuilding::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void TrialBuilding::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void TrialBuilding::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrialBuilding::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* TrialBuilding::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrialBuilding::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 lineup = 2;
inline int TrialBuilding::lineup_size() const {
  return lineup_.size();
}
inline void TrialBuilding::clear_lineup() {
  lineup_.Clear();
}
inline ::google::protobuf::int32 TrialBuilding::lineup(int index) const {
  return lineup_.Get(index);
}
inline void TrialBuilding::set_lineup(int index, ::google::protobuf::int32 value) {
  lineup_.Set(index, value);
}
inline void TrialBuilding::add_lineup(::google::protobuf::int32 value) {
  lineup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrialBuilding::lineup() const {
  return lineup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrialBuilding::mutable_lineup() {
  return &lineup_;
}

// repeated int32 id_lineup = 3;
inline int TrialBuilding::id_lineup_size() const {
  return id_lineup_.size();
}
inline void TrialBuilding::clear_id_lineup() {
  id_lineup_.Clear();
}
inline ::google::protobuf::int32 TrialBuilding::id_lineup(int index) const {
  return id_lineup_.Get(index);
}
inline void TrialBuilding::set_id_lineup(int index, ::google::protobuf::int32 value) {
  id_lineup_.Set(index, value);
}
inline void TrialBuilding::add_id_lineup(::google::protobuf::int32 value) {
  id_lineup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrialBuilding::id_lineup() const {
  return id_lineup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrialBuilding::mutable_id_lineup() {
  return &id_lineup_;
}

// -------------------------------------------------------------------

// TrialGetBuildingInfoReq

// required int32 level_id = 1;
inline bool TrialGetBuildingInfoReq::has_level_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialGetBuildingInfoReq::set_has_level_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialGetBuildingInfoReq::clear_has_level_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialGetBuildingInfoReq::clear_level_id() {
  level_id_ = 0;
  clear_has_level_id();
}
inline ::google::protobuf::int32 TrialGetBuildingInfoReq::level_id() const {
  return level_id_;
}
inline void TrialGetBuildingInfoReq::set_level_id(::google::protobuf::int32 value) {
  set_has_level_id();
  level_id_ = value;
}

// -------------------------------------------------------------------

// TrialGetBuildingInfoResp

// required int32 result = 1;
inline bool TrialGetBuildingInfoResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialGetBuildingInfoResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialGetBuildingInfoResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialGetBuildingInfoResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrialGetBuildingInfoResp::result() const {
  return result_;
}
inline void TrialGetBuildingInfoResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 type = 2;
inline bool TrialGetBuildingInfoResp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialGetBuildingInfoResp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialGetBuildingInfoResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialGetBuildingInfoResp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TrialGetBuildingInfoResp::type() const {
  return type_;
}
inline void TrialGetBuildingInfoResp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .TrialBuilding building_info = 3;
inline bool TrialGetBuildingInfoResp::has_building_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialGetBuildingInfoResp::set_has_building_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrialGetBuildingInfoResp::clear_has_building_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrialGetBuildingInfoResp::clear_building_info() {
  if (building_info_ != NULL) building_info_->::TrialBuilding::Clear();
  clear_has_building_info();
}
inline const ::TrialBuilding& TrialGetBuildingInfoResp::building_info() const {
  return building_info_ != NULL ? *building_info_ : *default_instance_->building_info_;
}
inline ::TrialBuilding* TrialGetBuildingInfoResp::mutable_building_info() {
  set_has_building_info();
  if (building_info_ == NULL) building_info_ = new ::TrialBuilding;
  return building_info_;
}
inline ::TrialBuilding* TrialGetBuildingInfoResp::release_building_info() {
  clear_has_building_info();
  ::TrialBuilding* temp = building_info_;
  building_info_ = NULL;
  return temp;
}
inline void TrialGetBuildingInfoResp::set_allocated_building_info(::TrialBuilding* building_info) {
  delete building_info_;
  building_info_ = building_info;
  if (building_info) {
    set_has_building_info();
  } else {
    clear_has_building_info();
  }
}

// -------------------------------------------------------------------

// TrialPveStartReq

// required int32 type = 1;
inline bool TrialPveStartReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialPveStartReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialPveStartReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialPveStartReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TrialPveStartReq::type() const {
  return type_;
}
inline void TrialPveStartReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 level_id = 2;
inline bool TrialPveStartReq::has_level_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialPveStartReq::set_has_level_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialPveStartReq::clear_has_level_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialPveStartReq::clear_level_id() {
  level_id_ = 0;
  clear_has_level_id();
}
inline ::google::protobuf::int32 TrialPveStartReq::level_id() const {
  return level_id_;
}
inline void TrialPveStartReq::set_level_id(::google::protobuf::int32 value) {
  set_has_level_id();
  level_id_ = value;
}

// optional string target_name = 3;
inline bool TrialPveStartReq::has_target_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialPveStartReq::set_has_target_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrialPveStartReq::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrialPveStartReq::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& TrialPveStartReq::target_name() const {
  return *target_name_;
}
inline void TrialPveStartReq::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void TrialPveStartReq::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void TrialPveStartReq::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrialPveStartReq::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* TrialPveStartReq::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrialPveStartReq::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TrialPveStartResp

// required int32 result = 1;
inline bool TrialPveStartResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialPveStartResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialPveStartResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialPveStartResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrialPveStartResp::result() const {
  return result_;
}
inline void TrialPveStartResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool TrialPveStartResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialPveStartResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialPveStartResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialPveStartResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& TrialPveStartResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* TrialPveStartResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* TrialPveStartResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void TrialPveStartResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// repeated .AirShip attack_list = 3;
inline int TrialPveStartResp::attack_list_size() const {
  return attack_list_.size();
}
inline void TrialPveStartResp::clear_attack_list() {
  attack_list_.Clear();
}
inline const ::AirShip& TrialPveStartResp::attack_list(int index) const {
  return attack_list_.Get(index);
}
inline ::AirShip* TrialPveStartResp::mutable_attack_list(int index) {
  return attack_list_.Mutable(index);
}
inline ::AirShip* TrialPveStartResp::add_attack_list() {
  return attack_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
TrialPveStartResp::attack_list() const {
  return attack_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
TrialPveStartResp::mutable_attack_list() {
  return &attack_list_;
}

// repeated .AirShip hurter_list = 4;
inline int TrialPveStartResp::hurter_list_size() const {
  return hurter_list_.size();
}
inline void TrialPveStartResp::clear_hurter_list() {
  hurter_list_.Clear();
}
inline const ::AirShip& TrialPveStartResp::hurter_list(int index) const {
  return hurter_list_.Get(index);
}
inline ::AirShip* TrialPveStartResp::mutable_hurter_list(int index) {
  return hurter_list_.Mutable(index);
}
inline ::AirShip* TrialPveStartResp::add_hurter_list() {
  return hurter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
TrialPveStartResp::hurter_list() const {
  return hurter_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
TrialPveStartResp::mutable_hurter_list() {
  return &hurter_list_;
}

// optional int32 level_id = 5;
inline bool TrialPveStartResp::has_level_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrialPveStartResp::set_has_level_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrialPveStartResp::clear_has_level_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrialPveStartResp::clear_level_id() {
  level_id_ = 0;
  clear_has_level_id();
}
inline ::google::protobuf::int32 TrialPveStartResp::level_id() const {
  return level_id_;
}
inline void TrialPveStartResp::set_level_id(::google::protobuf::int32 value) {
  set_has_level_id();
  level_id_ = value;
}

// repeated int32 hp_list = 6;
inline int TrialPveStartResp::hp_list_size() const {
  return hp_list_.size();
}
inline void TrialPveStartResp::clear_hp_list() {
  hp_list_.Clear();
}
inline ::google::protobuf::int32 TrialPveStartResp::hp_list(int index) const {
  return hp_list_.Get(index);
}
inline void TrialPveStartResp::set_hp_list(int index, ::google::protobuf::int32 value) {
  hp_list_.Set(index, value);
}
inline void TrialPveStartResp::add_hp_list(::google::protobuf::int32 value) {
  hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrialPveStartResp::hp_list() const {
  return hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrialPveStartResp::mutable_hp_list() {
  return &hp_list_;
}

// optional int32 type = 7;
inline bool TrialPveStartResp::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrialPveStartResp::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrialPveStartResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrialPveStartResp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TrialPveStartResp::type() const {
  return type_;
}
inline void TrialPveStartResp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TrialPveEndReq

// required int32 level_id = 1;
inline bool TrialPveEndReq::has_level_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialPveEndReq::set_has_level_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialPveEndReq::clear_has_level_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialPveEndReq::clear_level_id() {
  level_id_ = 0;
  clear_has_level_id();
}
inline ::google::protobuf::int32 TrialPveEndReq::level_id() const {
  return level_id_;
}
inline void TrialPveEndReq::set_level_id(::google::protobuf::int32 value) {
  set_has_level_id();
  level_id_ = value;
}

// required int32 result = 2;
inline bool TrialPveEndReq::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialPveEndReq::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialPveEndReq::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialPveEndReq::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrialPveEndReq::result() const {
  return result_;
}
inline void TrialPveEndReq::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 star = 3;
inline bool TrialPveEndReq::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialPveEndReq::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrialPveEndReq::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrialPveEndReq::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 TrialPveEndReq::star() const {
  return star_;
}
inline void TrialPveEndReq::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// repeated int32 hp_list = 4;
inline int TrialPveEndReq::hp_list_size() const {
  return hp_list_.size();
}
inline void TrialPveEndReq::clear_hp_list() {
  hp_list_.Clear();
}
inline ::google::protobuf::int32 TrialPveEndReq::hp_list(int index) const {
  return hp_list_.Get(index);
}
inline void TrialPveEndReq::set_hp_list(int index, ::google::protobuf::int32 value) {
  hp_list_.Set(index, value);
}
inline void TrialPveEndReq::add_hp_list(::google::protobuf::int32 value) {
  hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TrialPveEndReq::hp_list() const {
  return hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TrialPveEndReq::mutable_hp_list() {
  return &hp_list_;
}

// -------------------------------------------------------------------

// TrialPveEndResp

// required int32 result = 1;
inline bool TrialPveEndResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialPveEndResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialPveEndResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialPveEndResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 TrialPveEndResp::result() const {
  return result_;
}
inline void TrialPveEndResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool TrialPveEndResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialPveEndResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialPveEndResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialPveEndResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& TrialPveEndResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* TrialPveEndResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* TrialPveEndResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void TrialPveEndResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// optional int32 level_id = 3;
inline bool TrialPveEndResp::has_level_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialPveEndResp::set_has_level_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrialPveEndResp::clear_has_level_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrialPveEndResp::clear_level_id() {
  level_id_ = 0;
  clear_has_level_id();
}
inline ::google::protobuf::int32 TrialPveEndResp::level_id() const {
  return level_id_;
}
inline void TrialPveEndResp::set_level_id(::google::protobuf::int32 value) {
  set_has_level_id();
  level_id_ = value;
}

// optional bool reward_flag = 4;
inline bool TrialPveEndResp::has_reward_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrialPveEndResp::set_has_reward_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrialPveEndResp::clear_has_reward_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrialPveEndResp::clear_reward_flag() {
  reward_flag_ = false;
  clear_has_reward_flag();
}
inline bool TrialPveEndResp::reward_flag() const {
  return reward_flag_;
}
inline void TrialPveEndResp::set_reward_flag(bool value) {
  set_has_reward_flag();
  reward_flag_ = value;
}

// repeated .Pair get_item_list = 5;
inline int TrialPveEndResp::get_item_list_size() const {
  return get_item_list_.size();
}
inline void TrialPveEndResp::clear_get_item_list() {
  get_item_list_.Clear();
}
inline const ::Pair& TrialPveEndResp::get_item_list(int index) const {
  return get_item_list_.Get(index);
}
inline ::Pair* TrialPveEndResp::mutable_get_item_list(int index) {
  return get_item_list_.Mutable(index);
}
inline ::Pair* TrialPveEndResp::add_get_item_list() {
  return get_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pair >&
TrialPveEndResp::get_item_list() const {
  return get_item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pair >*
TrialPveEndResp::mutable_get_item_list() {
  return &get_item_list_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CmdTrial_2eproto__INCLUDED
