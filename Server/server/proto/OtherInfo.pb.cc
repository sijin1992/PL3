// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OtherInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OtherInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* OtherUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherGroupInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OtherInfo_2eproto() {
  protobuf_AddDesc_OtherInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OtherInfo.proto");
  GOOGLE_CHECK(file != NULL);
  OtherUserInfo_descriptor_ = file->message_type(0);
  static const int OtherUserInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, id_lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, lv_lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, group_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, level_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, power_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, building_level_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, main_city_level_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, max_trial_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, max_trial_level_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, max_trial_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, break_lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, attack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, defence_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, vip_level_),
  };
  OtherUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherUserInfo_descriptor_,
      OtherUserInfo::default_instance_,
      OtherUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherUserInfo));
  OtherGroupInfo_descriptor_ = file->message_type(1);
  static const int OtherGroupInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGroupInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGroupInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGroupInfo, icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGroupInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGroupInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGroupInfo, leader_name_),
  };
  OtherGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherGroupInfo_descriptor_,
      OtherGroupInfo::default_instance_,
      OtherGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherGroupInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OtherInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherUserInfo_descriptor_, &OtherUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherGroupInfo_descriptor_, &OtherGroupInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OtherInfo_2eproto() {
  delete OtherUserInfo::default_instance_;
  delete OtherUserInfo_reflection_;
  delete OtherGroupInfo::default_instance_;
  delete OtherGroupInfo_reflection_;
}

void protobuf_AddDesc_OtherInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017OtherInfo.proto\"\315\003\n\rOtherUserInfo\022\021\n\tu"
    "ser_name\030\001 \002(\t\022\020\n\010nickname\030\002 \001(\t\022\r\n\005powe"
    "r\030\003 \001(\005\022\021\n\tid_lineup\030\004 \003(\005\022\r\n\005level\030\005 \002("
    "\005\022\021\n\tlv_lineup\030\006 \003(\005\022\017\n\007icon_id\030\007 \002(\005\022\026\n"
    "\016group_nickname\030\010 \001(\t\022\022\n\nlevel_rank\030\t \001("
    "\005\022\022\n\npower_rank\030\n \001(\005\022\033\n\023building_level_"
    "list\030\013 \003(\005\022\034\n\024main_city_level_rank\030\014 \001(\005"
    "\022\027\n\017max_trial_level\030\r \001(\005\022\034\n\024max_trial_l"
    "evel_rank\030\016 \001(\005\022\026\n\016max_trial_star\030\017 \001(\005\022"
    "\024\n\014break_lineup\030\020 \003(\005\022\024\n\014attack_count\030\021 "
    "\001(\005\022\025\n\rdefence_count\030\022 \001(\005\022\021\n\twin_count\030"
    "\023 \001(\005\022\017\n\007groupid\030\024 \001(\t\022\021\n\tvip_level\030\025 \001("
    "\005\"w\n\016OtherGroupInfo\022\017\n\007groupid\030\001 \002(\t\022\020\n\010"
    "nickname\030\002 \001(\t\022\017\n\007icon_id\030\003 \001(\005\022\r\n\005level"
    "\030\004 \001(\005\022\r\n\005power\030\005 \001(\005\022\023\n\013leader_name\030\006 \001"
    "(\t", 602);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OtherInfo.proto", &protobuf_RegisterTypes);
  OtherUserInfo::default_instance_ = new OtherUserInfo();
  OtherGroupInfo::default_instance_ = new OtherGroupInfo();
  OtherUserInfo::default_instance_->InitAsDefaultInstance();
  OtherGroupInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OtherInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OtherInfo_2eproto {
  StaticDescriptorInitializer_OtherInfo_2eproto() {
    protobuf_AddDesc_OtherInfo_2eproto();
  }
} static_descriptor_initializer_OtherInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OtherUserInfo::kUserNameFieldNumber;
const int OtherUserInfo::kNicknameFieldNumber;
const int OtherUserInfo::kPowerFieldNumber;
const int OtherUserInfo::kIdLineupFieldNumber;
const int OtherUserInfo::kLevelFieldNumber;
const int OtherUserInfo::kLvLineupFieldNumber;
const int OtherUserInfo::kIconIdFieldNumber;
const int OtherUserInfo::kGroupNicknameFieldNumber;
const int OtherUserInfo::kLevelRankFieldNumber;
const int OtherUserInfo::kPowerRankFieldNumber;
const int OtherUserInfo::kBuildingLevelListFieldNumber;
const int OtherUserInfo::kMainCityLevelRankFieldNumber;
const int OtherUserInfo::kMaxTrialLevelFieldNumber;
const int OtherUserInfo::kMaxTrialLevelRankFieldNumber;
const int OtherUserInfo::kMaxTrialStarFieldNumber;
const int OtherUserInfo::kBreakLineupFieldNumber;
const int OtherUserInfo::kAttackCountFieldNumber;
const int OtherUserInfo::kDefenceCountFieldNumber;
const int OtherUserInfo::kWinCountFieldNumber;
const int OtherUserInfo::kGroupidFieldNumber;
const int OtherUserInfo::kVipLevelFieldNumber;
#endif  // !_MSC_VER

OtherUserInfo::OtherUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherUserInfo::InitAsDefaultInstance() {
}

OtherUserInfo::OtherUserInfo(const OtherUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherUserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  level_ = 0;
  icon_id_ = 0;
  group_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_rank_ = 0;
  power_rank_ = 0;
  main_city_level_rank_ = 0;
  max_trial_level_ = 0;
  max_trial_level_rank_ = 0;
  max_trial_star_ = 0;
  attack_count_ = 0;
  defence_count_ = 0;
  win_count_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherUserInfo::~OtherUserInfo() {
  SharedDtor();
}

void OtherUserInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete group_nickname_;
  }
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void OtherUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherUserInfo_descriptor_;
}

const OtherUserInfo& OtherUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OtherInfo_2eproto();
  return *default_instance_;
}

OtherUserInfo* OtherUserInfo::default_instance_ = NULL;

OtherUserInfo* OtherUserInfo::New() const {
  return new OtherUserInfo;
}

void OtherUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    power_ = 0;
    level_ = 0;
    icon_id_ = 0;
    if (has_group_nickname()) {
      if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
        group_nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_rank_ = 0;
    power_rank_ = 0;
    main_city_level_rank_ = 0;
    max_trial_level_ = 0;
    max_trial_level_rank_ = 0;
    max_trial_star_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    attack_count_ = 0;
    defence_count_ = 0;
    win_count_ = 0;
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    vip_level_ = 0;
  }
  id_lineup_.Clear();
  lv_lineup_.Clear();
  building_level_list_.Clear();
  break_lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // optional int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id_lineup;
        break;
      }

      // repeated int32 id_lineup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_id_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id_lineup;
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lv_lineup;
        break;
      }

      // repeated int32 lv_lineup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_lv_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lv_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lv_lineup;
        if (input->ExpectTag(56)) goto parse_icon_id;
        break;
      }

      // required int32 icon_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_group_nickname;
        break;
      }

      // optional string group_nickname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_nickname().data(), this->group_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level_rank;
        break;
      }

      // optional int32 level_rank = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_rank_)));
          set_has_level_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_power_rank;
        break;
      }

      // optional int32 power_rank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_rank_)));
          set_has_power_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_building_level_list;
        break;
      }

      // repeated int32 building_level_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_building_level_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_building_level_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_building_level_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_building_level_list;
        if (input->ExpectTag(96)) goto parse_main_city_level_rank;
        break;
      }

      // optional int32 main_city_level_rank = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_city_level_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_city_level_rank_)));
          set_has_main_city_level_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_max_trial_level;
        break;
      }

      // optional int32 max_trial_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_trial_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_trial_level_)));
          set_has_max_trial_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_max_trial_level_rank;
        break;
      }

      // optional int32 max_trial_level_rank = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_trial_level_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_trial_level_rank_)));
          set_has_max_trial_level_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_max_trial_star;
        break;
      }

      // optional int32 max_trial_star = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_trial_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_trial_star_)));
          set_has_max_trial_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_break_lineup;
        break;
      }

      // repeated int32 break_lineup = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_break_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_break_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_break_lineup;
        if (input->ExpectTag(136)) goto parse_attack_count;
        break;
      }

      // optional int32 attack_count = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_defence_count;
        break;
      }

      // optional int32 defence_count = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_count_)));
          set_has_defence_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_win_count;
        break;
      }

      // optional int32 win_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_groupid;
        break;
      }

      // optional string groupid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

  // repeated int32 id_lineup = 4;
  for (int i = 0; i < this->id_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->id_lineup(i), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // repeated int32 lv_lineup = 6;
  for (int i = 0; i < this->lv_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->lv_lineup(i), output);
  }

  // required int32 icon_id = 7;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->icon_id(), output);
  }

  // optional string group_nickname = 8;
  if (has_group_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_nickname().data(), this->group_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->group_nickname(), output);
  }

  // optional int32 level_rank = 9;
  if (has_level_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level_rank(), output);
  }

  // optional int32 power_rank = 10;
  if (has_power_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->power_rank(), output);
  }

  // repeated int32 building_level_list = 11;
  for (int i = 0; i < this->building_level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->building_level_list(i), output);
  }

  // optional int32 main_city_level_rank = 12;
  if (has_main_city_level_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->main_city_level_rank(), output);
  }

  // optional int32 max_trial_level = 13;
  if (has_max_trial_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->max_trial_level(), output);
  }

  // optional int32 max_trial_level_rank = 14;
  if (has_max_trial_level_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->max_trial_level_rank(), output);
  }

  // optional int32 max_trial_star = 15;
  if (has_max_trial_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_trial_star(), output);
  }

  // repeated int32 break_lineup = 16;
  for (int i = 0; i < this->break_lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->break_lineup(i), output);
  }

  // optional int32 attack_count = 17;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->attack_count(), output);
  }

  // optional int32 defence_count = 18;
  if (has_defence_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->defence_count(), output);
  }

  // optional int32 win_count = 19;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->win_count(), output);
  }

  // optional string groupid = 20;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->groupid(), output);
  }

  // optional int32 vip_level = 21;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }

  // repeated int32 id_lineup = 4;
  for (int i = 0; i < this->id_lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->id_lineup(i), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // repeated int32 lv_lineup = 6;
  for (int i = 0; i < this->lv_lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->lv_lineup(i), target);
  }

  // required int32 icon_id = 7;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->icon_id(), target);
  }

  // optional string group_nickname = 8;
  if (has_group_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_nickname().data(), this->group_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->group_nickname(), target);
  }

  // optional int32 level_rank = 9;
  if (has_level_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level_rank(), target);
  }

  // optional int32 power_rank = 10;
  if (has_power_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->power_rank(), target);
  }

  // repeated int32 building_level_list = 11;
  for (int i = 0; i < this->building_level_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->building_level_list(i), target);
  }

  // optional int32 main_city_level_rank = 12;
  if (has_main_city_level_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->main_city_level_rank(), target);
  }

  // optional int32 max_trial_level = 13;
  if (has_max_trial_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->max_trial_level(), target);
  }

  // optional int32 max_trial_level_rank = 14;
  if (has_max_trial_level_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->max_trial_level_rank(), target);
  }

  // optional int32 max_trial_star = 15;
  if (has_max_trial_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->max_trial_star(), target);
  }

  // repeated int32 break_lineup = 16;
  for (int i = 0; i < this->break_lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->break_lineup(i), target);
  }

  // optional int32 attack_count = 17;
  if (has_attack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->attack_count(), target);
  }

  // optional int32 defence_count = 18;
  if (has_defence_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->defence_count(), target);
  }

  // optional int32 win_count = 19;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->win_count(), target);
  }

  // optional string groupid = 20;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->groupid(), target);
  }

  // optional int32 vip_level = 21;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 icon_id = 7;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // optional string group_nickname = 8;
    if (has_group_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_nickname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level_rank = 9;
    if (has_level_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_rank());
    }

    // optional int32 power_rank = 10;
    if (has_power_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power_rank());
    }

    // optional int32 main_city_level_rank = 12;
    if (has_main_city_level_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_city_level_rank());
    }

    // optional int32 max_trial_level = 13;
    if (has_max_trial_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_trial_level());
    }

    // optional int32 max_trial_level_rank = 14;
    if (has_max_trial_level_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_trial_level_rank());
    }

    // optional int32 max_trial_star = 15;
    if (has_max_trial_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_trial_star());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 attack_count = 17;
    if (has_attack_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_count());
    }

    // optional int32 defence_count = 18;
    if (has_defence_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_count());
    }

    // optional int32 win_count = 19;
    if (has_win_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

    // optional string groupid = 20;
    if (has_groupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional int32 vip_level = 21;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

  }
  // repeated int32 id_lineup = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_lineup(i));
    }
    total_size += 1 * this->id_lineup_size() + data_size;
  }

  // repeated int32 lv_lineup = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->lv_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lv_lineup(i));
    }
    total_size += 1 * this->lv_lineup_size() + data_size;
  }

  // repeated int32 building_level_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->building_level_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->building_level_list(i));
    }
    total_size += 1 * this->building_level_list_size() + data_size;
  }

  // repeated int32 break_lineup = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->break_lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->break_lineup(i));
    }
    total_size += 2 * this->break_lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherUserInfo::MergeFrom(const OtherUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lineup_.MergeFrom(from.id_lineup_);
  lv_lineup_.MergeFrom(from.lv_lineup_);
  building_level_list_.MergeFrom(from.building_level_list_);
  break_lineup_.MergeFrom(from.break_lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_group_nickname()) {
      set_group_nickname(from.group_nickname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level_rank()) {
      set_level_rank(from.level_rank());
    }
    if (from.has_power_rank()) {
      set_power_rank(from.power_rank());
    }
    if (from.has_main_city_level_rank()) {
      set_main_city_level_rank(from.main_city_level_rank());
    }
    if (from.has_max_trial_level()) {
      set_max_trial_level(from.max_trial_level());
    }
    if (from.has_max_trial_level_rank()) {
      set_max_trial_level_rank(from.max_trial_level_rank());
    }
    if (from.has_max_trial_star()) {
      set_max_trial_star(from.max_trial_star());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
    if (from.has_defence_count()) {
      set_defence_count(from.defence_count());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherUserInfo::CopyFrom(const OtherUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000051) != 0x00000051) return false;

  return true;
}

void OtherUserInfo::Swap(OtherUserInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nickname_, other->nickname_);
    std::swap(power_, other->power_);
    id_lineup_.Swap(&other->id_lineup_);
    std::swap(level_, other->level_);
    lv_lineup_.Swap(&other->lv_lineup_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(group_nickname_, other->group_nickname_);
    std::swap(level_rank_, other->level_rank_);
    std::swap(power_rank_, other->power_rank_);
    building_level_list_.Swap(&other->building_level_list_);
    std::swap(main_city_level_rank_, other->main_city_level_rank_);
    std::swap(max_trial_level_, other->max_trial_level_);
    std::swap(max_trial_level_rank_, other->max_trial_level_rank_);
    std::swap(max_trial_star_, other->max_trial_star_);
    break_lineup_.Swap(&other->break_lineup_);
    std::swap(attack_count_, other->attack_count_);
    std::swap(defence_count_, other->defence_count_);
    std::swap(win_count_, other->win_count_);
    std::swap(groupid_, other->groupid_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherUserInfo_descriptor_;
  metadata.reflection = OtherUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherGroupInfo::kGroupidFieldNumber;
const int OtherGroupInfo::kNicknameFieldNumber;
const int OtherGroupInfo::kIconIdFieldNumber;
const int OtherGroupInfo::kLevelFieldNumber;
const int OtherGroupInfo::kPowerFieldNumber;
const int OtherGroupInfo::kLeaderNameFieldNumber;
#endif  // !_MSC_VER

OtherGroupInfo::OtherGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherGroupInfo::InitAsDefaultInstance() {
}

OtherGroupInfo::OtherGroupInfo(const OtherGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_id_ = 0;
  level_ = 0;
  power_ = 0;
  leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherGroupInfo::~OtherGroupInfo() {
  SharedDtor();
}

void OtherGroupInfo::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (this != default_instance_) {
  }
}

void OtherGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherGroupInfo_descriptor_;
}

const OtherGroupInfo& OtherGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OtherInfo_2eproto();
  return *default_instance_;
}

OtherGroupInfo* OtherGroupInfo::default_instance_ = NULL;

OtherGroupInfo* OtherGroupInfo::New() const {
  return new OtherGroupInfo;
}

void OtherGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    icon_id_ = 0;
    level_ = 0;
    power_ = 0;
    if (has_leader_name()) {
      if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
        leader_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon_id;
        break;
      }

      // optional int32 icon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional int32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_leader_name;
        break;
      }

      // optional string leader_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 icon_id = 3;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icon_id(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  // optional string leader_name = 6;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->leader_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 icon_id = 3;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icon_id(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power(), target);
  }

  // optional string leader_name = 6;
  if (has_leader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leader_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 icon_id = 3;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional string leader_name = 6;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherGroupInfo::MergeFrom(const OtherGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_leader_name()) {
      set_leader_name(from.leader_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherGroupInfo::CopyFrom(const OtherGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OtherGroupInfo::Swap(OtherGroupInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(nickname_, other->nickname_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(leader_name_, other->leader_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherGroupInfo_descriptor_;
  metadata.reflection = OtherGroupInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
