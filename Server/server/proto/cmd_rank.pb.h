// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd_rank.proto

#ifndef PROTOBUF_cmd_5frank_2eproto__INCLUDED
#define PROTOBUF_cmd_5frank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rank.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cmd_5frank_2eproto();
void protobuf_AssignDesc_cmd_5frank_2eproto();
void protobuf_ShutdownFile_cmd_5frank_2eproto();

class RankGetReq;

// ===================================================================

class RankGetReq : public ::google::protobuf::Message {
 public:
  RankGetReq();
  virtual ~RankGetReq();

  RankGetReq(const RankGetReq& from);

  inline RankGetReq& operator=(const RankGetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankGetReq& default_instance();

  void Swap(RankGetReq* other);

  // implements Message ----------------------------------------------

  RankGetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankGetReq& from);
  void MergeFrom(const RankGetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ranktype = 1;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRanktypeFieldNumber = 1;
  inline ::google::protobuf::int32 ranktype() const;
  inline void set_ranktype(::google::protobuf::int32 value);

  // optional int32 rankid = 2;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankidFieldNumber = 2;
  inline ::google::protobuf::int32 rankid() const;
  inline void set_rankid(::google::protobuf::int32 value);

  // optional int32 rankstart = 3;
  inline bool has_rankstart() const;
  inline void clear_rankstart();
  static const int kRankstartFieldNumber = 3;
  inline ::google::protobuf::int32 rankstart() const;
  inline void set_rankstart(::google::protobuf::int32 value);

  // optional int32 rankcount = 4;
  inline bool has_rankcount() const;
  inline void clear_rankcount();
  static const int kRankcountFieldNumber = 4;
  inline ::google::protobuf::int32 rankcount() const;
  inline void set_rankcount(::google::protobuf::int32 value);

  // optional bytes taruser = 5;
  inline bool has_taruser() const;
  inline void clear_taruser();
  static const int kTaruserFieldNumber = 5;
  inline const ::std::string& taruser() const;
  inline void set_taruser(const ::std::string& value);
  inline void set_taruser(const char* value);
  inline void set_taruser(const void* value, size_t size);
  inline ::std::string* mutable_taruser();
  inline ::std::string* release_taruser();
  inline void set_allocated_taruser(::std::string* taruser);

  // @@protoc_insertion_point(class_scope:RankGetReq)
 private:
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_rankstart();
  inline void clear_has_rankstart();
  inline void set_has_rankcount();
  inline void clear_has_rankcount();
  inline void set_has_taruser();
  inline void clear_has_taruser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ranktype_;
  ::google::protobuf::int32 rankid_;
  ::google::protobuf::int32 rankstart_;
  ::google::protobuf::int32 rankcount_;
  ::std::string* taruser_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cmd_5frank_2eproto();
  friend void protobuf_AssignDesc_cmd_5frank_2eproto();
  friend void protobuf_ShutdownFile_cmd_5frank_2eproto();

  void InitAsDefaultInstance();
  static RankGetReq* default_instance_;
};
// ===================================================================


// ===================================================================

// RankGetReq

// optional int32 ranktype = 1;
inline bool RankGetReq::has_ranktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankGetReq::set_has_ranktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankGetReq::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankGetReq::clear_ranktype() {
  ranktype_ = 0;
  clear_has_ranktype();
}
inline ::google::protobuf::int32 RankGetReq::ranktype() const {
  return ranktype_;
}
inline void RankGetReq::set_ranktype(::google::protobuf::int32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// optional int32 rankid = 2;
inline bool RankGetReq::has_rankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankGetReq::set_has_rankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankGetReq::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankGetReq::clear_rankid() {
  rankid_ = 0;
  clear_has_rankid();
}
inline ::google::protobuf::int32 RankGetReq::rankid() const {
  return rankid_;
}
inline void RankGetReq::set_rankid(::google::protobuf::int32 value) {
  set_has_rankid();
  rankid_ = value;
}

// optional int32 rankstart = 3;
inline bool RankGetReq::has_rankstart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankGetReq::set_has_rankstart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankGetReq::clear_has_rankstart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankGetReq::clear_rankstart() {
  rankstart_ = 0;
  clear_has_rankstart();
}
inline ::google::protobuf::int32 RankGetReq::rankstart() const {
  return rankstart_;
}
inline void RankGetReq::set_rankstart(::google::protobuf::int32 value) {
  set_has_rankstart();
  rankstart_ = value;
}

// optional int32 rankcount = 4;
inline bool RankGetReq::has_rankcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankGetReq::set_has_rankcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankGetReq::clear_has_rankcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankGetReq::clear_rankcount() {
  rankcount_ = 0;
  clear_has_rankcount();
}
inline ::google::protobuf::int32 RankGetReq::rankcount() const {
  return rankcount_;
}
inline void RankGetReq::set_rankcount(::google::protobuf::int32 value) {
  set_has_rankcount();
  rankcount_ = value;
}

// optional bytes taruser = 5;
inline bool RankGetReq::has_taruser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankGetReq::set_has_taruser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankGetReq::clear_has_taruser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankGetReq::clear_taruser() {
  if (taruser_ != &::google::protobuf::internal::kEmptyString) {
    taruser_->clear();
  }
  clear_has_taruser();
}
inline const ::std::string& RankGetReq::taruser() const {
  return *taruser_;
}
inline void RankGetReq::set_taruser(const ::std::string& value) {
  set_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    taruser_ = new ::std::string;
  }
  taruser_->assign(value);
}
inline void RankGetReq::set_taruser(const char* value) {
  set_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    taruser_ = new ::std::string;
  }
  taruser_->assign(value);
}
inline void RankGetReq::set_taruser(const void* value, size_t size) {
  set_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    taruser_ = new ::std::string;
  }
  taruser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankGetReq::mutable_taruser() {
  set_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    taruser_ = new ::std::string;
  }
  return taruser_;
}
inline ::std::string* RankGetReq::release_taruser() {
  clear_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taruser_;
    taruser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankGetReq::set_allocated_taruser(::std::string* taruser) {
  if (taruser_ != &::google::protobuf::internal::kEmptyString) {
    delete taruser_;
  }
  if (taruser) {
    set_has_taruser();
    taruser_ = taruser;
  } else {
    clear_has_taruser();
    taruser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_5frank_2eproto__INCLUDED
