// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdActivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GetActivityListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetActivityListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityChangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityChangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityChangeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityChangeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivitySignInReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivitySignInReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivitySignInResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivitySignInResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivitySevenDaysReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivitySevenDaysReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivitySevenDaysResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivitySevenDaysResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityFirstRechargeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityFirstRechargeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityFirstRechargeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityFirstRechargeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRechargeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRechargeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRechargeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRechargeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityConsumeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityConsumeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityConsumeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityConsumeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityCreditReturnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityCreditReturnReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityCreditReturnResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityCreditReturnResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityOnlineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityOnlineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityOnlineResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityOnlineResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityPowerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityPowerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityPowerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityPowerResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityGrowthFundReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityGrowthFundReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityGrowthFundResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityGrowthFundResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityInvestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityInvestReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityInvestResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityInvestResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityChangeShipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityChangeShipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityChangeShipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityChangeShipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMonthSignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMonthSignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityMonthSignResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityMonthSignResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdActivity_2eproto() {
  protobuf_AddDesc_CmdActivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdActivity.proto");
  GOOGLE_CHECK(file != NULL);
  GetActivityListResp_descriptor_ = file->message_type(0);
  static const int GetActivityListResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityListResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityListResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityListResp, id_list_),
  };
  GetActivityListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetActivityListResp_descriptor_,
      GetActivityListResp::default_instance_,
      GetActivityListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActivityListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetActivityListResp));
  ActivityChangeReq_descriptor_ = file->message_type(1);
  static const int ActivityChangeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeReq, change_item_id_),
  };
  ActivityChangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityChangeReq_descriptor_,
      ActivityChangeReq::default_instance_,
      ActivityChangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityChangeReq));
  ActivityChangeResp_descriptor_ = file->message_type(2);
  static const int ActivityChangeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeResp, user_sync_),
  };
  ActivityChangeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityChangeResp_descriptor_,
      ActivityChangeResp::default_instance_,
      ActivityChangeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityChangeResp));
  ActivitySignInReq_descriptor_ = file->message_type(3);
  static const int ActivitySignInReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySignInReq, activity_id_),
  };
  ActivitySignInReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivitySignInReq_descriptor_,
      ActivitySignInReq::default_instance_,
      ActivitySignInReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySignInReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySignInReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivitySignInReq));
  ActivitySignInResp_descriptor_ = file->message_type(4);
  static const int ActivitySignInResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySignInResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySignInResp, user_sync_),
  };
  ActivitySignInResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivitySignInResp_descriptor_,
      ActivitySignInResp::default_instance_,
      ActivitySignInResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySignInResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySignInResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivitySignInResp));
  ActivitySevenDaysReq_descriptor_ = file->message_type(5);
  static const int ActivitySevenDaysReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySevenDaysReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySevenDaysReq, task_id_),
  };
  ActivitySevenDaysReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivitySevenDaysReq_descriptor_,
      ActivitySevenDaysReq::default_instance_,
      ActivitySevenDaysReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySevenDaysReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySevenDaysReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivitySevenDaysReq));
  ActivitySevenDaysResp_descriptor_ = file->message_type(6);
  static const int ActivitySevenDaysResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySevenDaysResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySevenDaysResp, user_sync_),
  };
  ActivitySevenDaysResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivitySevenDaysResp_descriptor_,
      ActivitySevenDaysResp::default_instance_,
      ActivitySevenDaysResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySevenDaysResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitySevenDaysResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivitySevenDaysResp));
  ActivityFirstRechargeReq_descriptor_ = file->message_type(7);
  static const int ActivityFirstRechargeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityFirstRechargeReq, activity_id_),
  };
  ActivityFirstRechargeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityFirstRechargeReq_descriptor_,
      ActivityFirstRechargeReq::default_instance_,
      ActivityFirstRechargeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityFirstRechargeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityFirstRechargeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityFirstRechargeReq));
  ActivityFirstRechargeResp_descriptor_ = file->message_type(8);
  static const int ActivityFirstRechargeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityFirstRechargeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityFirstRechargeResp, user_sync_),
  };
  ActivityFirstRechargeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityFirstRechargeResp_descriptor_,
      ActivityFirstRechargeResp::default_instance_,
      ActivityFirstRechargeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityFirstRechargeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityFirstRechargeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityFirstRechargeResp));
  ActivityRechargeReq_descriptor_ = file->message_type(9);
  static const int ActivityRechargeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRechargeReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRechargeReq, id_),
  };
  ActivityRechargeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRechargeReq_descriptor_,
      ActivityRechargeReq::default_instance_,
      ActivityRechargeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRechargeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRechargeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRechargeReq));
  ActivityRechargeResp_descriptor_ = file->message_type(10);
  static const int ActivityRechargeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRechargeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRechargeResp, user_sync_),
  };
  ActivityRechargeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRechargeResp_descriptor_,
      ActivityRechargeResp::default_instance_,
      ActivityRechargeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRechargeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRechargeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRechargeResp));
  ActivityConsumeReq_descriptor_ = file->message_type(11);
  static const int ActivityConsumeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConsumeReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConsumeReq, id_),
  };
  ActivityConsumeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityConsumeReq_descriptor_,
      ActivityConsumeReq::default_instance_,
      ActivityConsumeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConsumeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConsumeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityConsumeReq));
  ActivityConsumeResp_descriptor_ = file->message_type(12);
  static const int ActivityConsumeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConsumeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConsumeResp, user_sync_),
  };
  ActivityConsumeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityConsumeResp_descriptor_,
      ActivityConsumeResp::default_instance_,
      ActivityConsumeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConsumeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConsumeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityConsumeResp));
  ActivityCreditReturnReq_descriptor_ = file->message_type(13);
  static const int ActivityCreditReturnReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnReq, index_),
  };
  ActivityCreditReturnReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityCreditReturnReq_descriptor_,
      ActivityCreditReturnReq::default_instance_,
      ActivityCreditReturnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityCreditReturnReq));
  ActivityCreditReturnResp_descriptor_ = file->message_type(14);
  static const int ActivityCreditReturnResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnResp, return_credit_),
  };
  ActivityCreditReturnResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityCreditReturnResp_descriptor_,
      ActivityCreditReturnResp::default_instance_,
      ActivityCreditReturnResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCreditReturnResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityCreditReturnResp));
  ActivityOnlineReq_descriptor_ = file->message_type(15);
  static const int ActivityOnlineReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityOnlineReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityOnlineReq, index_),
  };
  ActivityOnlineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityOnlineReq_descriptor_,
      ActivityOnlineReq::default_instance_,
      ActivityOnlineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityOnlineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityOnlineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityOnlineReq));
  ActivityOnlineResp_descriptor_ = file->message_type(16);
  static const int ActivityOnlineResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityOnlineResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityOnlineResp, user_sync_),
  };
  ActivityOnlineResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityOnlineResp_descriptor_,
      ActivityOnlineResp::default_instance_,
      ActivityOnlineResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityOnlineResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityOnlineResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityOnlineResp));
  ActivityPowerReq_descriptor_ = file->message_type(17);
  static const int ActivityPowerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPowerReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPowerReq, index_),
  };
  ActivityPowerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityPowerReq_descriptor_,
      ActivityPowerReq::default_instance_,
      ActivityPowerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPowerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPowerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityPowerReq));
  ActivityPowerResp_descriptor_ = file->message_type(18);
  static const int ActivityPowerResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPowerResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPowerResp, user_sync_),
  };
  ActivityPowerResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityPowerResp_descriptor_,
      ActivityPowerResp::default_instance_,
      ActivityPowerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPowerResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityPowerResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityPowerResp));
  ActivityGrowthFundReq_descriptor_ = file->message_type(19);
  static const int ActivityGrowthFundReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundReq, index_),
  };
  ActivityGrowthFundReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityGrowthFundReq_descriptor_,
      ActivityGrowthFundReq::default_instance_,
      ActivityGrowthFundReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityGrowthFundReq));
  ActivityGrowthFundResp_descriptor_ = file->message_type(20);
  static const int ActivityGrowthFundResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundResp, user_sync_),
  };
  ActivityGrowthFundResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityGrowthFundResp_descriptor_,
      ActivityGrowthFundResp::default_instance_,
      ActivityGrowthFundResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityGrowthFundResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityGrowthFundResp));
  ActivityInvestReq_descriptor_ = file->message_type(21);
  static const int ActivityInvestReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestReq, index_),
  };
  ActivityInvestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityInvestReq_descriptor_,
      ActivityInvestReq::default_instance_,
      ActivityInvestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityInvestReq));
  ActivityInvestResp_descriptor_ = file->message_type(22);
  static const int ActivityInvestResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestResp, earning_),
  };
  ActivityInvestResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityInvestResp_descriptor_,
      ActivityInvestResp::default_instance_,
      ActivityInvestResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityInvestResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityInvestResp));
  ActivityChangeShipReq_descriptor_ = file->message_type(23);
  static const int ActivityChangeShipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeShipReq, activity_id_),
  };
  ActivityChangeShipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityChangeShipReq_descriptor_,
      ActivityChangeShipReq::default_instance_,
      ActivityChangeShipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeShipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeShipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityChangeShipReq));
  ActivityChangeShipResp_descriptor_ = file->message_type(24);
  static const int ActivityChangeShipResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeShipResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeShipResp, user_sync_),
  };
  ActivityChangeShipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityChangeShipResp_descriptor_,
      ActivityChangeShipResp::default_instance_,
      ActivityChangeShipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeShipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityChangeShipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityChangeShipResp));
  ActivityMonthSignReq_descriptor_ = file->message_type(25);
  static const int ActivityMonthSignReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignReq, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignReq, index_),
  };
  ActivityMonthSignReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityMonthSignReq_descriptor_,
      ActivityMonthSignReq::default_instance_,
      ActivityMonthSignReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityMonthSignReq));
  ActivityMonthSignResp_descriptor_ = file->message_type(26);
  static const int ActivityMonthSignResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignResp, user_sync_),
  };
  ActivityMonthSignResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityMonthSignResp_descriptor_,
      ActivityMonthSignResp::default_instance_,
      ActivityMonthSignResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityMonthSignResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityMonthSignResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdActivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetActivityListResp_descriptor_, &GetActivityListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityChangeReq_descriptor_, &ActivityChangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityChangeResp_descriptor_, &ActivityChangeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivitySignInReq_descriptor_, &ActivitySignInReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivitySignInResp_descriptor_, &ActivitySignInResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivitySevenDaysReq_descriptor_, &ActivitySevenDaysReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivitySevenDaysResp_descriptor_, &ActivitySevenDaysResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityFirstRechargeReq_descriptor_, &ActivityFirstRechargeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityFirstRechargeResp_descriptor_, &ActivityFirstRechargeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRechargeReq_descriptor_, &ActivityRechargeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRechargeResp_descriptor_, &ActivityRechargeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityConsumeReq_descriptor_, &ActivityConsumeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityConsumeResp_descriptor_, &ActivityConsumeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityCreditReturnReq_descriptor_, &ActivityCreditReturnReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityCreditReturnResp_descriptor_, &ActivityCreditReturnResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityOnlineReq_descriptor_, &ActivityOnlineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityOnlineResp_descriptor_, &ActivityOnlineResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityPowerReq_descriptor_, &ActivityPowerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityPowerResp_descriptor_, &ActivityPowerResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityGrowthFundReq_descriptor_, &ActivityGrowthFundReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityGrowthFundResp_descriptor_, &ActivityGrowthFundResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityInvestReq_descriptor_, &ActivityInvestReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityInvestResp_descriptor_, &ActivityInvestResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityChangeShipReq_descriptor_, &ActivityChangeShipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityChangeShipResp_descriptor_, &ActivityChangeShipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityMonthSignReq_descriptor_, &ActivityMonthSignReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityMonthSignResp_descriptor_, &ActivityMonthSignResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdActivity_2eproto() {
  delete GetActivityListResp::default_instance_;
  delete GetActivityListResp_reflection_;
  delete ActivityChangeReq::default_instance_;
  delete ActivityChangeReq_reflection_;
  delete ActivityChangeResp::default_instance_;
  delete ActivityChangeResp_reflection_;
  delete ActivitySignInReq::default_instance_;
  delete ActivitySignInReq_reflection_;
  delete ActivitySignInResp::default_instance_;
  delete ActivitySignInResp_reflection_;
  delete ActivitySevenDaysReq::default_instance_;
  delete ActivitySevenDaysReq_reflection_;
  delete ActivitySevenDaysResp::default_instance_;
  delete ActivitySevenDaysResp_reflection_;
  delete ActivityFirstRechargeReq::default_instance_;
  delete ActivityFirstRechargeReq_reflection_;
  delete ActivityFirstRechargeResp::default_instance_;
  delete ActivityFirstRechargeResp_reflection_;
  delete ActivityRechargeReq::default_instance_;
  delete ActivityRechargeReq_reflection_;
  delete ActivityRechargeResp::default_instance_;
  delete ActivityRechargeResp_reflection_;
  delete ActivityConsumeReq::default_instance_;
  delete ActivityConsumeReq_reflection_;
  delete ActivityConsumeResp::default_instance_;
  delete ActivityConsumeResp_reflection_;
  delete ActivityCreditReturnReq::default_instance_;
  delete ActivityCreditReturnReq_reflection_;
  delete ActivityCreditReturnResp::default_instance_;
  delete ActivityCreditReturnResp_reflection_;
  delete ActivityOnlineReq::default_instance_;
  delete ActivityOnlineReq_reflection_;
  delete ActivityOnlineResp::default_instance_;
  delete ActivityOnlineResp_reflection_;
  delete ActivityPowerReq::default_instance_;
  delete ActivityPowerReq_reflection_;
  delete ActivityPowerResp::default_instance_;
  delete ActivityPowerResp_reflection_;
  delete ActivityGrowthFundReq::default_instance_;
  delete ActivityGrowthFundReq_reflection_;
  delete ActivityGrowthFundResp::default_instance_;
  delete ActivityGrowthFundResp_reflection_;
  delete ActivityInvestReq::default_instance_;
  delete ActivityInvestReq_reflection_;
  delete ActivityInvestResp::default_instance_;
  delete ActivityInvestResp_reflection_;
  delete ActivityChangeShipReq::default_instance_;
  delete ActivityChangeShipReq_reflection_;
  delete ActivityChangeShipResp::default_instance_;
  delete ActivityChangeShipResp_reflection_;
  delete ActivityMonthSignReq::default_instance_;
  delete ActivityMonthSignReq_reflection_;
  delete ActivityMonthSignResp::default_instance_;
  delete ActivityMonthSignResp_reflection_;
}

void protobuf_AddDesc_CmdActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_UserSync_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CmdActivity.proto\032\016UserSync.proto\"T\n\023G"
    "etActivityListResp\022\016\n\006result\030\001 \002(\005\022\034\n\tus"
    "er_sync\030\002 \001(\0132\t.UserSync\022\017\n\007id_list\030\003 \003("
    "\005\"@\n\021ActivityChangeReq\022\023\n\013activity_id\030\001 "
    "\002(\005\022\026\n\016change_item_id\030\002 \002(\005\"B\n\022ActivityC"
    "hangeResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002"
    " \001(\0132\t.UserSync\"(\n\021ActivitySignInReq\022\023\n\013"
    "activity_id\030\001 \002(\005\"B\n\022ActivitySignInResp\022"
    "\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.Use"
    "rSync\"<\n\024ActivitySevenDaysReq\022\023\n\013activit"
    "y_id\030\001 \002(\005\022\017\n\007task_id\030\002 \002(\005\"E\n\025ActivityS"
    "evenDaysResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_syn"
    "c\030\002 \001(\0132\t.UserSync\"/\n\030ActivityFirstRecha"
    "rgeReq\022\023\n\013activity_id\030\001 \002(\005\"I\n\031ActivityF"
    "irstRechargeResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser"
    "_sync\030\002 \001(\0132\t.UserSync\"6\n\023ActivityRechar"
    "geReq\022\023\n\013activity_id\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\"D"
    "\n\024ActivityRechargeResp\022\016\n\006result\030\001 \002(\005\022\034"
    "\n\tuser_sync\030\002 \001(\0132\t.UserSync\"5\n\022Activity"
    "ConsumeReq\022\023\n\013activity_id\030\001 \002(\005\022\n\n\002id\030\002 "
    "\002(\005\"C\n\023ActivityConsumeResp\022\016\n\006result\030\001 \002"
    "(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\"=\n\027Acti"
    "vityCreditReturnReq\022\023\n\013activity_id\030\001 \002(\005"
    "\022\r\n\005index\030\002 \002(\005\"_\n\030ActivityCreditReturnR"
    "esp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t"
    ".UserSync\022\025\n\rreturn_credit\030\003 \001(\005\"7\n\021Acti"
    "vityOnlineReq\022\023\n\013activity_id\030\001 \002(\005\022\r\n\005in"
    "dex\030\002 \002(\005\"B\n\022ActivityOnlineResp\022\016\n\006resul"
    "t\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\"6\n"
    "\020ActivityPowerReq\022\023\n\013activity_id\030\001 \002(\005\022\r"
    "\n\005index\030\002 \002(\005\"A\n\021ActivityPowerResp\022\016\n\006re"
    "sult\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync"
    "\"I\n\025ActivityGrowthFundReq\022\023\n\013activity_id"
    "\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\r\n\005index\030\003 \001(\005\"F\n\026A"
    "ctivityGrowthFundResp\022\016\n\006result\030\001 \002(\005\022\034\n"
    "\tuser_sync\030\002 \001(\0132\t.UserSync\"E\n\021ActivityI"
    "nvestReq\022\023\n\013activity_id\030\001 \002(\005\022\014\n\004type\030\002 "
    "\002(\005\022\r\n\005index\030\003 \001(\005\"S\n\022ActivityInvestResp"
    "\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.Us"
    "erSync\022\017\n\007earning\030\003 \001(\005\",\n\025ActivityChang"
    "eShipReq\022\023\n\013activity_id\030\001 \002(\005\"F\n\026Activit"
    "yChangeShipResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_"
    "sync\030\002 \001(\0132\t.UserSync\"H\n\024ActivityMonthSi"
    "gnReq\022\023\n\013activity_id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005"
    "\022\r\n\005index\030\003 \002(\005\"E\n\025ActivityMonthSignResp"
    "\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.Us"
    "erSync", 1846);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdActivity.proto", &protobuf_RegisterTypes);
  GetActivityListResp::default_instance_ = new GetActivityListResp();
  ActivityChangeReq::default_instance_ = new ActivityChangeReq();
  ActivityChangeResp::default_instance_ = new ActivityChangeResp();
  ActivitySignInReq::default_instance_ = new ActivitySignInReq();
  ActivitySignInResp::default_instance_ = new ActivitySignInResp();
  ActivitySevenDaysReq::default_instance_ = new ActivitySevenDaysReq();
  ActivitySevenDaysResp::default_instance_ = new ActivitySevenDaysResp();
  ActivityFirstRechargeReq::default_instance_ = new ActivityFirstRechargeReq();
  ActivityFirstRechargeResp::default_instance_ = new ActivityFirstRechargeResp();
  ActivityRechargeReq::default_instance_ = new ActivityRechargeReq();
  ActivityRechargeResp::default_instance_ = new ActivityRechargeResp();
  ActivityConsumeReq::default_instance_ = new ActivityConsumeReq();
  ActivityConsumeResp::default_instance_ = new ActivityConsumeResp();
  ActivityCreditReturnReq::default_instance_ = new ActivityCreditReturnReq();
  ActivityCreditReturnResp::default_instance_ = new ActivityCreditReturnResp();
  ActivityOnlineReq::default_instance_ = new ActivityOnlineReq();
  ActivityOnlineResp::default_instance_ = new ActivityOnlineResp();
  ActivityPowerReq::default_instance_ = new ActivityPowerReq();
  ActivityPowerResp::default_instance_ = new ActivityPowerResp();
  ActivityGrowthFundReq::default_instance_ = new ActivityGrowthFundReq();
  ActivityGrowthFundResp::default_instance_ = new ActivityGrowthFundResp();
  ActivityInvestReq::default_instance_ = new ActivityInvestReq();
  ActivityInvestResp::default_instance_ = new ActivityInvestResp();
  ActivityChangeShipReq::default_instance_ = new ActivityChangeShipReq();
  ActivityChangeShipResp::default_instance_ = new ActivityChangeShipResp();
  ActivityMonthSignReq::default_instance_ = new ActivityMonthSignReq();
  ActivityMonthSignResp::default_instance_ = new ActivityMonthSignResp();
  GetActivityListResp::default_instance_->InitAsDefaultInstance();
  ActivityChangeReq::default_instance_->InitAsDefaultInstance();
  ActivityChangeResp::default_instance_->InitAsDefaultInstance();
  ActivitySignInReq::default_instance_->InitAsDefaultInstance();
  ActivitySignInResp::default_instance_->InitAsDefaultInstance();
  ActivitySevenDaysReq::default_instance_->InitAsDefaultInstance();
  ActivitySevenDaysResp::default_instance_->InitAsDefaultInstance();
  ActivityFirstRechargeReq::default_instance_->InitAsDefaultInstance();
  ActivityFirstRechargeResp::default_instance_->InitAsDefaultInstance();
  ActivityRechargeReq::default_instance_->InitAsDefaultInstance();
  ActivityRechargeResp::default_instance_->InitAsDefaultInstance();
  ActivityConsumeReq::default_instance_->InitAsDefaultInstance();
  ActivityConsumeResp::default_instance_->InitAsDefaultInstance();
  ActivityCreditReturnReq::default_instance_->InitAsDefaultInstance();
  ActivityCreditReturnResp::default_instance_->InitAsDefaultInstance();
  ActivityOnlineReq::default_instance_->InitAsDefaultInstance();
  ActivityOnlineResp::default_instance_->InitAsDefaultInstance();
  ActivityPowerReq::default_instance_->InitAsDefaultInstance();
  ActivityPowerResp::default_instance_->InitAsDefaultInstance();
  ActivityGrowthFundReq::default_instance_->InitAsDefaultInstance();
  ActivityGrowthFundResp::default_instance_->InitAsDefaultInstance();
  ActivityInvestReq::default_instance_->InitAsDefaultInstance();
  ActivityInvestResp::default_instance_->InitAsDefaultInstance();
  ActivityChangeShipReq::default_instance_->InitAsDefaultInstance();
  ActivityChangeShipResp::default_instance_->InitAsDefaultInstance();
  ActivityMonthSignReq::default_instance_->InitAsDefaultInstance();
  ActivityMonthSignResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdActivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdActivity_2eproto {
  StaticDescriptorInitializer_CmdActivity_2eproto() {
    protobuf_AddDesc_CmdActivity_2eproto();
  }
} static_descriptor_initializer_CmdActivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetActivityListResp::kResultFieldNumber;
const int GetActivityListResp::kUserSyncFieldNumber;
const int GetActivityListResp::kIdListFieldNumber;
#endif  // !_MSC_VER

GetActivityListResp::GetActivityListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetActivityListResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GetActivityListResp::GetActivityListResp(const GetActivityListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetActivityListResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetActivityListResp::~GetActivityListResp() {
  SharedDtor();
}

void GetActivityListResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GetActivityListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActivityListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetActivityListResp_descriptor_;
}

const GetActivityListResp& GetActivityListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

GetActivityListResp* GetActivityListResp::default_instance_ = NULL;

GetActivityListResp* GetActivityListResp::New() const {
  return new GetActivityListResp;
}

void GetActivityListResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetActivityListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_list;
        break;
      }

      // repeated int32 id_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetActivityListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated int32 id_list = 3;
  for (int i = 0; i < this->id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetActivityListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated int32 id_list = 3;
  for (int i = 0; i < this->id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetActivityListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated int32 id_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_list(i));
    }
    total_size += 1 * this->id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActivityListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetActivityListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetActivityListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetActivityListResp::MergeFrom(const GetActivityListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_list_.MergeFrom(from.id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetActivityListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActivityListResp::CopyFrom(const GetActivityListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActivityListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GetActivityListResp::Swap(GetActivityListResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    id_list_.Swap(&other->id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetActivityListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetActivityListResp_descriptor_;
  metadata.reflection = GetActivityListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityChangeReq::kActivityIdFieldNumber;
const int ActivityChangeReq::kChangeItemIdFieldNumber;
#endif  // !_MSC_VER

ActivityChangeReq::ActivityChangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityChangeReq::InitAsDefaultInstance() {
}

ActivityChangeReq::ActivityChangeReq(const ActivityChangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityChangeReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  change_item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityChangeReq::~ActivityChangeReq() {
  SharedDtor();
}

void ActivityChangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityChangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityChangeReq_descriptor_;
}

const ActivityChangeReq& ActivityChangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityChangeReq* ActivityChangeReq::default_instance_ = NULL;

ActivityChangeReq* ActivityChangeReq::New() const {
  return new ActivityChangeReq;
}

void ActivityChangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    change_item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_item_id;
        break;
      }

      // required int32 change_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_item_id_)));
          set_has_change_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 change_item_id = 2;
  if (has_change_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->change_item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityChangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 change_item_id = 2;
  if (has_change_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->change_item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityChangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 change_item_id = 2;
    if (has_change_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityChangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityChangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityChangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityChangeReq::MergeFrom(const ActivityChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_change_item_id()) {
      set_change_item_id(from.change_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityChangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityChangeReq::CopyFrom(const ActivityChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityChangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityChangeReq::Swap(ActivityChangeReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(change_item_id_, other->change_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityChangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityChangeReq_descriptor_;
  metadata.reflection = ActivityChangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityChangeResp::kResultFieldNumber;
const int ActivityChangeResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityChangeResp::ActivityChangeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityChangeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityChangeResp::ActivityChangeResp(const ActivityChangeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityChangeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityChangeResp::~ActivityChangeResp() {
  SharedDtor();
}

void ActivityChangeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityChangeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityChangeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityChangeResp_descriptor_;
}

const ActivityChangeResp& ActivityChangeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityChangeResp* ActivityChangeResp::default_instance_ = NULL;

ActivityChangeResp* ActivityChangeResp::New() const {
  return new ActivityChangeResp;
}

void ActivityChangeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityChangeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityChangeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityChangeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityChangeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityChangeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityChangeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityChangeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityChangeResp::MergeFrom(const ActivityChangeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityChangeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityChangeResp::CopyFrom(const ActivityChangeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityChangeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityChangeResp::Swap(ActivityChangeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityChangeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityChangeResp_descriptor_;
  metadata.reflection = ActivityChangeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivitySignInReq::kActivityIdFieldNumber;
#endif  // !_MSC_VER

ActivitySignInReq::ActivitySignInReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivitySignInReq::InitAsDefaultInstance() {
}

ActivitySignInReq::ActivitySignInReq(const ActivitySignInReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivitySignInReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivitySignInReq::~ActivitySignInReq() {
  SharedDtor();
}

void ActivitySignInReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivitySignInReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivitySignInReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivitySignInReq_descriptor_;
}

const ActivitySignInReq& ActivitySignInReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivitySignInReq* ActivitySignInReq::default_instance_ = NULL;

ActivitySignInReq* ActivitySignInReq::New() const {
  return new ActivitySignInReq;
}

void ActivitySignInReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivitySignInReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivitySignInReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivitySignInReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivitySignInReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivitySignInReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivitySignInReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivitySignInReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivitySignInReq::MergeFrom(const ActivitySignInReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivitySignInReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivitySignInReq::CopyFrom(const ActivitySignInReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivitySignInReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivitySignInReq::Swap(ActivitySignInReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivitySignInReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivitySignInReq_descriptor_;
  metadata.reflection = ActivitySignInReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivitySignInResp::kResultFieldNumber;
const int ActivitySignInResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivitySignInResp::ActivitySignInResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivitySignInResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivitySignInResp::ActivitySignInResp(const ActivitySignInResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivitySignInResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivitySignInResp::~ActivitySignInResp() {
  SharedDtor();
}

void ActivitySignInResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivitySignInResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivitySignInResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivitySignInResp_descriptor_;
}

const ActivitySignInResp& ActivitySignInResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivitySignInResp* ActivitySignInResp::default_instance_ = NULL;

ActivitySignInResp* ActivitySignInResp::New() const {
  return new ActivitySignInResp;
}

void ActivitySignInResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivitySignInResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivitySignInResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivitySignInResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivitySignInResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivitySignInResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivitySignInResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivitySignInResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivitySignInResp::MergeFrom(const ActivitySignInResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivitySignInResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivitySignInResp::CopyFrom(const ActivitySignInResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivitySignInResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivitySignInResp::Swap(ActivitySignInResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivitySignInResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivitySignInResp_descriptor_;
  metadata.reflection = ActivitySignInResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivitySevenDaysReq::kActivityIdFieldNumber;
const int ActivitySevenDaysReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

ActivitySevenDaysReq::ActivitySevenDaysReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivitySevenDaysReq::InitAsDefaultInstance() {
}

ActivitySevenDaysReq::ActivitySevenDaysReq(const ActivitySevenDaysReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivitySevenDaysReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivitySevenDaysReq::~ActivitySevenDaysReq() {
  SharedDtor();
}

void ActivitySevenDaysReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivitySevenDaysReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivitySevenDaysReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivitySevenDaysReq_descriptor_;
}

const ActivitySevenDaysReq& ActivitySevenDaysReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivitySevenDaysReq* ActivitySevenDaysReq::default_instance_ = NULL;

ActivitySevenDaysReq* ActivitySevenDaysReq::New() const {
  return new ActivitySevenDaysReq;
}

void ActivitySevenDaysReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivitySevenDaysReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // required int32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivitySevenDaysReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivitySevenDaysReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivitySevenDaysReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivitySevenDaysReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivitySevenDaysReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivitySevenDaysReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivitySevenDaysReq::MergeFrom(const ActivitySevenDaysReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivitySevenDaysReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivitySevenDaysReq::CopyFrom(const ActivitySevenDaysReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivitySevenDaysReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivitySevenDaysReq::Swap(ActivitySevenDaysReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivitySevenDaysReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivitySevenDaysReq_descriptor_;
  metadata.reflection = ActivitySevenDaysReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivitySevenDaysResp::kResultFieldNumber;
const int ActivitySevenDaysResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivitySevenDaysResp::ActivitySevenDaysResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivitySevenDaysResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivitySevenDaysResp::ActivitySevenDaysResp(const ActivitySevenDaysResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivitySevenDaysResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivitySevenDaysResp::~ActivitySevenDaysResp() {
  SharedDtor();
}

void ActivitySevenDaysResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivitySevenDaysResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivitySevenDaysResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivitySevenDaysResp_descriptor_;
}

const ActivitySevenDaysResp& ActivitySevenDaysResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivitySevenDaysResp* ActivitySevenDaysResp::default_instance_ = NULL;

ActivitySevenDaysResp* ActivitySevenDaysResp::New() const {
  return new ActivitySevenDaysResp;
}

void ActivitySevenDaysResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivitySevenDaysResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivitySevenDaysResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivitySevenDaysResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivitySevenDaysResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivitySevenDaysResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivitySevenDaysResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivitySevenDaysResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivitySevenDaysResp::MergeFrom(const ActivitySevenDaysResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivitySevenDaysResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivitySevenDaysResp::CopyFrom(const ActivitySevenDaysResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivitySevenDaysResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivitySevenDaysResp::Swap(ActivitySevenDaysResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivitySevenDaysResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivitySevenDaysResp_descriptor_;
  metadata.reflection = ActivitySevenDaysResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityFirstRechargeReq::kActivityIdFieldNumber;
#endif  // !_MSC_VER

ActivityFirstRechargeReq::ActivityFirstRechargeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityFirstRechargeReq::InitAsDefaultInstance() {
}

ActivityFirstRechargeReq::ActivityFirstRechargeReq(const ActivityFirstRechargeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityFirstRechargeReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityFirstRechargeReq::~ActivityFirstRechargeReq() {
  SharedDtor();
}

void ActivityFirstRechargeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityFirstRechargeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityFirstRechargeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityFirstRechargeReq_descriptor_;
}

const ActivityFirstRechargeReq& ActivityFirstRechargeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityFirstRechargeReq* ActivityFirstRechargeReq::default_instance_ = NULL;

ActivityFirstRechargeReq* ActivityFirstRechargeReq::New() const {
  return new ActivityFirstRechargeReq;
}

void ActivityFirstRechargeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityFirstRechargeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityFirstRechargeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityFirstRechargeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityFirstRechargeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityFirstRechargeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityFirstRechargeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityFirstRechargeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityFirstRechargeReq::MergeFrom(const ActivityFirstRechargeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityFirstRechargeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityFirstRechargeReq::CopyFrom(const ActivityFirstRechargeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityFirstRechargeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivityFirstRechargeReq::Swap(ActivityFirstRechargeReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityFirstRechargeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityFirstRechargeReq_descriptor_;
  metadata.reflection = ActivityFirstRechargeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityFirstRechargeResp::kResultFieldNumber;
const int ActivityFirstRechargeResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityFirstRechargeResp::ActivityFirstRechargeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityFirstRechargeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityFirstRechargeResp::ActivityFirstRechargeResp(const ActivityFirstRechargeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityFirstRechargeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityFirstRechargeResp::~ActivityFirstRechargeResp() {
  SharedDtor();
}

void ActivityFirstRechargeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityFirstRechargeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityFirstRechargeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityFirstRechargeResp_descriptor_;
}

const ActivityFirstRechargeResp& ActivityFirstRechargeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityFirstRechargeResp* ActivityFirstRechargeResp::default_instance_ = NULL;

ActivityFirstRechargeResp* ActivityFirstRechargeResp::New() const {
  return new ActivityFirstRechargeResp;
}

void ActivityFirstRechargeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityFirstRechargeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityFirstRechargeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityFirstRechargeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityFirstRechargeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityFirstRechargeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityFirstRechargeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityFirstRechargeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityFirstRechargeResp::MergeFrom(const ActivityFirstRechargeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityFirstRechargeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityFirstRechargeResp::CopyFrom(const ActivityFirstRechargeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityFirstRechargeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityFirstRechargeResp::Swap(ActivityFirstRechargeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityFirstRechargeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityFirstRechargeResp_descriptor_;
  metadata.reflection = ActivityFirstRechargeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRechargeReq::kActivityIdFieldNumber;
const int ActivityRechargeReq::kIdFieldNumber;
#endif  // !_MSC_VER

ActivityRechargeReq::ActivityRechargeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRechargeReq::InitAsDefaultInstance() {
}

ActivityRechargeReq::ActivityRechargeReq(const ActivityRechargeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRechargeReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRechargeReq::~ActivityRechargeReq() {
  SharedDtor();
}

void ActivityRechargeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityRechargeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRechargeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRechargeReq_descriptor_;
}

const ActivityRechargeReq& ActivityRechargeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityRechargeReq* ActivityRechargeReq::default_instance_ = NULL;

ActivityRechargeReq* ActivityRechargeReq::New() const {
  return new ActivityRechargeReq;
}

void ActivityRechargeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRechargeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRechargeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRechargeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRechargeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRechargeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRechargeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRechargeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRechargeReq::MergeFrom(const ActivityRechargeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRechargeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRechargeReq::CopyFrom(const ActivityRechargeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRechargeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityRechargeReq::Swap(ActivityRechargeReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRechargeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRechargeReq_descriptor_;
  metadata.reflection = ActivityRechargeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRechargeResp::kResultFieldNumber;
const int ActivityRechargeResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityRechargeResp::ActivityRechargeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityRechargeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityRechargeResp::ActivityRechargeResp(const ActivityRechargeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityRechargeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRechargeResp::~ActivityRechargeResp() {
  SharedDtor();
}

void ActivityRechargeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityRechargeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRechargeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRechargeResp_descriptor_;
}

const ActivityRechargeResp& ActivityRechargeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityRechargeResp* ActivityRechargeResp::default_instance_ = NULL;

ActivityRechargeResp* ActivityRechargeResp::New() const {
  return new ActivityRechargeResp;
}

void ActivityRechargeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRechargeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityRechargeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityRechargeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityRechargeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRechargeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRechargeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRechargeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRechargeResp::MergeFrom(const ActivityRechargeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRechargeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRechargeResp::CopyFrom(const ActivityRechargeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRechargeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityRechargeResp::Swap(ActivityRechargeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRechargeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRechargeResp_descriptor_;
  metadata.reflection = ActivityRechargeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityConsumeReq::kActivityIdFieldNumber;
const int ActivityConsumeReq::kIdFieldNumber;
#endif  // !_MSC_VER

ActivityConsumeReq::ActivityConsumeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityConsumeReq::InitAsDefaultInstance() {
}

ActivityConsumeReq::ActivityConsumeReq(const ActivityConsumeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityConsumeReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityConsumeReq::~ActivityConsumeReq() {
  SharedDtor();
}

void ActivityConsumeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityConsumeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityConsumeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityConsumeReq_descriptor_;
}

const ActivityConsumeReq& ActivityConsumeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityConsumeReq* ActivityConsumeReq::default_instance_ = NULL;

ActivityConsumeReq* ActivityConsumeReq::New() const {
  return new ActivityConsumeReq;
}

void ActivityConsumeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityConsumeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityConsumeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityConsumeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityConsumeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityConsumeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityConsumeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityConsumeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityConsumeReq::MergeFrom(const ActivityConsumeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityConsumeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityConsumeReq::CopyFrom(const ActivityConsumeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityConsumeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityConsumeReq::Swap(ActivityConsumeReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityConsumeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityConsumeReq_descriptor_;
  metadata.reflection = ActivityConsumeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityConsumeResp::kResultFieldNumber;
const int ActivityConsumeResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityConsumeResp::ActivityConsumeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityConsumeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityConsumeResp::ActivityConsumeResp(const ActivityConsumeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityConsumeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityConsumeResp::~ActivityConsumeResp() {
  SharedDtor();
}

void ActivityConsumeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityConsumeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityConsumeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityConsumeResp_descriptor_;
}

const ActivityConsumeResp& ActivityConsumeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityConsumeResp* ActivityConsumeResp::default_instance_ = NULL;

ActivityConsumeResp* ActivityConsumeResp::New() const {
  return new ActivityConsumeResp;
}

void ActivityConsumeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityConsumeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityConsumeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityConsumeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityConsumeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityConsumeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityConsumeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityConsumeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityConsumeResp::MergeFrom(const ActivityConsumeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityConsumeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityConsumeResp::CopyFrom(const ActivityConsumeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityConsumeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityConsumeResp::Swap(ActivityConsumeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityConsumeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityConsumeResp_descriptor_;
  metadata.reflection = ActivityConsumeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityCreditReturnReq::kActivityIdFieldNumber;
const int ActivityCreditReturnReq::kIndexFieldNumber;
#endif  // !_MSC_VER

ActivityCreditReturnReq::ActivityCreditReturnReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityCreditReturnReq::InitAsDefaultInstance() {
}

ActivityCreditReturnReq::ActivityCreditReturnReq(const ActivityCreditReturnReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityCreditReturnReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityCreditReturnReq::~ActivityCreditReturnReq() {
  SharedDtor();
}

void ActivityCreditReturnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityCreditReturnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityCreditReturnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityCreditReturnReq_descriptor_;
}

const ActivityCreditReturnReq& ActivityCreditReturnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityCreditReturnReq* ActivityCreditReturnReq::default_instance_ = NULL;

ActivityCreditReturnReq* ActivityCreditReturnReq::New() const {
  return new ActivityCreditReturnReq;
}

void ActivityCreditReturnReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityCreditReturnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityCreditReturnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityCreditReturnReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityCreditReturnReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityCreditReturnReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityCreditReturnReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityCreditReturnReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityCreditReturnReq::MergeFrom(const ActivityCreditReturnReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityCreditReturnReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityCreditReturnReq::CopyFrom(const ActivityCreditReturnReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCreditReturnReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityCreditReturnReq::Swap(ActivityCreditReturnReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityCreditReturnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityCreditReturnReq_descriptor_;
  metadata.reflection = ActivityCreditReturnReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityCreditReturnResp::kResultFieldNumber;
const int ActivityCreditReturnResp::kUserSyncFieldNumber;
const int ActivityCreditReturnResp::kReturnCreditFieldNumber;
#endif  // !_MSC_VER

ActivityCreditReturnResp::ActivityCreditReturnResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityCreditReturnResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityCreditReturnResp::ActivityCreditReturnResp(const ActivityCreditReturnResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityCreditReturnResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  return_credit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityCreditReturnResp::~ActivityCreditReturnResp() {
  SharedDtor();
}

void ActivityCreditReturnResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityCreditReturnResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityCreditReturnResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityCreditReturnResp_descriptor_;
}

const ActivityCreditReturnResp& ActivityCreditReturnResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityCreditReturnResp* ActivityCreditReturnResp::default_instance_ = NULL;

ActivityCreditReturnResp* ActivityCreditReturnResp::New() const {
  return new ActivityCreditReturnResp;
}

void ActivityCreditReturnResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    return_credit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityCreditReturnResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_return_credit;
        break;
      }

      // optional int32 return_credit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_credit_)));
          set_has_return_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityCreditReturnResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 return_credit = 3;
  if (has_return_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->return_credit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityCreditReturnResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 return_credit = 3;
  if (has_return_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->return_credit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityCreditReturnResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 return_credit = 3;
    if (has_return_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_credit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityCreditReturnResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityCreditReturnResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityCreditReturnResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityCreditReturnResp::MergeFrom(const ActivityCreditReturnResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_return_credit()) {
      set_return_credit(from.return_credit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityCreditReturnResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityCreditReturnResp::CopyFrom(const ActivityCreditReturnResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCreditReturnResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityCreditReturnResp::Swap(ActivityCreditReturnResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(return_credit_, other->return_credit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityCreditReturnResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityCreditReturnResp_descriptor_;
  metadata.reflection = ActivityCreditReturnResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityOnlineReq::kActivityIdFieldNumber;
const int ActivityOnlineReq::kIndexFieldNumber;
#endif  // !_MSC_VER

ActivityOnlineReq::ActivityOnlineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityOnlineReq::InitAsDefaultInstance() {
}

ActivityOnlineReq::ActivityOnlineReq(const ActivityOnlineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityOnlineReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityOnlineReq::~ActivityOnlineReq() {
  SharedDtor();
}

void ActivityOnlineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityOnlineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityOnlineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityOnlineReq_descriptor_;
}

const ActivityOnlineReq& ActivityOnlineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityOnlineReq* ActivityOnlineReq::default_instance_ = NULL;

ActivityOnlineReq* ActivityOnlineReq::New() const {
  return new ActivityOnlineReq;
}

void ActivityOnlineReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityOnlineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityOnlineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityOnlineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityOnlineReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityOnlineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityOnlineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityOnlineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityOnlineReq::MergeFrom(const ActivityOnlineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityOnlineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityOnlineReq::CopyFrom(const ActivityOnlineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityOnlineReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityOnlineReq::Swap(ActivityOnlineReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityOnlineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityOnlineReq_descriptor_;
  metadata.reflection = ActivityOnlineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityOnlineResp::kResultFieldNumber;
const int ActivityOnlineResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityOnlineResp::ActivityOnlineResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityOnlineResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityOnlineResp::ActivityOnlineResp(const ActivityOnlineResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityOnlineResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityOnlineResp::~ActivityOnlineResp() {
  SharedDtor();
}

void ActivityOnlineResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityOnlineResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityOnlineResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityOnlineResp_descriptor_;
}

const ActivityOnlineResp& ActivityOnlineResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityOnlineResp* ActivityOnlineResp::default_instance_ = NULL;

ActivityOnlineResp* ActivityOnlineResp::New() const {
  return new ActivityOnlineResp;
}

void ActivityOnlineResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityOnlineResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityOnlineResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityOnlineResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityOnlineResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityOnlineResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityOnlineResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityOnlineResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityOnlineResp::MergeFrom(const ActivityOnlineResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityOnlineResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityOnlineResp::CopyFrom(const ActivityOnlineResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityOnlineResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityOnlineResp::Swap(ActivityOnlineResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityOnlineResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityOnlineResp_descriptor_;
  metadata.reflection = ActivityOnlineResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityPowerReq::kActivityIdFieldNumber;
const int ActivityPowerReq::kIndexFieldNumber;
#endif  // !_MSC_VER

ActivityPowerReq::ActivityPowerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityPowerReq::InitAsDefaultInstance() {
}

ActivityPowerReq::ActivityPowerReq(const ActivityPowerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityPowerReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityPowerReq::~ActivityPowerReq() {
  SharedDtor();
}

void ActivityPowerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityPowerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityPowerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityPowerReq_descriptor_;
}

const ActivityPowerReq& ActivityPowerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityPowerReq* ActivityPowerReq::default_instance_ = NULL;

ActivityPowerReq* ActivityPowerReq::New() const {
  return new ActivityPowerReq;
}

void ActivityPowerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityPowerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityPowerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityPowerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityPowerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityPowerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityPowerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityPowerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityPowerReq::MergeFrom(const ActivityPowerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityPowerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityPowerReq::CopyFrom(const ActivityPowerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityPowerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityPowerReq::Swap(ActivityPowerReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityPowerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityPowerReq_descriptor_;
  metadata.reflection = ActivityPowerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityPowerResp::kResultFieldNumber;
const int ActivityPowerResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityPowerResp::ActivityPowerResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityPowerResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityPowerResp::ActivityPowerResp(const ActivityPowerResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityPowerResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityPowerResp::~ActivityPowerResp() {
  SharedDtor();
}

void ActivityPowerResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityPowerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityPowerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityPowerResp_descriptor_;
}

const ActivityPowerResp& ActivityPowerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityPowerResp* ActivityPowerResp::default_instance_ = NULL;

ActivityPowerResp* ActivityPowerResp::New() const {
  return new ActivityPowerResp;
}

void ActivityPowerResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityPowerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityPowerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityPowerResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityPowerResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityPowerResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityPowerResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityPowerResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityPowerResp::MergeFrom(const ActivityPowerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityPowerResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityPowerResp::CopyFrom(const ActivityPowerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityPowerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityPowerResp::Swap(ActivityPowerResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityPowerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityPowerResp_descriptor_;
  metadata.reflection = ActivityPowerResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityGrowthFundReq::kActivityIdFieldNumber;
const int ActivityGrowthFundReq::kTypeFieldNumber;
const int ActivityGrowthFundReq::kIndexFieldNumber;
#endif  // !_MSC_VER

ActivityGrowthFundReq::ActivityGrowthFundReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityGrowthFundReq::InitAsDefaultInstance() {
}

ActivityGrowthFundReq::ActivityGrowthFundReq(const ActivityGrowthFundReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityGrowthFundReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityGrowthFundReq::~ActivityGrowthFundReq() {
  SharedDtor();
}

void ActivityGrowthFundReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityGrowthFundReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityGrowthFundReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityGrowthFundReq_descriptor_;
}

const ActivityGrowthFundReq& ActivityGrowthFundReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityGrowthFundReq* ActivityGrowthFundReq::default_instance_ = NULL;

ActivityGrowthFundReq* ActivityGrowthFundReq::New() const {
  return new ActivityGrowthFundReq;
}

void ActivityGrowthFundReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityGrowthFundReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityGrowthFundReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityGrowthFundReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityGrowthFundReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityGrowthFundReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityGrowthFundReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityGrowthFundReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityGrowthFundReq::MergeFrom(const ActivityGrowthFundReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityGrowthFundReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityGrowthFundReq::CopyFrom(const ActivityGrowthFundReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityGrowthFundReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityGrowthFundReq::Swap(ActivityGrowthFundReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityGrowthFundReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityGrowthFundReq_descriptor_;
  metadata.reflection = ActivityGrowthFundReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityGrowthFundResp::kResultFieldNumber;
const int ActivityGrowthFundResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityGrowthFundResp::ActivityGrowthFundResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityGrowthFundResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityGrowthFundResp::ActivityGrowthFundResp(const ActivityGrowthFundResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityGrowthFundResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityGrowthFundResp::~ActivityGrowthFundResp() {
  SharedDtor();
}

void ActivityGrowthFundResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityGrowthFundResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityGrowthFundResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityGrowthFundResp_descriptor_;
}

const ActivityGrowthFundResp& ActivityGrowthFundResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityGrowthFundResp* ActivityGrowthFundResp::default_instance_ = NULL;

ActivityGrowthFundResp* ActivityGrowthFundResp::New() const {
  return new ActivityGrowthFundResp;
}

void ActivityGrowthFundResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityGrowthFundResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityGrowthFundResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityGrowthFundResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityGrowthFundResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityGrowthFundResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityGrowthFundResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityGrowthFundResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityGrowthFundResp::MergeFrom(const ActivityGrowthFundResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityGrowthFundResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityGrowthFundResp::CopyFrom(const ActivityGrowthFundResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityGrowthFundResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityGrowthFundResp::Swap(ActivityGrowthFundResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityGrowthFundResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityGrowthFundResp_descriptor_;
  metadata.reflection = ActivityGrowthFundResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityInvestReq::kActivityIdFieldNumber;
const int ActivityInvestReq::kTypeFieldNumber;
const int ActivityInvestReq::kIndexFieldNumber;
#endif  // !_MSC_VER

ActivityInvestReq::ActivityInvestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityInvestReq::InitAsDefaultInstance() {
}

ActivityInvestReq::ActivityInvestReq(const ActivityInvestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityInvestReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityInvestReq::~ActivityInvestReq() {
  SharedDtor();
}

void ActivityInvestReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityInvestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityInvestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityInvestReq_descriptor_;
}

const ActivityInvestReq& ActivityInvestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityInvestReq* ActivityInvestReq::default_instance_ = NULL;

ActivityInvestReq* ActivityInvestReq::New() const {
  return new ActivityInvestReq;
}

void ActivityInvestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityInvestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityInvestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityInvestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityInvestReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityInvestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityInvestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityInvestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityInvestReq::MergeFrom(const ActivityInvestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityInvestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityInvestReq::CopyFrom(const ActivityInvestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityInvestReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityInvestReq::Swap(ActivityInvestReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityInvestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityInvestReq_descriptor_;
  metadata.reflection = ActivityInvestReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityInvestResp::kResultFieldNumber;
const int ActivityInvestResp::kUserSyncFieldNumber;
const int ActivityInvestResp::kEarningFieldNumber;
#endif  // !_MSC_VER

ActivityInvestResp::ActivityInvestResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityInvestResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityInvestResp::ActivityInvestResp(const ActivityInvestResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityInvestResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  earning_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityInvestResp::~ActivityInvestResp() {
  SharedDtor();
}

void ActivityInvestResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityInvestResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityInvestResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityInvestResp_descriptor_;
}

const ActivityInvestResp& ActivityInvestResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityInvestResp* ActivityInvestResp::default_instance_ = NULL;

ActivityInvestResp* ActivityInvestResp::New() const {
  return new ActivityInvestResp;
}

void ActivityInvestResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    earning_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityInvestResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_earning;
        break;
      }

      // optional int32 earning = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_earning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &earning_)));
          set_has_earning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityInvestResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 earning = 3;
  if (has_earning()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->earning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityInvestResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 earning = 3;
  if (has_earning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->earning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityInvestResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 earning = 3;
    if (has_earning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->earning());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityInvestResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityInvestResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityInvestResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityInvestResp::MergeFrom(const ActivityInvestResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_earning()) {
      set_earning(from.earning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityInvestResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityInvestResp::CopyFrom(const ActivityInvestResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityInvestResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityInvestResp::Swap(ActivityInvestResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(earning_, other->earning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityInvestResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityInvestResp_descriptor_;
  metadata.reflection = ActivityInvestResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityChangeShipReq::kActivityIdFieldNumber;
#endif  // !_MSC_VER

ActivityChangeShipReq::ActivityChangeShipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityChangeShipReq::InitAsDefaultInstance() {
}

ActivityChangeShipReq::ActivityChangeShipReq(const ActivityChangeShipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityChangeShipReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityChangeShipReq::~ActivityChangeShipReq() {
  SharedDtor();
}

void ActivityChangeShipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityChangeShipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityChangeShipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityChangeShipReq_descriptor_;
}

const ActivityChangeShipReq& ActivityChangeShipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityChangeShipReq* ActivityChangeShipReq::default_instance_ = NULL;

ActivityChangeShipReq* ActivityChangeShipReq::New() const {
  return new ActivityChangeShipReq;
}

void ActivityChangeShipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityChangeShipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityChangeShipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityChangeShipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityChangeShipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityChangeShipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityChangeShipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityChangeShipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityChangeShipReq::MergeFrom(const ActivityChangeShipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityChangeShipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityChangeShipReq::CopyFrom(const ActivityChangeShipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityChangeShipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivityChangeShipReq::Swap(ActivityChangeShipReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityChangeShipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityChangeShipReq_descriptor_;
  metadata.reflection = ActivityChangeShipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityChangeShipResp::kResultFieldNumber;
const int ActivityChangeShipResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityChangeShipResp::ActivityChangeShipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityChangeShipResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityChangeShipResp::ActivityChangeShipResp(const ActivityChangeShipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityChangeShipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityChangeShipResp::~ActivityChangeShipResp() {
  SharedDtor();
}

void ActivityChangeShipResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityChangeShipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityChangeShipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityChangeShipResp_descriptor_;
}

const ActivityChangeShipResp& ActivityChangeShipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityChangeShipResp* ActivityChangeShipResp::default_instance_ = NULL;

ActivityChangeShipResp* ActivityChangeShipResp::New() const {
  return new ActivityChangeShipResp;
}

void ActivityChangeShipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityChangeShipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityChangeShipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityChangeShipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityChangeShipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityChangeShipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityChangeShipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityChangeShipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityChangeShipResp::MergeFrom(const ActivityChangeShipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityChangeShipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityChangeShipResp::CopyFrom(const ActivityChangeShipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityChangeShipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityChangeShipResp::Swap(ActivityChangeShipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityChangeShipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityChangeShipResp_descriptor_;
  metadata.reflection = ActivityChangeShipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityMonthSignReq::kActivityIdFieldNumber;
const int ActivityMonthSignReq::kTypeFieldNumber;
const int ActivityMonthSignReq::kIndexFieldNumber;
#endif  // !_MSC_VER

ActivityMonthSignReq::ActivityMonthSignReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityMonthSignReq::InitAsDefaultInstance() {
}

ActivityMonthSignReq::ActivityMonthSignReq(const ActivityMonthSignReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityMonthSignReq::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = 0;
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityMonthSignReq::~ActivityMonthSignReq() {
  SharedDtor();
}

void ActivityMonthSignReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityMonthSignReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMonthSignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMonthSignReq_descriptor_;
}

const ActivityMonthSignReq& ActivityMonthSignReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityMonthSignReq* ActivityMonthSignReq::default_instance_ = NULL;

ActivityMonthSignReq* ActivityMonthSignReq::New() const {
  return new ActivityMonthSignReq;
}

void ActivityMonthSignReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = 0;
    type_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityMonthSignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityMonthSignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity_id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityMonthSignReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity_id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityMonthSignReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMonthSignReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityMonthSignReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityMonthSignReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityMonthSignReq::MergeFrom(const ActivityMonthSignReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityMonthSignReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMonthSignReq::CopyFrom(const ActivityMonthSignReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityMonthSignReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActivityMonthSignReq::Swap(ActivityMonthSignReq* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityMonthSignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMonthSignReq_descriptor_;
  metadata.reflection = ActivityMonthSignReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityMonthSignResp::kResultFieldNumber;
const int ActivityMonthSignResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ActivityMonthSignResp::ActivityMonthSignResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityMonthSignResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ActivityMonthSignResp::ActivityMonthSignResp(const ActivityMonthSignResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityMonthSignResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityMonthSignResp::~ActivityMonthSignResp() {
  SharedDtor();
}

void ActivityMonthSignResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ActivityMonthSignResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityMonthSignResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityMonthSignResp_descriptor_;
}

const ActivityMonthSignResp& ActivityMonthSignResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdActivity_2eproto();
  return *default_instance_;
}

ActivityMonthSignResp* ActivityMonthSignResp::default_instance_ = NULL;

ActivityMonthSignResp* ActivityMonthSignResp::New() const {
  return new ActivityMonthSignResp;
}

void ActivityMonthSignResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityMonthSignResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityMonthSignResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityMonthSignResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityMonthSignResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityMonthSignResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityMonthSignResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityMonthSignResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityMonthSignResp::MergeFrom(const ActivityMonthSignResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityMonthSignResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityMonthSignResp::CopyFrom(const ActivityMonthSignResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityMonthSignResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ActivityMonthSignResp::Swap(ActivityMonthSignResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityMonthSignResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityMonthSignResp_descriptor_;
  metadata.reflection = ActivityMonthSignResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
