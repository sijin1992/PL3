// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AirShip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AirShip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AirShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirShip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AirShip_2eproto() {
  protobuf_AddDesc_AirShip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AirShip.proto");
  GOOGLE_CHECK(file != NULL);
  AirShip_descriptor_ = file->message_type(0);
  static const int AirShip_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, weapon_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, durable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, equip_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, body_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, ship_break_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, start_fix_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, gem_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, energy_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, energy_level_),
  };
  AirShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AirShip_descriptor_,
      AirShip::default_instance_,
      AirShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AirShip));
  ShipList_descriptor_ = file->message_type(1);
  static const int ShipList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipList, ship_list_),
  };
  ShipList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipList_descriptor_,
      ShipList::default_instance_,
      ShipList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AirShip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AirShip_descriptor_, &AirShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipList_descriptor_, &ShipList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AirShip_2eproto() {
  delete AirShip::default_instance_;
  delete AirShip_reflection_;
  delete ShipList::default_instance_;
  delete ShipList_reflection_;
}

void protobuf_AddDesc_AirShip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rAirShip.proto\"\200\003\n\007AirShip\022\014\n\004guid\030\001 \002("
    "\005\022\n\n\002id\030\002 \002(\005\022\016\n\006status\030\003 \002(\005\022\014\n\004type\030\004 "
    "\002(\005\022\014\n\004kind\030\005 \002(\005\022\017\n\007quality\030\006 \002(\005\022\014\n\004st"
    "ar\030\007 \002(\005\022\r\n\005level\030\010 \002(\005\022\r\n\005skill\030\t \002(\005\022\023"
    "\n\013weapon_list\030\n \003(\005\022\014\n\004attr\030\013 \003(\005\022\014\n\004loa"
    "d\030\014 \002(\005\022\017\n\007durable\030\r \002(\005\022\020\n\010position\030\016 \001"
    "(\005\022\022\n\nequip_list\030\017 \003(\005\022\013\n\003exp\030\020 \001(\005\022\025\n\rb"
    "ody_position\030\021 \003(\005\022\022\n\nship_break\030\022 \001(\005\022\026"
    "\n\016start_fix_time\030\023 \001(\003\022\020\n\010gem_list\030\024 \003(\005"
    "\022\022\n\nenergy_exp\030\025 \001(\005\022\024\n\014energy_level\030\026 \001"
    "(\005\"\'\n\010ShipList\022\033\n\tship_list\030\001 \003(\0132\010.AirS"
    "hip", 443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AirShip.proto", &protobuf_RegisterTypes);
  AirShip::default_instance_ = new AirShip();
  ShipList::default_instance_ = new ShipList();
  AirShip::default_instance_->InitAsDefaultInstance();
  ShipList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AirShip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AirShip_2eproto {
  StaticDescriptorInitializer_AirShip_2eproto() {
    protobuf_AddDesc_AirShip_2eproto();
  }
} static_descriptor_initializer_AirShip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AirShip::kGuidFieldNumber;
const int AirShip::kIdFieldNumber;
const int AirShip::kStatusFieldNumber;
const int AirShip::kTypeFieldNumber;
const int AirShip::kKindFieldNumber;
const int AirShip::kQualityFieldNumber;
const int AirShip::kStarFieldNumber;
const int AirShip::kLevelFieldNumber;
const int AirShip::kSkillFieldNumber;
const int AirShip::kWeaponListFieldNumber;
const int AirShip::kAttrFieldNumber;
const int AirShip::kLoadFieldNumber;
const int AirShip::kDurableFieldNumber;
const int AirShip::kPositionFieldNumber;
const int AirShip::kEquipListFieldNumber;
const int AirShip::kExpFieldNumber;
const int AirShip::kBodyPositionFieldNumber;
const int AirShip::kShipBreakFieldNumber;
const int AirShip::kStartFixTimeFieldNumber;
const int AirShip::kGemListFieldNumber;
const int AirShip::kEnergyExpFieldNumber;
const int AirShip::kEnergyLevelFieldNumber;
#endif  // !_MSC_VER

AirShip::AirShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AirShip::InitAsDefaultInstance() {
}

AirShip::AirShip(const AirShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AirShip::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  id_ = 0;
  status_ = 0;
  type_ = 0;
  kind_ = 0;
  quality_ = 0;
  star_ = 0;
  level_ = 0;
  skill_ = 0;
  load_ = 0;
  durable_ = 0;
  position_ = 0;
  exp_ = 0;
  ship_break_ = 0;
  start_fix_time_ = GOOGLE_LONGLONG(0);
  energy_exp_ = 0;
  energy_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AirShip::~AirShip() {
  SharedDtor();
}

void AirShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AirShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirShip_descriptor_;
}

const AirShip& AirShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirShip_2eproto();
  return *default_instance_;
}

AirShip* AirShip::default_instance_ = NULL;

AirShip* AirShip::New() const {
  return new AirShip;
}

void AirShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
    id_ = 0;
    status_ = 0;
    type_ = 0;
    kind_ = 0;
    quality_ = 0;
    star_ = 0;
    level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skill_ = 0;
    load_ = 0;
    durable_ = 0;
    position_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    ship_break_ = 0;
    start_fix_time_ = GOOGLE_LONGLONG(0);
    energy_exp_ = 0;
    energy_level_ = 0;
  }
  weapon_list_.Clear();
  attr_.Clear();
  equip_list_.Clear();
  body_position_.Clear();
  gem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AirShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kind;
        break;
      }

      // required int32 kind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quality;
        break;
      }

      // required int32 quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_star;
        break;
      }

      // required int32 star = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // required int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skill;
        break;
      }

      // required int32 skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weapon_list;
        break;
      }

      // repeated int32 weapon_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_weapon_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weapon_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weapon_list;
        if (input->ExpectTag(88)) goto parse_attr;
        break;
      }

      // repeated int32 attr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_attr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_attr;
        if (input->ExpectTag(96)) goto parse_load;
        break;
      }

      // required int32 load = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_durable;
        break;
      }

      // required int32 durable = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &durable_)));
          set_has_durable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_position;
        break;
      }

      // optional int32 position = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_equip_list;
        break;
      }

      // repeated int32 equip_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_equip_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equip_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_equip_list;
        if (input->ExpectTag(128)) goto parse_exp;
        break;
      }

      // optional int32 exp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_body_position;
        break;
      }

      // repeated int32 body_position = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_body_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_body_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_body_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_body_position;
        if (input->ExpectTag(144)) goto parse_ship_break;
        break;
      }

      // optional int32 ship_break = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_break:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_break_)));
          set_has_ship_break();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_start_fix_time;
        break;
      }

      // optional int64 start_fix_time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_fix_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_fix_time_)));
          set_has_start_fix_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_gem_list;
        break;
      }

      // repeated int32 gem_list = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_gem_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gem_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_gem_list;
        if (input->ExpectTag(168)) goto parse_energy_exp;
        break;
      }

      // optional int32 energy_exp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_exp_)));
          set_has_energy_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_energy_level;
        break;
      }

      // optional int32 energy_level = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_level_)));
          set_has_energy_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AirShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required int32 kind = 5;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->kind(), output);
  }

  // required int32 quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quality(), output);
  }

  // required int32 star = 7;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->star(), output);
  }

  // required int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  // required int32 skill = 9;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->skill(), output);
  }

  // repeated int32 weapon_list = 10;
  for (int i = 0; i < this->weapon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->weapon_list(i), output);
  }

  // repeated int32 attr = 11;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->attr(i), output);
  }

  // required int32 load = 12;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->load(), output);
  }

  // required int32 durable = 13;
  if (has_durable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->durable(), output);
  }

  // optional int32 position = 14;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->position(), output);
  }

  // repeated int32 equip_list = 15;
  for (int i = 0; i < this->equip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->equip_list(i), output);
  }

  // optional int32 exp = 16;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->exp(), output);
  }

  // repeated int32 body_position = 17;
  for (int i = 0; i < this->body_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->body_position(i), output);
  }

  // optional int32 ship_break = 18;
  if (has_ship_break()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ship_break(), output);
  }

  // optional int64 start_fix_time = 19;
  if (has_start_fix_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->start_fix_time(), output);
  }

  // repeated int32 gem_list = 20;
  for (int i = 0; i < this->gem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->gem_list(i), output);
  }

  // optional int32 energy_exp = 21;
  if (has_energy_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->energy_exp(), output);
  }

  // optional int32 energy_level = 22;
  if (has_energy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->energy_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AirShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required int32 kind = 5;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->kind(), target);
  }

  // required int32 quality = 6;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quality(), target);
  }

  // required int32 star = 7;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->star(), target);
  }

  // required int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  // required int32 skill = 9;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->skill(), target);
  }

  // repeated int32 weapon_list = 10;
  for (int i = 0; i < this->weapon_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->weapon_list(i), target);
  }

  // repeated int32 attr = 11;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->attr(i), target);
  }

  // required int32 load = 12;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->load(), target);
  }

  // required int32 durable = 13;
  if (has_durable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->durable(), target);
  }

  // optional int32 position = 14;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->position(), target);
  }

  // repeated int32 equip_list = 15;
  for (int i = 0; i < this->equip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->equip_list(i), target);
  }

  // optional int32 exp = 16;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->exp(), target);
  }

  // repeated int32 body_position = 17;
  for (int i = 0; i < this->body_position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->body_position(i), target);
  }

  // optional int32 ship_break = 18;
  if (has_ship_break()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->ship_break(), target);
  }

  // optional int64 start_fix_time = 19;
  if (has_start_fix_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->start_fix_time(), target);
  }

  // repeated int32 gem_list = 20;
  for (int i = 0; i < this->gem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->gem_list(i), target);
  }

  // optional int32 energy_exp = 21;
  if (has_energy_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->energy_exp(), target);
  }

  // optional int32 energy_level = 22;
  if (has_energy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->energy_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AirShip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 kind = 5;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // required int32 quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 star = 7;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // required int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 skill = 9;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

    // required int32 load = 12;
    if (has_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->load());
    }

    // required int32 durable = 13;
    if (has_durable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->durable());
    }

    // optional int32 position = 14;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional int32 exp = 16;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 ship_break = 18;
    if (has_ship_break()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_break());
    }

    // optional int64 start_fix_time = 19;
    if (has_start_fix_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_fix_time());
    }

    // optional int32 energy_exp = 21;
    if (has_energy_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy_exp());
    }

    // optional int32 energy_level = 22;
    if (has_energy_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy_level());
    }

  }
  // repeated int32 weapon_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->weapon_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weapon_list(i));
    }
    total_size += 1 * this->weapon_list_size() + data_size;
  }

  // repeated int32 attr = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attr(i));
    }
    total_size += 1 * this->attr_size() + data_size;
  }

  // repeated int32 equip_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equip_list(i));
    }
    total_size += 1 * this->equip_list_size() + data_size;
  }

  // repeated int32 body_position = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->body_position_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->body_position(i));
    }
    total_size += 2 * this->body_position_size() + data_size;
  }

  // repeated int32 gem_list = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->gem_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gem_list(i));
    }
    total_size += 2 * this->gem_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AirShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AirShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AirShip::MergeFrom(const AirShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  weapon_list_.MergeFrom(from.weapon_list_);
  attr_.MergeFrom(from.attr_);
  equip_list_.MergeFrom(from.equip_list_);
  body_position_.MergeFrom(from.body_position_);
  gem_list_.MergeFrom(from.gem_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_load()) {
      set_load(from.load());
    }
    if (from.has_durable()) {
      set_durable(from.durable());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_ship_break()) {
      set_ship_break(from.ship_break());
    }
    if (from.has_start_fix_time()) {
      set_start_fix_time(from.start_fix_time());
    }
    if (from.has_energy_exp()) {
      set_energy_exp(from.energy_exp());
    }
    if (from.has_energy_level()) {
      set_energy_level(from.energy_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AirShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirShip::CopyFrom(const AirShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x000019ff) != 0x000019ff) return false;

  return true;
}

void AirShip::Swap(AirShip* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(type_, other->type_);
    std::swap(kind_, other->kind_);
    std::swap(quality_, other->quality_);
    std::swap(star_, other->star_);
    std::swap(level_, other->level_);
    std::swap(skill_, other->skill_);
    weapon_list_.Swap(&other->weapon_list_);
    attr_.Swap(&other->attr_);
    std::swap(load_, other->load_);
    std::swap(durable_, other->durable_);
    std::swap(position_, other->position_);
    equip_list_.Swap(&other->equip_list_);
    std::swap(exp_, other->exp_);
    body_position_.Swap(&other->body_position_);
    std::swap(ship_break_, other->ship_break_);
    std::swap(start_fix_time_, other->start_fix_time_);
    gem_list_.Swap(&other->gem_list_);
    std::swap(energy_exp_, other->energy_exp_);
    std::swap(energy_level_, other->energy_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AirShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirShip_descriptor_;
  metadata.reflection = AirShip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipList::kShipListFieldNumber;
#endif  // !_MSC_VER

ShipList::ShipList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipList::InitAsDefaultInstance() {
}

ShipList::ShipList(const ShipList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipList::~ShipList() {
  SharedDtor();
}

void ShipList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipList_descriptor_;
}

const ShipList& ShipList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AirShip_2eproto();
  return *default_instance_;
}

ShipList* ShipList::default_instance_ = NULL;

ShipList* ShipList::New() const {
  return new ShipList;
}

void ShipList::Clear() {
  ship_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AirShip ship_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ship_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AirShip ship_list = 1;
  for (int i = 0; i < this->ship_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ship_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AirShip ship_list = 1;
  for (int i = 0; i < this->ship_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ship_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipList::ByteSize() const {
  int total_size = 0;

  // repeated .AirShip ship_list = 1;
  total_size += 1 * this->ship_list_size();
  for (int i = 0; i < this->ship_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ship_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipList::MergeFrom(const ShipList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ship_list_.MergeFrom(from.ship_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipList::CopyFrom(const ShipList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipList::IsInitialized() const {

  for (int i = 0; i < ship_list_size(); i++) {
    if (!this->ship_list(i).IsInitialized()) return false;
  }
  return true;
}

void ShipList::Swap(ShipList* other) {
  if (other != this) {
    ship_list_.Swap(&other->ship_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipList_descriptor_;
  metadata.reflection = ShipList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
