// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

#ifndef PROTOBUF_gateway_2eproto__INCLUDED
#define PROTOBUF_gateway_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gateway_2eproto();
void protobuf_AssignDesc_gateway_2eproto();
void protobuf_ShutdownFile_gateway_2eproto();

class AuthReq;
class AuthResp;
class QQLogReq;

enum AuthResp_Result {
  AuthResp_Result_OK = 0,
  AuthResp_Result_FAIL = -1,
  AuthResp_Result_NOAUTH = 1
};
bool AuthResp_Result_IsValid(int value);
const AuthResp_Result AuthResp_Result_Result_MIN = AuthResp_Result_FAIL;
const AuthResp_Result AuthResp_Result_Result_MAX = AuthResp_Result_NOAUTH;
const int AuthResp_Result_Result_ARRAYSIZE = AuthResp_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuthResp_Result_descriptor();
inline const ::std::string& AuthResp_Result_Name(AuthResp_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuthResp_Result_descriptor(), value);
}
inline bool AuthResp_Result_Parse(
    const ::std::string& name, AuthResp_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthResp_Result>(
    AuthResp_Result_descriptor(), name, value);
}
enum QQLogReq_LOGTYPE {
  QQLogReq_LOGTYPE_REGIST = 1,
  QQLogReq_LOGTYPE_LOGIN = 2,
  QQLogReq_LOGTYPE_LOGOUT = 3,
  QQLogReq_LOGTYPE_PAYMENT = 4,
  QQLogReq_LOGTYPE_ONLINE_STAT = 5
};
bool QQLogReq_LOGTYPE_IsValid(int value);
const QQLogReq_LOGTYPE QQLogReq_LOGTYPE_LOGTYPE_MIN = QQLogReq_LOGTYPE_REGIST;
const QQLogReq_LOGTYPE QQLogReq_LOGTYPE_LOGTYPE_MAX = QQLogReq_LOGTYPE_ONLINE_STAT;
const int QQLogReq_LOGTYPE_LOGTYPE_ARRAYSIZE = QQLogReq_LOGTYPE_LOGTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* QQLogReq_LOGTYPE_descriptor();
inline const ::std::string& QQLogReq_LOGTYPE_Name(QQLogReq_LOGTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    QQLogReq_LOGTYPE_descriptor(), value);
}
inline bool QQLogReq_LOGTYPE_Parse(
    const ::std::string& name, QQLogReq_LOGTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QQLogReq_LOGTYPE>(
    QQLogReq_LOGTYPE_descriptor(), name, value);
}
// ===================================================================

class AuthReq : public ::google::protobuf::Message {
 public:
  AuthReq();
  virtual ~AuthReq();

  AuthReq(const AuthReq& from);

  inline AuthReq& operator=(const AuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthReq& default_instance();

  void Swap(AuthReq* other);

  // implements Message ----------------------------------------------

  AuthReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthReq& from);
  void MergeFrom(const AuthReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string domain = 2;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 2;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:AuthReq)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_domain();
  inline void clear_has_domain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* domain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gateway_2eproto();
  friend void protobuf_AssignDesc_gateway_2eproto();
  friend void protobuf_ShutdownFile_gateway_2eproto();

  void InitAsDefaultInstance();
  static AuthReq* default_instance_;
};
// -------------------------------------------------------------------

class AuthResp : public ::google::protobuf::Message {
 public:
  AuthResp();
  virtual ~AuthResp();

  AuthResp(const AuthResp& from);

  inline AuthResp& operator=(const AuthResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthResp& default_instance();

  void Swap(AuthResp* other);

  // implements Message ----------------------------------------------

  AuthResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AuthResp& from);
  void MergeFrom(const AuthResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AuthResp_Result Result;
  static const Result OK = AuthResp_Result_OK;
  static const Result FAIL = AuthResp_Result_FAIL;
  static const Result NOAUTH = AuthResp_Result_NOAUTH;
  static inline bool Result_IsValid(int value) {
    return AuthResp_Result_IsValid(value);
  }
  static const Result Result_MIN =
    AuthResp_Result_Result_MIN;
  static const Result Result_MAX =
    AuthResp_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    AuthResp_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return AuthResp_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return AuthResp_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return AuthResp_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AuthResp.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::AuthResp_Result result() const;
  inline void set_result(::AuthResp_Result value);

  // @@protoc_insertion_point(class_scope:AuthResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gateway_2eproto();
  friend void protobuf_AssignDesc_gateway_2eproto();
  friend void protobuf_ShutdownFile_gateway_2eproto();

  void InitAsDefaultInstance();
  static AuthResp* default_instance_;
};
// -------------------------------------------------------------------

class QQLogReq : public ::google::protobuf::Message {
 public:
  QQLogReq();
  virtual ~QQLogReq();

  QQLogReq(const QQLogReq& from);

  inline QQLogReq& operator=(const QQLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QQLogReq& default_instance();

  void Swap(QQLogReq* other);

  // implements Message ----------------------------------------------

  QQLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QQLogReq& from);
  void MergeFrom(const QQLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QQLogReq_LOGTYPE LOGTYPE;
  static const LOGTYPE REGIST = QQLogReq_LOGTYPE_REGIST;
  static const LOGTYPE LOGIN = QQLogReq_LOGTYPE_LOGIN;
  static const LOGTYPE LOGOUT = QQLogReq_LOGTYPE_LOGOUT;
  static const LOGTYPE PAYMENT = QQLogReq_LOGTYPE_PAYMENT;
  static const LOGTYPE ONLINE_STAT = QQLogReq_LOGTYPE_ONLINE_STAT;
  static inline bool LOGTYPE_IsValid(int value) {
    return QQLogReq_LOGTYPE_IsValid(value);
  }
  static const LOGTYPE LOGTYPE_MIN =
    QQLogReq_LOGTYPE_LOGTYPE_MIN;
  static const LOGTYPE LOGTYPE_MAX =
    QQLogReq_LOGTYPE_LOGTYPE_MAX;
  static const int LOGTYPE_ARRAYSIZE =
    QQLogReq_LOGTYPE_LOGTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LOGTYPE_descriptor() {
    return QQLogReq_LOGTYPE_descriptor();
  }
  static inline const ::std::string& LOGTYPE_Name(LOGTYPE value) {
    return QQLogReq_LOGTYPE_Name(value);
  }
  static inline bool LOGTYPE_Parse(const ::std::string& name,
      LOGTYPE* value) {
    return QQLogReq_LOGTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .QQLogReq.LOGTYPE logtype = 1;
  inline bool has_logtype() const;
  inline void clear_logtype();
  static const int kLogtypeFieldNumber = 1;
  inline ::QQLogReq_LOGTYPE logtype() const;
  inline void set_logtype(::QQLogReq_LOGTYPE value);

  // repeated string values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const char* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // repeated string names = 3;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 3;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // optional int32 userip = 4;
  inline bool has_userip() const;
  inline void clear_userip();
  static const int kUseripFieldNumber = 4;
  inline ::google::protobuf::int32 userip() const;
  inline void set_userip(::google::protobuf::int32 value);

  // optional string userkey = 5;
  inline bool has_userkey() const;
  inline void clear_userkey();
  static const int kUserkeyFieldNumber = 5;
  inline const ::std::string& userkey() const;
  inline void set_userkey(const ::std::string& value);
  inline void set_userkey(const char* value);
  inline void set_userkey(const char* value, size_t size);
  inline ::std::string* mutable_userkey();
  inline ::std::string* release_userkey();
  inline void set_allocated_userkey(::std::string* userkey);

  // optional int32 domain = 6;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 6;
  inline ::google::protobuf::int32 domain() const;
  inline void set_domain(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QQLogReq)
 private:
  inline void set_has_logtype();
  inline void clear_has_logtype();
  inline void set_has_userip();
  inline void clear_has_userip();
  inline void set_has_userkey();
  inline void clear_has_userkey();
  inline void set_has_domain();
  inline void clear_has_domain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  int logtype_;
  ::google::protobuf::int32 userip_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::std::string* userkey_;
  ::google::protobuf::int32 domain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gateway_2eproto();
  friend void protobuf_AssignDesc_gateway_2eproto();
  friend void protobuf_ShutdownFile_gateway_2eproto();

  void InitAsDefaultInstance();
  static QQLogReq* default_instance_;
};
// ===================================================================


// ===================================================================

// AuthReq

// required string key = 1;
inline bool AuthReq::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthReq::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthReq::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AuthReq::key() const {
  return *key_;
}
inline void AuthReq::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void AuthReq::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void AuthReq::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthReq::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* AuthReq::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AuthReq::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string domain = 2;
inline bool AuthReq::has_domain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthReq::set_has_domain() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthReq::clear_has_domain() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthReq::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& AuthReq::domain() const {
  return *domain_;
}
inline void AuthReq::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void AuthReq::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void AuthReq::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AuthReq::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* AuthReq::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AuthReq::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AuthResp

// required .AuthResp.Result result = 1;
inline bool AuthResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::AuthResp_Result AuthResp::result() const {
  return static_cast< ::AuthResp_Result >(result_);
}
inline void AuthResp::set_result(::AuthResp_Result value) {
  assert(::AuthResp_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// QQLogReq

// required .QQLogReq.LOGTYPE logtype = 1;
inline bool QQLogReq::has_logtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QQLogReq::set_has_logtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QQLogReq::clear_has_logtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QQLogReq::clear_logtype() {
  logtype_ = 1;
  clear_has_logtype();
}
inline ::QQLogReq_LOGTYPE QQLogReq::logtype() const {
  return static_cast< ::QQLogReq_LOGTYPE >(logtype_);
}
inline void QQLogReq::set_logtype(::QQLogReq_LOGTYPE value) {
  assert(::QQLogReq_LOGTYPE_IsValid(value));
  set_has_logtype();
  logtype_ = value;
}

// repeated string values = 2;
inline int QQLogReq::values_size() const {
  return values_.size();
}
inline void QQLogReq::clear_values() {
  values_.Clear();
}
inline const ::std::string& QQLogReq::values(int index) const {
  return values_.Get(index);
}
inline ::std::string* QQLogReq::mutable_values(int index) {
  return values_.Mutable(index);
}
inline void QQLogReq::set_values(int index, const ::std::string& value) {
  values_.Mutable(index)->assign(value);
}
inline void QQLogReq::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
}
inline void QQLogReq::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QQLogReq::add_values() {
  return values_.Add();
}
inline void QQLogReq::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
}
inline void QQLogReq::add_values(const char* value) {
  values_.Add()->assign(value);
}
inline void QQLogReq::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QQLogReq::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QQLogReq::mutable_values() {
  return &values_;
}

// repeated string names = 3;
inline int QQLogReq::names_size() const {
  return names_.size();
}
inline void QQLogReq::clear_names() {
  names_.Clear();
}
inline const ::std::string& QQLogReq::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* QQLogReq::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void QQLogReq::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void QQLogReq::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void QQLogReq::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QQLogReq::add_names() {
  return names_.Add();
}
inline void QQLogReq::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void QQLogReq::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void QQLogReq::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QQLogReq::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QQLogReq::mutable_names() {
  return &names_;
}

// optional int32 userip = 4;
inline bool QQLogReq::has_userip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QQLogReq::set_has_userip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QQLogReq::clear_has_userip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QQLogReq::clear_userip() {
  userip_ = 0;
  clear_has_userip();
}
inline ::google::protobuf::int32 QQLogReq::userip() const {
  return userip_;
}
inline void QQLogReq::set_userip(::google::protobuf::int32 value) {
  set_has_userip();
  userip_ = value;
}

// optional string userkey = 5;
inline bool QQLogReq::has_userkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QQLogReq::set_has_userkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QQLogReq::clear_has_userkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QQLogReq::clear_userkey() {
  if (userkey_ != &::google::protobuf::internal::kEmptyString) {
    userkey_->clear();
  }
  clear_has_userkey();
}
inline const ::std::string& QQLogReq::userkey() const {
  return *userkey_;
}
inline void QQLogReq::set_userkey(const ::std::string& value) {
  set_has_userkey();
  if (userkey_ == &::google::protobuf::internal::kEmptyString) {
    userkey_ = new ::std::string;
  }
  userkey_->assign(value);
}
inline void QQLogReq::set_userkey(const char* value) {
  set_has_userkey();
  if (userkey_ == &::google::protobuf::internal::kEmptyString) {
    userkey_ = new ::std::string;
  }
  userkey_->assign(value);
}
inline void QQLogReq::set_userkey(const char* value, size_t size) {
  set_has_userkey();
  if (userkey_ == &::google::protobuf::internal::kEmptyString) {
    userkey_ = new ::std::string;
  }
  userkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QQLogReq::mutable_userkey() {
  set_has_userkey();
  if (userkey_ == &::google::protobuf::internal::kEmptyString) {
    userkey_ = new ::std::string;
  }
  return userkey_;
}
inline ::std::string* QQLogReq::release_userkey() {
  clear_has_userkey();
  if (userkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userkey_;
    userkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QQLogReq::set_allocated_userkey(::std::string* userkey) {
  if (userkey_ != &::google::protobuf::internal::kEmptyString) {
    delete userkey_;
  }
  if (userkey) {
    set_has_userkey();
    userkey_ = userkey;
  } else {
    clear_has_userkey();
    userkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 domain = 6;
inline bool QQLogReq::has_domain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QQLogReq::set_has_domain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QQLogReq::clear_has_domain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QQLogReq::clear_domain() {
  domain_ = 0;
  clear_has_domain();
}
inline ::google::protobuf::int32 QQLogReq::domain() const {
  return domain_;
}
inline void QQLogReq::set_domain(::google::protobuf::int32 value) {
  set_has_domain();
  domain_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AuthResp_Result>() {
  return ::AuthResp_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QQLogReq_LOGTYPE>() {
  return ::QQLogReq_LOGTYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gateway_2eproto__INCLUDED
