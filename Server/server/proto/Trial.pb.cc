// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Trial.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Trial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TrialLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrialShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialShip_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrialCopy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialCopy_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrialArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrialData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Trial_2eproto() {
  protobuf_AddDesc_Trial_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Trial.proto");
  GOOGLE_CHECK(file != NULL);
  TrialLevel_descriptor_ = file->message_type(0);
  static const int TrialLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialLevel, level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialLevel, star_),
  };
  TrialLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialLevel_descriptor_,
      TrialLevel::default_instance_,
      TrialLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialLevel));
  TrialShip_descriptor_ = file->message_type(1);
  static const int TrialShip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialShip, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialShip, hp_),
  };
  TrialShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialShip_descriptor_,
      TrialShip::default_instance_,
      TrialShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialShip));
  TrialCopy_descriptor_ = file->message_type(2);
  static const int TrialCopy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialCopy, copy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialCopy, reward_flag_),
  };
  TrialCopy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialCopy_descriptor_,
      TrialCopy::default_instance_,
      TrialCopy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialCopy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialCopy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialCopy));
  TrialArea_descriptor_ = file->message_type(3);
  static const int TrialArea_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialArea, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialArea, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialArea, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialArea, ship_list_),
  };
  TrialArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialArea_descriptor_,
      TrialArea::default_instance_,
      TrialArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialArea));
  TrialData_descriptor_ = file->message_type(4);
  static const int TrialData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialData, ticket_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialData, area_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialData, level_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialData, badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialData, copy_list_),
  };
  TrialData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialData_descriptor_,
      TrialData::default_instance_,
      TrialData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Trial_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialLevel_descriptor_, &TrialLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialShip_descriptor_, &TrialShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialCopy_descriptor_, &TrialCopy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialArea_descriptor_, &TrialArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialData_descriptor_, &TrialData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Trial_2eproto() {
  delete TrialLevel::default_instance_;
  delete TrialLevel_reflection_;
  delete TrialShip::default_instance_;
  delete TrialShip_reflection_;
  delete TrialCopy::default_instance_;
  delete TrialCopy_reflection_;
  delete TrialArea::default_instance_;
  delete TrialArea_reflection_;
  delete TrialData::default_instance_;
  delete TrialData_reflection_;
}

void protobuf_AddDesc_Trial_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Trial.proto\",\n\nTrialLevel\022\020\n\010level_id\030"
    "\001 \002(\005\022\014\n\004star\030\002 \002(\005\"%\n\tTrialShip\022\014\n\004guid"
    "\030\001 \002(\005\022\n\n\002hp\030\002 \002(\005\"1\n\tTrialCopy\022\017\n\007copy_"
    "id\030\001 \002(\005\022\023\n\013reward_flag\030\002 \002(\005\"[\n\tTrialAr"
    "ea\022\017\n\007area_id\030\001 \002(\005\022\016\n\006status\030\002 \001(\005\022\016\n\006l"
    "ineup\030\003 \003(\005\022\035\n\tship_list\030\004 \003(\0132\n.TrialSh"
    "ip\"\215\001\n\tTrialData\022\022\n\nticket_num\030\001 \002(\005\022\035\n\t"
    "area_list\030\002 \003(\0132\n.TrialArea\022\037\n\nlevel_lis"
    "t\030\003 \003(\0132\013.TrialLevel\022\r\n\005badge\030\004 \002(\005\022\035\n\tc"
    "opy_list\030\005 \003(\0132\n.TrialCopy", 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Trial.proto", &protobuf_RegisterTypes);
  TrialLevel::default_instance_ = new TrialLevel();
  TrialShip::default_instance_ = new TrialShip();
  TrialCopy::default_instance_ = new TrialCopy();
  TrialArea::default_instance_ = new TrialArea();
  TrialData::default_instance_ = new TrialData();
  TrialLevel::default_instance_->InitAsDefaultInstance();
  TrialShip::default_instance_->InitAsDefaultInstance();
  TrialCopy::default_instance_->InitAsDefaultInstance();
  TrialArea::default_instance_->InitAsDefaultInstance();
  TrialData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Trial_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Trial_2eproto {
  StaticDescriptorInitializer_Trial_2eproto() {
    protobuf_AddDesc_Trial_2eproto();
  }
} static_descriptor_initializer_Trial_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrialLevel::kLevelIdFieldNumber;
const int TrialLevel::kStarFieldNumber;
#endif  // !_MSC_VER

TrialLevel::TrialLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialLevel::InitAsDefaultInstance() {
}

TrialLevel::TrialLevel(const TrialLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialLevel::SharedCtor() {
  _cached_size_ = 0;
  level_id_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialLevel::~TrialLevel() {
  SharedDtor();
}

void TrialLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrialLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialLevel_descriptor_;
}

const TrialLevel& TrialLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Trial_2eproto();
  return *default_instance_;
}

TrialLevel* TrialLevel::default_instance_ = NULL;

TrialLevel* TrialLevel::New() const {
  return new TrialLevel;
}

void TrialLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_id_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrialLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrialLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level_id = 1;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level_id(), output);
  }

  // required int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level_id = 1;
  if (has_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level_id(), target);
  }

  // required int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level_id = 1;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_id());
    }

    // required int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrialLevel::MergeFrom(const TrialLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrialLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialLevel::CopyFrom(const TrialLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TrialLevel::Swap(TrialLevel* other) {
  if (other != this) {
    std::swap(level_id_, other->level_id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrialLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialLevel_descriptor_;
  metadata.reflection = TrialLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrialShip::kGuidFieldNumber;
const int TrialShip::kHpFieldNumber;
#endif  // !_MSC_VER

TrialShip::TrialShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialShip::InitAsDefaultInstance() {
}

TrialShip::TrialShip(const TrialShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialShip::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialShip::~TrialShip() {
  SharedDtor();
}

void TrialShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrialShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialShip_descriptor_;
}

const TrialShip& TrialShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Trial_2eproto();
  return *default_instance_;
}

TrialShip* TrialShip::default_instance_ = NULL;

TrialShip* TrialShip::New() const {
  return new TrialShip;
}

void TrialShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrialShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrialShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // required int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialShip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrialShip::MergeFrom(const TrialShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrialShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialShip::CopyFrom(const TrialShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TrialShip::Swap(TrialShip* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrialShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialShip_descriptor_;
  metadata.reflection = TrialShip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrialCopy::kCopyIdFieldNumber;
const int TrialCopy::kRewardFlagFieldNumber;
#endif  // !_MSC_VER

TrialCopy::TrialCopy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialCopy::InitAsDefaultInstance() {
}

TrialCopy::TrialCopy(const TrialCopy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialCopy::SharedCtor() {
  _cached_size_ = 0;
  copy_id_ = 0;
  reward_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialCopy::~TrialCopy() {
  SharedDtor();
}

void TrialCopy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrialCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialCopy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialCopy_descriptor_;
}

const TrialCopy& TrialCopy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Trial_2eproto();
  return *default_instance_;
}

TrialCopy* TrialCopy::default_instance_ = NULL;

TrialCopy* TrialCopy::New() const {
  return new TrialCopy;
}

void TrialCopy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copy_id_ = 0;
    reward_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrialCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copy_id_)));
          set_has_copy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_flag;
        break;
      }

      // required int32 reward_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_flag_)));
          set_has_reward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrialCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copy_id = 1;
  if (has_copy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copy_id(), output);
  }

  // required int32 reward_flag = 2;
  if (has_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialCopy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 copy_id = 1;
  if (has_copy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copy_id(), target);
  }

  // required int32 reward_flag = 2;
  if (has_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialCopy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copy_id = 1;
    if (has_copy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copy_id());
    }

    // required int32 reward_flag = 2;
    if (has_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialCopy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialCopy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialCopy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrialCopy::MergeFrom(const TrialCopy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copy_id()) {
      set_copy_id(from.copy_id());
    }
    if (from.has_reward_flag()) {
      set_reward_flag(from.reward_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrialCopy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialCopy::CopyFrom(const TrialCopy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialCopy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TrialCopy::Swap(TrialCopy* other) {
  if (other != this) {
    std::swap(copy_id_, other->copy_id_);
    std::swap(reward_flag_, other->reward_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrialCopy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialCopy_descriptor_;
  metadata.reflection = TrialCopy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrialArea::kAreaIdFieldNumber;
const int TrialArea::kStatusFieldNumber;
const int TrialArea::kLineupFieldNumber;
const int TrialArea::kShipListFieldNumber;
#endif  // !_MSC_VER

TrialArea::TrialArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialArea::InitAsDefaultInstance() {
}

TrialArea::TrialArea(const TrialArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialArea::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialArea::~TrialArea() {
  SharedDtor();
}

void TrialArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrialArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialArea_descriptor_;
}

const TrialArea& TrialArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Trial_2eproto();
  return *default_instance_;
}

TrialArea* TrialArea::default_instance_ = NULL;

TrialArea* TrialArea::New() const {
  return new TrialArea;
}

void TrialArea::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0;
    status_ = 0;
  }
  lineup_.Clear();
  ship_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrialArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        if (input->ExpectTag(34)) goto parse_ship_list;
        break;
      }

      // repeated .TrialShip ship_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ship_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrialArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lineup(i), output);
  }

  // repeated .TrialShip ship_list = 4;
  for (int i = 0; i < this->ship_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ship_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lineup(i), target);
  }

  // repeated .TrialShip ship_list = 4;
  for (int i = 0; i < this->ship_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ship_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated int32 lineup = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  // repeated .TrialShip ship_list = 4;
  total_size += 1 * this->ship_list_size();
  for (int i = 0; i < this->ship_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ship_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrialArea::MergeFrom(const TrialArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  ship_list_.MergeFrom(from.ship_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrialArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialArea::CopyFrom(const TrialArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ship_list_size(); i++) {
    if (!this->ship_list(i).IsInitialized()) return false;
  }
  return true;
}

void TrialArea::Swap(TrialArea* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(status_, other->status_);
    lineup_.Swap(&other->lineup_);
    ship_list_.Swap(&other->ship_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrialArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialArea_descriptor_;
  metadata.reflection = TrialArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrialData::kTicketNumFieldNumber;
const int TrialData::kAreaListFieldNumber;
const int TrialData::kLevelListFieldNumber;
const int TrialData::kBadgeFieldNumber;
const int TrialData::kCopyListFieldNumber;
#endif  // !_MSC_VER

TrialData::TrialData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialData::InitAsDefaultInstance() {
}

TrialData::TrialData(const TrialData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialData::SharedCtor() {
  _cached_size_ = 0;
  ticket_num_ = 0;
  badge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialData::~TrialData() {
  SharedDtor();
}

void TrialData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrialData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialData_descriptor_;
}

const TrialData& TrialData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Trial_2eproto();
  return *default_instance_;
}

TrialData* TrialData::default_instance_ = NULL;

TrialData* TrialData::New() const {
  return new TrialData;
}

void TrialData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ticket_num_ = 0;
    badge_ = 0;
  }
  area_list_.Clear();
  level_list_.Clear();
  copy_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrialData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ticket_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_num_)));
          set_has_ticket_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_area_list;
        break;
      }

      // repeated .TrialArea area_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_area_list;
        if (input->ExpectTag(26)) goto parse_level_list;
        break;
      }

      // repeated .TrialLevel level_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_level_list;
        if (input->ExpectTag(32)) goto parse_badge;
        break;
      }

      // required int32 badge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_copy_list;
        break;
      }

      // repeated .TrialCopy copy_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copy_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_copy_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_copy_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrialData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ticket_num = 1;
  if (has_ticket_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ticket_num(), output);
  }

  // repeated .TrialArea area_list = 2;
  for (int i = 0; i < this->area_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->area_list(i), output);
  }

  // repeated .TrialLevel level_list = 3;
  for (int i = 0; i < this->level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->level_list(i), output);
  }

  // required int32 badge = 4;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->badge(), output);
  }

  // repeated .TrialCopy copy_list = 5;
  for (int i = 0; i < this->copy_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->copy_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ticket_num = 1;
  if (has_ticket_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ticket_num(), target);
  }

  // repeated .TrialArea area_list = 2;
  for (int i = 0; i < this->area_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->area_list(i), target);
  }

  // repeated .TrialLevel level_list = 3;
  for (int i = 0; i < this->level_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->level_list(i), target);
  }

  // required int32 badge = 4;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->badge(), target);
  }

  // repeated .TrialCopy copy_list = 5;
  for (int i = 0; i < this->copy_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->copy_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ticket_num = 1;
    if (has_ticket_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket_num());
    }

    // required int32 badge = 4;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->badge());
    }

  }
  // repeated .TrialArea area_list = 2;
  total_size += 1 * this->area_list_size();
  for (int i = 0; i < this->area_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area_list(i));
  }

  // repeated .TrialLevel level_list = 3;
  total_size += 1 * this->level_list_size();
  for (int i = 0; i < this->level_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_list(i));
  }

  // repeated .TrialCopy copy_list = 5;
  total_size += 1 * this->copy_list_size();
  for (int i = 0; i < this->copy_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copy_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrialData::MergeFrom(const TrialData& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_list_.MergeFrom(from.area_list_);
  level_list_.MergeFrom(from.level_list_);
  copy_list_.MergeFrom(from.copy_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticket_num()) {
      set_ticket_num(from.ticket_num());
    }
    if (from.has_badge()) {
      set_badge(from.badge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrialData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialData::CopyFrom(const TrialData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  for (int i = 0; i < area_list_size(); i++) {
    if (!this->area_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < level_list_size(); i++) {
    if (!this->level_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < copy_list_size(); i++) {
    if (!this->copy_list(i).IsInitialized()) return false;
  }
  return true;
}

void TrialData::Swap(TrialData* other) {
  if (other != this) {
    std::swap(ticket_num_, other->ticket_num_);
    area_list_.Swap(&other->area_list_);
    level_list_.Swap(&other->level_list_);
    std::swap(badge_, other->badge_);
    copy_list_.Swap(&other->copy_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrialData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialData_descriptor_;
  metadata.reflection = TrialData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
