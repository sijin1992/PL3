// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Slave.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Slave.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SlaveNoteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveNoteInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SlaveNoteInfo_SlaveNoteType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SlaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlaveBriefInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveBriefInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Slave_2eproto() {
  protobuf_AddDesc_Slave_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Slave.proto");
  GOOGLE_CHECK(file != NULL);
  SlaveNoteInfo_descriptor_ = file->message_type(0);
  static const int SlaveNoteInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveNoteInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveNoteInfo, text_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveNoteInfo, param_list_),
  };
  SlaveNoteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveNoteInfo_descriptor_,
      SlaveNoteInfo::default_instance_,
      SlaveNoteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveNoteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveNoteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveNoteInfo));
  SlaveNoteInfo_SlaveNoteType_descriptor_ = SlaveNoteInfo_descriptor_->enum_type(0);
  SlaveData_descriptor_ = file->message_type(1);
  static const int SlaveData_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, work_cd_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, fawn_on_cd_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, help_cd_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, revolt_cd_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, slaved_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, show_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, get_res_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, show_watch_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, get_slaves_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, buy_get_slaves_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, get_save_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, buy_get_save_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, slave_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, enemy_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, help_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, watch_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, res_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, exp_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, res_sub_cache_),
  };
  SlaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveData_descriptor_,
      SlaveData::default_instance_,
      SlaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveData));
  SlaveBriefInfo_descriptor_ = file->message_type(2);
  static const int SlaveBriefInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, slave_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, group_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, master_nickname_),
  };
  SlaveBriefInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveBriefInfo_descriptor_,
      SlaveBriefInfo::default_instance_,
      SlaveBriefInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveBriefInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveBriefInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Slave_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveNoteInfo_descriptor_, &SlaveNoteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveData_descriptor_, &SlaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveBriefInfo_descriptor_, &SlaveBriefInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Slave_2eproto() {
  delete SlaveNoteInfo::default_instance_;
  delete SlaveNoteInfo_reflection_;
  delete SlaveData::default_instance_;
  delete SlaveData_reflection_;
  delete SlaveBriefInfo::default_instance_;
  delete SlaveBriefInfo_reflection_;
}

void protobuf_AddDesc_Slave_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Slave.proto\"\370\002\n\rSlaveNoteInfo\022*\n\004type\030"
    "\001 \002(\0162\034.SlaveNoteInfo.SlaveNoteType\022\022\n\nt"
    "ext_index\030\002 \002(\005\022\022\n\nparam_list\030\003 \003(\t\"\222\002\n\r"
    "SlaveNoteType\022\014\n\010WORK_ADD\020\001\022\014\n\010WORK_SUB\020"
    "\002\022\017\n\013FAWN_ON_ADD\020\003\022\017\n\013FAWN_ON_SUB\020\004\022\017\n\013R"
    "OB_SUCCESS\020\005\022\020\n\014SAVE_SUCCESS\020\006\022\010\n\004SHOW\020\007"
    "\022\013\n\007BE_SHOW\020\010\022\t\n\005WATCH\020\t\022\022\n\016BE_ROB_SUCCE"
    "SS\020\n\022\023\n\017BE_SAVE_SUCCESS\020\013\022\031\n\025SLAVE_BE_SA"
    "VE_SUCCESS\020\014\022\025\n\021SAVE_SELF_SUCCESS\020\r\022\010\n\004F"
    "REE\020\016\022\013\n\007BE_FREE\020\017\022\014\n\010BE_CATCH\020\020\"\256\004\n\tSla"
    "veData\022\021\n\tuser_name\030\001 \002(\t\022\r\n\005state\030\002 \002(\005"
    "\022\032\n\022work_cd_start_time\030\003 \002(\003\022\035\n\025fawn_on_"
    "cd_start_time\030\004 \002(\003\022\032\n\022help_cd_start_tim"
    "e\030\005 \002(\003\022\034\n\024revolt_cd_start_time\030\006 \002(\003\022\031\n"
    "\021slaved_start_time\030\007 \002(\003\022\027\n\017show_start_t"
    "ime\030\010 \002(\003\022\032\n\022get_res_start_time\030\t \002(\003\022\026\n"
    "\016show_watch_num\030\n \002(\005\022\030\n\020get_slaves_time"
    "s\030\013 \002(\005\022\034\n\024buy_get_slaves_times\030\014 \002(\005\022\026\n"
    "\016get_save_times\030\r \002(\005\022\032\n\022buy_get_save_ti"
    "mes\030\016 \002(\005\022\016\n\006master\030\017 \001(\t\022\022\n\nslave_list\030"
    "\020 \003(\t\022\022\n\nenemy_list\030\021 \003(\t\022\021\n\thelp_list\030\022"
    " \003(\t\022\022\n\nwatch_list\030\023 \003(\t\022\034\n\004note\030\024 \003(\0132\016"
    ".SlaveNoteInfo\022\020\n\010res_pool\030\025 \003(\003\022\020\n\010exp_"
    "pool\030\026 \002(\003\022\025\n\rres_sub_cache\030\027 \003(\003\"\311\001\n\016Sl"
    "aveBriefInfo\022\021\n\tuser_name\030\001 \002(\t\022\020\n\010nickn"
    "ame\030\002 \002(\t\022\017\n\007icon_id\030\003 \002(\005\022\r\n\005level\030\004 \002("
    "\005\022\r\n\005power\030\005 \002(\005\022\023\n\013slave_count\030\006 \002(\005\022\r\n"
    "\005state\030\007 \002(\005\022\026\n\016group_nickname\030\010 \001(\t\022\016\n\006"
    "master\030\t \001(\t\022\027\n\017master_nickname\030\n \001(\t", 1157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Slave.proto", &protobuf_RegisterTypes);
  SlaveNoteInfo::default_instance_ = new SlaveNoteInfo();
  SlaveData::default_instance_ = new SlaveData();
  SlaveBriefInfo::default_instance_ = new SlaveBriefInfo();
  SlaveNoteInfo::default_instance_->InitAsDefaultInstance();
  SlaveData::default_instance_->InitAsDefaultInstance();
  SlaveBriefInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Slave_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Slave_2eproto {
  StaticDescriptorInitializer_Slave_2eproto() {
    protobuf_AddDesc_Slave_2eproto();
  }
} static_descriptor_initializer_Slave_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SlaveNoteInfo_SlaveNoteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveNoteInfo_SlaveNoteType_descriptor_;
}
bool SlaveNoteInfo_SlaveNoteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::WORK_ADD;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::WORK_SUB;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::FAWN_ON_ADD;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::FAWN_ON_SUB;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::ROB_SUCCESS;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::SAVE_SUCCESS;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::SHOW;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::BE_SHOW;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::WATCH;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::BE_ROB_SUCCESS;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::BE_SAVE_SUCCESS;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::SLAVE_BE_SAVE_SUCCESS;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::SAVE_SELF_SUCCESS;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::FREE;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::BE_FREE;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::BE_CATCH;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::SlaveNoteType_MIN;
const SlaveNoteInfo_SlaveNoteType SlaveNoteInfo::SlaveNoteType_MAX;
const int SlaveNoteInfo::SlaveNoteType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SlaveNoteInfo::kTypeFieldNumber;
const int SlaveNoteInfo::kTextIndexFieldNumber;
const int SlaveNoteInfo::kParamListFieldNumber;
#endif  // !_MSC_VER

SlaveNoteInfo::SlaveNoteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveNoteInfo::InitAsDefaultInstance() {
}

SlaveNoteInfo::SlaveNoteInfo(const SlaveNoteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveNoteInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  text_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveNoteInfo::~SlaveNoteInfo() {
  SharedDtor();
}

void SlaveNoteInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlaveNoteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveNoteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveNoteInfo_descriptor_;
}

const SlaveNoteInfo& SlaveNoteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Slave_2eproto();
  return *default_instance_;
}

SlaveNoteInfo* SlaveNoteInfo::default_instance_ = NULL;

SlaveNoteInfo* SlaveNoteInfo::New() const {
  return new SlaveNoteInfo;
}

void SlaveNoteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    text_index_ = 0;
  }
  param_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveNoteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SlaveNoteInfo.SlaveNoteType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SlaveNoteInfo_SlaveNoteType_IsValid(value)) {
            set_type(static_cast< ::SlaveNoteInfo_SlaveNoteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_text_index;
        break;
      }

      // required int32 text_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_index_)));
          set_has_text_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param_list;
        break;
      }

      // repeated string param_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param_list(this->param_list_size() - 1).data(),
            this->param_list(this->param_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveNoteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SlaveNoteInfo.SlaveNoteType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 text_index = 2;
  if (has_text_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->text_index(), output);
  }

  // repeated string param_list = 3;
  for (int i = 0; i < this->param_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->param_list(i).data(), this->param_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->param_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveNoteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SlaveNoteInfo.SlaveNoteType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 text_index = 2;
  if (has_text_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->text_index(), target);
  }

  // repeated string param_list = 3;
  for (int i = 0; i < this->param_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param_list(i).data(), this->param_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->param_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveNoteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SlaveNoteInfo.SlaveNoteType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 text_index = 2;
    if (has_text_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_index());
    }

  }
  // repeated string param_list = 3;
  total_size += 1 * this->param_list_size();
  for (int i = 0; i < this->param_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveNoteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveNoteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveNoteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveNoteInfo::MergeFrom(const SlaveNoteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_list_.MergeFrom(from.param_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text_index()) {
      set_text_index(from.text_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveNoteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveNoteInfo::CopyFrom(const SlaveNoteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveNoteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SlaveNoteInfo::Swap(SlaveNoteInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_index_, other->text_index_);
    param_list_.Swap(&other->param_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveNoteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveNoteInfo_descriptor_;
  metadata.reflection = SlaveNoteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlaveData::kUserNameFieldNumber;
const int SlaveData::kStateFieldNumber;
const int SlaveData::kWorkCdStartTimeFieldNumber;
const int SlaveData::kFawnOnCdStartTimeFieldNumber;
const int SlaveData::kHelpCdStartTimeFieldNumber;
const int SlaveData::kRevoltCdStartTimeFieldNumber;
const int SlaveData::kSlavedStartTimeFieldNumber;
const int SlaveData::kShowStartTimeFieldNumber;
const int SlaveData::kGetResStartTimeFieldNumber;
const int SlaveData::kShowWatchNumFieldNumber;
const int SlaveData::kGetSlavesTimesFieldNumber;
const int SlaveData::kBuyGetSlavesTimesFieldNumber;
const int SlaveData::kGetSaveTimesFieldNumber;
const int SlaveData::kBuyGetSaveTimesFieldNumber;
const int SlaveData::kMasterFieldNumber;
const int SlaveData::kSlaveListFieldNumber;
const int SlaveData::kEnemyListFieldNumber;
const int SlaveData::kHelpListFieldNumber;
const int SlaveData::kWatchListFieldNumber;
const int SlaveData::kNoteFieldNumber;
const int SlaveData::kResPoolFieldNumber;
const int SlaveData::kExpPoolFieldNumber;
const int SlaveData::kResSubCacheFieldNumber;
#endif  // !_MSC_VER

SlaveData::SlaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveData::InitAsDefaultInstance() {
}

SlaveData::SlaveData(const SlaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveData::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  work_cd_start_time_ = GOOGLE_LONGLONG(0);
  fawn_on_cd_start_time_ = GOOGLE_LONGLONG(0);
  help_cd_start_time_ = GOOGLE_LONGLONG(0);
  revolt_cd_start_time_ = GOOGLE_LONGLONG(0);
  slaved_start_time_ = GOOGLE_LONGLONG(0);
  show_start_time_ = GOOGLE_LONGLONG(0);
  get_res_start_time_ = GOOGLE_LONGLONG(0);
  show_watch_num_ = 0;
  get_slaves_times_ = 0;
  buy_get_slaves_times_ = 0;
  get_save_times_ = 0;
  buy_get_save_times_ = 0;
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_pool_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveData::~SlaveData() {
  SharedDtor();
}

void SlaveData::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (this != default_instance_) {
  }
}

void SlaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveData_descriptor_;
}

const SlaveData& SlaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Slave_2eproto();
  return *default_instance_;
}

SlaveData* SlaveData::default_instance_ = NULL;

SlaveData* SlaveData::New() const {
  return new SlaveData;
}

void SlaveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    state_ = 0;
    work_cd_start_time_ = GOOGLE_LONGLONG(0);
    fawn_on_cd_start_time_ = GOOGLE_LONGLONG(0);
    help_cd_start_time_ = GOOGLE_LONGLONG(0);
    revolt_cd_start_time_ = GOOGLE_LONGLONG(0);
    slaved_start_time_ = GOOGLE_LONGLONG(0);
    show_start_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    get_res_start_time_ = GOOGLE_LONGLONG(0);
    show_watch_num_ = 0;
    get_slaves_times_ = 0;
    buy_get_slaves_times_ = 0;
    get_save_times_ = 0;
    buy_get_save_times_ = 0;
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
  }
  if (_has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    exp_pool_ = GOOGLE_LONGLONG(0);
  }
  slave_list_.Clear();
  enemy_list_.Clear();
  help_list_.Clear();
  watch_list_.Clear();
  note_.Clear();
  res_pool_.Clear();
  res_sub_cache_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_work_cd_start_time;
        break;
      }

      // required int64 work_cd_start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_work_cd_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &work_cd_start_time_)));
          set_has_work_cd_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fawn_on_cd_start_time;
        break;
      }

      // required int64 fawn_on_cd_start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fawn_on_cd_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fawn_on_cd_start_time_)));
          set_has_fawn_on_cd_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_help_cd_start_time;
        break;
      }

      // required int64 help_cd_start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_help_cd_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &help_cd_start_time_)));
          set_has_help_cd_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_revolt_cd_start_time;
        break;
      }

      // required int64 revolt_cd_start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revolt_cd_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &revolt_cd_start_time_)));
          set_has_revolt_cd_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_slaved_start_time;
        break;
      }

      // required int64 slaved_start_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slaved_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &slaved_start_time_)));
          set_has_slaved_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_show_start_time;
        break;
      }

      // required int64 show_start_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &show_start_time_)));
          set_has_show_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_get_res_start_time;
        break;
      }

      // required int64 get_res_start_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_res_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &get_res_start_time_)));
          set_has_get_res_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_show_watch_num;
        break;
      }

      // required int32 show_watch_num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_watch_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_watch_num_)));
          set_has_show_watch_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_get_slaves_times;
        break;
      }

      // required int32 get_slaves_times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_slaves_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_slaves_times_)));
          set_has_get_slaves_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_buy_get_slaves_times;
        break;
      }

      // required int32 buy_get_slaves_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_get_slaves_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_get_slaves_times_)));
          set_has_buy_get_slaves_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_get_save_times;
        break;
      }

      // required int32 get_save_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_save_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_save_times_)));
          set_has_get_save_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_buy_get_save_times;
        break;
      }

      // required int32 buy_get_save_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_get_save_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_get_save_times_)));
          set_has_buy_get_save_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_master;
        break;
      }

      // optional string master = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_slave_list;
        break;
      }

      // repeated string slave_list = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_slave_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slave_list(this->slave_list_size() - 1).data(),
            this->slave_list(this->slave_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_slave_list;
        if (input->ExpectTag(138)) goto parse_enemy_list;
        break;
      }

      // repeated string enemy_list = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_enemy_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemy_list(this->enemy_list_size() - 1).data(),
            this->enemy_list(this->enemy_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_enemy_list;
        if (input->ExpectTag(146)) goto parse_help_list;
        break;
      }

      // repeated string help_list = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_help_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->help_list(this->help_list_size() - 1).data(),
            this->help_list(this->help_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_help_list;
        if (input->ExpectTag(154)) goto parse_watch_list;
        break;
      }

      // repeated string watch_list = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_watch_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_watch_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->watch_list(this->watch_list_size() - 1).data(),
            this->watch_list(this->watch_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_watch_list;
        if (input->ExpectTag(162)) goto parse_note;
        break;
      }

      // repeated .SlaveNoteInfo note = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_note()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_note;
        if (input->ExpectTag(168)) goto parse_res_pool;
        break;
      }

      // repeated int64 res_pool = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 168, input, this->mutable_res_pool())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_res_pool())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_res_pool;
        if (input->ExpectTag(176)) goto parse_exp_pool;
        break;
      }

      // required int64 exp_pool = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_pool_)));
          set_has_exp_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_res_sub_cache;
        break;
      }

      // repeated int64 res_sub_cache = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res_sub_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 184, input, this->mutable_res_sub_cache())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_res_sub_cache())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_res_sub_cache;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required int64 work_cd_start_time = 3;
  if (has_work_cd_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->work_cd_start_time(), output);
  }

  // required int64 fawn_on_cd_start_time = 4;
  if (has_fawn_on_cd_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->fawn_on_cd_start_time(), output);
  }

  // required int64 help_cd_start_time = 5;
  if (has_help_cd_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->help_cd_start_time(), output);
  }

  // required int64 revolt_cd_start_time = 6;
  if (has_revolt_cd_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->revolt_cd_start_time(), output);
  }

  // required int64 slaved_start_time = 7;
  if (has_slaved_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->slaved_start_time(), output);
  }

  // required int64 show_start_time = 8;
  if (has_show_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->show_start_time(), output);
  }

  // required int64 get_res_start_time = 9;
  if (has_get_res_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->get_res_start_time(), output);
  }

  // required int32 show_watch_num = 10;
  if (has_show_watch_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->show_watch_num(), output);
  }

  // required int32 get_slaves_times = 11;
  if (has_get_slaves_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->get_slaves_times(), output);
  }

  // required int32 buy_get_slaves_times = 12;
  if (has_buy_get_slaves_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->buy_get_slaves_times(), output);
  }

  // required int32 get_save_times = 13;
  if (has_get_save_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->get_save_times(), output);
  }

  // required int32 buy_get_save_times = 14;
  if (has_buy_get_save_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->buy_get_save_times(), output);
  }

  // optional string master = 15;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->master(), output);
  }

  // repeated string slave_list = 16;
  for (int i = 0; i < this->slave_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->slave_list(i).data(), this->slave_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->slave_list(i), output);
  }

  // repeated string enemy_list = 17;
  for (int i = 0; i < this->enemy_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->enemy_list(i).data(), this->enemy_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->enemy_list(i), output);
  }

  // repeated string help_list = 18;
  for (int i = 0; i < this->help_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->help_list(i).data(), this->help_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->help_list(i), output);
  }

  // repeated string watch_list = 19;
  for (int i = 0; i < this->watch_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->watch_list(i).data(), this->watch_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->watch_list(i), output);
  }

  // repeated .SlaveNoteInfo note = 20;
  for (int i = 0; i < this->note_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->note(i), output);
  }

  // repeated int64 res_pool = 21;
  for (int i = 0; i < this->res_pool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      21, this->res_pool(i), output);
  }

  // required int64 exp_pool = 22;
  if (has_exp_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->exp_pool(), output);
  }

  // repeated int64 res_sub_cache = 23;
  for (int i = 0; i < this->res_sub_cache_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      23, this->res_sub_cache(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required int64 work_cd_start_time = 3;
  if (has_work_cd_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->work_cd_start_time(), target);
  }

  // required int64 fawn_on_cd_start_time = 4;
  if (has_fawn_on_cd_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->fawn_on_cd_start_time(), target);
  }

  // required int64 help_cd_start_time = 5;
  if (has_help_cd_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->help_cd_start_time(), target);
  }

  // required int64 revolt_cd_start_time = 6;
  if (has_revolt_cd_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->revolt_cd_start_time(), target);
  }

  // required int64 slaved_start_time = 7;
  if (has_slaved_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->slaved_start_time(), target);
  }

  // required int64 show_start_time = 8;
  if (has_show_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->show_start_time(), target);
  }

  // required int64 get_res_start_time = 9;
  if (has_get_res_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->get_res_start_time(), target);
  }

  // required int32 show_watch_num = 10;
  if (has_show_watch_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->show_watch_num(), target);
  }

  // required int32 get_slaves_times = 11;
  if (has_get_slaves_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->get_slaves_times(), target);
  }

  // required int32 buy_get_slaves_times = 12;
  if (has_buy_get_slaves_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->buy_get_slaves_times(), target);
  }

  // required int32 get_save_times = 13;
  if (has_get_save_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->get_save_times(), target);
  }

  // required int32 buy_get_save_times = 14;
  if (has_buy_get_save_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->buy_get_save_times(), target);
  }

  // optional string master = 15;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->master(), target);
  }

  // repeated string slave_list = 16;
  for (int i = 0; i < this->slave_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_list(i).data(), this->slave_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->slave_list(i), target);
  }

  // repeated string enemy_list = 17;
  for (int i = 0; i < this->enemy_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemy_list(i).data(), this->enemy_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->enemy_list(i), target);
  }

  // repeated string help_list = 18;
  for (int i = 0; i < this->help_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->help_list(i).data(), this->help_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->help_list(i), target);
  }

  // repeated string watch_list = 19;
  for (int i = 0; i < this->watch_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->watch_list(i).data(), this->watch_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->watch_list(i), target);
  }

  // repeated .SlaveNoteInfo note = 20;
  for (int i = 0; i < this->note_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->note(i), target);
  }

  // repeated int64 res_pool = 21;
  for (int i = 0; i < this->res_pool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(21, this->res_pool(i), target);
  }

  // required int64 exp_pool = 22;
  if (has_exp_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->exp_pool(), target);
  }

  // repeated int64 res_sub_cache = 23;
  for (int i = 0; i < this->res_sub_cache_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(23, this->res_sub_cache(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int64 work_cd_start_time = 3;
    if (has_work_cd_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->work_cd_start_time());
    }

    // required int64 fawn_on_cd_start_time = 4;
    if (has_fawn_on_cd_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fawn_on_cd_start_time());
    }

    // required int64 help_cd_start_time = 5;
    if (has_help_cd_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->help_cd_start_time());
    }

    // required int64 revolt_cd_start_time = 6;
    if (has_revolt_cd_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->revolt_cd_start_time());
    }

    // required int64 slaved_start_time = 7;
    if (has_slaved_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->slaved_start_time());
    }

    // required int64 show_start_time = 8;
    if (has_show_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->show_start_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 get_res_start_time = 9;
    if (has_get_res_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->get_res_start_time());
    }

    // required int32 show_watch_num = 10;
    if (has_show_watch_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_watch_num());
    }

    // required int32 get_slaves_times = 11;
    if (has_get_slaves_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_slaves_times());
    }

    // required int32 buy_get_slaves_times = 12;
    if (has_buy_get_slaves_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_get_slaves_times());
    }

    // required int32 get_save_times = 13;
    if (has_get_save_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_save_times());
    }

    // required int32 buy_get_save_times = 14;
    if (has_buy_get_save_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_get_save_times());
    }

    // optional string master = 15;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

  }
  if (_has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    // required int64 exp_pool = 22;
    if (has_exp_pool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp_pool());
    }

  }
  // repeated string slave_list = 16;
  total_size += 2 * this->slave_list_size();
  for (int i = 0; i < this->slave_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->slave_list(i));
  }

  // repeated string enemy_list = 17;
  total_size += 2 * this->enemy_list_size();
  for (int i = 0; i < this->enemy_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->enemy_list(i));
  }

  // repeated string help_list = 18;
  total_size += 2 * this->help_list_size();
  for (int i = 0; i < this->help_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->help_list(i));
  }

  // repeated string watch_list = 19;
  total_size += 2 * this->watch_list_size();
  for (int i = 0; i < this->watch_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->watch_list(i));
  }

  // repeated .SlaveNoteInfo note = 20;
  total_size += 2 * this->note_size();
  for (int i = 0; i < this->note_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->note(i));
  }

  // repeated int64 res_pool = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->res_pool_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->res_pool(i));
    }
    total_size += 2 * this->res_pool_size() + data_size;
  }

  // repeated int64 res_sub_cache = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->res_sub_cache_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->res_sub_cache(i));
    }
    total_size += 2 * this->res_sub_cache_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveData::MergeFrom(const SlaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  slave_list_.MergeFrom(from.slave_list_);
  enemy_list_.MergeFrom(from.enemy_list_);
  help_list_.MergeFrom(from.help_list_);
  watch_list_.MergeFrom(from.watch_list_);
  note_.MergeFrom(from.note_);
  res_pool_.MergeFrom(from.res_pool_);
  res_sub_cache_.MergeFrom(from.res_sub_cache_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_work_cd_start_time()) {
      set_work_cd_start_time(from.work_cd_start_time());
    }
    if (from.has_fawn_on_cd_start_time()) {
      set_fawn_on_cd_start_time(from.fawn_on_cd_start_time());
    }
    if (from.has_help_cd_start_time()) {
      set_help_cd_start_time(from.help_cd_start_time());
    }
    if (from.has_revolt_cd_start_time()) {
      set_revolt_cd_start_time(from.revolt_cd_start_time());
    }
    if (from.has_slaved_start_time()) {
      set_slaved_start_time(from.slaved_start_time());
    }
    if (from.has_show_start_time()) {
      set_show_start_time(from.show_start_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_res_start_time()) {
      set_get_res_start_time(from.get_res_start_time());
    }
    if (from.has_show_watch_num()) {
      set_show_watch_num(from.show_watch_num());
    }
    if (from.has_get_slaves_times()) {
      set_get_slaves_times(from.get_slaves_times());
    }
    if (from.has_buy_get_slaves_times()) {
      set_buy_get_slaves_times(from.buy_get_slaves_times());
    }
    if (from.has_get_save_times()) {
      set_get_save_times(from.get_save_times());
    }
    if (from.has_buy_get_save_times()) {
      set_buy_get_save_times(from.buy_get_save_times());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
  }
  if (from._has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    if (from.has_exp_pool()) {
      set_exp_pool(from.exp_pool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveData::CopyFrom(const SlaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00203fff) != 0x00203fff) return false;

  for (int i = 0; i < note_size(); i++) {
    if (!this->note(i).IsInitialized()) return false;
  }
  return true;
}

void SlaveData::Swap(SlaveData* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(state_, other->state_);
    std::swap(work_cd_start_time_, other->work_cd_start_time_);
    std::swap(fawn_on_cd_start_time_, other->fawn_on_cd_start_time_);
    std::swap(help_cd_start_time_, other->help_cd_start_time_);
    std::swap(revolt_cd_start_time_, other->revolt_cd_start_time_);
    std::swap(slaved_start_time_, other->slaved_start_time_);
    std::swap(show_start_time_, other->show_start_time_);
    std::swap(get_res_start_time_, other->get_res_start_time_);
    std::swap(show_watch_num_, other->show_watch_num_);
    std::swap(get_slaves_times_, other->get_slaves_times_);
    std::swap(buy_get_slaves_times_, other->buy_get_slaves_times_);
    std::swap(get_save_times_, other->get_save_times_);
    std::swap(buy_get_save_times_, other->buy_get_save_times_);
    std::swap(master_, other->master_);
    slave_list_.Swap(&other->slave_list_);
    enemy_list_.Swap(&other->enemy_list_);
    help_list_.Swap(&other->help_list_);
    watch_list_.Swap(&other->watch_list_);
    note_.Swap(&other->note_);
    res_pool_.Swap(&other->res_pool_);
    std::swap(exp_pool_, other->exp_pool_);
    res_sub_cache_.Swap(&other->res_sub_cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveData_descriptor_;
  metadata.reflection = SlaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlaveBriefInfo::kUserNameFieldNumber;
const int SlaveBriefInfo::kNicknameFieldNumber;
const int SlaveBriefInfo::kIconIdFieldNumber;
const int SlaveBriefInfo::kLevelFieldNumber;
const int SlaveBriefInfo::kPowerFieldNumber;
const int SlaveBriefInfo::kSlaveCountFieldNumber;
const int SlaveBriefInfo::kStateFieldNumber;
const int SlaveBriefInfo::kGroupNicknameFieldNumber;
const int SlaveBriefInfo::kMasterFieldNumber;
const int SlaveBriefInfo::kMasterNicknameFieldNumber;
#endif  // !_MSC_VER

SlaveBriefInfo::SlaveBriefInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveBriefInfo::InitAsDefaultInstance() {
}

SlaveBriefInfo::SlaveBriefInfo(const SlaveBriefInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveBriefInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_id_ = 0;
  level_ = 0;
  power_ = 0;
  slave_count_ = 0;
  state_ = 0;
  group_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  master_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  master_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveBriefInfo::~SlaveBriefInfo() {
  SharedDtor();
}

void SlaveBriefInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete group_nickname_;
  }
  if (master_ != &::google::protobuf::internal::kEmptyString) {
    delete master_;
  }
  if (master_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete master_nickname_;
  }
  if (this != default_instance_) {
  }
}

void SlaveBriefInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveBriefInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveBriefInfo_descriptor_;
}

const SlaveBriefInfo& SlaveBriefInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Slave_2eproto();
  return *default_instance_;
}

SlaveBriefInfo* SlaveBriefInfo::default_instance_ = NULL;

SlaveBriefInfo* SlaveBriefInfo::New() const {
  return new SlaveBriefInfo;
}

void SlaveBriefInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    icon_id_ = 0;
    level_ = 0;
    power_ = 0;
    slave_count_ = 0;
    state_ = 0;
    if (has_group_nickname()) {
      if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
        group_nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_master()) {
      if (master_ != &::google::protobuf::internal::kEmptyString) {
        master_->clear();
      }
    }
    if (has_master_nickname()) {
      if (master_nickname_ != &::google::protobuf::internal::kEmptyString) {
        master_nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveBriefInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_icon_id;
        break;
      }

      // required int32 icon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // required int32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slave_count;
        break;
      }

      // required int32 slave_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slave_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slave_count_)));
          set_has_slave_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // required int32 state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_group_nickname;
        break;
      }

      // optional string group_nickname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_nickname().data(), this->group_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_master;
        break;
      }

      // optional string master = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master().data(), this->master().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_master_nickname;
        break;
      }

      // optional string master_nickname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_master_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master_nickname().data(), this->master_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveBriefInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required int32 icon_id = 3;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icon_id(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  // required int32 slave_count = 6;
  if (has_slave_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slave_count(), output);
  }

  // required int32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // optional string group_nickname = 8;
  if (has_group_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_nickname().data(), this->group_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->group_nickname(), output);
  }

  // optional string master = 9;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->master(), output);
  }

  // optional string master_nickname = 10;
  if (has_master_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master_nickname().data(), this->master_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->master_nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveBriefInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required int32 icon_id = 3;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icon_id(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power(), target);
  }

  // required int32 slave_count = 6;
  if (has_slave_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slave_count(), target);
  }

  // required int32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // optional string group_nickname = 8;
  if (has_group_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_nickname().data(), this->group_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->group_nickname(), target);
  }

  // optional string master = 9;
  if (has_master()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master().data(), this->master().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->master(), target);
  }

  // optional string master_nickname = 10;
  if (has_master_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master_nickname().data(), this->master_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->master_nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveBriefInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 icon_id = 3;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // required int32 slave_count = 6;
    if (has_slave_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slave_count());
    }

    // required int32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string group_nickname = 8;
    if (has_group_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_nickname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string master = 9;
    if (has_master()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master());
    }

    // optional string master_nickname = 10;
    if (has_master_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveBriefInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveBriefInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveBriefInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveBriefInfo::MergeFrom(const SlaveBriefInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_slave_count()) {
      set_slave_count(from.slave_count());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_group_nickname()) {
      set_group_nickname(from.group_nickname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_master()) {
      set_master(from.master());
    }
    if (from.has_master_nickname()) {
      set_master_nickname(from.master_nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveBriefInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveBriefInfo::CopyFrom(const SlaveBriefInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveBriefInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void SlaveBriefInfo::Swap(SlaveBriefInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nickname_, other->nickname_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(slave_count_, other->slave_count_);
    std::swap(state_, other->state_);
    std::swap(group_nickname_, other->group_nickname_);
    std::swap(master_, other->master_);
    std::swap(master_nickname_, other->master_nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveBriefInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveBriefInfo_descriptor_;
  metadata.reflection = SlaveBriefInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
