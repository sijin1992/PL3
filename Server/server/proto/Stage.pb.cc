// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Stage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Stage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageCopyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageCopyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Stage_2eproto() {
  protobuf_AddDesc_Stage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Stage.proto");
  GOOGLE_CHECK(file != NULL);
  LevelInfo_descriptor_ = file->message_type(0);
  static const int LevelInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, level_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, level_star_),
  };
  LevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelInfo_descriptor_,
      LevelInfo::default_instance_,
      LevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelInfo));
  StageCopyData_descriptor_ = file->message_type(1);
  static const int StageCopyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCopyData, copy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCopyData, got_reward_),
  };
  StageCopyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageCopyData_descriptor_,
      StageCopyData::default_instance_,
      StageCopyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCopyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageCopyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageCopyData));
  StageData_descriptor_ = file->message_type(2);
  static const int StageData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageData, level_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageData, copy_data_),
  };
  StageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageData_descriptor_,
      StageData::default_instance_,
      StageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Stage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelInfo_descriptor_, &LevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageCopyData_descriptor_, &StageCopyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageData_descriptor_, &StageData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Stage_2eproto() {
  delete LevelInfo::default_instance_;
  delete LevelInfo_reflection_;
  delete StageCopyData::default_instance_;
  delete StageCopyData_reflection_;
  delete StageData::default_instance_;
  delete StageData_reflection_;
}

void protobuf_AddDesc_Stage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Stage.proto\"1\n\tLevelInfo\022\020\n\010level_id\030\001"
    " \002(\005\022\022\n\nlevel_star\030\002 \002(\005\"4\n\rStageCopyDat"
    "a\022\017\n\007copy_id\030\001 \002(\005\022\022\n\ngot_reward\030\002 \003(\010\"N"
    "\n\tStageData\022\036\n\nlevel_info\030\001 \003(\0132\n.LevelI"
    "nfo\022!\n\tcopy_data\030\002 \003(\0132\016.StageCopyData", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Stage.proto", &protobuf_RegisterTypes);
  LevelInfo::default_instance_ = new LevelInfo();
  StageCopyData::default_instance_ = new StageCopyData();
  StageData::default_instance_ = new StageData();
  LevelInfo::default_instance_->InitAsDefaultInstance();
  StageCopyData::default_instance_->InitAsDefaultInstance();
  StageData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Stage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Stage_2eproto {
  StaticDescriptorInitializer_Stage_2eproto() {
    protobuf_AddDesc_Stage_2eproto();
  }
} static_descriptor_initializer_Stage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LevelInfo::kLevelIdFieldNumber;
const int LevelInfo::kLevelStarFieldNumber;
#endif  // !_MSC_VER

LevelInfo::LevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelInfo::InitAsDefaultInstance() {
}

LevelInfo::LevelInfo(const LevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelInfo::SharedCtor() {
  _cached_size_ = 0;
  level_id_ = 0;
  level_star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelInfo::~LevelInfo() {
  SharedDtor();
}

void LevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelInfo_descriptor_;
}

const LevelInfo& LevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
  return *default_instance_;
}

LevelInfo* LevelInfo::default_instance_ = NULL;

LevelInfo* LevelInfo::New() const {
  return new LevelInfo;
}

void LevelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_id_ = 0;
    level_star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_id_)));
          set_has_level_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level_star;
        break;
      }

      // required int32 level_star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_star_)));
          set_has_level_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level_id = 1;
  if (has_level_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level_id(), output);
  }

  // required int32 level_star = 2;
  if (has_level_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level_star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level_id = 1;
  if (has_level_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level_id(), target);
  }

  // required int32 level_star = 2;
  if (has_level_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level_star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level_id = 1;
    if (has_level_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_id());
    }

    // required int32 level_star = 2;
    if (has_level_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelInfo::MergeFrom(const LevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level_id()) {
      set_level_id(from.level_id());
    }
    if (from.has_level_star()) {
      set_level_star(from.level_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelInfo::CopyFrom(const LevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LevelInfo::Swap(LevelInfo* other) {
  if (other != this) {
    std::swap(level_id_, other->level_id_);
    std::swap(level_star_, other->level_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelInfo_descriptor_;
  metadata.reflection = LevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageCopyData::kCopyIdFieldNumber;
const int StageCopyData::kGotRewardFieldNumber;
#endif  // !_MSC_VER

StageCopyData::StageCopyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageCopyData::InitAsDefaultInstance() {
}

StageCopyData::StageCopyData(const StageCopyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageCopyData::SharedCtor() {
  _cached_size_ = 0;
  copy_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageCopyData::~StageCopyData() {
  SharedDtor();
}

void StageCopyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageCopyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageCopyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageCopyData_descriptor_;
}

const StageCopyData& StageCopyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
  return *default_instance_;
}

StageCopyData* StageCopyData::default_instance_ = NULL;

StageCopyData* StageCopyData::New() const {
  return new StageCopyData;
}

void StageCopyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copy_id_ = 0;
  }
  got_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageCopyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copy_id_)));
          set_has_copy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_got_reward;
        break;
      }

      // repeated bool got_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_got_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_got_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_got_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_got_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageCopyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copy_id = 1;
  if (has_copy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copy_id(), output);
  }

  // repeated bool got_reward = 2;
  for (int i = 0; i < this->got_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->got_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageCopyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 copy_id = 1;
  if (has_copy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copy_id(), target);
  }

  // repeated bool got_reward = 2;
  for (int i = 0; i < this->got_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->got_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageCopyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copy_id = 1;
    if (has_copy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copy_id());
    }

  }
  // repeated bool got_reward = 2;
  {
    int data_size = 0;
    data_size = 1 * this->got_reward_size();
    total_size += 1 * this->got_reward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageCopyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageCopyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageCopyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageCopyData::MergeFrom(const StageCopyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  got_reward_.MergeFrom(from.got_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copy_id()) {
      set_copy_id(from.copy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageCopyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageCopyData::CopyFrom(const StageCopyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageCopyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StageCopyData::Swap(StageCopyData* other) {
  if (other != this) {
    std::swap(copy_id_, other->copy_id_);
    got_reward_.Swap(&other->got_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageCopyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageCopyData_descriptor_;
  metadata.reflection = StageCopyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageData::kLevelInfoFieldNumber;
const int StageData::kCopyDataFieldNumber;
#endif  // !_MSC_VER

StageData::StageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StageData::InitAsDefaultInstance() {
}

StageData::StageData(const StageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StageData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageData::~StageData() {
  SharedDtor();
}

void StageData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageData_descriptor_;
}

const StageData& StageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Stage_2eproto();
  return *default_instance_;
}

StageData* StageData::default_instance_ = NULL;

StageData* StageData::New() const {
  return new StageData;
}

void StageData::Clear() {
  level_info_.Clear();
  copy_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LevelInfo level_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_level_info;
        if (input->ExpectTag(18)) goto parse_copy_data;
        break;
      }

      // repeated .StageCopyData copy_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copy_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_copy_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_copy_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .LevelInfo level_info = 1;
  for (int i = 0; i < this->level_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->level_info(i), output);
  }

  // repeated .StageCopyData copy_data = 2;
  for (int i = 0; i < this->copy_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->copy_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .LevelInfo level_info = 1;
  for (int i = 0; i < this->level_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->level_info(i), target);
  }

  // repeated .StageCopyData copy_data = 2;
  for (int i = 0; i < this->copy_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->copy_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StageData::ByteSize() const {
  int total_size = 0;

  // repeated .LevelInfo level_info = 1;
  total_size += 1 * this->level_info_size();
  for (int i = 0; i < this->level_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_info(i));
  }

  // repeated .StageCopyData copy_data = 2;
  total_size += 1 * this->copy_data_size();
  for (int i = 0; i < this->copy_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copy_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageData::MergeFrom(const StageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_info_.MergeFrom(from.level_info_);
  copy_data_.MergeFrom(from.copy_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageData::CopyFrom(const StageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageData::IsInitialized() const {

  for (int i = 0; i < level_info_size(); i++) {
    if (!this->level_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < copy_data_size(); i++) {
    if (!this->copy_data(i).IsInitialized()) return false;
  }
  return true;
}

void StageData::Swap(StageData* other) {
  if (other != this) {
    level_info_.Swap(&other->level_info_);
    copy_data_.Swap(&other->copy_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageData_descriptor_;
  metadata.reflection = StageData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
