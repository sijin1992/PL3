// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto

#ifndef PROTOBUF_Mail_2eproto__INCLUDED
#define PROTOBUF_Mail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Item.pb.h"
#include "OtherInfo.pb.h"
#include "Planet.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Mail_2eproto();
void protobuf_AssignDesc_Mail_2eproto();
void protobuf_ShutdownFile_Mail_2eproto();

class PlanetReport;
class Mail;
class MailList;

// ===================================================================

class PlanetReport : public ::google::protobuf::Message {
 public:
  PlanetReport();
  virtual ~PlanetReport();

  PlanetReport(const PlanetReport& from);

  inline PlanetReport& operator=(const PlanetReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanetReport& default_instance();

  void Swap(PlanetReport* other);

  // implements Message ----------------------------------------------

  PlanetReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlanetReport& from);
  void MergeFrom(const PlanetReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);

  // repeated .ItemList item_list_list = 3;
  inline int item_list_list_size() const;
  inline void clear_item_list_list();
  static const int kItemListListFieldNumber = 3;
  inline const ::ItemList& item_list_list(int index) const;
  inline ::ItemList* mutable_item_list_list(int index);
  inline ::ItemList* add_item_list_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemList >&
      item_list_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemList >*
      mutable_item_list_list();

  // required int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .PlanetPoint pos_list = 5;
  inline int pos_list_size() const;
  inline void clear_pos_list();
  static const int kPosListFieldNumber = 5;
  inline const ::PlanetPoint& pos_list(int index) const;
  inline ::PlanetPoint* mutable_pos_list(int index);
  inline ::PlanetPoint* add_pos_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetPoint >&
      pos_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetPoint >*
      mutable_pos_list();

  // optional bool isWin = 6;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 6;
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // repeated string video_key_list = 7;
  inline int video_key_list_size() const;
  inline void clear_video_key_list();
  static const int kVideoKeyListFieldNumber = 7;
  inline const ::std::string& video_key_list(int index) const;
  inline ::std::string* mutable_video_key_list(int index);
  inline void set_video_key_list(int index, const ::std::string& value);
  inline void set_video_key_list(int index, const char* value);
  inline void set_video_key_list(int index, const char* value, size_t size);
  inline ::std::string* add_video_key_list();
  inline void add_video_key_list(const ::std::string& value);
  inline void add_video_key_list(const char* value);
  inline void add_video_key_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& video_key_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_video_key_list();

  // repeated .PlanetMailUser my_data_list = 8;
  inline int my_data_list_size() const;
  inline void clear_my_data_list();
  static const int kMyDataListFieldNumber = 8;
  inline const ::PlanetMailUser& my_data_list(int index) const;
  inline ::PlanetMailUser* mutable_my_data_list(int index);
  inline ::PlanetMailUser* add_my_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetMailUser >&
      my_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetMailUser >*
      mutable_my_data_list();

  // repeated .PlanetMailUser enemy_data_list = 9;
  inline int enemy_data_list_size() const;
  inline void clear_enemy_data_list();
  static const int kEnemyDataListFieldNumber = 9;
  inline const ::PlanetMailUser& enemy_data_list(int index) const;
  inline ::PlanetMailUser* mutable_enemy_data_list(int index);
  inline ::PlanetMailUser* add_enemy_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PlanetMailUser >&
      enemy_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlanetMailUser >*
      mutable_enemy_data_list();

  // optional int32 attack_count = 10;
  inline bool has_attack_count() const;
  inline void clear_attack_count();
  static const int kAttackCountFieldNumber = 10;
  inline ::google::protobuf::int32 attack_count() const;
  inline void set_attack_count(::google::protobuf::int32 value);

  // repeated int32 pre_enemy_hp_list = 11;
  inline int pre_enemy_hp_list_size() const;
  inline void clear_pre_enemy_hp_list();
  static const int kPreEnemyHpListFieldNumber = 11;
  inline ::google::protobuf::int32 pre_enemy_hp_list(int index) const;
  inline void set_pre_enemy_hp_list(int index, ::google::protobuf::int32 value);
  inline void add_pre_enemy_hp_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pre_enemy_hp_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pre_enemy_hp_list();

  // @@protoc_insertion_point(class_scope:PlanetReport)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_attack_count();
  inline void clear_has_attack_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::RepeatedPtrField< ::ItemList > item_list_list_;
  ::google::protobuf::RepeatedPtrField< ::PlanetPoint > pos_list_;
  bool result_;
  bool iswin_;
  ::google::protobuf::int32 attack_count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> video_key_list_;
  ::google::protobuf::RepeatedPtrField< ::PlanetMailUser > my_data_list_;
  ::google::protobuf::RepeatedPtrField< ::PlanetMailUser > enemy_data_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pre_enemy_hp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Mail_2eproto();
  friend void protobuf_AssignDesc_Mail_2eproto();
  friend void protobuf_ShutdownFile_Mail_2eproto();

  void InitAsDefaultInstance();
  static PlanetReport* default_instance_;
};
// -------------------------------------------------------------------

class Mail : public ::google::protobuf::Message {
 public:
  Mail();
  virtual ~Mail();

  Mail(const Mail& from);

  inline Mail& operator=(const Mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mail& default_instance();

  void Swap(Mail* other);

  // implements Message ----------------------------------------------

  Mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mail& from);
  void MergeFrom(const Mail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const char* value, size_t size);
  inline ::std::string* mutable_from();
  inline ::std::string* release_from();
  inline void set_allocated_from(::std::string* from);

  // required string subject = 3;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 3;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // required string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // repeated .Item item_list = 5;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 5;
  inline const ::Item& item_list(int index) const;
  inline ::Item* mutable_item_list(int index);
  inline ::Item* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Item >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Item >*
      mutable_item_list();

  // required int64 stamp = 6;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 6;
  inline ::google::protobuf::int64 stamp() const;
  inline void set_stamp(::google::protobuf::int64 value);

  // required uint32 guid = 7;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 7;
  inline ::google::protobuf::uint32 guid() const;
  inline void set_guid(::google::protobuf::uint32 value);

  // required int64 expiry_stamp = 8;
  inline bool has_expiry_stamp() const;
  inline void clear_expiry_stamp();
  static const int kExpiryStampFieldNumber = 8;
  inline ::google::protobuf::int64 expiry_stamp() const;
  inline void set_expiry_stamp(::google::protobuf::int64 value);

  // optional int32 tid = 9;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 9;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 buchang = 10;
  inline bool has_buchang() const;
  inline void clear_buchang();
  static const int kBuchangFieldNumber = 10;
  inline ::google::protobuf::int32 buchang() const;
  inline void set_buchang(::google::protobuf::int32 value);

  // optional int32 reg_time = 11;
  inline bool has_reg_time() const;
  inline void clear_reg_time();
  static const int kRegTimeFieldNumber = 11;
  inline ::google::protobuf::int32 reg_time() const;
  inline void set_reg_time(::google::protobuf::int32 value);

  // optional int32 vip_limit = 12;
  inline bool has_vip_limit() const;
  inline void clear_vip_limit();
  static const int kVipLimitFieldNumber = 12;
  inline ::google::protobuf::int32 vip_limit() const;
  inline void set_vip_limit(::google::protobuf::int32 value);

  // optional int32 lev_limit = 13;
  inline bool has_lev_limit() const;
  inline void clear_lev_limit();
  static const int kLevLimitFieldNumber = 13;
  inline ::google::protobuf::int32 lev_limit() const;
  inline void set_lev_limit(::google::protobuf::int32 value);

  // optional string from_user_name = 14;
  inline bool has_from_user_name() const;
  inline void clear_from_user_name();
  static const int kFromUserNameFieldNumber = 14;
  inline const ::std::string& from_user_name() const;
  inline void set_from_user_name(const ::std::string& value);
  inline void set_from_user_name(const char* value);
  inline void set_from_user_name(const char* value, size_t size);
  inline ::std::string* mutable_from_user_name();
  inline ::std::string* release_from_user_name();
  inline void set_allocated_from_user_name(::std::string* from_user_name);

  // optional .PlanetReport planet_report = 15;
  inline bool has_planet_report() const;
  inline void clear_planet_report();
  static const int kPlanetReportFieldNumber = 15;
  inline const ::PlanetReport& planet_report() const;
  inline ::PlanetReport* mutable_planet_report();
  inline ::PlanetReport* release_planet_report();
  inline void set_allocated_planet_report(::PlanetReport* planet_report);

  // @@protoc_insertion_point(class_scope:Mail)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_expiry_stamp();
  inline void clear_has_expiry_stamp();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_buchang();
  inline void clear_has_buchang();
  inline void set_has_reg_time();
  inline void clear_has_reg_time();
  inline void set_has_vip_limit();
  inline void clear_has_vip_limit();
  inline void set_has_lev_limit();
  inline void clear_has_lev_limit();
  inline void set_has_from_user_name();
  inline void clear_has_from_user_name();
  inline void set_has_planet_report();
  inline void clear_has_planet_report();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* from_;
  ::std::string* subject_;
  ::std::string* message_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 guid_;
  ::google::protobuf::RepeatedPtrField< ::Item > item_list_;
  ::google::protobuf::int64 stamp_;
  ::google::protobuf::int64 expiry_stamp_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 buchang_;
  ::google::protobuf::int32 reg_time_;
  ::google::protobuf::int32 vip_limit_;
  ::std::string* from_user_name_;
  ::PlanetReport* planet_report_;
  ::google::protobuf::int32 lev_limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_Mail_2eproto();
  friend void protobuf_AssignDesc_Mail_2eproto();
  friend void protobuf_ShutdownFile_Mail_2eproto();

  void InitAsDefaultInstance();
  static Mail* default_instance_;
};
// -------------------------------------------------------------------

class MailList : public ::google::protobuf::Message {
 public:
  MailList();
  virtual ~MailList();

  MailList(const MailList& from);

  inline MailList& operator=(const MailList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailList& default_instance();

  void Swap(MailList* other);

  // implements Message ----------------------------------------------

  MailList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailList& from);
  void MergeFrom(const MailList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Mail mail_list = 1;
  inline int mail_list_size() const;
  inline void clear_mail_list();
  static const int kMailListFieldNumber = 1;
  inline const ::Mail& mail_list(int index) const;
  inline ::Mail* mutable_mail_list(int index);
  inline ::Mail* add_mail_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Mail >&
      mail_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mail >*
      mutable_mail_list();

  // @@protoc_insertion_point(class_scope:MailList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Mail > mail_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Mail_2eproto();
  friend void protobuf_AssignDesc_Mail_2eproto();
  friend void protobuf_ShutdownFile_Mail_2eproto();

  void InitAsDefaultInstance();
  static MailList* default_instance_;
};
// ===================================================================


// ===================================================================

// PlanetReport

// required int32 type = 1;
inline bool PlanetReport::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanetReport::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanetReport::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanetReport::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PlanetReport::type() const {
  return type_;
}
inline void PlanetReport::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required bool result = 2;
inline bool PlanetReport::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanetReport::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanetReport::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanetReport::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool PlanetReport::result() const {
  return result_;
}
inline void PlanetReport::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// repeated .ItemList item_list_list = 3;
inline int PlanetReport::item_list_list_size() const {
  return item_list_list_.size();
}
inline void PlanetReport::clear_item_list_list() {
  item_list_list_.Clear();
}
inline const ::ItemList& PlanetReport::item_list_list(int index) const {
  return item_list_list_.Get(index);
}
inline ::ItemList* PlanetReport::mutable_item_list_list(int index) {
  return item_list_list_.Mutable(index);
}
inline ::ItemList* PlanetReport::add_item_list_list() {
  return item_list_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemList >&
PlanetReport::item_list_list() const {
  return item_list_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemList >*
PlanetReport::mutable_item_list_list() {
  return &item_list_list_;
}

// required int32 id = 4;
inline bool PlanetReport::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanetReport::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanetReport::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanetReport::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PlanetReport::id() const {
  return id_;
}
inline void PlanetReport::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .PlanetPoint pos_list = 5;
inline int PlanetReport::pos_list_size() const {
  return pos_list_.size();
}
inline void PlanetReport::clear_pos_list() {
  pos_list_.Clear();
}
inline const ::PlanetPoint& PlanetReport::pos_list(int index) const {
  return pos_list_.Get(index);
}
inline ::PlanetPoint* PlanetReport::mutable_pos_list(int index) {
  return pos_list_.Mutable(index);
}
inline ::PlanetPoint* PlanetReport::add_pos_list() {
  return pos_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetPoint >&
PlanetReport::pos_list() const {
  return pos_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetPoint >*
PlanetReport::mutable_pos_list() {
  return &pos_list_;
}

// optional bool isWin = 6;
inline bool PlanetReport::has_iswin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanetReport::set_has_iswin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanetReport::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanetReport::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool PlanetReport::iswin() const {
  return iswin_;
}
inline void PlanetReport::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
}

// repeated string video_key_list = 7;
inline int PlanetReport::video_key_list_size() const {
  return video_key_list_.size();
}
inline void PlanetReport::clear_video_key_list() {
  video_key_list_.Clear();
}
inline const ::std::string& PlanetReport::video_key_list(int index) const {
  return video_key_list_.Get(index);
}
inline ::std::string* PlanetReport::mutable_video_key_list(int index) {
  return video_key_list_.Mutable(index);
}
inline void PlanetReport::set_video_key_list(int index, const ::std::string& value) {
  video_key_list_.Mutable(index)->assign(value);
}
inline void PlanetReport::set_video_key_list(int index, const char* value) {
  video_key_list_.Mutable(index)->assign(value);
}
inline void PlanetReport::set_video_key_list(int index, const char* value, size_t size) {
  video_key_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlanetReport::add_video_key_list() {
  return video_key_list_.Add();
}
inline void PlanetReport::add_video_key_list(const ::std::string& value) {
  video_key_list_.Add()->assign(value);
}
inline void PlanetReport::add_video_key_list(const char* value) {
  video_key_list_.Add()->assign(value);
}
inline void PlanetReport::add_video_key_list(const char* value, size_t size) {
  video_key_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlanetReport::video_key_list() const {
  return video_key_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlanetReport::mutable_video_key_list() {
  return &video_key_list_;
}

// repeated .PlanetMailUser my_data_list = 8;
inline int PlanetReport::my_data_list_size() const {
  return my_data_list_.size();
}
inline void PlanetReport::clear_my_data_list() {
  my_data_list_.Clear();
}
inline const ::PlanetMailUser& PlanetReport::my_data_list(int index) const {
  return my_data_list_.Get(index);
}
inline ::PlanetMailUser* PlanetReport::mutable_my_data_list(int index) {
  return my_data_list_.Mutable(index);
}
inline ::PlanetMailUser* PlanetReport::add_my_data_list() {
  return my_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetMailUser >&
PlanetReport::my_data_list() const {
  return my_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetMailUser >*
PlanetReport::mutable_my_data_list() {
  return &my_data_list_;
}

// repeated .PlanetMailUser enemy_data_list = 9;
inline int PlanetReport::enemy_data_list_size() const {
  return enemy_data_list_.size();
}
inline void PlanetReport::clear_enemy_data_list() {
  enemy_data_list_.Clear();
}
inline const ::PlanetMailUser& PlanetReport::enemy_data_list(int index) const {
  return enemy_data_list_.Get(index);
}
inline ::PlanetMailUser* PlanetReport::mutable_enemy_data_list(int index) {
  return enemy_data_list_.Mutable(index);
}
inline ::PlanetMailUser* PlanetReport::add_enemy_data_list() {
  return enemy_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlanetMailUser >&
PlanetReport::enemy_data_list() const {
  return enemy_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlanetMailUser >*
PlanetReport::mutable_enemy_data_list() {
  return &enemy_data_list_;
}

// optional int32 attack_count = 10;
inline bool PlanetReport::has_attack_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlanetReport::set_has_attack_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlanetReport::clear_has_attack_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlanetReport::clear_attack_count() {
  attack_count_ = 0;
  clear_has_attack_count();
}
inline ::google::protobuf::int32 PlanetReport::attack_count() const {
  return attack_count_;
}
inline void PlanetReport::set_attack_count(::google::protobuf::int32 value) {
  set_has_attack_count();
  attack_count_ = value;
}

// repeated int32 pre_enemy_hp_list = 11;
inline int PlanetReport::pre_enemy_hp_list_size() const {
  return pre_enemy_hp_list_.size();
}
inline void PlanetReport::clear_pre_enemy_hp_list() {
  pre_enemy_hp_list_.Clear();
}
inline ::google::protobuf::int32 PlanetReport::pre_enemy_hp_list(int index) const {
  return pre_enemy_hp_list_.Get(index);
}
inline void PlanetReport::set_pre_enemy_hp_list(int index, ::google::protobuf::int32 value) {
  pre_enemy_hp_list_.Set(index, value);
}
inline void PlanetReport::add_pre_enemy_hp_list(::google::protobuf::int32 value) {
  pre_enemy_hp_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlanetReport::pre_enemy_hp_list() const {
  return pre_enemy_hp_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlanetReport::mutable_pre_enemy_hp_list() {
  return &pre_enemy_hp_list_;
}

// -------------------------------------------------------------------

// Mail

// required int32 type = 1;
inline bool Mail::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mail::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mail::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mail::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Mail::type() const {
  return type_;
}
inline void Mail::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string from = 2;
inline bool Mail::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mail::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mail::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mail::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& Mail::from() const {
  return *from_;
}
inline void Mail::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void Mail::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void Mail::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* Mail::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mail::set_allocated_from(::std::string* from) {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (from) {
    set_has_from();
    from_ = from;
  } else {
    clear_has_from();
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string subject = 3;
inline bool Mail::has_subject() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mail::set_has_subject() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mail::clear_has_subject() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mail::clear_subject() {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& Mail::subject() const {
  return *subject_;
}
inline void Mail::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void Mail::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void Mail::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  return subject_;
}
inline ::std::string* Mail::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mail::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string message = 4;
inline bool Mail::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Mail::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Mail::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Mail::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Mail::message() const {
  return *message_;
}
inline void Mail::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Mail::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Mail::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Mail::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mail::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Item item_list = 5;
inline int Mail::item_list_size() const {
  return item_list_.size();
}
inline void Mail::clear_item_list() {
  item_list_.Clear();
}
inline const ::Item& Mail::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::Item* Mail::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::Item* Mail::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Item >&
Mail::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Item >*
Mail::mutable_item_list() {
  return &item_list_;
}

// required int64 stamp = 6;
inline bool Mail::has_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Mail::set_has_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Mail::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Mail::clear_stamp() {
  stamp_ = GOOGLE_LONGLONG(0);
  clear_has_stamp();
}
inline ::google::protobuf::int64 Mail::stamp() const {
  return stamp_;
}
inline void Mail::set_stamp(::google::protobuf::int64 value) {
  set_has_stamp();
  stamp_ = value;
}

// required uint32 guid = 7;
inline bool Mail::has_guid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Mail::set_has_guid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Mail::clear_has_guid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Mail::clear_guid() {
  guid_ = 0u;
  clear_has_guid();
}
inline ::google::protobuf::uint32 Mail::guid() const {
  return guid_;
}
inline void Mail::set_guid(::google::protobuf::uint32 value) {
  set_has_guid();
  guid_ = value;
}

// required int64 expiry_stamp = 8;
inline bool Mail::has_expiry_stamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Mail::set_has_expiry_stamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Mail::clear_has_expiry_stamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Mail::clear_expiry_stamp() {
  expiry_stamp_ = GOOGLE_LONGLONG(0);
  clear_has_expiry_stamp();
}
inline ::google::protobuf::int64 Mail::expiry_stamp() const {
  return expiry_stamp_;
}
inline void Mail::set_expiry_stamp(::google::protobuf::int64 value) {
  set_has_expiry_stamp();
  expiry_stamp_ = value;
}

// optional int32 tid = 9;
inline bool Mail::has_tid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Mail::set_has_tid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Mail::clear_has_tid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Mail::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 Mail::tid() const {
  return tid_;
}
inline void Mail::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
}

// optional int32 buchang = 10;
inline bool Mail::has_buchang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Mail::set_has_buchang() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Mail::clear_has_buchang() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Mail::clear_buchang() {
  buchang_ = 0;
  clear_has_buchang();
}
inline ::google::protobuf::int32 Mail::buchang() const {
  return buchang_;
}
inline void Mail::set_buchang(::google::protobuf::int32 value) {
  set_has_buchang();
  buchang_ = value;
}

// optional int32 reg_time = 11;
inline bool Mail::has_reg_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Mail::set_has_reg_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Mail::clear_has_reg_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Mail::clear_reg_time() {
  reg_time_ = 0;
  clear_has_reg_time();
}
inline ::google::protobuf::int32 Mail::reg_time() const {
  return reg_time_;
}
inline void Mail::set_reg_time(::google::protobuf::int32 value) {
  set_has_reg_time();
  reg_time_ = value;
}

// optional int32 vip_limit = 12;
inline bool Mail::has_vip_limit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Mail::set_has_vip_limit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Mail::clear_has_vip_limit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Mail::clear_vip_limit() {
  vip_limit_ = 0;
  clear_has_vip_limit();
}
inline ::google::protobuf::int32 Mail::vip_limit() const {
  return vip_limit_;
}
inline void Mail::set_vip_limit(::google::protobuf::int32 value) {
  set_has_vip_limit();
  vip_limit_ = value;
}

// optional int32 lev_limit = 13;
inline bool Mail::has_lev_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Mail::set_has_lev_limit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Mail::clear_has_lev_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Mail::clear_lev_limit() {
  lev_limit_ = 0;
  clear_has_lev_limit();
}
inline ::google::protobuf::int32 Mail::lev_limit() const {
  return lev_limit_;
}
inline void Mail::set_lev_limit(::google::protobuf::int32 value) {
  set_has_lev_limit();
  lev_limit_ = value;
}

// optional string from_user_name = 14;
inline bool Mail::has_from_user_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Mail::set_has_from_user_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Mail::clear_has_from_user_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Mail::clear_from_user_name() {
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    from_user_name_->clear();
  }
  clear_has_from_user_name();
}
inline const ::std::string& Mail::from_user_name() const {
  return *from_user_name_;
}
inline void Mail::set_from_user_name(const ::std::string& value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
}
inline void Mail::set_from_user_name(const char* value) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(value);
}
inline void Mail::set_from_user_name(const char* value, size_t size) {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  from_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Mail::mutable_from_user_name() {
  set_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    from_user_name_ = new ::std::string;
  }
  return from_user_name_;
}
inline ::std::string* Mail::release_from_user_name() {
  clear_has_from_user_name();
  if (from_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_user_name_;
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Mail::set_allocated_from_user_name(::std::string* from_user_name) {
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_name_;
  }
  if (from_user_name) {
    set_has_from_user_name();
    from_user_name_ = from_user_name;
  } else {
    clear_has_from_user_name();
    from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PlanetReport planet_report = 15;
inline bool Mail::has_planet_report() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Mail::set_has_planet_report() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Mail::clear_has_planet_report() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Mail::clear_planet_report() {
  if (planet_report_ != NULL) planet_report_->::PlanetReport::Clear();
  clear_has_planet_report();
}
inline const ::PlanetReport& Mail::planet_report() const {
  return planet_report_ != NULL ? *planet_report_ : *default_instance_->planet_report_;
}
inline ::PlanetReport* Mail::mutable_planet_report() {
  set_has_planet_report();
  if (planet_report_ == NULL) planet_report_ = new ::PlanetReport;
  return planet_report_;
}
inline ::PlanetReport* Mail::release_planet_report() {
  clear_has_planet_report();
  ::PlanetReport* temp = planet_report_;
  planet_report_ = NULL;
  return temp;
}
inline void Mail::set_allocated_planet_report(::PlanetReport* planet_report) {
  delete planet_report_;
  planet_report_ = planet_report;
  if (planet_report) {
    set_has_planet_report();
  } else {
    clear_has_planet_report();
  }
}

// -------------------------------------------------------------------

// MailList

// repeated .Mail mail_list = 1;
inline int MailList::mail_list_size() const {
  return mail_list_.size();
}
inline void MailList::clear_mail_list() {
  mail_list_.Clear();
}
inline const ::Mail& MailList::mail_list(int index) const {
  return mail_list_.Get(index);
}
inline ::Mail* MailList::mutable_mail_list(int index) {
  return mail_list_.Mutable(index);
}
inline ::Mail* MailList::add_mail_list() {
  return mail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mail >&
MailList::mail_list() const {
  return mail_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mail >*
MailList::mutable_mail_list() {
  return &mail_list_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Mail_2eproto__INCLUDED
