// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd_rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd_rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RankGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankGetReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cmd_5frank_2eproto() {
  protobuf_AddDesc_cmd_5frank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cmd_rank.proto");
  GOOGLE_CHECK(file != NULL);
  RankGetReq_descriptor_ = file->message_type(0);
  static const int RankGetReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankGetReq, ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankGetReq, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankGetReq, rankstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankGetReq, rankcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankGetReq, taruser_),
  };
  RankGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankGetReq_descriptor_,
      RankGetReq::default_instance_,
      RankGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankGetReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cmd_5frank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankGetReq_descriptor_, &RankGetReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cmd_5frank_2eproto() {
  delete RankGetReq::default_instance_;
  delete RankGetReq_reflection_;
}

void protobuf_AddDesc_cmd_5frank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_rank_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016cmd_rank.proto\032\nrank.proto\"e\n\nRankGetR"
    "eq\022\020\n\010ranktype\030\001 \001(\005\022\016\n\006rankid\030\002 \001(\005\022\021\n\t"
    "rankstart\030\003 \001(\005\022\021\n\trankcount\030\004 \001(\005\022\017\n\007ta"
    "ruser\030\005 \001(\014", 131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd_rank.proto", &protobuf_RegisterTypes);
  RankGetReq::default_instance_ = new RankGetReq();
  RankGetReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cmd_5frank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cmd_5frank_2eproto {
  StaticDescriptorInitializer_cmd_5frank_2eproto() {
    protobuf_AddDesc_cmd_5frank_2eproto();
  }
} static_descriptor_initializer_cmd_5frank_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RankGetReq::kRanktypeFieldNumber;
const int RankGetReq::kRankidFieldNumber;
const int RankGetReq::kRankstartFieldNumber;
const int RankGetReq::kRankcountFieldNumber;
const int RankGetReq::kTaruserFieldNumber;
#endif  // !_MSC_VER

RankGetReq::RankGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankGetReq::InitAsDefaultInstance() {
}

RankGetReq::RankGetReq(const RankGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankGetReq::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0;
  rankid_ = 0;
  rankstart_ = 0;
  rankcount_ = 0;
  taruser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankGetReq::~RankGetReq() {
  SharedDtor();
}

void RankGetReq::SharedDtor() {
  if (taruser_ != &::google::protobuf::internal::kEmptyString) {
    delete taruser_;
  }
  if (this != default_instance_) {
  }
}

void RankGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankGetReq_descriptor_;
}

const RankGetReq& RankGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_5frank_2eproto();
  return *default_instance_;
}

RankGetReq* RankGetReq::default_instance_ = NULL;

RankGetReq* RankGetReq::New() const {
  return new RankGetReq;
}

void RankGetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0;
    rankid_ = 0;
    rankstart_ = 0;
    rankcount_ = 0;
    if (has_taruser()) {
      if (taruser_ != &::google::protobuf::internal::kEmptyString) {
        taruser_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ranktype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankid;
        break;
      }

      // optional int32 rankid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankstart;
        break;
      }

      // optional int32 rankstart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankstart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankstart_)));
          set_has_rankstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rankcount;
        break;
      }

      // optional int32 rankcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankcount_)));
          set_has_rankcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_taruser;
        break;
      }

      // optional bytes taruser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taruser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_taruser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ranktype = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranktype(), output);
  }

  // optional int32 rankid = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rankid(), output);
  }

  // optional int32 rankstart = 3;
  if (has_rankstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rankstart(), output);
  }

  // optional int32 rankcount = 4;
  if (has_rankcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rankcount(), output);
  }

  // optional bytes taruser = 5;
  if (has_taruser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->taruser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ranktype = 1;
  if (has_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranktype(), target);
  }

  // optional int32 rankid = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rankid(), target);
  }

  // optional int32 rankstart = 3;
  if (has_rankstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rankstart(), target);
  }

  // optional int32 rankcount = 4;
  if (has_rankcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rankcount(), target);
  }

  // optional bytes taruser = 5;
  if (has_taruser()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->taruser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ranktype = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranktype());
    }

    // optional int32 rankid = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

    // optional int32 rankstart = 3;
    if (has_rankstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankstart());
    }

    // optional int32 rankcount = 4;
    if (has_rankcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankcount());
    }

    // optional bytes taruser = 5;
    if (has_taruser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->taruser());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankGetReq::MergeFrom(const RankGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rankstart()) {
      set_rankstart(from.rankstart());
    }
    if (from.has_rankcount()) {
      set_rankcount(from.rankcount());
    }
    if (from.has_taruser()) {
      set_taruser(from.taruser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankGetReq::CopyFrom(const RankGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankGetReq::IsInitialized() const {

  return true;
}

void RankGetReq::Swap(RankGetReq* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(rankid_, other->rankid_);
    std::swap(rankstart_, other->rankstart_);
    std::swap(rankcount_, other->rankcount_);
    std::swap(taruser_, other->taruser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankGetReq_descriptor_;
  metadata.reflection = RankGetReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
