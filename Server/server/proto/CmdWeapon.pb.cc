// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdWeapon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdWeapon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GetShipListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetShipListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetShipListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetShipListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeLineupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeLineupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeLineupResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeLineupResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeWeaponReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeWeaponReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeWeaponResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeWeaponResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipDevelopeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipDevelopeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipDevelopeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipDevelopeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlueprintDevelopeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlueprintDevelopeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlueprintDevelopeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlueprintDevelopeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipRemoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipRemoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipRemoveResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipRemoveResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponUpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponUpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponUpgradeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponUpgradeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipBreakReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipBreakReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipBreakResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipBreakResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipAddExpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipAddExpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipAddExpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipAddExpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipFixReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipFixReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipFixResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipFixResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipAddEnergyExpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipAddEnergyExpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipAddEnergyExpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipAddEnergyExpResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdWeapon_2eproto() {
  protobuf_AddDesc_CmdWeapon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdWeapon.proto");
  GOOGLE_CHECK(file != NULL);
  GetShipListReq_descriptor_ = file->message_type(0);
  static const int GetShipListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipListReq, ship_id_),
  };
  GetShipListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetShipListReq_descriptor_,
      GetShipListReq::default_instance_,
      GetShipListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetShipListReq));
  GetShipListResp_descriptor_ = file->message_type(1);
  static const int GetShipListResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipListResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipListResp, ship_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipListResp, ship_list_),
  };
  GetShipListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetShipListResp_descriptor_,
      GetShipListResp::default_instance_,
      GetShipListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetShipListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetShipListResp));
  ChangeLineupReq_descriptor_ = file->message_type(2);
  static const int ChangeLineupReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupReq, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupReq, index_),
  };
  ChangeLineupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeLineupReq_descriptor_,
      ChangeLineupReq::default_instance_,
      ChangeLineupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeLineupReq));
  ChangeLineupResp_descriptor_ = file->message_type(3);
  static const int ChangeLineupResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupResp, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupResp, type_),
  };
  ChangeLineupResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeLineupResp_descriptor_,
      ChangeLineupResp::default_instance_,
      ChangeLineupResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLineupResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeLineupResp));
  ChangeWeaponReq_descriptor_ = file->message_type(4);
  static const int ChangeWeaponReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, ship_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, weapon_list_),
  };
  ChangeWeaponReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeWeaponReq_descriptor_,
      ChangeWeaponReq::default_instance_,
      ChangeWeaponReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeWeaponReq));
  ChangeWeaponResp_descriptor_ = file->message_type(5);
  static const int ChangeWeaponResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponResp, ship_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponResp, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponResp, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponResp, weapon_list_),
  };
  ChangeWeaponResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeWeaponResp_descriptor_,
      ChangeWeaponResp::default_instance_,
      ChangeWeaponResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeWeaponResp));
  ShipDevelopeReq_descriptor_ = file->message_type(6);
  static const int ShipDevelopeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeReq, ship_id_),
  };
  ShipDevelopeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipDevelopeReq_descriptor_,
      ShipDevelopeReq::default_instance_,
      ShipDevelopeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipDevelopeReq));
  ShipDevelopeResp_descriptor_ = file->message_type(7);
  static const int ShipDevelopeResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeResp, ship_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeResp, ship_guid_),
  };
  ShipDevelopeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipDevelopeResp_descriptor_,
      ShipDevelopeResp::default_instance_,
      ShipDevelopeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipDevelopeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipDevelopeResp));
  BlueprintDevelopeReq_descriptor_ = file->message_type(8);
  static const int BlueprintDevelopeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeReq, blueprint_id_),
  };
  BlueprintDevelopeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlueprintDevelopeReq_descriptor_,
      BlueprintDevelopeReq::default_instance_,
      BlueprintDevelopeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlueprintDevelopeReq));
  BlueprintDevelopeResp_descriptor_ = file->message_type(9);
  static const int BlueprintDevelopeResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeResp, blueprint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeResp, crit_),
  };
  BlueprintDevelopeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlueprintDevelopeResp_descriptor_,
      BlueprintDevelopeResp::default_instance_,
      BlueprintDevelopeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueprintDevelopeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlueprintDevelopeResp));
  ShipRemoveReq_descriptor_ = file->message_type(10);
  static const int ShipRemoveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipRemoveReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipRemoveReq, ship_guid_),
  };
  ShipRemoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipRemoveReq_descriptor_,
      ShipRemoveReq::default_instance_,
      ShipRemoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipRemoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipRemoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipRemoveReq));
  ShipRemoveResp_descriptor_ = file->message_type(11);
  static const int ShipRemoveResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipRemoveResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipRemoveResp, user_sync_),
  };
  ShipRemoveResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipRemoveResp_descriptor_,
      ShipRemoveResp::default_instance_,
      ShipRemoveResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipRemoveResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipRemoveResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipRemoveResp));
  WeaponUpgradeReq_descriptor_ = file->message_type(12);
  static const int WeaponUpgradeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeReq, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeReq, weapon_id_),
  };
  WeaponUpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponUpgradeReq_descriptor_,
      WeaponUpgradeReq::default_instance_,
      WeaponUpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponUpgradeReq));
  WeaponUpgradeResp_descriptor_ = file->message_type(13);
  static const int WeaponUpgradeResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeResp, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeResp, weapon_id_),
  };
  WeaponUpgradeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponUpgradeResp_descriptor_,
      WeaponUpgradeResp::default_instance_,
      WeaponUpgradeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponUpgradeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponUpgradeResp));
  ShipBreakReq_descriptor_ = file->message_type(14);
  static const int ShipBreakReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakReq, ship_guid_),
  };
  ShipBreakReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipBreakReq_descriptor_,
      ShipBreakReq::default_instance_,
      ShipBreakReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipBreakReq));
  ShipBreakResp_descriptor_ = file->message_type(15);
  static const int ShipBreakResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakResp, ship_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakResp, ship_break_),
  };
  ShipBreakResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipBreakResp_descriptor_,
      ShipBreakResp::default_instance_,
      ShipBreakResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipBreakResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipBreakResp));
  ShipAddExpReq_descriptor_ = file->message_type(16);
  static const int ShipAddExpReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpReq, ship_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpReq, item_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpReq, item_num_list_),
  };
  ShipAddExpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipAddExpReq_descriptor_,
      ShipAddExpReq::default_instance_,
      ShipAddExpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipAddExpReq));
  ShipAddExpResp_descriptor_ = file->message_type(17);
  static const int ShipAddExpResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpResp, user_sync_),
  };
  ShipAddExpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipAddExpResp_descriptor_,
      ShipAddExpResp::default_instance_,
      ShipAddExpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddExpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipAddExpResp));
  ShipFixReq_descriptor_ = file->message_type(18);
  static const int ShipFixReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipFixReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipFixReq, guids_),
  };
  ShipFixReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipFixReq_descriptor_,
      ShipFixReq::default_instance_,
      ShipFixReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipFixReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipFixReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipFixReq));
  ShipFixResp_descriptor_ = file->message_type(19);
  static const int ShipFixResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipFixResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipFixResp, user_sync_),
  };
  ShipFixResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipFixResp_descriptor_,
      ShipFixResp::default_instance_,
      ShipFixResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipFixResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipFixResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipFixResp));
  ShipAddEnergyExpReq_descriptor_ = file->message_type(20);
  static const int ShipAddEnergyExpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddEnergyExpReq, ship_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddEnergyExpReq, res_list_),
  };
  ShipAddEnergyExpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipAddEnergyExpReq_descriptor_,
      ShipAddEnergyExpReq::default_instance_,
      ShipAddEnergyExpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddEnergyExpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddEnergyExpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipAddEnergyExpReq));
  ShipAddEnergyExpResp_descriptor_ = file->message_type(21);
  static const int ShipAddEnergyExpResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddEnergyExpResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddEnergyExpResp, user_sync_),
  };
  ShipAddEnergyExpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipAddEnergyExpResp_descriptor_,
      ShipAddEnergyExpResp::default_instance_,
      ShipAddEnergyExpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddEnergyExpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipAddEnergyExpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipAddEnergyExpResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdWeapon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetShipListReq_descriptor_, &GetShipListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetShipListResp_descriptor_, &GetShipListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeLineupReq_descriptor_, &ChangeLineupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeLineupResp_descriptor_, &ChangeLineupResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeWeaponReq_descriptor_, &ChangeWeaponReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeWeaponResp_descriptor_, &ChangeWeaponResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipDevelopeReq_descriptor_, &ShipDevelopeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipDevelopeResp_descriptor_, &ShipDevelopeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlueprintDevelopeReq_descriptor_, &BlueprintDevelopeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlueprintDevelopeResp_descriptor_, &BlueprintDevelopeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipRemoveReq_descriptor_, &ShipRemoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipRemoveResp_descriptor_, &ShipRemoveResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponUpgradeReq_descriptor_, &WeaponUpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponUpgradeResp_descriptor_, &WeaponUpgradeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipBreakReq_descriptor_, &ShipBreakReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipBreakResp_descriptor_, &ShipBreakResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipAddExpReq_descriptor_, &ShipAddExpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipAddExpResp_descriptor_, &ShipAddExpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipFixReq_descriptor_, &ShipFixReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipFixResp_descriptor_, &ShipFixResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipAddEnergyExpReq_descriptor_, &ShipAddEnergyExpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipAddEnergyExpResp_descriptor_, &ShipAddEnergyExpResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdWeapon_2eproto() {
  delete GetShipListReq::default_instance_;
  delete GetShipListReq_reflection_;
  delete GetShipListResp::default_instance_;
  delete GetShipListResp_reflection_;
  delete ChangeLineupReq::default_instance_;
  delete ChangeLineupReq_reflection_;
  delete ChangeLineupResp::default_instance_;
  delete ChangeLineupResp_reflection_;
  delete ChangeWeaponReq::default_instance_;
  delete ChangeWeaponReq_reflection_;
  delete ChangeWeaponResp::default_instance_;
  delete ChangeWeaponResp_reflection_;
  delete ShipDevelopeReq::default_instance_;
  delete ShipDevelopeReq_reflection_;
  delete ShipDevelopeResp::default_instance_;
  delete ShipDevelopeResp_reflection_;
  delete BlueprintDevelopeReq::default_instance_;
  delete BlueprintDevelopeReq_reflection_;
  delete BlueprintDevelopeResp::default_instance_;
  delete BlueprintDevelopeResp_reflection_;
  delete ShipRemoveReq::default_instance_;
  delete ShipRemoveReq_reflection_;
  delete ShipRemoveResp::default_instance_;
  delete ShipRemoveResp_reflection_;
  delete WeaponUpgradeReq::default_instance_;
  delete WeaponUpgradeReq_reflection_;
  delete WeaponUpgradeResp::default_instance_;
  delete WeaponUpgradeResp_reflection_;
  delete ShipBreakReq::default_instance_;
  delete ShipBreakReq_reflection_;
  delete ShipBreakResp::default_instance_;
  delete ShipBreakResp_reflection_;
  delete ShipAddExpReq::default_instance_;
  delete ShipAddExpReq_reflection_;
  delete ShipAddExpResp::default_instance_;
  delete ShipAddExpResp_reflection_;
  delete ShipFixReq::default_instance_;
  delete ShipFixReq_reflection_;
  delete ShipFixResp::default_instance_;
  delete ShipFixResp_reflection_;
  delete ShipAddEnergyExpReq::default_instance_;
  delete ShipAddEnergyExpReq_reflection_;
  delete ShipAddEnergyExpResp::default_instance_;
  delete ShipAddEnergyExpResp_reflection_;
}

void protobuf_AddDesc_CmdWeapon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017CmdWeapon.proto\032\rAirShip.proto\032\016UserSy"
    "nc.proto\"!\n\016GetShipListReq\022\017\n\007ship_id\030\001 "
    "\002(\005\"[\n\017GetShipListResp\022\016\n\006result\030\001 \002(\005\022\033"
    "\n\tship_info\030\002 \001(\0132\010.AirShip\022\033\n\tship_list"
    "\030\003 \003(\0132\010.AirShip\">\n\017ChangeLineupReq\022\014\n\004t"
    "ype\030\001 \002(\005\022\016\n\006lineup\030\002 \003(\005\022\r\n\005index\030\003 \001(\005"
    "\"^\n\020ChangeLineupResp\022\016\n\006result\030\001 \002(\005\022\034\n\t"
    "user_sync\030\002 \001(\0132\t.UserSync\022\016\n\006lineup\030\003 \003"
    "(\005\022\014\n\004type\030\004 \002(\005\"b\n\017ChangeWeaponReq\022\014\n\004t"
    "ype\030\001 \002(\005\022\017\n\007ship_id\030\002 \001(\005\022\014\n\004gift\030\003 \001(\005"
    "\022\r\n\005skill\030\004 \001(\005\022\023\n\013weapon_list\030\005 \003(\005\"\203\001\n"
    "\020ChangeWeaponResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuse"
    "r_sync\030\002 \001(\0132\t.UserSync\022\017\n\007ship_id\030\003 \001(\005"
    "\022\014\n\004gift\030\004 \001(\005\022\r\n\005skill\030\005 \001(\005\022\023\n\013weapon_"
    "list\030\006 \003(\005\"0\n\017ShipDevelopeReq\022\014\n\004type\030\001 "
    "\002(\005\022\017\n\007ship_id\030\002 \002(\005\"d\n\020ShipDevelopeResp"
    "\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.Us"
    "erSync\022\017\n\007ship_id\030\003 \001(\005\022\021\n\tship_guid\030\004 \001"
    "(\005\":\n\024BlueprintDevelopeReq\022\014\n\004type\030\001 \002(\005"
    "\022\024\n\014blueprint_id\030\002 \002(\005\"w\n\025BlueprintDevel"
    "opeResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001"
    "(\0132\t.UserSync\022\024\n\014blueprint_id\030\003 \001(\005\022\014\n\004t"
    "ype\030\004 \001(\005\022\014\n\004crit\030\005 \001(\010\"0\n\rShipRemoveReq"
    "\022\014\n\004type\030\001 \002(\005\022\021\n\tship_guid\030\002 \001(\005\">\n\016Shi"
    "pRemoveResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync"
    "\030\002 \001(\0132\t.UserSync\"A\n\020WeaponUpgradeReq\022\014\n"
    "\004type\030\001 \002(\005\022\014\n\004guid\030\002 \001(\005\022\021\n\tweapon_id\030\003"
    " \001(\005\"p\n\021WeaponUpgradeResp\022\016\n\006result\030\001 \002("
    "\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\014\n\004type\030"
    "\003 \001(\005\022\014\n\004guid\030\004 \001(\005\022\021\n\tweapon_id\030\005 \001(\005\"!"
    "\n\014ShipBreakReq\022\021\n\tship_guid\030\001 \002(\005\"d\n\rShi"
    "pBreakResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030"
    "\002 \001(\0132\t.UserSync\022\021\n\tship_guid\030\003 \001(\005\022\022\n\ns"
    "hip_break\030\004 \001(\005\"O\n\rShipAddExpReq\022\021\n\tship"
    "_guid\030\001 \002(\005\022\024\n\014item_id_list\030\002 \003(\005\022\025\n\rite"
    "m_num_list\030\003 \003(\005\">\n\016ShipAddExpResp\022\016\n\006re"
    "sult\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync"
    "\")\n\nShipFixReq\022\014\n\004type\030\001 \002(\005\022\r\n\005guids\030\002 "
    "\003(\005\";\n\013ShipFixResp\022\016\n\006result\030\001 \002(\005\022\034\n\tus"
    "er_sync\030\002 \001(\0132\t.UserSync\":\n\023ShipAddEnerg"
    "yExpReq\022\021\n\tship_guid\030\001 \002(\005\022\020\n\010res_list\030\002"
    " \003(\005\"D\n\024ShipAddEnergyExpResp\022\016\n\006result\030\001"
    " \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync", 1714);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdWeapon.proto", &protobuf_RegisterTypes);
  GetShipListReq::default_instance_ = new GetShipListReq();
  GetShipListResp::default_instance_ = new GetShipListResp();
  ChangeLineupReq::default_instance_ = new ChangeLineupReq();
  ChangeLineupResp::default_instance_ = new ChangeLineupResp();
  ChangeWeaponReq::default_instance_ = new ChangeWeaponReq();
  ChangeWeaponResp::default_instance_ = new ChangeWeaponResp();
  ShipDevelopeReq::default_instance_ = new ShipDevelopeReq();
  ShipDevelopeResp::default_instance_ = new ShipDevelopeResp();
  BlueprintDevelopeReq::default_instance_ = new BlueprintDevelopeReq();
  BlueprintDevelopeResp::default_instance_ = new BlueprintDevelopeResp();
  ShipRemoveReq::default_instance_ = new ShipRemoveReq();
  ShipRemoveResp::default_instance_ = new ShipRemoveResp();
  WeaponUpgradeReq::default_instance_ = new WeaponUpgradeReq();
  WeaponUpgradeResp::default_instance_ = new WeaponUpgradeResp();
  ShipBreakReq::default_instance_ = new ShipBreakReq();
  ShipBreakResp::default_instance_ = new ShipBreakResp();
  ShipAddExpReq::default_instance_ = new ShipAddExpReq();
  ShipAddExpResp::default_instance_ = new ShipAddExpResp();
  ShipFixReq::default_instance_ = new ShipFixReq();
  ShipFixResp::default_instance_ = new ShipFixResp();
  ShipAddEnergyExpReq::default_instance_ = new ShipAddEnergyExpReq();
  ShipAddEnergyExpResp::default_instance_ = new ShipAddEnergyExpResp();
  GetShipListReq::default_instance_->InitAsDefaultInstance();
  GetShipListResp::default_instance_->InitAsDefaultInstance();
  ChangeLineupReq::default_instance_->InitAsDefaultInstance();
  ChangeLineupResp::default_instance_->InitAsDefaultInstance();
  ChangeWeaponReq::default_instance_->InitAsDefaultInstance();
  ChangeWeaponResp::default_instance_->InitAsDefaultInstance();
  ShipDevelopeReq::default_instance_->InitAsDefaultInstance();
  ShipDevelopeResp::default_instance_->InitAsDefaultInstance();
  BlueprintDevelopeReq::default_instance_->InitAsDefaultInstance();
  BlueprintDevelopeResp::default_instance_->InitAsDefaultInstance();
  ShipRemoveReq::default_instance_->InitAsDefaultInstance();
  ShipRemoveResp::default_instance_->InitAsDefaultInstance();
  WeaponUpgradeReq::default_instance_->InitAsDefaultInstance();
  WeaponUpgradeResp::default_instance_->InitAsDefaultInstance();
  ShipBreakReq::default_instance_->InitAsDefaultInstance();
  ShipBreakResp::default_instance_->InitAsDefaultInstance();
  ShipAddExpReq::default_instance_->InitAsDefaultInstance();
  ShipAddExpResp::default_instance_->InitAsDefaultInstance();
  ShipFixReq::default_instance_->InitAsDefaultInstance();
  ShipFixResp::default_instance_->InitAsDefaultInstance();
  ShipAddEnergyExpReq::default_instance_->InitAsDefaultInstance();
  ShipAddEnergyExpResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdWeapon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdWeapon_2eproto {
  StaticDescriptorInitializer_CmdWeapon_2eproto() {
    protobuf_AddDesc_CmdWeapon_2eproto();
  }
} static_descriptor_initializer_CmdWeapon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetShipListReq::kShipIdFieldNumber;
#endif  // !_MSC_VER

GetShipListReq::GetShipListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetShipListReq::InitAsDefaultInstance() {
}

GetShipListReq::GetShipListReq(const GetShipListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetShipListReq::SharedCtor() {
  _cached_size_ = 0;
  ship_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetShipListReq::~GetShipListReq() {
  SharedDtor();
}

void GetShipListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetShipListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShipListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetShipListReq_descriptor_;
}

const GetShipListReq& GetShipListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

GetShipListReq* GetShipListReq::default_instance_ = NULL;

GetShipListReq* GetShipListReq::New() const {
  return new GetShipListReq;
}

void GetShipListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ship_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetShipListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ship_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_id_)));
          set_has_ship_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetShipListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ship_id = 1;
  if (has_ship_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ship_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetShipListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ship_id = 1;
  if (has_ship_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ship_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetShipListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ship_id = 1;
    if (has_ship_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShipListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetShipListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetShipListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetShipListReq::MergeFrom(const GetShipListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_id()) {
      set_ship_id(from.ship_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetShipListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShipListReq::CopyFrom(const GetShipListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShipListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetShipListReq::Swap(GetShipListReq* other) {
  if (other != this) {
    std::swap(ship_id_, other->ship_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetShipListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetShipListReq_descriptor_;
  metadata.reflection = GetShipListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetShipListResp::kResultFieldNumber;
const int GetShipListResp::kShipInfoFieldNumber;
const int GetShipListResp::kShipListFieldNumber;
#endif  // !_MSC_VER

GetShipListResp::GetShipListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetShipListResp::InitAsDefaultInstance() {
  ship_info_ = const_cast< ::AirShip*>(&::AirShip::default_instance());
}

GetShipListResp::GetShipListResp(const GetShipListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetShipListResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ship_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetShipListResp::~GetShipListResp() {
  SharedDtor();
}

void GetShipListResp::SharedDtor() {
  if (this != default_instance_) {
    delete ship_info_;
  }
}

void GetShipListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetShipListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetShipListResp_descriptor_;
}

const GetShipListResp& GetShipListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

GetShipListResp* GetShipListResp::default_instance_ = NULL;

GetShipListResp* GetShipListResp::New() const {
  return new GetShipListResp;
}

void GetShipListResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_ship_info()) {
      if (ship_info_ != NULL) ship_info_->::AirShip::Clear();
    }
  }
  ship_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetShipListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ship_info;
        break;
      }

      // optional .AirShip ship_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ship_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ship_list;
        break;
      }

      // repeated .AirShip ship_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ship_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetShipListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .AirShip ship_info = 2;
  if (has_ship_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ship_info(), output);
  }

  // repeated .AirShip ship_list = 3;
  for (int i = 0; i < this->ship_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ship_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetShipListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .AirShip ship_info = 2;
  if (has_ship_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ship_info(), target);
  }

  // repeated .AirShip ship_list = 3;
  for (int i = 0; i < this->ship_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ship_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetShipListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .AirShip ship_info = 2;
    if (has_ship_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ship_info());
    }

  }
  // repeated .AirShip ship_list = 3;
  total_size += 1 * this->ship_list_size();
  for (int i = 0; i < this->ship_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ship_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetShipListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetShipListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetShipListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetShipListResp::MergeFrom(const GetShipListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ship_list_.MergeFrom(from.ship_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ship_info()) {
      mutable_ship_info()->::AirShip::MergeFrom(from.ship_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetShipListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetShipListResp::CopyFrom(const GetShipListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetShipListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ship_info()) {
    if (!this->ship_info().IsInitialized()) return false;
  }
  for (int i = 0; i < ship_list_size(); i++) {
    if (!this->ship_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetShipListResp::Swap(GetShipListResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ship_info_, other->ship_info_);
    ship_list_.Swap(&other->ship_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetShipListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetShipListResp_descriptor_;
  metadata.reflection = GetShipListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeLineupReq::kTypeFieldNumber;
const int ChangeLineupReq::kLineupFieldNumber;
const int ChangeLineupReq::kIndexFieldNumber;
#endif  // !_MSC_VER

ChangeLineupReq::ChangeLineupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeLineupReq::InitAsDefaultInstance() {
}

ChangeLineupReq::ChangeLineupReq(const ChangeLineupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeLineupReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeLineupReq::~ChangeLineupReq() {
  SharedDtor();
}

void ChangeLineupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeLineupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeLineupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLineupReq_descriptor_;
}

const ChangeLineupReq& ChangeLineupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ChangeLineupReq* ChangeLineupReq::default_instance_ = NULL;

ChangeLineupReq* ChangeLineupReq::New() const {
  return new ChangeLineupReq;
}

void ChangeLineupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    index_ = 0;
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeLineupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeLineupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 lineup = 2;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lineup(i), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeLineupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 lineup = 2;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lineup(i), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeLineupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated int32 lineup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeLineupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeLineupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeLineupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeLineupReq::MergeFrom(const ChangeLineupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeLineupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLineupReq::CopyFrom(const ChangeLineupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLineupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeLineupReq::Swap(ChangeLineupReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    lineup_.Swap(&other->lineup_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeLineupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeLineupReq_descriptor_;
  metadata.reflection = ChangeLineupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeLineupResp::kResultFieldNumber;
const int ChangeLineupResp::kUserSyncFieldNumber;
const int ChangeLineupResp::kLineupFieldNumber;
const int ChangeLineupResp::kTypeFieldNumber;
#endif  // !_MSC_VER

ChangeLineupResp::ChangeLineupResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeLineupResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ChangeLineupResp::ChangeLineupResp(const ChangeLineupResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeLineupResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeLineupResp::~ChangeLineupResp() {
  SharedDtor();
}

void ChangeLineupResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ChangeLineupResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeLineupResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLineupResp_descriptor_;
}

const ChangeLineupResp& ChangeLineupResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ChangeLineupResp* ChangeLineupResp::default_instance_ = NULL;

ChangeLineupResp* ChangeLineupResp::New() const {
  return new ChangeLineupResp;
}

void ChangeLineupResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    type_ = 0;
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeLineupResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeLineupResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lineup(i), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeLineupResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lineup(i), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeLineupResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 lineup = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeLineupResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeLineupResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeLineupResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeLineupResp::MergeFrom(const ChangeLineupResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeLineupResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLineupResp::CopyFrom(const ChangeLineupResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLineupResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ChangeLineupResp::Swap(ChangeLineupResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    lineup_.Swap(&other->lineup_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeLineupResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeLineupResp_descriptor_;
  metadata.reflection = ChangeLineupResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeWeaponReq::kTypeFieldNumber;
const int ChangeWeaponReq::kShipIdFieldNumber;
const int ChangeWeaponReq::kGiftFieldNumber;
const int ChangeWeaponReq::kSkillFieldNumber;
const int ChangeWeaponReq::kWeaponListFieldNumber;
#endif  // !_MSC_VER

ChangeWeaponReq::ChangeWeaponReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeWeaponReq::InitAsDefaultInstance() {
}

ChangeWeaponReq::ChangeWeaponReq(const ChangeWeaponReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeWeaponReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ship_id_ = 0;
  gift_ = 0;
  skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeWeaponReq::~ChangeWeaponReq() {
  SharedDtor();
}

void ChangeWeaponReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeWeaponReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeWeaponReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeWeaponReq_descriptor_;
}

const ChangeWeaponReq& ChangeWeaponReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ChangeWeaponReq* ChangeWeaponReq::default_instance_ = NULL;

ChangeWeaponReq* ChangeWeaponReq::New() const {
  return new ChangeWeaponReq;
}

void ChangeWeaponReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ship_id_ = 0;
    gift_ = 0;
    skill_ = 0;
  }
  weapon_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeWeaponReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ship_id;
        break;
      }

      // optional int32 ship_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_id_)));
          set_has_ship_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gift;
        break;
      }

      // optional int32 gift = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_)));
          set_has_gift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill;
        break;
      }

      // optional int32 skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weapon_list;
        break;
      }

      // repeated int32 weapon_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_weapon_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weapon_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weapon_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeWeaponReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 ship_id = 2;
  if (has_ship_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ship_id(), output);
  }

  // optional int32 gift = 3;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gift(), output);
  }

  // optional int32 skill = 4;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill(), output);
  }

  // repeated int32 weapon_list = 5;
  for (int i = 0; i < this->weapon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->weapon_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeWeaponReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 ship_id = 2;
  if (has_ship_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ship_id(), target);
  }

  // optional int32 gift = 3;
  if (has_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gift(), target);
  }

  // optional int32 skill = 4;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill(), target);
  }

  // repeated int32 weapon_list = 5;
  for (int i = 0; i < this->weapon_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->weapon_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeWeaponReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 ship_id = 2;
    if (has_ship_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_id());
    }

    // optional int32 gift = 3;
    if (has_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift());
    }

    // optional int32 skill = 4;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

  }
  // repeated int32 weapon_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->weapon_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weapon_list(i));
    }
    total_size += 1 * this->weapon_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeWeaponReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeWeaponReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeWeaponReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeWeaponReq::MergeFrom(const ChangeWeaponReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  weapon_list_.MergeFrom(from.weapon_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ship_id()) {
      set_ship_id(from.ship_id());
    }
    if (from.has_gift()) {
      set_gift(from.gift());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeWeaponReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeWeaponReq::CopyFrom(const ChangeWeaponReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeWeaponReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeWeaponReq::Swap(ChangeWeaponReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ship_id_, other->ship_id_);
    std::swap(gift_, other->gift_);
    std::swap(skill_, other->skill_);
    weapon_list_.Swap(&other->weapon_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeWeaponReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeWeaponReq_descriptor_;
  metadata.reflection = ChangeWeaponReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeWeaponResp::kResultFieldNumber;
const int ChangeWeaponResp::kUserSyncFieldNumber;
const int ChangeWeaponResp::kShipIdFieldNumber;
const int ChangeWeaponResp::kGiftFieldNumber;
const int ChangeWeaponResp::kSkillFieldNumber;
const int ChangeWeaponResp::kWeaponListFieldNumber;
#endif  // !_MSC_VER

ChangeWeaponResp::ChangeWeaponResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeWeaponResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ChangeWeaponResp::ChangeWeaponResp(const ChangeWeaponResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeWeaponResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ship_id_ = 0;
  gift_ = 0;
  skill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeWeaponResp::~ChangeWeaponResp() {
  SharedDtor();
}

void ChangeWeaponResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ChangeWeaponResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeWeaponResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeWeaponResp_descriptor_;
}

const ChangeWeaponResp& ChangeWeaponResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ChangeWeaponResp* ChangeWeaponResp::default_instance_ = NULL;

ChangeWeaponResp* ChangeWeaponResp::New() const {
  return new ChangeWeaponResp;
}

void ChangeWeaponResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    ship_id_ = 0;
    gift_ = 0;
    skill_ = 0;
  }
  weapon_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeWeaponResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ship_id;
        break;
      }

      // optional int32 ship_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_id_)));
          set_has_ship_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gift;
        break;
      }

      // optional int32 gift = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_)));
          set_has_gift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill;
        break;
      }

      // optional int32 skill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weapon_list;
        break;
      }

      // repeated int32 weapon_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_weapon_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weapon_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weapon_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeWeaponResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 ship_id = 3;
  if (has_ship_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ship_id(), output);
  }

  // optional int32 gift = 4;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gift(), output);
  }

  // optional int32 skill = 5;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill(), output);
  }

  // repeated int32 weapon_list = 6;
  for (int i = 0; i < this->weapon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->weapon_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeWeaponResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 ship_id = 3;
  if (has_ship_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ship_id(), target);
  }

  // optional int32 gift = 4;
  if (has_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gift(), target);
  }

  // optional int32 skill = 5;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill(), target);
  }

  // repeated int32 weapon_list = 6;
  for (int i = 0; i < this->weapon_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->weapon_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeWeaponResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 ship_id = 3;
    if (has_ship_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_id());
    }

    // optional int32 gift = 4;
    if (has_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift());
    }

    // optional int32 skill = 5;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

  }
  // repeated int32 weapon_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->weapon_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weapon_list(i));
    }
    total_size += 1 * this->weapon_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeWeaponResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeWeaponResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeWeaponResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeWeaponResp::MergeFrom(const ChangeWeaponResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  weapon_list_.MergeFrom(from.weapon_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_ship_id()) {
      set_ship_id(from.ship_id());
    }
    if (from.has_gift()) {
      set_gift(from.gift());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeWeaponResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeWeaponResp::CopyFrom(const ChangeWeaponResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeWeaponResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ChangeWeaponResp::Swap(ChangeWeaponResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(ship_id_, other->ship_id_);
    std::swap(gift_, other->gift_);
    std::swap(skill_, other->skill_);
    weapon_list_.Swap(&other->weapon_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeWeaponResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeWeaponResp_descriptor_;
  metadata.reflection = ChangeWeaponResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipDevelopeReq::kTypeFieldNumber;
const int ShipDevelopeReq::kShipIdFieldNumber;
#endif  // !_MSC_VER

ShipDevelopeReq::ShipDevelopeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipDevelopeReq::InitAsDefaultInstance() {
}

ShipDevelopeReq::ShipDevelopeReq(const ShipDevelopeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipDevelopeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ship_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipDevelopeReq::~ShipDevelopeReq() {
  SharedDtor();
}

void ShipDevelopeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipDevelopeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipDevelopeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipDevelopeReq_descriptor_;
}

const ShipDevelopeReq& ShipDevelopeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipDevelopeReq* ShipDevelopeReq::default_instance_ = NULL;

ShipDevelopeReq* ShipDevelopeReq::New() const {
  return new ShipDevelopeReq;
}

void ShipDevelopeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ship_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipDevelopeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ship_id;
        break;
      }

      // required int32 ship_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_id_)));
          set_has_ship_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipDevelopeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 ship_id = 2;
  if (has_ship_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ship_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipDevelopeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 ship_id = 2;
  if (has_ship_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ship_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipDevelopeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 ship_id = 2;
    if (has_ship_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipDevelopeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipDevelopeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipDevelopeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipDevelopeReq::MergeFrom(const ShipDevelopeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ship_id()) {
      set_ship_id(from.ship_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipDevelopeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipDevelopeReq::CopyFrom(const ShipDevelopeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipDevelopeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShipDevelopeReq::Swap(ShipDevelopeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ship_id_, other->ship_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipDevelopeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipDevelopeReq_descriptor_;
  metadata.reflection = ShipDevelopeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipDevelopeResp::kResultFieldNumber;
const int ShipDevelopeResp::kUserSyncFieldNumber;
const int ShipDevelopeResp::kShipIdFieldNumber;
const int ShipDevelopeResp::kShipGuidFieldNumber;
#endif  // !_MSC_VER

ShipDevelopeResp::ShipDevelopeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipDevelopeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShipDevelopeResp::ShipDevelopeResp(const ShipDevelopeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipDevelopeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ship_id_ = 0;
  ship_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipDevelopeResp::~ShipDevelopeResp() {
  SharedDtor();
}

void ShipDevelopeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShipDevelopeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipDevelopeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipDevelopeResp_descriptor_;
}

const ShipDevelopeResp& ShipDevelopeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipDevelopeResp* ShipDevelopeResp::default_instance_ = NULL;

ShipDevelopeResp* ShipDevelopeResp::New() const {
  return new ShipDevelopeResp;
}

void ShipDevelopeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    ship_id_ = 0;
    ship_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipDevelopeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ship_id;
        break;
      }

      // optional int32 ship_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_id_)));
          set_has_ship_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ship_guid;
        break;
      }

      // optional int32 ship_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipDevelopeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 ship_id = 3;
  if (has_ship_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ship_id(), output);
  }

  // optional int32 ship_guid = 4;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ship_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipDevelopeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 ship_id = 3;
  if (has_ship_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ship_id(), target);
  }

  // optional int32 ship_guid = 4;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ship_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipDevelopeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 ship_id = 3;
    if (has_ship_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_id());
    }

    // optional int32 ship_guid = 4;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipDevelopeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipDevelopeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipDevelopeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipDevelopeResp::MergeFrom(const ShipDevelopeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_ship_id()) {
      set_ship_id(from.ship_id());
    }
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipDevelopeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipDevelopeResp::CopyFrom(const ShipDevelopeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipDevelopeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ShipDevelopeResp::Swap(ShipDevelopeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(ship_id_, other->ship_id_);
    std::swap(ship_guid_, other->ship_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipDevelopeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipDevelopeResp_descriptor_;
  metadata.reflection = ShipDevelopeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlueprintDevelopeReq::kTypeFieldNumber;
const int BlueprintDevelopeReq::kBlueprintIdFieldNumber;
#endif  // !_MSC_VER

BlueprintDevelopeReq::BlueprintDevelopeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlueprintDevelopeReq::InitAsDefaultInstance() {
}

BlueprintDevelopeReq::BlueprintDevelopeReq(const BlueprintDevelopeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlueprintDevelopeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  blueprint_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlueprintDevelopeReq::~BlueprintDevelopeReq() {
  SharedDtor();
}

void BlueprintDevelopeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlueprintDevelopeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueprintDevelopeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlueprintDevelopeReq_descriptor_;
}

const BlueprintDevelopeReq& BlueprintDevelopeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

BlueprintDevelopeReq* BlueprintDevelopeReq::default_instance_ = NULL;

BlueprintDevelopeReq* BlueprintDevelopeReq::New() const {
  return new BlueprintDevelopeReq;
}

void BlueprintDevelopeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    blueprint_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlueprintDevelopeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blueprint_id;
        break;
      }

      // required int32 blueprint_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blueprint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blueprint_id_)));
          set_has_blueprint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlueprintDevelopeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 blueprint_id = 2;
  if (has_blueprint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blueprint_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlueprintDevelopeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 blueprint_id = 2;
  if (has_blueprint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blueprint_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlueprintDevelopeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 blueprint_id = 2;
    if (has_blueprint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blueprint_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueprintDevelopeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlueprintDevelopeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlueprintDevelopeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlueprintDevelopeReq::MergeFrom(const BlueprintDevelopeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_blueprint_id()) {
      set_blueprint_id(from.blueprint_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlueprintDevelopeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueprintDevelopeReq::CopyFrom(const BlueprintDevelopeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueprintDevelopeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BlueprintDevelopeReq::Swap(BlueprintDevelopeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(blueprint_id_, other->blueprint_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlueprintDevelopeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlueprintDevelopeReq_descriptor_;
  metadata.reflection = BlueprintDevelopeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlueprintDevelopeResp::kResultFieldNumber;
const int BlueprintDevelopeResp::kUserSyncFieldNumber;
const int BlueprintDevelopeResp::kBlueprintIdFieldNumber;
const int BlueprintDevelopeResp::kTypeFieldNumber;
const int BlueprintDevelopeResp::kCritFieldNumber;
#endif  // !_MSC_VER

BlueprintDevelopeResp::BlueprintDevelopeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlueprintDevelopeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

BlueprintDevelopeResp::BlueprintDevelopeResp(const BlueprintDevelopeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlueprintDevelopeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  blueprint_id_ = 0;
  type_ = 0;
  crit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlueprintDevelopeResp::~BlueprintDevelopeResp() {
  SharedDtor();
}

void BlueprintDevelopeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void BlueprintDevelopeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueprintDevelopeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlueprintDevelopeResp_descriptor_;
}

const BlueprintDevelopeResp& BlueprintDevelopeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

BlueprintDevelopeResp* BlueprintDevelopeResp::default_instance_ = NULL;

BlueprintDevelopeResp* BlueprintDevelopeResp::New() const {
  return new BlueprintDevelopeResp;
}

void BlueprintDevelopeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    blueprint_id_ = 0;
    type_ = 0;
    crit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlueprintDevelopeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blueprint_id;
        break;
      }

      // optional int32 blueprint_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blueprint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blueprint_id_)));
          set_has_blueprint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }

      // optional bool crit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlueprintDevelopeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 blueprint_id = 3;
  if (has_blueprint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blueprint_id(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional bool crit = 5;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->crit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlueprintDevelopeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 blueprint_id = 3;
  if (has_blueprint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blueprint_id(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional bool crit = 5;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->crit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlueprintDevelopeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 blueprint_id = 3;
    if (has_blueprint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blueprint_id());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool crit = 5;
    if (has_crit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueprintDevelopeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlueprintDevelopeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlueprintDevelopeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlueprintDevelopeResp::MergeFrom(const BlueprintDevelopeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_blueprint_id()) {
      set_blueprint_id(from.blueprint_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlueprintDevelopeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueprintDevelopeResp::CopyFrom(const BlueprintDevelopeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueprintDevelopeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void BlueprintDevelopeResp::Swap(BlueprintDevelopeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(blueprint_id_, other->blueprint_id_);
    std::swap(type_, other->type_);
    std::swap(crit_, other->crit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlueprintDevelopeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlueprintDevelopeResp_descriptor_;
  metadata.reflection = BlueprintDevelopeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipRemoveReq::kTypeFieldNumber;
const int ShipRemoveReq::kShipGuidFieldNumber;
#endif  // !_MSC_VER

ShipRemoveReq::ShipRemoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipRemoveReq::InitAsDefaultInstance() {
}

ShipRemoveReq::ShipRemoveReq(const ShipRemoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipRemoveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ship_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipRemoveReq::~ShipRemoveReq() {
  SharedDtor();
}

void ShipRemoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipRemoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipRemoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipRemoveReq_descriptor_;
}

const ShipRemoveReq& ShipRemoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipRemoveReq* ShipRemoveReq::default_instance_ = NULL;

ShipRemoveReq* ShipRemoveReq::New() const {
  return new ShipRemoveReq;
}

void ShipRemoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ship_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipRemoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ship_guid;
        break;
      }

      // optional int32 ship_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipRemoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 ship_guid = 2;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ship_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipRemoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 ship_guid = 2;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ship_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipRemoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 ship_guid = 2;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipRemoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipRemoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipRemoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipRemoveReq::MergeFrom(const ShipRemoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipRemoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipRemoveReq::CopyFrom(const ShipRemoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipRemoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShipRemoveReq::Swap(ShipRemoveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ship_guid_, other->ship_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipRemoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipRemoveReq_descriptor_;
  metadata.reflection = ShipRemoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipRemoveResp::kResultFieldNumber;
const int ShipRemoveResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ShipRemoveResp::ShipRemoveResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipRemoveResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShipRemoveResp::ShipRemoveResp(const ShipRemoveResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipRemoveResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipRemoveResp::~ShipRemoveResp() {
  SharedDtor();
}

void ShipRemoveResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShipRemoveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipRemoveResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipRemoveResp_descriptor_;
}

const ShipRemoveResp& ShipRemoveResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipRemoveResp* ShipRemoveResp::default_instance_ = NULL;

ShipRemoveResp* ShipRemoveResp::New() const {
  return new ShipRemoveResp;
}

void ShipRemoveResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipRemoveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipRemoveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipRemoveResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipRemoveResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipRemoveResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipRemoveResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipRemoveResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipRemoveResp::MergeFrom(const ShipRemoveResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipRemoveResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipRemoveResp::CopyFrom(const ShipRemoveResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipRemoveResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ShipRemoveResp::Swap(ShipRemoveResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipRemoveResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipRemoveResp_descriptor_;
  metadata.reflection = ShipRemoveResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponUpgradeReq::kTypeFieldNumber;
const int WeaponUpgradeReq::kGuidFieldNumber;
const int WeaponUpgradeReq::kWeaponIdFieldNumber;
#endif  // !_MSC_VER

WeaponUpgradeReq::WeaponUpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeaponUpgradeReq::InitAsDefaultInstance() {
}

WeaponUpgradeReq::WeaponUpgradeReq(const WeaponUpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponUpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  guid_ = 0;
  weapon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponUpgradeReq::~WeaponUpgradeReq() {
  SharedDtor();
}

void WeaponUpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaponUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponUpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponUpgradeReq_descriptor_;
}

const WeaponUpgradeReq& WeaponUpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

WeaponUpgradeReq* WeaponUpgradeReq::default_instance_ = NULL;

WeaponUpgradeReq* WeaponUpgradeReq::New() const {
  return new WeaponUpgradeReq;
}

void WeaponUpgradeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    guid_ = 0;
    weapon_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guid;
        break;
      }

      // optional int32 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon_id;
        break;
      }

      // optional int32 weapon_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guid(), output);
  }

  // optional int32 weapon_id = 3;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeaponUpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guid(), target);
  }

  // optional int32 weapon_id = 3;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeaponUpgradeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 weapon_id = 3;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponUpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponUpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponUpgradeReq::MergeFrom(const WeaponUpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponUpgradeReq::CopyFrom(const WeaponUpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponUpgradeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WeaponUpgradeReq::Swap(WeaponUpgradeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(guid_, other->guid_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponUpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponUpgradeReq_descriptor_;
  metadata.reflection = WeaponUpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponUpgradeResp::kResultFieldNumber;
const int WeaponUpgradeResp::kUserSyncFieldNumber;
const int WeaponUpgradeResp::kTypeFieldNumber;
const int WeaponUpgradeResp::kGuidFieldNumber;
const int WeaponUpgradeResp::kWeaponIdFieldNumber;
#endif  // !_MSC_VER

WeaponUpgradeResp::WeaponUpgradeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeaponUpgradeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

WeaponUpgradeResp::WeaponUpgradeResp(const WeaponUpgradeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponUpgradeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  type_ = 0;
  guid_ = 0;
  weapon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponUpgradeResp::~WeaponUpgradeResp() {
  SharedDtor();
}

void WeaponUpgradeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void WeaponUpgradeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponUpgradeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponUpgradeResp_descriptor_;
}

const WeaponUpgradeResp& WeaponUpgradeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

WeaponUpgradeResp* WeaponUpgradeResp::default_instance_ = NULL;

WeaponUpgradeResp* WeaponUpgradeResp::New() const {
  return new WeaponUpgradeResp;
}

void WeaponUpgradeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    type_ = 0;
    guid_ = 0;
    weapon_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponUpgradeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guid;
        break;
      }

      // optional int32 guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weapon_id;
        break;
      }

      // optional int32 weapon_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_id_)));
          set_has_weapon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponUpgradeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guid(), output);
  }

  // optional int32 weapon_id = 5;
  if (has_weapon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->weapon_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeaponUpgradeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 guid = 4;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guid(), target);
  }

  // optional int32 weapon_id = 5;
  if (has_weapon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->weapon_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeaponUpgradeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // optional int32 weapon_id = 5;
    if (has_weapon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponUpgradeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponUpgradeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponUpgradeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponUpgradeResp::MergeFrom(const WeaponUpgradeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_weapon_id()) {
      set_weapon_id(from.weapon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponUpgradeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponUpgradeResp::CopyFrom(const WeaponUpgradeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponUpgradeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void WeaponUpgradeResp::Swap(WeaponUpgradeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(type_, other->type_);
    std::swap(guid_, other->guid_);
    std::swap(weapon_id_, other->weapon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponUpgradeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponUpgradeResp_descriptor_;
  metadata.reflection = WeaponUpgradeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipBreakReq::kShipGuidFieldNumber;
#endif  // !_MSC_VER

ShipBreakReq::ShipBreakReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipBreakReq::InitAsDefaultInstance() {
}

ShipBreakReq::ShipBreakReq(const ShipBreakReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipBreakReq::SharedCtor() {
  _cached_size_ = 0;
  ship_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipBreakReq::~ShipBreakReq() {
  SharedDtor();
}

void ShipBreakReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipBreakReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipBreakReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipBreakReq_descriptor_;
}

const ShipBreakReq& ShipBreakReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipBreakReq* ShipBreakReq::default_instance_ = NULL;

ShipBreakReq* ShipBreakReq::New() const {
  return new ShipBreakReq;
}

void ShipBreakReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ship_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipBreakReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ship_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipBreakReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ship_guid = 1;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ship_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipBreakReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ship_guid = 1;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ship_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipBreakReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ship_guid = 1;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipBreakReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipBreakReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipBreakReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipBreakReq::MergeFrom(const ShipBreakReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipBreakReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipBreakReq::CopyFrom(const ShipBreakReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipBreakReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShipBreakReq::Swap(ShipBreakReq* other) {
  if (other != this) {
    std::swap(ship_guid_, other->ship_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipBreakReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipBreakReq_descriptor_;
  metadata.reflection = ShipBreakReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipBreakResp::kResultFieldNumber;
const int ShipBreakResp::kUserSyncFieldNumber;
const int ShipBreakResp::kShipGuidFieldNumber;
const int ShipBreakResp::kShipBreakFieldNumber;
#endif  // !_MSC_VER

ShipBreakResp::ShipBreakResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipBreakResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShipBreakResp::ShipBreakResp(const ShipBreakResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipBreakResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ship_guid_ = 0;
  ship_break_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipBreakResp::~ShipBreakResp() {
  SharedDtor();
}

void ShipBreakResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShipBreakResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipBreakResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipBreakResp_descriptor_;
}

const ShipBreakResp& ShipBreakResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipBreakResp* ShipBreakResp::default_instance_ = NULL;

ShipBreakResp* ShipBreakResp::New() const {
  return new ShipBreakResp;
}

void ShipBreakResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    ship_guid_ = 0;
    ship_break_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipBreakResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ship_guid;
        break;
      }

      // optional int32 ship_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ship_break;
        break;
      }

      // optional int32 ship_break = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_break:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_break_)));
          set_has_ship_break();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipBreakResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 ship_guid = 3;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ship_guid(), output);
  }

  // optional int32 ship_break = 4;
  if (has_ship_break()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ship_break(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipBreakResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 ship_guid = 3;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ship_guid(), target);
  }

  // optional int32 ship_break = 4;
  if (has_ship_break()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ship_break(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipBreakResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 ship_guid = 3;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

    // optional int32 ship_break = 4;
    if (has_ship_break()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_break());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipBreakResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipBreakResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipBreakResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipBreakResp::MergeFrom(const ShipBreakResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
    if (from.has_ship_break()) {
      set_ship_break(from.ship_break());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipBreakResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipBreakResp::CopyFrom(const ShipBreakResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipBreakResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ShipBreakResp::Swap(ShipBreakResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(ship_guid_, other->ship_guid_);
    std::swap(ship_break_, other->ship_break_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipBreakResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipBreakResp_descriptor_;
  metadata.reflection = ShipBreakResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipAddExpReq::kShipGuidFieldNumber;
const int ShipAddExpReq::kItemIdListFieldNumber;
const int ShipAddExpReq::kItemNumListFieldNumber;
#endif  // !_MSC_VER

ShipAddExpReq::ShipAddExpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipAddExpReq::InitAsDefaultInstance() {
}

ShipAddExpReq::ShipAddExpReq(const ShipAddExpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipAddExpReq::SharedCtor() {
  _cached_size_ = 0;
  ship_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipAddExpReq::~ShipAddExpReq() {
  SharedDtor();
}

void ShipAddExpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipAddExpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipAddExpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipAddExpReq_descriptor_;
}

const ShipAddExpReq& ShipAddExpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipAddExpReq* ShipAddExpReq::default_instance_ = NULL;

ShipAddExpReq* ShipAddExpReq::New() const {
  return new ShipAddExpReq;
}

void ShipAddExpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ship_guid_ = 0;
  }
  item_id_list_.Clear();
  item_num_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipAddExpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ship_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id_list;
        break;
      }

      // repeated int32 item_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_item_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id_list;
        if (input->ExpectTag(24)) goto parse_item_num_list;
        break;
      }

      // repeated int32 item_num_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_num_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_num_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipAddExpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ship_guid = 1;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ship_guid(), output);
  }

  // repeated int32 item_id_list = 2;
  for (int i = 0; i < this->item_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->item_id_list(i), output);
  }

  // repeated int32 item_num_list = 3;
  for (int i = 0; i < this->item_num_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_num_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipAddExpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ship_guid = 1;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ship_guid(), target);
  }

  // repeated int32 item_id_list = 2;
  for (int i = 0; i < this->item_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->item_id_list(i), target);
  }

  // repeated int32 item_num_list = 3;
  for (int i = 0; i < this->item_num_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_num_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipAddExpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ship_guid = 1;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

  }
  // repeated int32 item_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id_list(i));
    }
    total_size += 1 * this->item_id_list_size() + data_size;
  }

  // repeated int32 item_num_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_num_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_num_list(i));
    }
    total_size += 1 * this->item_num_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipAddExpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipAddExpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipAddExpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipAddExpReq::MergeFrom(const ShipAddExpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_list_.MergeFrom(from.item_id_list_);
  item_num_list_.MergeFrom(from.item_num_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipAddExpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipAddExpReq::CopyFrom(const ShipAddExpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipAddExpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShipAddExpReq::Swap(ShipAddExpReq* other) {
  if (other != this) {
    std::swap(ship_guid_, other->ship_guid_);
    item_id_list_.Swap(&other->item_id_list_);
    item_num_list_.Swap(&other->item_num_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipAddExpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipAddExpReq_descriptor_;
  metadata.reflection = ShipAddExpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipAddExpResp::kResultFieldNumber;
const int ShipAddExpResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ShipAddExpResp::ShipAddExpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipAddExpResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShipAddExpResp::ShipAddExpResp(const ShipAddExpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipAddExpResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipAddExpResp::~ShipAddExpResp() {
  SharedDtor();
}

void ShipAddExpResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShipAddExpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipAddExpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipAddExpResp_descriptor_;
}

const ShipAddExpResp& ShipAddExpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipAddExpResp* ShipAddExpResp::default_instance_ = NULL;

ShipAddExpResp* ShipAddExpResp::New() const {
  return new ShipAddExpResp;
}

void ShipAddExpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipAddExpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipAddExpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipAddExpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipAddExpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipAddExpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipAddExpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipAddExpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipAddExpResp::MergeFrom(const ShipAddExpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipAddExpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipAddExpResp::CopyFrom(const ShipAddExpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipAddExpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ShipAddExpResp::Swap(ShipAddExpResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipAddExpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipAddExpResp_descriptor_;
  metadata.reflection = ShipAddExpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipFixReq::kTypeFieldNumber;
const int ShipFixReq::kGuidsFieldNumber;
#endif  // !_MSC_VER

ShipFixReq::ShipFixReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipFixReq::InitAsDefaultInstance() {
}

ShipFixReq::ShipFixReq(const ShipFixReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipFixReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipFixReq::~ShipFixReq() {
  SharedDtor();
}

void ShipFixReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipFixReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipFixReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipFixReq_descriptor_;
}

const ShipFixReq& ShipFixReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipFixReq* ShipFixReq::default_instance_ = NULL;

ShipFixReq* ShipFixReq::New() const {
  return new ShipFixReq;
}

void ShipFixReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipFixReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guids;
        break;
      }

      // repeated int32 guids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipFixReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->guids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipFixReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->guids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipFixReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 guids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->guids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guids(i));
    }
    total_size += 1 * this->guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipFixReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipFixReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipFixReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipFixReq::MergeFrom(const ShipFixReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  guids_.MergeFrom(from.guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipFixReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipFixReq::CopyFrom(const ShipFixReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipFixReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShipFixReq::Swap(ShipFixReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    guids_.Swap(&other->guids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipFixReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipFixReq_descriptor_;
  metadata.reflection = ShipFixReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipFixResp::kResultFieldNumber;
const int ShipFixResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ShipFixResp::ShipFixResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipFixResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShipFixResp::ShipFixResp(const ShipFixResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipFixResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipFixResp::~ShipFixResp() {
  SharedDtor();
}

void ShipFixResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShipFixResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipFixResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipFixResp_descriptor_;
}

const ShipFixResp& ShipFixResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipFixResp* ShipFixResp::default_instance_ = NULL;

ShipFixResp* ShipFixResp::New() const {
  return new ShipFixResp;
}

void ShipFixResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipFixResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipFixResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipFixResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipFixResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipFixResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipFixResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipFixResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipFixResp::MergeFrom(const ShipFixResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipFixResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipFixResp::CopyFrom(const ShipFixResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipFixResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ShipFixResp::Swap(ShipFixResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipFixResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipFixResp_descriptor_;
  metadata.reflection = ShipFixResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipAddEnergyExpReq::kShipGuidFieldNumber;
const int ShipAddEnergyExpReq::kResListFieldNumber;
#endif  // !_MSC_VER

ShipAddEnergyExpReq::ShipAddEnergyExpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipAddEnergyExpReq::InitAsDefaultInstance() {
}

ShipAddEnergyExpReq::ShipAddEnergyExpReq(const ShipAddEnergyExpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipAddEnergyExpReq::SharedCtor() {
  _cached_size_ = 0;
  ship_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipAddEnergyExpReq::~ShipAddEnergyExpReq() {
  SharedDtor();
}

void ShipAddEnergyExpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipAddEnergyExpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipAddEnergyExpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipAddEnergyExpReq_descriptor_;
}

const ShipAddEnergyExpReq& ShipAddEnergyExpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipAddEnergyExpReq* ShipAddEnergyExpReq::default_instance_ = NULL;

ShipAddEnergyExpReq* ShipAddEnergyExpReq::New() const {
  return new ShipAddEnergyExpReq;
}

void ShipAddEnergyExpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ship_guid_ = 0;
  }
  res_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipAddEnergyExpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ship_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res_list;
        break;
      }

      // repeated int32 res_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_res_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_res_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipAddEnergyExpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ship_guid = 1;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ship_guid(), output);
  }

  // repeated int32 res_list = 2;
  for (int i = 0; i < this->res_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->res_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipAddEnergyExpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ship_guid = 1;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ship_guid(), target);
  }

  // repeated int32 res_list = 2;
  for (int i = 0; i < this->res_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->res_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipAddEnergyExpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ship_guid = 1;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

  }
  // repeated int32 res_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->res_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->res_list(i));
    }
    total_size += 1 * this->res_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipAddEnergyExpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipAddEnergyExpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipAddEnergyExpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipAddEnergyExpReq::MergeFrom(const ShipAddEnergyExpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  res_list_.MergeFrom(from.res_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipAddEnergyExpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipAddEnergyExpReq::CopyFrom(const ShipAddEnergyExpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipAddEnergyExpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShipAddEnergyExpReq::Swap(ShipAddEnergyExpReq* other) {
  if (other != this) {
    std::swap(ship_guid_, other->ship_guid_);
    res_list_.Swap(&other->res_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipAddEnergyExpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipAddEnergyExpReq_descriptor_;
  metadata.reflection = ShipAddEnergyExpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipAddEnergyExpResp::kResultFieldNumber;
const int ShipAddEnergyExpResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ShipAddEnergyExpResp::ShipAddEnergyExpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipAddEnergyExpResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShipAddEnergyExpResp::ShipAddEnergyExpResp(const ShipAddEnergyExpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipAddEnergyExpResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipAddEnergyExpResp::~ShipAddEnergyExpResp() {
  SharedDtor();
}

void ShipAddEnergyExpResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShipAddEnergyExpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipAddEnergyExpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipAddEnergyExpResp_descriptor_;
}

const ShipAddEnergyExpResp& ShipAddEnergyExpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdWeapon_2eproto();
  return *default_instance_;
}

ShipAddEnergyExpResp* ShipAddEnergyExpResp::default_instance_ = NULL;

ShipAddEnergyExpResp* ShipAddEnergyExpResp::New() const {
  return new ShipAddEnergyExpResp;
}

void ShipAddEnergyExpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipAddEnergyExpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipAddEnergyExpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipAddEnergyExpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipAddEnergyExpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipAddEnergyExpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipAddEnergyExpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipAddEnergyExpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipAddEnergyExpResp::MergeFrom(const ShipAddEnergyExpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipAddEnergyExpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipAddEnergyExpResp::CopyFrom(const ShipAddEnergyExpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipAddEnergyExpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ShipAddEnergyExpResp::Swap(ShipAddEnergyExpResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipAddEnergyExpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipAddEnergyExpResp_descriptor_;
  metadata.reflection = ShipAddEnergyExpResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
