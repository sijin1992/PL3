// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Planet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Planet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlanetRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetCityResUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetCityResUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetCityRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetCityRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetRuins_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetRuins_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetBossUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetBossUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetArmyLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetArmyLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetMark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetMark_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetMailUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetMailUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetArmyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetArmyInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Planet_2eproto() {
  protobuf_AddDesc_Planet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Planet.proto");
  GOOGLE_CHECK(file != NULL);
  PlanetRes_descriptor_ = file->message_type(0);
  static const int PlanetRes_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, cur_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, collect_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, army_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, hasmonster_),
  };
  PlanetRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetRes_descriptor_,
      PlanetRes::default_instance_,
      PlanetRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetRes));
  PlanetCityResUser_descriptor_ = file->message_type(1);
  static const int PlanetCityResUser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityResUser, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityResUser, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityResUser, collect_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityResUser, army_guid_),
  };
  PlanetCityResUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetCityResUser_descriptor_,
      PlanetCityResUser::default_instance_,
      PlanetCityResUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityResUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityResUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetCityResUser));
  PlanetCityRes_descriptor_ = file->message_type(2);
  static const int PlanetCityRes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityRes, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityRes, user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityRes, cur_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityRes, restore_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityRes, groupid_),
  };
  PlanetCityRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetCityRes_descriptor_,
      PlanetCityRes::default_instance_,
      PlanetCityRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCityRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetCityRes));
  PlanetRuins_descriptor_ = file->message_type(3);
  static const int PlanetRuins_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuins, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuins, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuins, need_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuins, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuins, army_guid_),
  };
  PlanetRuins_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetRuins_descriptor_,
      PlanetRuins::default_instance_,
      PlanetRuins_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuins, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuins, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetRuins));
  PlanetBase_descriptor_ = file->message_type(4);
  static const int PlanetBase_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, guarde_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, destroy_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, last_hurt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, last_sub_destroy_value_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, shield_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, shield_time_),
  };
  PlanetBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetBase_descriptor_,
      PlanetBase::default_instance_,
      PlanetBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetBase));
  PlanetBossUser_descriptor_ = file->message_type(5);
  static const int PlanetBossUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBossUser, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBossUser, tech_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBossUser, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBossUser, attack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBossUser, boss_global_key_),
  };
  PlanetBossUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetBossUser_descriptor_,
      PlanetBossUser::default_instance_,
      PlanetBossUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBossUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBossUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetBossUser));
  PlanetBoss_descriptor_ = file->message_type(6);
  static const int PlanetBoss_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBoss, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBoss, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBoss, monster_hp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBoss, user_info_),
  };
  PlanetBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetBoss_descriptor_,
      PlanetBoss::default_instance_,
      PlanetBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetBoss));
  PlanetCity_descriptor_ = file->message_type(7);
  static const int PlanetCity_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, hasmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, monster_hp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, status_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, occupy_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, guarde_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, temp_info_),
  };
  PlanetCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetCity_descriptor_,
      PlanetCity::default_instance_,
      PlanetCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetCity));
  PlanetPoint_descriptor_ = file->message_type(8);
  static const int PlanetPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetPoint, y_),
  };
  PlanetPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetPoint_descriptor_,
      PlanetPoint::default_instance_,
      PlanetPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetPoint));
  PlanetElement_descriptor_ = file->message_type(9);
  static const int PlanetElement_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, global_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, pos_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, res_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, ruins_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, boss_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, city_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, city_res_data_),
  };
  PlanetElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetElement_descriptor_,
      PlanetElement::default_instance_,
      PlanetElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetElement));
  PlanetNode_descriptor_ = file->message_type(10);
  static const int PlanetNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetNode, element_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetNode, army_line_key_list_),
  };
  PlanetNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetNode_descriptor_,
      PlanetNode::default_instance_,
      PlanetNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetNode));
  PlanetArmyLine_descriptor_ = file->message_type(11);
  static const int PlanetArmyLine_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, user_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, node_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, move_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, need_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, sub_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, status_machine_),
  };
  PlanetArmyLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetArmyLine_descriptor_,
      PlanetArmyLine::default_instance_,
      PlanetArmyLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetArmyLine));
  PlanetArmy_descriptor_ = file->message_type(12);
  static const int PlanetArmy_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, army_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, lineup_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, ship_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, status_machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, element_global_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, army_key_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, accompany_army_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, tech_durable_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, next_status_machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, req_army_key_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, mass_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, accompany_begin_time_),
  };
  PlanetArmy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetArmy_descriptor_,
      PlanetArmy::default_instance_,
      PlanetArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetArmy));
  PlanetMark_descriptor_ = file->message_type(13);
  static const int PlanetMark_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMark, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMark, pos_),
  };
  PlanetMark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetMark_descriptor_,
      PlanetMark::default_instance_,
      PlanetMark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetMark));
  PlanetUser_descriptor_ = file->message_type(14);
  static const int PlanetUser_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, army_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, base_global_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, mark_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, attack_me_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, colloct_level_times_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, colloct_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, ruins_level_times_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, fishing_level_times_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, boss_level_times_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, attack_city_win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, attack_win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, base_defense_win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, move_base_times_list_),
  };
  PlanetUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetUser_descriptor_,
      PlanetUser::default_instance_,
      PlanetUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetUser));
  PlanetMailUser_descriptor_ = file->message_type(15);
  static const int PlanetMailUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMailUser, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMailUser, pos_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMailUser, ship_hp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMailUser, ship_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMailUser, pre_ship_energy_level_list_),
  };
  PlanetMailUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetMailUser_descriptor_,
      PlanetMailUser::default_instance_,
      PlanetMailUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMailUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMailUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetMailUser));
  PlanetArmyInfo_descriptor_ = file->message_type(16);
  static const int PlanetArmyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyInfo, my_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyInfo, army_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyInfo, target_element_),
  };
  PlanetArmyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetArmyInfo_descriptor_,
      PlanetArmyInfo::default_instance_,
      PlanetArmyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetArmyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetArmyInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Planet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetRes_descriptor_, &PlanetRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetCityResUser_descriptor_, &PlanetCityResUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetCityRes_descriptor_, &PlanetCityRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetRuins_descriptor_, &PlanetRuins::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetBase_descriptor_, &PlanetBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetBossUser_descriptor_, &PlanetBossUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetBoss_descriptor_, &PlanetBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetCity_descriptor_, &PlanetCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetPoint_descriptor_, &PlanetPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetElement_descriptor_, &PlanetElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetNode_descriptor_, &PlanetNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetArmyLine_descriptor_, &PlanetArmyLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetArmy_descriptor_, &PlanetArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetMark_descriptor_, &PlanetMark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetUser_descriptor_, &PlanetUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetMailUser_descriptor_, &PlanetMailUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetArmyInfo_descriptor_, &PlanetArmyInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Planet_2eproto() {
  delete PlanetRes::default_instance_;
  delete PlanetRes_reflection_;
  delete PlanetCityResUser::default_instance_;
  delete PlanetCityResUser_reflection_;
  delete PlanetCityRes::default_instance_;
  delete PlanetCityRes_reflection_;
  delete PlanetRuins::default_instance_;
  delete PlanetRuins_reflection_;
  delete PlanetBase::default_instance_;
  delete PlanetBase_reflection_;
  delete PlanetBossUser::default_instance_;
  delete PlanetBossUser_reflection_;
  delete PlanetBoss::default_instance_;
  delete PlanetBoss_reflection_;
  delete PlanetCity::default_instance_;
  delete PlanetCity_reflection_;
  delete PlanetPoint::default_instance_;
  delete PlanetPoint_reflection_;
  delete PlanetElement::default_instance_;
  delete PlanetElement_reflection_;
  delete PlanetNode::default_instance_;
  delete PlanetNode_reflection_;
  delete PlanetArmyLine::default_instance_;
  delete PlanetArmyLine_reflection_;
  delete PlanetArmy::default_instance_;
  delete PlanetArmy_reflection_;
  delete PlanetMark::default_instance_;
  delete PlanetMark_reflection_;
  delete PlanetUser::default_instance_;
  delete PlanetUser_reflection_;
  delete PlanetMailUser::default_instance_;
  delete PlanetMailUser_reflection_;
  delete PlanetArmyInfo::default_instance_;
  delete PlanetArmyInfo_reflection_;
}

void protobuf_AddDesc_Planet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_OtherInfo_2eproto();
  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_PvpInfo_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Planet.proto\032\017OtherInfo.proto\032\rAirShip"
    ".proto\032\rPvpInfo.proto\032\nItem.proto\"\221\001\n\tPl"
    "anetRes\022\n\n\002id\030\001 \002(\005\022\023\n\013cur_storage\030\002 \002(\005"
    "\022\021\n\tuser_name\030\003 \001(\t\022\022\n\nbegin_time\030\004 \001(\003\022"
    "\025\n\rcollect_speed\030\005 \001(\005\022\021\n\tarmy_guid\030\006 \001("
    "\005\022\022\n\nhasMonster\030\007 \002(\010\"d\n\021PlanetCityResUs"
    "er\022\021\n\tuser_name\030\001 \002(\t\022\022\n\nbegin_time\030\002 \002("
    "\003\022\025\n\rcollect_speed\030\003 \002(\005\022\021\n\tarmy_guid\030\004 "
    "\002(\005\"\204\001\n\rPlanetCityRes\022\n\n\002id\030\001 \002(\005\022%\n\tuse"
    "r_list\030\002 \003(\0132\022.PlanetCityResUser\022\023\n\013cur_"
    "storage\030\003 \002(\005\022\032\n\022restore_start_time\030\004 \002("
    "\003\022\017\n\007groupid\030\005 \001(\t\"f\n\013PlanetRuins\022\n\n\002id\030"
    "\001 \002(\005\022\022\n\nbegin_time\030\002 \001(\003\022\021\n\tneed_time\030\003"
    " \001(\003\022\021\n\tuser_name\030\004 \001(\t\022\021\n\tarmy_guid\030\005 \001"
    "(\005\"\326\001\n\nPlanetBase\022\021\n\tuser_name\030\001 \002(\t\022\023\n\013"
    "guarde_list\030\002 \003(\t\022\025\n\rdestroy_value\030\003 \002(\005"
    "\022\026\n\016last_hurt_time\030\004 \001(\003\022#\n\033last_sub_des"
    "troy_value_time\030\005 \001(\003\022\034\n\004info\030\006 \001(\0132\016.Ot"
    "herUserInfo\022\031\n\021shield_start_time\030\007 \001(\003\022\023"
    "\n\013shield_time\030\010 \001(\003\"w\n\016PlanetBossUser\022\021\n"
    "\tuser_name\030\001 \002(\t\022\017\n\007tech_id\030\002 \002(\005\022\022\n\nsta"
    "rt_time\030\003 \002(\003\022\024\n\014attack_count\030\004 \002(\005\022\027\n\017b"
    "oss_global_key\030\005 \002(\t\"j\n\nPlanetBoss\022\n\n\002id"
    "\030\001 \002(\005\022\023\n\013create_time\030\002 \002(\003\022\027\n\017monster_h"
    "p_list\030\003 \003(\005\022\"\n\tuser_info\030\004 \001(\0132\017.Planet"
    "BossUser\"\325\001\n\nPlanetCity\022\n\n\002id\030\001 \002(\005\022\022\n\nh"
    "asMonster\030\002 \002(\010\022\027\n\017monster_hp_list\030\003 \003(\005"
    "\022\016\n\006status\030\004 \002(\005\022\031\n\021status_begin_time\030\005 "
    "\002(\003\022\031\n\021occupy_begin_time\030\006 \002(\003\022\017\n\007groupi"
    "d\030\007 \002(\t\022\023\n\013guarde_list\030\010 \003(\t\022\"\n\ttemp_inf"
    "o\030\t \001(\0132\017.OtherGroupInfo\"#\n\013PlanetPoint\022"
    "\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\246\002\n\rPlanetElement\022"
    "\014\n\004guid\030\001 \002(\005\022\022\n\nglobal_key\030\002 \002(\t\022\036\n\010pos"
    "_list\030\003 \003(\0132\014.PlanetPoint\022\014\n\004type\030\004 \002(\005\022"
    "\036\n\tbase_data\030\005 \001(\0132\013.PlanetBase\022\034\n\010res_d"
    "ata\030\006 \001(\0132\n.PlanetRes\022 \n\nruins_data\030\007 \001("
    "\0132\014.PlanetRuins\022\036\n\tboss_data\030\010 \001(\0132\013.Pla"
    "netBoss\022\036\n\tcity_data\030\t \001(\0132\013.PlanetCity\022"
    "%\n\rcity_res_data\030\n \001(\0132\016.PlanetCityRes\"Z"
    "\n\nPlanetNode\022\n\n\002id\030\001 \002(\005\022$\n\014element_list"
    "\030\002 \003(\0132\016.PlanetElement\022\032\n\022army_line_key_"
    "list\030\003 \003(\t\"\272\001\n\016PlanetArmyLine\022\020\n\010user_ke"
    "y\030\001 \002(\t\022\024\n\014node_id_list\030\002 \003(\005\022\037\n\tmove_li"
    "st\030\003 \003(\0132\014.PlanetPoint\022\022\n\nbegin_time\030\004 \002"
    "(\003\022\021\n\tneed_time\030\005 \002(\003\022\020\n\010sub_time\030\006 \002(\003\022"
    "\016\n\006status\030\007 \001(\005\022\026\n\016status_machine\030\010 \001(\005\""
    "\304\003\n\nPlanetArmy\022\014\n\004guid\030\001 \002(\005\022\020\n\010army_key"
    "\030\002 \002(\t\022\016\n\006lineup\030\003 \003(\005\022\021\n\tlineup_hp\030\004 \003("
    "\005\022\033\n\tship_list\030\005 \003(\0132\010.AirShip\022\016\n\006status"
    "\030\006 \002(\005\022\026\n\016status_machine\030\007 \002(\005\022\022\n\nbegin_"
    "time\030\010 \002(\003\022\030\n\titem_list\030\t \003(\0132\005.Item\022\032\n\022"
    "element_global_key\030\n \002(\t\022\035\n\004line\030\013 \001(\0132\017"
    ".PlanetArmyLine\022\025\n\rarmy_key_list\030\014 \003(\t\022\032"
    "\n\022accompany_army_key\030\r \001(\t\022\032\n\022tech_durab"
    "le_param\030\016 \002(\005\022\033\n\023next_status_machine\030\017 "
    "\001(\005\022\031\n\021req_army_key_list\030\020 \003(\t\022\021\n\tmass_t"
    "ime\030\021 \001(\003\022\r\n\005speed\030\022 \002(\005\022\034\n\024accompany_be"
    "gin_time\030\023 \001(\003\"5\n\nPlanetMark\022\014\n\004name\030\001 \002"
    "(\t\022\031\n\003pos\030\002 \002(\0132\014.PlanetPoint\"\261\003\n\nPlanet"
    "User\022\021\n\tuser_name\030\001 \002(\t\022\016\n\006nation\030\002 \002(\005\022"
    "\036\n\tarmy_list\030\003 \003(\0132\013.PlanetArmy\022\027\n\017base_"
    "global_key\030\004 \002(\t\022\036\n\tmark_list\030\005 \003(\0132\013.Pl"
    "anetMark\022\026\n\016attack_me_list\030\006 \003(\t\022 \n\030coll"
    "oct_level_times_list\030\007 \003(\005\022\025\n\rcolloct_co"
    "unt\030\010 \003(\005\022\036\n\026ruins_level_times_list\030\t \003("
    "\005\022 \n\030fishing_level_times_list\030\n \003(\005\022\035\n\025b"
    "oss_level_times_list\030\013 \003(\005\022\035\n\025attack_cit"
    "y_win_times\030\014 \001(\005\022\030\n\020attack_win_times\030\r "
    "\001(\005\022\036\n\026base_defense_win_times\030\016 \001(\005\022\034\n\024m"
    "ove_base_times_list\030\017 \003(\005\"\245\001\n\016PlanetMail"
    "User\022\034\n\004info\030\001 \001(\0132\016.OtherUserInfo\022\036\n\010po"
    "s_list\030\002 \003(\0132\014.PlanetPoint\022\024\n\014ship_hp_li"
    "st\030\004 \003(\005\022\033\n\tship_list\030\005 \003(\0132\010.AirShip\022\"\n"
    "\032pre_ship_energy_level_list\030\006 \003(\005\"t\n\016Pla"
    "netArmyInfo\022\037\n\007my_base\030\001 \002(\0132\016.PlanetEle"
    "ment\022\031\n\004army\030\002 \002(\0132\013.PlanetArmy\022&\n\016targe"
    "t_element\030\003 \002(\0132\016.PlanetElement", 3071);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Planet.proto", &protobuf_RegisterTypes);
  PlanetRes::default_instance_ = new PlanetRes();
  PlanetCityResUser::default_instance_ = new PlanetCityResUser();
  PlanetCityRes::default_instance_ = new PlanetCityRes();
  PlanetRuins::default_instance_ = new PlanetRuins();
  PlanetBase::default_instance_ = new PlanetBase();
  PlanetBossUser::default_instance_ = new PlanetBossUser();
  PlanetBoss::default_instance_ = new PlanetBoss();
  PlanetCity::default_instance_ = new PlanetCity();
  PlanetPoint::default_instance_ = new PlanetPoint();
  PlanetElement::default_instance_ = new PlanetElement();
  PlanetNode::default_instance_ = new PlanetNode();
  PlanetArmyLine::default_instance_ = new PlanetArmyLine();
  PlanetArmy::default_instance_ = new PlanetArmy();
  PlanetMark::default_instance_ = new PlanetMark();
  PlanetUser::default_instance_ = new PlanetUser();
  PlanetMailUser::default_instance_ = new PlanetMailUser();
  PlanetArmyInfo::default_instance_ = new PlanetArmyInfo();
  PlanetRes::default_instance_->InitAsDefaultInstance();
  PlanetCityResUser::default_instance_->InitAsDefaultInstance();
  PlanetCityRes::default_instance_->InitAsDefaultInstance();
  PlanetRuins::default_instance_->InitAsDefaultInstance();
  PlanetBase::default_instance_->InitAsDefaultInstance();
  PlanetBossUser::default_instance_->InitAsDefaultInstance();
  PlanetBoss::default_instance_->InitAsDefaultInstance();
  PlanetCity::default_instance_->InitAsDefaultInstance();
  PlanetPoint::default_instance_->InitAsDefaultInstance();
  PlanetElement::default_instance_->InitAsDefaultInstance();
  PlanetNode::default_instance_->InitAsDefaultInstance();
  PlanetArmyLine::default_instance_->InitAsDefaultInstance();
  PlanetArmy::default_instance_->InitAsDefaultInstance();
  PlanetMark::default_instance_->InitAsDefaultInstance();
  PlanetUser::default_instance_->InitAsDefaultInstance();
  PlanetMailUser::default_instance_->InitAsDefaultInstance();
  PlanetArmyInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Planet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Planet_2eproto {
  StaticDescriptorInitializer_Planet_2eproto() {
    protobuf_AddDesc_Planet_2eproto();
  }
} static_descriptor_initializer_Planet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlanetRes::kIdFieldNumber;
const int PlanetRes::kCurStorageFieldNumber;
const int PlanetRes::kUserNameFieldNumber;
const int PlanetRes::kBeginTimeFieldNumber;
const int PlanetRes::kCollectSpeedFieldNumber;
const int PlanetRes::kArmyGuidFieldNumber;
const int PlanetRes::kHasMonsterFieldNumber;
#endif  // !_MSC_VER

PlanetRes::PlanetRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetRes::InitAsDefaultInstance() {
}

PlanetRes::PlanetRes(const PlanetRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRes::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_storage_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_time_ = GOOGLE_LONGLONG(0);
  collect_speed_ = 0;
  army_guid_ = 0;
  hasmonster_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRes::~PlanetRes() {
  SharedDtor();
}

void PlanetRes::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void PlanetRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRes_descriptor_;
}

const PlanetRes& PlanetRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetRes* PlanetRes::default_instance_ = NULL;

PlanetRes* PlanetRes::New() const {
  return new PlanetRes;
}

void PlanetRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_storage_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    begin_time_ = GOOGLE_LONGLONG(0);
    collect_speed_ = 0;
    army_guid_ = 0;
    hasmonster_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_storage;
        break;
      }

      // required int32 cur_storage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_storage_)));
          set_has_cur_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_begin_time;
        break;
      }

      // optional int64 begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_collect_speed;
        break;
      }

      // optional int32 collect_speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_speed_)));
          set_has_collect_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_army_guid;
        break;
      }

      // optional int32 army_guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &army_guid_)));
          set_has_army_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasMonster;
        break;
      }

      // required bool hasMonster = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmonster_)));
          set_has_hasmonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 cur_storage = 2;
  if (has_cur_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_storage(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional int64 begin_time = 4;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begin_time(), output);
  }

  // optional int32 collect_speed = 5;
  if (has_collect_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->collect_speed(), output);
  }

  // optional int32 army_guid = 6;
  if (has_army_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->army_guid(), output);
  }

  // required bool hasMonster = 7;
  if (has_hasmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hasmonster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 cur_storage = 2;
  if (has_cur_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_storage(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional int64 begin_time = 4;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begin_time(), target);
  }

  // optional int32 collect_speed = 5;
  if (has_collect_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->collect_speed(), target);
  }

  // optional int32 army_guid = 6;
  if (has_army_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->army_guid(), target);
  }

  // required bool hasMonster = 7;
  if (has_hasmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hasmonster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 cur_storage = 2;
    if (has_cur_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_storage());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int64 begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int32 collect_speed = 5;
    if (has_collect_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_speed());
    }

    // optional int32 army_guid = 6;
    if (has_army_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->army_guid());
    }

    // required bool hasMonster = 7;
    if (has_hasmonster()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetRes::MergeFrom(const PlanetRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur_storage()) {
      set_cur_storage(from.cur_storage());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_collect_speed()) {
      set_collect_speed(from.collect_speed());
    }
    if (from.has_army_guid()) {
      set_army_guid(from.army_guid());
    }
    if (from.has_hasmonster()) {
      set_hasmonster(from.hasmonster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetRes::CopyFrom(const PlanetRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  return true;
}

void PlanetRes::Swap(PlanetRes* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_storage_, other->cur_storage_);
    std::swap(user_name_, other->user_name_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(collect_speed_, other->collect_speed_);
    std::swap(army_guid_, other->army_guid_);
    std::swap(hasmonster_, other->hasmonster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetRes_descriptor_;
  metadata.reflection = PlanetRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetCityResUser::kUserNameFieldNumber;
const int PlanetCityResUser::kBeginTimeFieldNumber;
const int PlanetCityResUser::kCollectSpeedFieldNumber;
const int PlanetCityResUser::kArmyGuidFieldNumber;
#endif  // !_MSC_VER

PlanetCityResUser::PlanetCityResUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetCityResUser::InitAsDefaultInstance() {
}

PlanetCityResUser::PlanetCityResUser(const PlanetCityResUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCityResUser::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_time_ = GOOGLE_LONGLONG(0);
  collect_speed_ = 0;
  army_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCityResUser::~PlanetCityResUser() {
  SharedDtor();
}

void PlanetCityResUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void PlanetCityResUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetCityResUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetCityResUser_descriptor_;
}

const PlanetCityResUser& PlanetCityResUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetCityResUser* PlanetCityResUser::default_instance_ = NULL;

PlanetCityResUser* PlanetCityResUser::New() const {
  return new PlanetCityResUser;
}

void PlanetCityResUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    begin_time_ = GOOGLE_LONGLONG(0);
    collect_speed_ = 0;
    army_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetCityResUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // required int64 begin_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_collect_speed;
        break;
      }

      // required int32 collect_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collect_speed_)));
          set_has_collect_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_army_guid;
        break;
      }

      // required int32 army_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &army_guid_)));
          set_has_army_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCityResUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int64 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begin_time(), output);
  }

  // required int32 collect_speed = 3;
  if (has_collect_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->collect_speed(), output);
  }

  // required int32 army_guid = 4;
  if (has_army_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->army_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetCityResUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required int64 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begin_time(), target);
  }

  // required int32 collect_speed = 3;
  if (has_collect_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->collect_speed(), target);
  }

  // required int32 army_guid = 4;
  if (has_army_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->army_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetCityResUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int64 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // required int32 collect_speed = 3;
    if (has_collect_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collect_speed());
    }

    // required int32 army_guid = 4;
    if (has_army_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->army_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCityResUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetCityResUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetCityResUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetCityResUser::MergeFrom(const PlanetCityResUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_collect_speed()) {
      set_collect_speed(from.collect_speed());
    }
    if (from.has_army_guid()) {
      set_army_guid(from.army_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetCityResUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetCityResUser::CopyFrom(const PlanetCityResUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCityResUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PlanetCityResUser::Swap(PlanetCityResUser* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(collect_speed_, other->collect_speed_);
    std::swap(army_guid_, other->army_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetCityResUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetCityResUser_descriptor_;
  metadata.reflection = PlanetCityResUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetCityRes::kIdFieldNumber;
const int PlanetCityRes::kUserListFieldNumber;
const int PlanetCityRes::kCurStorageFieldNumber;
const int PlanetCityRes::kRestoreStartTimeFieldNumber;
const int PlanetCityRes::kGroupidFieldNumber;
#endif  // !_MSC_VER

PlanetCityRes::PlanetCityRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetCityRes::InitAsDefaultInstance() {
}

PlanetCityRes::PlanetCityRes(const PlanetCityRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCityRes::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_storage_ = 0;
  restore_start_time_ = GOOGLE_LONGLONG(0);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCityRes::~PlanetCityRes() {
  SharedDtor();
}

void PlanetCityRes::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void PlanetCityRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetCityRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetCityRes_descriptor_;
}

const PlanetCityRes& PlanetCityRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetCityRes* PlanetCityRes::default_instance_ = NULL;

PlanetCityRes* PlanetCityRes::New() const {
  return new PlanetCityRes;
}

void PlanetCityRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_storage_ = 0;
    restore_start_time_ = GOOGLE_LONGLONG(0);
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetCityRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        break;
      }

      // repeated .PlanetCityResUser user_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        if (input->ExpectTag(24)) goto parse_cur_storage;
        break;
      }

      // required int32 cur_storage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_storage_)));
          set_has_cur_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_restore_start_time;
        break;
      }

      // required int64 restore_start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restore_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restore_start_time_)));
          set_has_restore_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_groupid;
        break;
      }

      // optional string groupid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCityRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .PlanetCityResUser user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_list(i), output);
  }

  // required int32 cur_storage = 3;
  if (has_cur_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_storage(), output);
  }

  // required int64 restore_start_time = 4;
  if (has_restore_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->restore_start_time(), output);
  }

  // optional string groupid = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetCityRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .PlanetCityResUser user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_list(i), target);
  }

  // required int32 cur_storage = 3;
  if (has_cur_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_storage(), target);
  }

  // required int64 restore_start_time = 4;
  if (has_restore_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->restore_start_time(), target);
  }

  // optional string groupid = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetCityRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 cur_storage = 3;
    if (has_cur_storage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_storage());
    }

    // required int64 restore_start_time = 4;
    if (has_restore_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->restore_start_time());
    }

    // optional string groupid = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  // repeated .PlanetCityResUser user_list = 2;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCityRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetCityRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetCityRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetCityRes::MergeFrom(const PlanetCityRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur_storage()) {
      set_cur_storage(from.cur_storage());
    }
    if (from.has_restore_start_time()) {
      set_restore_start_time(from.restore_start_time());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetCityRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetCityRes::CopyFrom(const PlanetCityRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCityRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  for (int i = 0; i < user_list_size(); i++) {
    if (!this->user_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetCityRes::Swap(PlanetCityRes* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    user_list_.Swap(&other->user_list_);
    std::swap(cur_storage_, other->cur_storage_);
    std::swap(restore_start_time_, other->restore_start_time_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetCityRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetCityRes_descriptor_;
  metadata.reflection = PlanetCityRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRuins::kIdFieldNumber;
const int PlanetRuins::kBeginTimeFieldNumber;
const int PlanetRuins::kNeedTimeFieldNumber;
const int PlanetRuins::kUserNameFieldNumber;
const int PlanetRuins::kArmyGuidFieldNumber;
#endif  // !_MSC_VER

PlanetRuins::PlanetRuins()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetRuins::InitAsDefaultInstance() {
}

PlanetRuins::PlanetRuins(const PlanetRuins& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRuins::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  begin_time_ = GOOGLE_LONGLONG(0);
  need_time_ = GOOGLE_LONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  army_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRuins::~PlanetRuins() {
  SharedDtor();
}

void PlanetRuins::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void PlanetRuins::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetRuins::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRuins_descriptor_;
}

const PlanetRuins& PlanetRuins::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetRuins* PlanetRuins::default_instance_ = NULL;

PlanetRuins* PlanetRuins::New() const {
  return new PlanetRuins;
}

void PlanetRuins::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    begin_time_ = GOOGLE_LONGLONG(0);
    need_time_ = GOOGLE_LONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    army_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetRuins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }

      // optional int64 begin_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_time;
        break;
      }

      // optional int64 need_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &need_time_)));
          set_has_need_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_name;
        break;
      }

      // optional string user_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_army_guid;
        break;
      }

      // optional int32 army_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &army_guid_)));
          set_has_army_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRuins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begin_time(), output);
  }

  // optional int64 need_time = 3;
  if (has_need_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->need_time(), output);
  }

  // optional string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_name(), output);
  }

  // optional int32 army_guid = 5;
  if (has_army_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->army_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetRuins::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begin_time(), target);
  }

  // optional int64 need_time = 3;
  if (has_need_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->need_time(), target);
  }

  // optional string user_name = 4;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_name(), target);
  }

  // optional int32 army_guid = 5;
  if (has_army_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->army_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetRuins::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // optional int64 need_time = 3;
    if (has_need_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->need_time());
    }

    // optional string user_name = 4;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int32 army_guid = 5;
    if (has_army_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->army_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRuins::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetRuins* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetRuins*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetRuins::MergeFrom(const PlanetRuins& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_need_time()) {
      set_need_time(from.need_time());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_army_guid()) {
      set_army_guid(from.army_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetRuins::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetRuins::CopyFrom(const PlanetRuins& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRuins::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetRuins::Swap(PlanetRuins* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(need_time_, other->need_time_);
    std::swap(user_name_, other->user_name_);
    std::swap(army_guid_, other->army_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetRuins::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetRuins_descriptor_;
  metadata.reflection = PlanetRuins_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetBase::kUserNameFieldNumber;
const int PlanetBase::kGuardeListFieldNumber;
const int PlanetBase::kDestroyValueFieldNumber;
const int PlanetBase::kLastHurtTimeFieldNumber;
const int PlanetBase::kLastSubDestroyValueTimeFieldNumber;
const int PlanetBase::kInfoFieldNumber;
const int PlanetBase::kShieldStartTimeFieldNumber;
const int PlanetBase::kShieldTimeFieldNumber;
#endif  // !_MSC_VER

PlanetBase::PlanetBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetBase::InitAsDefaultInstance() {
  info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
}

PlanetBase::PlanetBase(const PlanetBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetBase::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destroy_value_ = 0;
  last_hurt_time_ = GOOGLE_LONGLONG(0);
  last_sub_destroy_value_time_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  shield_start_time_ = GOOGLE_LONGLONG(0);
  shield_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetBase::~PlanetBase() {
  SharedDtor();
}

void PlanetBase::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void PlanetBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetBase_descriptor_;
}

const PlanetBase& PlanetBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetBase* PlanetBase::default_instance_ = NULL;

PlanetBase* PlanetBase::New() const {
  return new PlanetBase;
}

void PlanetBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    destroy_value_ = 0;
    last_hurt_time_ = GOOGLE_LONGLONG(0);
    last_sub_destroy_value_time_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::OtherUserInfo::Clear();
    }
    shield_start_time_ = GOOGLE_LONGLONG(0);
    shield_time_ = GOOGLE_LONGLONG(0);
  }
  guarde_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guarde_list;
        break;
      }

      // repeated string guarde_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guarde_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guarde_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guarde_list(this->guarde_list_size() - 1).data(),
            this->guarde_list(this->guarde_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guarde_list;
        if (input->ExpectTag(24)) goto parse_destroy_value;
        break;
      }

      // required int32 destroy_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destroy_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destroy_value_)));
          set_has_destroy_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_hurt_time;
        break;
      }

      // optional int64 last_hurt_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_hurt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_hurt_time_)));
          set_has_last_hurt_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_sub_destroy_value_time;
        break;
      }

      // optional int64 last_sub_destroy_value_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sub_destroy_value_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_sub_destroy_value_time_)));
          set_has_last_sub_destroy_value_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // optional .OtherUserInfo info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_shield_start_time;
        break;
      }

      // optional int64 shield_start_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shield_start_time_)));
          set_has_shield_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_shield_time;
        break;
      }

      // optional int64 shield_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shield_time_)));
          set_has_shield_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // repeated string guarde_list = 2;
  for (int i = 0; i < this->guarde_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->guarde_list(i).data(), this->guarde_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guarde_list(i), output);
  }

  // required int32 destroy_value = 3;
  if (has_destroy_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->destroy_value(), output);
  }

  // optional int64 last_hurt_time = 4;
  if (has_last_hurt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_hurt_time(), output);
  }

  // optional int64 last_sub_destroy_value_time = 5;
  if (has_last_sub_destroy_value_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_sub_destroy_value_time(), output);
  }

  // optional .OtherUserInfo info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info(), output);
  }

  // optional int64 shield_start_time = 7;
  if (has_shield_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->shield_start_time(), output);
  }

  // optional int64 shield_time = 8;
  if (has_shield_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->shield_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // repeated string guarde_list = 2;
  for (int i = 0; i < this->guarde_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guarde_list(i).data(), this->guarde_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->guarde_list(i), target);
  }

  // required int32 destroy_value = 3;
  if (has_destroy_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->destroy_value(), target);
  }

  // optional int64 last_hurt_time = 4;
  if (has_last_hurt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->last_hurt_time(), target);
  }

  // optional int64 last_sub_destroy_value_time = 5;
  if (has_last_sub_destroy_value_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_sub_destroy_value_time(), target);
  }

  // optional .OtherUserInfo info = 6;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info(), target);
  }

  // optional int64 shield_start_time = 7;
  if (has_shield_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->shield_start_time(), target);
  }

  // optional int64 shield_time = 8;
  if (has_shield_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->shield_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 destroy_value = 3;
    if (has_destroy_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destroy_value());
    }

    // optional int64 last_hurt_time = 4;
    if (has_last_hurt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_hurt_time());
    }

    // optional int64 last_sub_destroy_value_time = 5;
    if (has_last_sub_destroy_value_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_sub_destroy_value_time());
    }

    // optional .OtherUserInfo info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int64 shield_start_time = 7;
    if (has_shield_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shield_start_time());
    }

    // optional int64 shield_time = 8;
    if (has_shield_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shield_time());
    }

  }
  // repeated string guarde_list = 2;
  total_size += 1 * this->guarde_list_size();
  for (int i = 0; i < this->guarde_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guarde_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetBase::MergeFrom(const PlanetBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  guarde_list_.MergeFrom(from.guarde_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_destroy_value()) {
      set_destroy_value(from.destroy_value());
    }
    if (from.has_last_hurt_time()) {
      set_last_hurt_time(from.last_hurt_time());
    }
    if (from.has_last_sub_destroy_value_time()) {
      set_last_sub_destroy_value_time(from.last_sub_destroy_value_time());
    }
    if (from.has_info()) {
      mutable_info()->::OtherUserInfo::MergeFrom(from.info());
    }
    if (from.has_shield_start_time()) {
      set_shield_start_time(from.shield_start_time());
    }
    if (from.has_shield_time()) {
      set_shield_time(from.shield_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetBase::CopyFrom(const PlanetBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void PlanetBase::Swap(PlanetBase* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    guarde_list_.Swap(&other->guarde_list_);
    std::swap(destroy_value_, other->destroy_value_);
    std::swap(last_hurt_time_, other->last_hurt_time_);
    std::swap(last_sub_destroy_value_time_, other->last_sub_destroy_value_time_);
    std::swap(info_, other->info_);
    std::swap(shield_start_time_, other->shield_start_time_);
    std::swap(shield_time_, other->shield_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetBase_descriptor_;
  metadata.reflection = PlanetBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetBossUser::kUserNameFieldNumber;
const int PlanetBossUser::kTechIdFieldNumber;
const int PlanetBossUser::kStartTimeFieldNumber;
const int PlanetBossUser::kAttackCountFieldNumber;
const int PlanetBossUser::kBossGlobalKeyFieldNumber;
#endif  // !_MSC_VER

PlanetBossUser::PlanetBossUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetBossUser::InitAsDefaultInstance() {
}

PlanetBossUser::PlanetBossUser(const PlanetBossUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetBossUser::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tech_id_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  attack_count_ = 0;
  boss_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetBossUser::~PlanetBossUser() {
  SharedDtor();
}

void PlanetBossUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (boss_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete boss_global_key_;
  }
  if (this != default_instance_) {
  }
}

void PlanetBossUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetBossUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetBossUser_descriptor_;
}

const PlanetBossUser& PlanetBossUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetBossUser* PlanetBossUser::default_instance_ = NULL;

PlanetBossUser* PlanetBossUser::New() const {
  return new PlanetBossUser;
}

void PlanetBossUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    tech_id_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    attack_count_ = 0;
    if (has_boss_global_key()) {
      if (boss_global_key_ != &::google::protobuf::internal::kEmptyString) {
        boss_global_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetBossUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tech_id;
        break;
      }

      // required int32 tech_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tech_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack_count;
        break;
      }

      // required int32 attack_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_boss_global_key;
        break;
      }

      // required string boss_global_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boss_global_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boss_global_key().data(), this->boss_global_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetBossUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 tech_id = 2;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tech_id(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // required int32 attack_count = 4;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack_count(), output);
  }

  // required string boss_global_key = 5;
  if (has_boss_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_global_key().data(), this->boss_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->boss_global_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetBossUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required int32 tech_id = 2;
  if (has_tech_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tech_id(), target);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // required int32 attack_count = 4;
  if (has_attack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attack_count(), target);
  }

  // required string boss_global_key = 5;
  if (has_boss_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boss_global_key().data(), this->boss_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->boss_global_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetBossUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 tech_id = 2;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int32 attack_count = 4;
    if (has_attack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_count());
    }

    // required string boss_global_key = 5;
    if (has_boss_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boss_global_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetBossUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetBossUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetBossUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetBossUser::MergeFrom(const PlanetBossUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
    if (from.has_boss_global_key()) {
      set_boss_global_key(from.boss_global_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetBossUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetBossUser::CopyFrom(const PlanetBossUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetBossUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PlanetBossUser::Swap(PlanetBossUser* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(tech_id_, other->tech_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(attack_count_, other->attack_count_);
    std::swap(boss_global_key_, other->boss_global_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetBossUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetBossUser_descriptor_;
  metadata.reflection = PlanetBossUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetBoss::kIdFieldNumber;
const int PlanetBoss::kCreateTimeFieldNumber;
const int PlanetBoss::kMonsterHpListFieldNumber;
const int PlanetBoss::kUserInfoFieldNumber;
#endif  // !_MSC_VER

PlanetBoss::PlanetBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetBoss::InitAsDefaultInstance() {
  user_info_ = const_cast< ::PlanetBossUser*>(&::PlanetBossUser::default_instance());
}

PlanetBoss::PlanetBoss(const PlanetBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetBoss::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetBoss::~PlanetBoss() {
  SharedDtor();
}

void PlanetBoss::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
  }
}

void PlanetBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetBoss_descriptor_;
}

const PlanetBoss& PlanetBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetBoss* PlanetBoss::default_instance_ = NULL;

PlanetBoss* PlanetBoss::New() const {
  return new PlanetBoss;
}

void PlanetBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    create_time_ = GOOGLE_LONGLONG(0);
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::PlanetBossUser::Clear();
    }
  }
  monster_hp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // required int64 create_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_hp_list;
        break;
      }

      // repeated int32 monster_hp_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_monster_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_hp_list;
        if (input->ExpectTag(34)) goto parse_user_info;
        break;
      }

      // optional .PlanetBossUser user_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->create_time(), output);
  }

  // repeated int32 monster_hp_list = 3;
  for (int i = 0; i < this->monster_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->monster_hp_list(i), output);
  }

  // optional .PlanetBossUser user_info = 4;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 create_time = 2;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->create_time(), target);
  }

  // repeated int32 monster_hp_list = 3;
  for (int i = 0; i < this->monster_hp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->monster_hp_list(i), target);
  }

  // optional .PlanetBossUser user_info = 4;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional .PlanetBossUser user_info = 4;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  // repeated int32 monster_hp_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_hp_list(i));
    }
    total_size += 1 * this->monster_hp_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetBoss::MergeFrom(const PlanetBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_hp_list_.MergeFrom(from.monster_hp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::PlanetBossUser::MergeFrom(from.user_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetBoss::CopyFrom(const PlanetBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetBoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void PlanetBoss::Swap(PlanetBoss* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(create_time_, other->create_time_);
    monster_hp_list_.Swap(&other->monster_hp_list_);
    std::swap(user_info_, other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetBoss_descriptor_;
  metadata.reflection = PlanetBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetCity::kIdFieldNumber;
const int PlanetCity::kHasMonsterFieldNumber;
const int PlanetCity::kMonsterHpListFieldNumber;
const int PlanetCity::kStatusFieldNumber;
const int PlanetCity::kStatusBeginTimeFieldNumber;
const int PlanetCity::kOccupyBeginTimeFieldNumber;
const int PlanetCity::kGroupidFieldNumber;
const int PlanetCity::kGuardeListFieldNumber;
const int PlanetCity::kTempInfoFieldNumber;
#endif  // !_MSC_VER

PlanetCity::PlanetCity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetCity::InitAsDefaultInstance() {
  temp_info_ = const_cast< ::OtherGroupInfo*>(&::OtherGroupInfo::default_instance());
}

PlanetCity::PlanetCity(const PlanetCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hasmonster_ = false;
  status_ = 0;
  status_begin_time_ = GOOGLE_LONGLONG(0);
  occupy_begin_time_ = GOOGLE_LONGLONG(0);
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  temp_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCity::~PlanetCity() {
  SharedDtor();
}

void PlanetCity::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
    delete temp_info_;
  }
}

void PlanetCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetCity_descriptor_;
}

const PlanetCity& PlanetCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetCity* PlanetCity::default_instance_ = NULL;

PlanetCity* PlanetCity::New() const {
  return new PlanetCity;
}

void PlanetCity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hasmonster_ = false;
    status_ = 0;
    status_begin_time_ = GOOGLE_LONGLONG(0);
    occupy_begin_time_ = GOOGLE_LONGLONG(0);
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_temp_info()) {
      if (temp_info_ != NULL) temp_info_->::OtherGroupInfo::Clear();
    }
  }
  monster_hp_list_.Clear();
  guarde_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasMonster;
        break;
      }

      // required bool hasMonster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmonster_)));
          set_has_hasmonster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_hp_list;
        break;
      }

      // repeated int32 monster_hp_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_monster_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_hp_list;
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status_begin_time;
        break;
      }

      // required int64 status_begin_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_begin_time_)));
          set_has_status_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_occupy_begin_time;
        break;
      }

      // required int64 occupy_begin_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &occupy_begin_time_)));
          set_has_occupy_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_groupid;
        break;
      }

      // required string groupid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_guarde_list;
        break;
      }

      // repeated string guarde_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guarde_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guarde_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guarde_list(this->guarde_list_size() - 1).data(),
            this->guarde_list(this->guarde_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_guarde_list;
        if (input->ExpectTag(74)) goto parse_temp_info;
        break;
      }

      // optional .OtherGroupInfo temp_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool hasMonster = 2;
  if (has_hasmonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasmonster(), output);
  }

  // repeated int32 monster_hp_list = 3;
  for (int i = 0; i < this->monster_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->monster_hp_list(i), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required int64 status_begin_time = 5;
  if (has_status_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->status_begin_time(), output);
  }

  // required int64 occupy_begin_time = 6;
  if (has_occupy_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->occupy_begin_time(), output);
  }

  // required string groupid = 7;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->groupid(), output);
  }

  // repeated string guarde_list = 8;
  for (int i = 0; i < this->guarde_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->guarde_list(i).data(), this->guarde_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->guarde_list(i), output);
  }

  // optional .OtherGroupInfo temp_info = 9;
  if (has_temp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->temp_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool hasMonster = 2;
  if (has_hasmonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasmonster(), target);
  }

  // repeated int32 monster_hp_list = 3;
  for (int i = 0; i < this->monster_hp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->monster_hp_list(i), target);
  }

  // required int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // required int64 status_begin_time = 5;
  if (has_status_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->status_begin_time(), target);
  }

  // required int64 occupy_begin_time = 6;
  if (has_occupy_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->occupy_begin_time(), target);
  }

  // required string groupid = 7;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->groupid(), target);
  }

  // repeated string guarde_list = 8;
  for (int i = 0; i < this->guarde_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guarde_list(i).data(), this->guarde_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->guarde_list(i), target);
  }

  // optional .OtherGroupInfo temp_info = 9;
  if (has_temp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->temp_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool hasMonster = 2;
    if (has_hasmonster()) {
      total_size += 1 + 1;
    }

    // required int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int64 status_begin_time = 5;
    if (has_status_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status_begin_time());
    }

    // required int64 occupy_begin_time = 6;
    if (has_occupy_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->occupy_begin_time());
    }

    // required string groupid = 7;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .OtherGroupInfo temp_info = 9;
    if (has_temp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->temp_info());
    }

  }
  // repeated int32 monster_hp_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_hp_list(i));
    }
    total_size += 1 * this->monster_hp_list_size() + data_size;
  }

  // repeated string guarde_list = 8;
  total_size += 1 * this->guarde_list_size();
  for (int i = 0; i < this->guarde_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guarde_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetCity::MergeFrom(const PlanetCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_hp_list_.MergeFrom(from.monster_hp_list_);
  guarde_list_.MergeFrom(from.guarde_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hasmonster()) {
      set_hasmonster(from.hasmonster());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_status_begin_time()) {
      set_status_begin_time(from.status_begin_time());
    }
    if (from.has_occupy_begin_time()) {
      set_occupy_begin_time(from.occupy_begin_time());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_temp_info()) {
      mutable_temp_info()->::OtherGroupInfo::MergeFrom(from.temp_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetCity::CopyFrom(const PlanetCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007b) != 0x0000007b) return false;

  if (has_temp_info()) {
    if (!this->temp_info().IsInitialized()) return false;
  }
  return true;
}

void PlanetCity::Swap(PlanetCity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hasmonster_, other->hasmonster_);
    monster_hp_list_.Swap(&other->monster_hp_list_);
    std::swap(status_, other->status_);
    std::swap(status_begin_time_, other->status_begin_time_);
    std::swap(occupy_begin_time_, other->occupy_begin_time_);
    std::swap(groupid_, other->groupid_);
    guarde_list_.Swap(&other->guarde_list_);
    std::swap(temp_info_, other->temp_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetCity_descriptor_;
  metadata.reflection = PlanetCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetPoint::kXFieldNumber;
const int PlanetPoint::kYFieldNumber;
#endif  // !_MSC_VER

PlanetPoint::PlanetPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetPoint::InitAsDefaultInstance() {
}

PlanetPoint::PlanetPoint(const PlanetPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetPoint::~PlanetPoint() {
  SharedDtor();
}

void PlanetPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlanetPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetPoint_descriptor_;
}

const PlanetPoint& PlanetPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetPoint* PlanetPoint::default_instance_ = NULL;

PlanetPoint* PlanetPoint::New() const {
  return new PlanetPoint;
}

void PlanetPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetPoint::MergeFrom(const PlanetPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetPoint::CopyFrom(const PlanetPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlanetPoint::Swap(PlanetPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetPoint_descriptor_;
  metadata.reflection = PlanetPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetElement::kGuidFieldNumber;
const int PlanetElement::kGlobalKeyFieldNumber;
const int PlanetElement::kPosListFieldNumber;
const int PlanetElement::kTypeFieldNumber;
const int PlanetElement::kBaseDataFieldNumber;
const int PlanetElement::kResDataFieldNumber;
const int PlanetElement::kRuinsDataFieldNumber;
const int PlanetElement::kBossDataFieldNumber;
const int PlanetElement::kCityDataFieldNumber;
const int PlanetElement::kCityResDataFieldNumber;
#endif  // !_MSC_VER

PlanetElement::PlanetElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetElement::InitAsDefaultInstance() {
  base_data_ = const_cast< ::PlanetBase*>(&::PlanetBase::default_instance());
  res_data_ = const_cast< ::PlanetRes*>(&::PlanetRes::default_instance());
  ruins_data_ = const_cast< ::PlanetRuins*>(&::PlanetRuins::default_instance());
  boss_data_ = const_cast< ::PlanetBoss*>(&::PlanetBoss::default_instance());
  city_data_ = const_cast< ::PlanetCity*>(&::PlanetCity::default_instance());
  city_res_data_ = const_cast< ::PlanetCityRes*>(&::PlanetCityRes::default_instance());
}

PlanetElement::PlanetElement(const PlanetElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetElement::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  base_data_ = NULL;
  res_data_ = NULL;
  ruins_data_ = NULL;
  boss_data_ = NULL;
  city_data_ = NULL;
  city_res_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetElement::~PlanetElement() {
  SharedDtor();
}

void PlanetElement::SharedDtor() {
  if (global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete global_key_;
  }
  if (this != default_instance_) {
    delete base_data_;
    delete res_data_;
    delete ruins_data_;
    delete boss_data_;
    delete city_data_;
    delete city_res_data_;
  }
}

void PlanetElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetElement_descriptor_;
}

const PlanetElement& PlanetElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetElement* PlanetElement::default_instance_ = NULL;

PlanetElement* PlanetElement::New() const {
  return new PlanetElement;
}

void PlanetElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
    if (has_global_key()) {
      if (global_key_ != &::google::protobuf::internal::kEmptyString) {
        global_key_->clear();
      }
    }
    type_ = 0;
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::PlanetBase::Clear();
    }
    if (has_res_data()) {
      if (res_data_ != NULL) res_data_->::PlanetRes::Clear();
    }
    if (has_ruins_data()) {
      if (ruins_data_ != NULL) ruins_data_->::PlanetRuins::Clear();
    }
    if (has_boss_data()) {
      if (boss_data_ != NULL) boss_data_->::PlanetBoss::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_city_data()) {
      if (city_data_ != NULL) city_data_->::PlanetCity::Clear();
    }
    if (has_city_res_data()) {
      if (city_res_data_ != NULL) city_res_data_->::PlanetCityRes::Clear();
    }
  }
  pos_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_global_key;
        break;
      }

      // required string global_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->global_key().data(), this->global_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos_list;
        break;
      }

      // repeated .PlanetPoint pos_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos_list;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_base_data;
        break;
      }

      // optional .PlanetBase base_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_res_data;
        break;
      }

      // optional .PlanetRes res_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ruins_data;
        break;
      }

      // optional .PlanetRuins ruins_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ruins_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ruins_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boss_data;
        break;
      }

      // optional .PlanetBoss boss_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_city_data;
        break;
      }

      // optional .PlanetCity city_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_city_res_data;
        break;
      }

      // optional .PlanetCityRes city_res_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_city_res_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_city_res_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required string global_key = 2;
  if (has_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->global_key().data(), this->global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->global_key(), output);
  }

  // repeated .PlanetPoint pos_list = 3;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos_list(i), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional .PlanetBase base_data = 5;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->base_data(), output);
  }

  // optional .PlanetRes res_data = 6;
  if (has_res_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->res_data(), output);
  }

  // optional .PlanetRuins ruins_data = 7;
  if (has_ruins_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ruins_data(), output);
  }

  // optional .PlanetBoss boss_data = 8;
  if (has_boss_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->boss_data(), output);
  }

  // optional .PlanetCity city_data = 9;
  if (has_city_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->city_data(), output);
  }

  // optional .PlanetCityRes city_res_data = 10;
  if (has_city_res_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->city_res_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // required string global_key = 2;
  if (has_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->global_key().data(), this->global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->global_key(), target);
  }

  // repeated .PlanetPoint pos_list = 3;
  for (int i = 0; i < this->pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos_list(i), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional .PlanetBase base_data = 5;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->base_data(), target);
  }

  // optional .PlanetRes res_data = 6;
  if (has_res_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->res_data(), target);
  }

  // optional .PlanetRuins ruins_data = 7;
  if (has_ruins_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ruins_data(), target);
  }

  // optional .PlanetBoss boss_data = 8;
  if (has_boss_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->boss_data(), target);
  }

  // optional .PlanetCity city_data = 9;
  if (has_city_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->city_data(), target);
  }

  // optional .PlanetCityRes city_res_data = 10;
  if (has_city_res_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->city_res_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required string global_key = 2;
    if (has_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_key());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .PlanetBase base_data = 5;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional .PlanetRes res_data = 6;
    if (has_res_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res_data());
    }

    // optional .PlanetRuins ruins_data = 7;
    if (has_ruins_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ruins_data());
    }

    // optional .PlanetBoss boss_data = 8;
    if (has_boss_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PlanetCity city_data = 9;
    if (has_city_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city_data());
    }

    // optional .PlanetCityRes city_res_data = 10;
    if (has_city_res_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->city_res_data());
    }

  }
  // repeated .PlanetPoint pos_list = 3;
  total_size += 1 * this->pos_list_size();
  for (int i = 0; i < this->pos_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetElement::MergeFrom(const PlanetElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_list_.MergeFrom(from.pos_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_global_key()) {
      set_global_key(from.global_key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_base_data()) {
      mutable_base_data()->::PlanetBase::MergeFrom(from.base_data());
    }
    if (from.has_res_data()) {
      mutable_res_data()->::PlanetRes::MergeFrom(from.res_data());
    }
    if (from.has_ruins_data()) {
      mutable_ruins_data()->::PlanetRuins::MergeFrom(from.ruins_data());
    }
    if (from.has_boss_data()) {
      mutable_boss_data()->::PlanetBoss::MergeFrom(from.boss_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_city_data()) {
      mutable_city_data()->::PlanetCity::MergeFrom(from.city_data());
    }
    if (from.has_city_res_data()) {
      mutable_city_res_data()->::PlanetCityRes::MergeFrom(from.city_res_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetElement::CopyFrom(const PlanetElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < pos_list_size(); i++) {
    if (!this->pos_list(i).IsInitialized()) return false;
  }
  if (has_base_data()) {
    if (!this->base_data().IsInitialized()) return false;
  }
  if (has_res_data()) {
    if (!this->res_data().IsInitialized()) return false;
  }
  if (has_ruins_data()) {
    if (!this->ruins_data().IsInitialized()) return false;
  }
  if (has_boss_data()) {
    if (!this->boss_data().IsInitialized()) return false;
  }
  if (has_city_data()) {
    if (!this->city_data().IsInitialized()) return false;
  }
  if (has_city_res_data()) {
    if (!this->city_res_data().IsInitialized()) return false;
  }
  return true;
}

void PlanetElement::Swap(PlanetElement* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(global_key_, other->global_key_);
    pos_list_.Swap(&other->pos_list_);
    std::swap(type_, other->type_);
    std::swap(base_data_, other->base_data_);
    std::swap(res_data_, other->res_data_);
    std::swap(ruins_data_, other->ruins_data_);
    std::swap(boss_data_, other->boss_data_);
    std::swap(city_data_, other->city_data_);
    std::swap(city_res_data_, other->city_res_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetElement_descriptor_;
  metadata.reflection = PlanetElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetNode::kIdFieldNumber;
const int PlanetNode::kElementListFieldNumber;
const int PlanetNode::kArmyLineKeyListFieldNumber;
#endif  // !_MSC_VER

PlanetNode::PlanetNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetNode::InitAsDefaultInstance() {
}

PlanetNode::PlanetNode(const PlanetNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetNode::~PlanetNode() {
  SharedDtor();
}

void PlanetNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlanetNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetNode_descriptor_;
}

const PlanetNode& PlanetNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetNode* PlanetNode::default_instance_ = NULL;

PlanetNode* PlanetNode::New() const {
  return new PlanetNode;
}

void PlanetNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  element_list_.Clear();
  army_line_key_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element_list;
        break;
      }

      // repeated .PlanetElement element_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element_list;
        if (input->ExpectTag(26)) goto parse_army_line_key_list;
        break;
      }

      // repeated string army_line_key_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_line_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_army_line_key_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->army_line_key_list(this->army_line_key_list_size() - 1).data(),
            this->army_line_key_list(this->army_line_key_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_army_line_key_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .PlanetElement element_list = 2;
  for (int i = 0; i < this->element_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->element_list(i), output);
  }

  // repeated string army_line_key_list = 3;
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->army_line_key_list(i).data(), this->army_line_key_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->army_line_key_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .PlanetElement element_list = 2;
  for (int i = 0; i < this->element_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->element_list(i), target);
  }

  // repeated string army_line_key_list = 3;
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_line_key_list(i).data(), this->army_line_key_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->army_line_key_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .PlanetElement element_list = 2;
  total_size += 1 * this->element_list_size();
  for (int i = 0; i < this->element_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element_list(i));
  }

  // repeated string army_line_key_list = 3;
  total_size += 1 * this->army_line_key_list_size();
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->army_line_key_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetNode::MergeFrom(const PlanetNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  element_list_.MergeFrom(from.element_list_);
  army_line_key_list_.MergeFrom(from.army_line_key_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetNode::CopyFrom(const PlanetNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < element_list_size(); i++) {
    if (!this->element_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetNode::Swap(PlanetNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    element_list_.Swap(&other->element_list_);
    army_line_key_list_.Swap(&other->army_line_key_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetNode_descriptor_;
  metadata.reflection = PlanetNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetArmyLine::kUserKeyFieldNumber;
const int PlanetArmyLine::kNodeIdListFieldNumber;
const int PlanetArmyLine::kMoveListFieldNumber;
const int PlanetArmyLine::kBeginTimeFieldNumber;
const int PlanetArmyLine::kNeedTimeFieldNumber;
const int PlanetArmyLine::kSubTimeFieldNumber;
const int PlanetArmyLine::kStatusFieldNumber;
const int PlanetArmyLine::kStatusMachineFieldNumber;
#endif  // !_MSC_VER

PlanetArmyLine::PlanetArmyLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetArmyLine::InitAsDefaultInstance() {
}

PlanetArmyLine::PlanetArmyLine(const PlanetArmyLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetArmyLine::SharedCtor() {
  _cached_size_ = 0;
  user_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_time_ = GOOGLE_LONGLONG(0);
  need_time_ = GOOGLE_LONGLONG(0);
  sub_time_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  status_machine_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetArmyLine::~PlanetArmyLine() {
  SharedDtor();
}

void PlanetArmyLine::SharedDtor() {
  if (user_key_ != &::google::protobuf::internal::kEmptyString) {
    delete user_key_;
  }
  if (this != default_instance_) {
  }
}

void PlanetArmyLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetArmyLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetArmyLine_descriptor_;
}

const PlanetArmyLine& PlanetArmyLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetArmyLine* PlanetArmyLine::default_instance_ = NULL;

PlanetArmyLine* PlanetArmyLine::New() const {
  return new PlanetArmyLine;
}

void PlanetArmyLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_key()) {
      if (user_key_ != &::google::protobuf::internal::kEmptyString) {
        user_key_->clear();
      }
    }
    begin_time_ = GOOGLE_LONGLONG(0);
    need_time_ = GOOGLE_LONGLONG(0);
    sub_time_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    status_machine_ = 0;
  }
  node_id_list_.Clear();
  move_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetArmyLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_key().data(), this->user_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id_list;
        break;
      }

      // repeated int32 node_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_node_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_node_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id_list;
        if (input->ExpectTag(26)) goto parse_move_list;
        break;
      }

      // repeated .PlanetPoint move_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_move_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_move_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_move_list;
        if (input->ExpectTag(32)) goto parse_begin_time;
        break;
      }

      // required int64 begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_need_time;
        break;
      }

      // required int64 need_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &need_time_)));
          set_has_need_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sub_time;
        break;
      }

      // required int64 sub_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sub_time_)));
          set_has_sub_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status_machine;
        break;
      }

      // optional int32 status_machine = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_machine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_machine_)));
          set_has_status_machine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetArmyLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_key = 1;
  if (has_user_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_key().data(), this->user_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_key(), output);
  }

  // repeated int32 node_id_list = 2;
  for (int i = 0; i < this->node_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->node_id_list(i), output);
  }

  // repeated .PlanetPoint move_list = 3;
  for (int i = 0; i < this->move_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->move_list(i), output);
  }

  // required int64 begin_time = 4;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begin_time(), output);
  }

  // required int64 need_time = 5;
  if (has_need_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->need_time(), output);
  }

  // required int64 sub_time = 6;
  if (has_sub_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sub_time(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  // optional int32 status_machine = 8;
  if (has_status_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status_machine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetArmyLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_key = 1;
  if (has_user_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_key().data(), this->user_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_key(), target);
  }

  // repeated int32 node_id_list = 2;
  for (int i = 0; i < this->node_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->node_id_list(i), target);
  }

  // repeated .PlanetPoint move_list = 3;
  for (int i = 0; i < this->move_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->move_list(i), target);
  }

  // required int64 begin_time = 4;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begin_time(), target);
  }

  // required int64 need_time = 5;
  if (has_need_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->need_time(), target);
  }

  // required int64 sub_time = 6;
  if (has_sub_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sub_time(), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  // optional int32 status_machine = 8;
  if (has_status_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->status_machine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetArmyLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_key = 1;
    if (has_user_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_key());
    }

    // required int64 begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // required int64 need_time = 5;
    if (has_need_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->need_time());
    }

    // required int64 sub_time = 6;
    if (has_sub_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sub_time());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 status_machine = 8;
    if (has_status_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_machine());
    }

  }
  // repeated int32 node_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->node_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->node_id_list(i));
    }
    total_size += 1 * this->node_id_list_size() + data_size;
  }

  // repeated .PlanetPoint move_list = 3;
  total_size += 1 * this->move_list_size();
  for (int i = 0; i < this->move_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->move_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetArmyLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetArmyLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetArmyLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetArmyLine::MergeFrom(const PlanetArmyLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_list_.MergeFrom(from.node_id_list_);
  move_list_.MergeFrom(from.move_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_key()) {
      set_user_key(from.user_key());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_need_time()) {
      set_need_time(from.need_time());
    }
    if (from.has_sub_time()) {
      set_sub_time(from.sub_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_status_machine()) {
      set_status_machine(from.status_machine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetArmyLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetArmyLine::CopyFrom(const PlanetArmyLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetArmyLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  for (int i = 0; i < move_list_size(); i++) {
    if (!this->move_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetArmyLine::Swap(PlanetArmyLine* other) {
  if (other != this) {
    std::swap(user_key_, other->user_key_);
    node_id_list_.Swap(&other->node_id_list_);
    move_list_.Swap(&other->move_list_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(need_time_, other->need_time_);
    std::swap(sub_time_, other->sub_time_);
    std::swap(status_, other->status_);
    std::swap(status_machine_, other->status_machine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetArmyLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetArmyLine_descriptor_;
  metadata.reflection = PlanetArmyLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetArmy::kGuidFieldNumber;
const int PlanetArmy::kArmyKeyFieldNumber;
const int PlanetArmy::kLineupFieldNumber;
const int PlanetArmy::kLineupHpFieldNumber;
const int PlanetArmy::kShipListFieldNumber;
const int PlanetArmy::kStatusFieldNumber;
const int PlanetArmy::kStatusMachineFieldNumber;
const int PlanetArmy::kBeginTimeFieldNumber;
const int PlanetArmy::kItemListFieldNumber;
const int PlanetArmy::kElementGlobalKeyFieldNumber;
const int PlanetArmy::kLineFieldNumber;
const int PlanetArmy::kArmyKeyListFieldNumber;
const int PlanetArmy::kAccompanyArmyKeyFieldNumber;
const int PlanetArmy::kTechDurableParamFieldNumber;
const int PlanetArmy::kNextStatusMachineFieldNumber;
const int PlanetArmy::kReqArmyKeyListFieldNumber;
const int PlanetArmy::kMassTimeFieldNumber;
const int PlanetArmy::kSpeedFieldNumber;
const int PlanetArmy::kAccompanyBeginTimeFieldNumber;
#endif  // !_MSC_VER

PlanetArmy::PlanetArmy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetArmy::InitAsDefaultInstance() {
  line_ = const_cast< ::PlanetArmyLine*>(&::PlanetArmyLine::default_instance());
}

PlanetArmy::PlanetArmy(const PlanetArmy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetArmy::SharedCtor() {
  _cached_size_ = 0;
  guid_ = 0;
  army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  status_machine_ = 0;
  begin_time_ = GOOGLE_LONGLONG(0);
  element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  line_ = NULL;
  accompany_army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tech_durable_param_ = 0;
  next_status_machine_ = 0;
  mass_time_ = GOOGLE_LONGLONG(0);
  speed_ = 0;
  accompany_begin_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetArmy::~PlanetArmy() {
  SharedDtor();
}

void PlanetArmy::SharedDtor() {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete element_global_key_;
  }
  if (accompany_army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete accompany_army_key_;
  }
  if (this != default_instance_) {
    delete line_;
  }
}

void PlanetArmy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetArmy_descriptor_;
}

const PlanetArmy& PlanetArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetArmy* PlanetArmy::default_instance_ = NULL;

PlanetArmy* PlanetArmy::New() const {
  return new PlanetArmy;
}

void PlanetArmy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = 0;
    if (has_army_key()) {
      if (army_key_ != &::google::protobuf::internal::kEmptyString) {
        army_key_->clear();
      }
    }
    status_ = 0;
    status_machine_ = 0;
    begin_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_element_global_key()) {
      if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
        element_global_key_->clear();
      }
    }
    if (has_line()) {
      if (line_ != NULL) line_->::PlanetArmyLine::Clear();
    }
    if (has_accompany_army_key()) {
      if (accompany_army_key_ != &::google::protobuf::internal::kEmptyString) {
        accompany_army_key_->clear();
      }
    }
    tech_durable_param_ = 0;
    next_status_machine_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mass_time_ = GOOGLE_LONGLONG(0);
    speed_ = 0;
    accompany_begin_time_ = GOOGLE_LONGLONG(0);
  }
  lineup_.Clear();
  lineup_hp_.Clear();
  ship_list_.Clear();
  item_list_.Clear();
  army_key_list_.Clear();
  req_army_key_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_army_key;
        break;
      }

      // required string army_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_army_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->army_key().data(), this->army_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        if (input->ExpectTag(32)) goto parse_lineup_hp;
        break;
      }

      // repeated int32 lineup_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lineup_hp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup_hp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lineup_hp;
        if (input->ExpectTag(42)) goto parse_ship_list;
        break;
      }

      // repeated .AirShip ship_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ship_list;
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required int32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status_machine;
        break;
      }

      // required int32 status_machine = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_machine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_machine_)));
          set_has_status_machine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_begin_time;
        break;
      }

      // required int64 begin_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_item_list;
        break;
      }

      // repeated .Item item_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_item_list;
        if (input->ExpectTag(82)) goto parse_element_global_key;
        break;
      }

      // required string element_global_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_global_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->element_global_key().data(), this->element_global_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_line;
        break;
      }

      // optional .PlanetArmyLine line = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_army_key_list;
        break;
      }

      // repeated string army_key_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_army_key_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->army_key_list(this->army_key_list_size() - 1).data(),
            this->army_key_list(this->army_key_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_army_key_list;
        if (input->ExpectTag(106)) goto parse_accompany_army_key;
        break;
      }

      // optional string accompany_army_key = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accompany_army_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accompany_army_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accompany_army_key().data(), this->accompany_army_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tech_durable_param;
        break;
      }

      // required int32 tech_durable_param = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tech_durable_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_durable_param_)));
          set_has_tech_durable_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_next_status_machine;
        break;
      }

      // optional int32 next_status_machine = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_status_machine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_status_machine_)));
          set_has_next_status_machine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_req_army_key_list;
        break;
      }

      // repeated string req_army_key_list = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req_army_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_req_army_key_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->req_army_key_list(this->req_army_key_list_size() - 1).data(),
            this->req_army_key_list(this->req_army_key_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_req_army_key_list;
        if (input->ExpectTag(136)) goto parse_mass_time;
        break;
      }

      // optional int64 mass_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mass_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mass_time_)));
          set_has_mass_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_speed;
        break;
      }

      // required int32 speed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_accompany_begin_time;
        break;
      }

      // optional int64 accompany_begin_time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accompany_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accompany_begin_time_)));
          set_has_accompany_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guid(), output);
  }

  // required string army_key = 2;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_key().data(), this->army_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->army_key(), output);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lineup(i), output);
  }

  // repeated int32 lineup_hp = 4;
  for (int i = 0; i < this->lineup_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lineup_hp(i), output);
  }

  // repeated .AirShip ship_list = 5;
  for (int i = 0; i < this->ship_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ship_list(i), output);
  }

  // required int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // required int32 status_machine = 7;
  if (has_status_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status_machine(), output);
  }

  // required int64 begin_time = 8;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->begin_time(), output);
  }

  // repeated .Item item_list = 9;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->item_list(i), output);
  }

  // required string element_global_key = 10;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->element_global_key().data(), this->element_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->element_global_key(), output);
  }

  // optional .PlanetArmyLine line = 11;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->line(), output);
  }

  // repeated string army_key_list = 12;
  for (int i = 0; i < this->army_key_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->army_key_list(i).data(), this->army_key_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->army_key_list(i), output);
  }

  // optional string accompany_army_key = 13;
  if (has_accompany_army_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accompany_army_key().data(), this->accompany_army_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->accompany_army_key(), output);
  }

  // required int32 tech_durable_param = 14;
  if (has_tech_durable_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->tech_durable_param(), output);
  }

  // optional int32 next_status_machine = 15;
  if (has_next_status_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->next_status_machine(), output);
  }

  // repeated string req_army_key_list = 16;
  for (int i = 0; i < this->req_army_key_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->req_army_key_list(i).data(), this->req_army_key_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->req_army_key_list(i), output);
  }

  // optional int64 mass_time = 17;
  if (has_mass_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->mass_time(), output);
  }

  // required int32 speed = 18;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->speed(), output);
  }

  // optional int64 accompany_begin_time = 19;
  if (has_accompany_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->accompany_begin_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetArmy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guid(), target);
  }

  // required string army_key = 2;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_key().data(), this->army_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->army_key(), target);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lineup(i), target);
  }

  // repeated int32 lineup_hp = 4;
  for (int i = 0; i < this->lineup_hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->lineup_hp(i), target);
  }

  // repeated .AirShip ship_list = 5;
  for (int i = 0; i < this->ship_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ship_list(i), target);
  }

  // required int32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // required int32 status_machine = 7;
  if (has_status_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status_machine(), target);
  }

  // required int64 begin_time = 8;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->begin_time(), target);
  }

  // repeated .Item item_list = 9;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->item_list(i), target);
  }

  // required string element_global_key = 10;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->element_global_key().data(), this->element_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->element_global_key(), target);
  }

  // optional .PlanetArmyLine line = 11;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->line(), target);
  }

  // repeated string army_key_list = 12;
  for (int i = 0; i < this->army_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_key_list(i).data(), this->army_key_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->army_key_list(i), target);
  }

  // optional string accompany_army_key = 13;
  if (has_accompany_army_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accompany_army_key().data(), this->accompany_army_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->accompany_army_key(), target);
  }

  // required int32 tech_durable_param = 14;
  if (has_tech_durable_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->tech_durable_param(), target);
  }

  // optional int32 next_status_machine = 15;
  if (has_next_status_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->next_status_machine(), target);
  }

  // repeated string req_army_key_list = 16;
  for (int i = 0; i < this->req_army_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_army_key_list(i).data(), this->req_army_key_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->req_army_key_list(i), target);
  }

  // optional int64 mass_time = 17;
  if (has_mass_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->mass_time(), target);
  }

  // required int32 speed = 18;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->speed(), target);
  }

  // optional int64 accompany_begin_time = 19;
  if (has_accompany_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->accompany_begin_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetArmy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guid());
    }

    // required string army_key = 2;
    if (has_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->army_key());
    }

    // required int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 status_machine = 7;
    if (has_status_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_machine());
    }

    // required int64 begin_time = 8;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required string element_global_key = 10;
    if (has_element_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_global_key());
    }

    // optional .PlanetArmyLine line = 11;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }

    // optional string accompany_army_key = 13;
    if (has_accompany_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accompany_army_key());
    }

    // required int32 tech_durable_param = 14;
    if (has_tech_durable_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_durable_param());
    }

    // optional int32 next_status_machine = 15;
    if (has_next_status_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_status_machine());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 mass_time = 17;
    if (has_mass_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mass_time());
    }

    // required int32 speed = 18;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int64 accompany_begin_time = 19;
    if (has_accompany_begin_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accompany_begin_time());
    }

  }
  // repeated int32 lineup = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  // repeated int32 lineup_hp = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup_hp(i));
    }
    total_size += 1 * this->lineup_hp_size() + data_size;
  }

  // repeated .AirShip ship_list = 5;
  total_size += 1 * this->ship_list_size();
  for (int i = 0; i < this->ship_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ship_list(i));
  }

  // repeated .Item item_list = 9;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated string army_key_list = 12;
  total_size += 1 * this->army_key_list_size();
  for (int i = 0; i < this->army_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->army_key_list(i));
  }

  // repeated string req_army_key_list = 16;
  total_size += 2 * this->req_army_key_list_size();
  for (int i = 0; i < this->req_army_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->req_army_key_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetArmy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetArmy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetArmy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetArmy::MergeFrom(const PlanetArmy& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  lineup_hp_.MergeFrom(from.lineup_hp_);
  ship_list_.MergeFrom(from.ship_list_);
  item_list_.MergeFrom(from.item_list_);
  army_key_list_.MergeFrom(from.army_key_list_);
  req_army_key_list_.MergeFrom(from.req_army_key_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_army_key()) {
      set_army_key(from.army_key());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_status_machine()) {
      set_status_machine(from.status_machine());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_element_global_key()) {
      set_element_global_key(from.element_global_key());
    }
    if (from.has_line()) {
      mutable_line()->::PlanetArmyLine::MergeFrom(from.line());
    }
    if (from.has_accompany_army_key()) {
      set_accompany_army_key(from.accompany_army_key());
    }
    if (from.has_tech_durable_param()) {
      set_tech_durable_param(from.tech_durable_param());
    }
    if (from.has_next_status_machine()) {
      set_next_status_machine(from.next_status_machine());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mass_time()) {
      set_mass_time(from.mass_time());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_accompany_begin_time()) {
      set_accompany_begin_time(from.accompany_begin_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetArmy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetArmy::CopyFrom(const PlanetArmy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetArmy::IsInitialized() const {
  if ((_has_bits_[0] & 0x000222e3) != 0x000222e3) return false;

  for (int i = 0; i < ship_list_size(); i++) {
    if (!this->ship_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line().IsInitialized()) return false;
  }
  return true;
}

void PlanetArmy::Swap(PlanetArmy* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(army_key_, other->army_key_);
    lineup_.Swap(&other->lineup_);
    lineup_hp_.Swap(&other->lineup_hp_);
    ship_list_.Swap(&other->ship_list_);
    std::swap(status_, other->status_);
    std::swap(status_machine_, other->status_machine_);
    std::swap(begin_time_, other->begin_time_);
    item_list_.Swap(&other->item_list_);
    std::swap(element_global_key_, other->element_global_key_);
    std::swap(line_, other->line_);
    army_key_list_.Swap(&other->army_key_list_);
    std::swap(accompany_army_key_, other->accompany_army_key_);
    std::swap(tech_durable_param_, other->tech_durable_param_);
    std::swap(next_status_machine_, other->next_status_machine_);
    req_army_key_list_.Swap(&other->req_army_key_list_);
    std::swap(mass_time_, other->mass_time_);
    std::swap(speed_, other->speed_);
    std::swap(accompany_begin_time_, other->accompany_begin_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetArmy_descriptor_;
  metadata.reflection = PlanetArmy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMark::kNameFieldNumber;
const int PlanetMark::kPosFieldNumber;
#endif  // !_MSC_VER

PlanetMark::PlanetMark()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetMark::InitAsDefaultInstance() {
  pos_ = const_cast< ::PlanetPoint*>(&::PlanetPoint::default_instance());
}

PlanetMark::PlanetMark(const PlanetMark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMark::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMark::~PlanetMark() {
  SharedDtor();
}

void PlanetMark::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void PlanetMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetMark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetMark_descriptor_;
}

const PlanetMark& PlanetMark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetMark* PlanetMark::default_instance_ = NULL;

PlanetMark* PlanetMark::New() const {
  return new PlanetMark;
}

void PlanetMark::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PlanetPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .PlanetPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .PlanetPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetMark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .PlanetPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetMark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .PlanetPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetMark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetMark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetMark::MergeFrom(const PlanetMark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pos()) {
      mutable_pos()->::PlanetPoint::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetMark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetMark::CopyFrom(const PlanetMark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMark::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void PlanetMark::Swap(PlanetMark* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetMark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetMark_descriptor_;
  metadata.reflection = PlanetMark_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetUser::kUserNameFieldNumber;
const int PlanetUser::kNationFieldNumber;
const int PlanetUser::kArmyListFieldNumber;
const int PlanetUser::kBaseGlobalKeyFieldNumber;
const int PlanetUser::kMarkListFieldNumber;
const int PlanetUser::kAttackMeListFieldNumber;
const int PlanetUser::kColloctLevelTimesListFieldNumber;
const int PlanetUser::kColloctCountFieldNumber;
const int PlanetUser::kRuinsLevelTimesListFieldNumber;
const int PlanetUser::kFishingLevelTimesListFieldNumber;
const int PlanetUser::kBossLevelTimesListFieldNumber;
const int PlanetUser::kAttackCityWinTimesFieldNumber;
const int PlanetUser::kAttackWinTimesFieldNumber;
const int PlanetUser::kBaseDefenseWinTimesFieldNumber;
const int PlanetUser::kMoveBaseTimesListFieldNumber;
#endif  // !_MSC_VER

PlanetUser::PlanetUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetUser::InitAsDefaultInstance() {
}

PlanetUser::PlanetUser(const PlanetUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetUser::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nation_ = 0;
  base_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attack_city_win_times_ = 0;
  attack_win_times_ = 0;
  base_defense_win_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetUser::~PlanetUser() {
  SharedDtor();
}

void PlanetUser::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (base_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete base_global_key_;
  }
  if (this != default_instance_) {
  }
}

void PlanetUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetUser_descriptor_;
}

const PlanetUser& PlanetUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetUser* PlanetUser::default_instance_ = NULL;

PlanetUser* PlanetUser::New() const {
  return new PlanetUser;
}

void PlanetUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    nation_ = 0;
    if (has_base_global_key()) {
      if (base_global_key_ != &::google::protobuf::internal::kEmptyString) {
        base_global_key_->clear();
      }
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    attack_city_win_times_ = 0;
    attack_win_times_ = 0;
    base_defense_win_times_ = 0;
  }
  army_list_.Clear();
  mark_list_.Clear();
  attack_me_list_.Clear();
  colloct_level_times_list_.Clear();
  colloct_count_.Clear();
  ruins_level_times_list_.Clear();
  fishing_level_times_list_.Clear();
  boss_level_times_list_.Clear();
  move_base_times_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nation;
        break;
      }

      // required int32 nation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nation_)));
          set_has_nation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_army_list;
        break;
      }

      // repeated .PlanetArmy army_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_army_list;
        if (input->ExpectTag(34)) goto parse_base_global_key;
        break;
      }

      // required string base_global_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_global_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base_global_key().data(), this->base_global_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mark_list;
        break;
      }

      // repeated .PlanetMark mark_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mark_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mark_list;
        if (input->ExpectTag(50)) goto parse_attack_me_list;
        break;
      }

      // repeated string attack_me_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_me_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attack_me_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attack_me_list(this->attack_me_list_size() - 1).data(),
            this->attack_me_list(this->attack_me_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attack_me_list;
        if (input->ExpectTag(56)) goto parse_colloct_level_times_list;
        break;
      }

      // repeated int32 colloct_level_times_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colloct_level_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_colloct_level_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colloct_level_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_colloct_level_times_list;
        if (input->ExpectTag(64)) goto parse_colloct_count;
        break;
      }

      // repeated int32 colloct_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colloct_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_colloct_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_colloct_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_colloct_count;
        if (input->ExpectTag(72)) goto parse_ruins_level_times_list;
        break;
      }

      // repeated int32 ruins_level_times_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ruins_level_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ruins_level_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ruins_level_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ruins_level_times_list;
        if (input->ExpectTag(80)) goto parse_fishing_level_times_list;
        break;
      }

      // repeated int32 fishing_level_times_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fishing_level_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_fishing_level_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fishing_level_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fishing_level_times_list;
        if (input->ExpectTag(88)) goto parse_boss_level_times_list;
        break;
      }

      // repeated int32 boss_level_times_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_level_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_boss_level_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boss_level_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_boss_level_times_list;
        if (input->ExpectTag(96)) goto parse_attack_city_win_times;
        break;
      }

      // optional int32 attack_city_win_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_city_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_city_win_times_)));
          set_has_attack_city_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attack_win_times;
        break;
      }

      // optional int32 attack_win_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_win_times_)));
          set_has_attack_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_base_defense_win_times;
        break;
      }

      // optional int32 base_defense_win_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_defense_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_defense_win_times_)));
          set_has_base_defense_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_move_base_times_list;
        break;
      }

      // repeated int32 move_base_times_list = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_base_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_move_base_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_move_base_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_move_base_times_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 nation = 2;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nation(), output);
  }

  // repeated .PlanetArmy army_list = 3;
  for (int i = 0; i < this->army_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->army_list(i), output);
  }

  // required string base_global_key = 4;
  if (has_base_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_global_key().data(), this->base_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->base_global_key(), output);
  }

  // repeated .PlanetMark mark_list = 5;
  for (int i = 0; i < this->mark_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mark_list(i), output);
  }

  // repeated string attack_me_list = 6;
  for (int i = 0; i < this->attack_me_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->attack_me_list(i).data(), this->attack_me_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->attack_me_list(i), output);
  }

  // repeated int32 colloct_level_times_list = 7;
  for (int i = 0; i < this->colloct_level_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->colloct_level_times_list(i), output);
  }

  // repeated int32 colloct_count = 8;
  for (int i = 0; i < this->colloct_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->colloct_count(i), output);
  }

  // repeated int32 ruins_level_times_list = 9;
  for (int i = 0; i < this->ruins_level_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ruins_level_times_list(i), output);
  }

  // repeated int32 fishing_level_times_list = 10;
  for (int i = 0; i < this->fishing_level_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->fishing_level_times_list(i), output);
  }

  // repeated int32 boss_level_times_list = 11;
  for (int i = 0; i < this->boss_level_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->boss_level_times_list(i), output);
  }

  // optional int32 attack_city_win_times = 12;
  if (has_attack_city_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->attack_city_win_times(), output);
  }

  // optional int32 attack_win_times = 13;
  if (has_attack_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->attack_win_times(), output);
  }

  // optional int32 base_defense_win_times = 14;
  if (has_base_defense_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->base_defense_win_times(), output);
  }

  // repeated int32 move_base_times_list = 15;
  for (int i = 0; i < this->move_base_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->move_base_times_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required int32 nation = 2;
  if (has_nation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nation(), target);
  }

  // repeated .PlanetArmy army_list = 3;
  for (int i = 0; i < this->army_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->army_list(i), target);
  }

  // required string base_global_key = 4;
  if (has_base_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_global_key().data(), this->base_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->base_global_key(), target);
  }

  // repeated .PlanetMark mark_list = 5;
  for (int i = 0; i < this->mark_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mark_list(i), target);
  }

  // repeated string attack_me_list = 6;
  for (int i = 0; i < this->attack_me_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attack_me_list(i).data(), this->attack_me_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->attack_me_list(i), target);
  }

  // repeated int32 colloct_level_times_list = 7;
  for (int i = 0; i < this->colloct_level_times_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->colloct_level_times_list(i), target);
  }

  // repeated int32 colloct_count = 8;
  for (int i = 0; i < this->colloct_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->colloct_count(i), target);
  }

  // repeated int32 ruins_level_times_list = 9;
  for (int i = 0; i < this->ruins_level_times_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ruins_level_times_list(i), target);
  }

  // repeated int32 fishing_level_times_list = 10;
  for (int i = 0; i < this->fishing_level_times_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->fishing_level_times_list(i), target);
  }

  // repeated int32 boss_level_times_list = 11;
  for (int i = 0; i < this->boss_level_times_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->boss_level_times_list(i), target);
  }

  // optional int32 attack_city_win_times = 12;
  if (has_attack_city_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->attack_city_win_times(), target);
  }

  // optional int32 attack_win_times = 13;
  if (has_attack_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->attack_win_times(), target);
  }

  // optional int32 base_defense_win_times = 14;
  if (has_base_defense_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->base_defense_win_times(), target);
  }

  // repeated int32 move_base_times_list = 15;
  for (int i = 0; i < this->move_base_times_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->move_base_times_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 nation = 2;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nation());
    }

    // required string base_global_key = 4;
    if (has_base_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_global_key());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional int32 attack_city_win_times = 12;
    if (has_attack_city_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_city_win_times());
    }

    // optional int32 attack_win_times = 13;
    if (has_attack_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_win_times());
    }

    // optional int32 base_defense_win_times = 14;
    if (has_base_defense_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_defense_win_times());
    }

  }
  // repeated .PlanetArmy army_list = 3;
  total_size += 1 * this->army_list_size();
  for (int i = 0; i < this->army_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army_list(i));
  }

  // repeated .PlanetMark mark_list = 5;
  total_size += 1 * this->mark_list_size();
  for (int i = 0; i < this->mark_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mark_list(i));
  }

  // repeated string attack_me_list = 6;
  total_size += 1 * this->attack_me_list_size();
  for (int i = 0; i < this->attack_me_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attack_me_list(i));
  }

  // repeated int32 colloct_level_times_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->colloct_level_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->colloct_level_times_list(i));
    }
    total_size += 1 * this->colloct_level_times_list_size() + data_size;
  }

  // repeated int32 colloct_count = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->colloct_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->colloct_count(i));
    }
    total_size += 1 * this->colloct_count_size() + data_size;
  }

  // repeated int32 ruins_level_times_list = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ruins_level_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ruins_level_times_list(i));
    }
    total_size += 1 * this->ruins_level_times_list_size() + data_size;
  }

  // repeated int32 fishing_level_times_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->fishing_level_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fishing_level_times_list(i));
    }
    total_size += 1 * this->fishing_level_times_list_size() + data_size;
  }

  // repeated int32 boss_level_times_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->boss_level_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boss_level_times_list(i));
    }
    total_size += 1 * this->boss_level_times_list_size() + data_size;
  }

  // repeated int32 move_base_times_list = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->move_base_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->move_base_times_list(i));
    }
    total_size += 1 * this->move_base_times_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetUser::MergeFrom(const PlanetUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  army_list_.MergeFrom(from.army_list_);
  mark_list_.MergeFrom(from.mark_list_);
  attack_me_list_.MergeFrom(from.attack_me_list_);
  colloct_level_times_list_.MergeFrom(from.colloct_level_times_list_);
  colloct_count_.MergeFrom(from.colloct_count_);
  ruins_level_times_list_.MergeFrom(from.ruins_level_times_list_);
  fishing_level_times_list_.MergeFrom(from.fishing_level_times_list_);
  boss_level_times_list_.MergeFrom(from.boss_level_times_list_);
  move_base_times_list_.MergeFrom(from.move_base_times_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_base_global_key()) {
      set_base_global_key(from.base_global_key());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_attack_city_win_times()) {
      set_attack_city_win_times(from.attack_city_win_times());
    }
    if (from.has_attack_win_times()) {
      set_attack_win_times(from.attack_win_times());
    }
    if (from.has_base_defense_win_times()) {
      set_base_defense_win_times(from.base_defense_win_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetUser::CopyFrom(const PlanetUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < army_list_size(); i++) {
    if (!this->army_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mark_list_size(); i++) {
    if (!this->mark_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetUser::Swap(PlanetUser* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nation_, other->nation_);
    army_list_.Swap(&other->army_list_);
    std::swap(base_global_key_, other->base_global_key_);
    mark_list_.Swap(&other->mark_list_);
    attack_me_list_.Swap(&other->attack_me_list_);
    colloct_level_times_list_.Swap(&other->colloct_level_times_list_);
    colloct_count_.Swap(&other->colloct_count_);
    ruins_level_times_list_.Swap(&other->ruins_level_times_list_);
    fishing_level_times_list_.Swap(&other->fishing_level_times_list_);
    boss_level_times_list_.Swap(&other->boss_level_times_list_);
    std::swap(attack_city_win_times_, other->attack_city_win_times_);
    std::swap(attack_win_times_, other->attack_win_times_);
    std::swap(base_defense_win_times_, other->base_defense_win_times_);
    move_base_times_list_.Swap(&other->move_base_times_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetUser_descriptor_;
  metadata.reflection = PlanetUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMailUser::kInfoFieldNumber;
const int PlanetMailUser::kPosListFieldNumber;
const int PlanetMailUser::kShipHpListFieldNumber;
const int PlanetMailUser::kShipListFieldNumber;
const int PlanetMailUser::kPreShipEnergyLevelListFieldNumber;
#endif  // !_MSC_VER

PlanetMailUser::PlanetMailUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetMailUser::InitAsDefaultInstance() {
  info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
}

PlanetMailUser::PlanetMailUser(const PlanetMailUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMailUser::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMailUser::~PlanetMailUser() {
  SharedDtor();
}

void PlanetMailUser::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void PlanetMailUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetMailUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetMailUser_descriptor_;
}

const PlanetMailUser& PlanetMailUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetMailUser* PlanetMailUser::default_instance_ = NULL;

PlanetMailUser* PlanetMailUser::New() const {
  return new PlanetMailUser;
}

void PlanetMailUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::OtherUserInfo::Clear();
    }
  }
  pos_list_.Clear();
  ship_hp_list_.Clear();
  ship_list_.Clear();
  pre_ship_energy_level_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetMailUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OtherUserInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos_list;
        break;
      }

      // repeated .PlanetPoint pos_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos_list;
        if (input->ExpectTag(32)) goto parse_ship_hp_list;
        break;
      }

      // repeated int32 ship_hp_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_ship_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ship_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ship_hp_list;
        if (input->ExpectTag(42)) goto parse_ship_list;
        break;
      }

      // repeated .AirShip ship_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ship_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ship_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ship_list;
        if (input->ExpectTag(48)) goto parse_pre_ship_energy_level_list;
        break;
      }

      // repeated int32 pre_ship_energy_level_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_ship_energy_level_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_pre_ship_energy_level_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pre_ship_energy_level_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pre_ship_energy_level_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMailUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OtherUserInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated .PlanetPoint pos_list = 2;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos_list(i), output);
  }

  // repeated int32 ship_hp_list = 4;
  for (int i = 0; i < this->ship_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->ship_hp_list(i), output);
  }

  // repeated .AirShip ship_list = 5;
  for (int i = 0; i < this->ship_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ship_list(i), output);
  }

  // repeated int32 pre_ship_energy_level_list = 6;
  for (int i = 0; i < this->pre_ship_energy_level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->pre_ship_energy_level_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetMailUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OtherUserInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated .PlanetPoint pos_list = 2;
  for (int i = 0; i < this->pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos_list(i), target);
  }

  // repeated int32 ship_hp_list = 4;
  for (int i = 0; i < this->ship_hp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->ship_hp_list(i), target);
  }

  // repeated .AirShip ship_list = 5;
  for (int i = 0; i < this->ship_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ship_list(i), target);
  }

  // repeated int32 pre_ship_energy_level_list = 6;
  for (int i = 0; i < this->pre_ship_energy_level_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->pre_ship_energy_level_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetMailUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OtherUserInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .PlanetPoint pos_list = 2;
  total_size += 1 * this->pos_list_size();
  for (int i = 0; i < this->pos_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_list(i));
  }

  // repeated int32 ship_hp_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ship_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ship_hp_list(i));
    }
    total_size += 1 * this->ship_hp_list_size() + data_size;
  }

  // repeated .AirShip ship_list = 5;
  total_size += 1 * this->ship_list_size();
  for (int i = 0; i < this->ship_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ship_list(i));
  }

  // repeated int32 pre_ship_energy_level_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->pre_ship_energy_level_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pre_ship_energy_level_list(i));
    }
    total_size += 1 * this->pre_ship_energy_level_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMailUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetMailUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetMailUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetMailUser::MergeFrom(const PlanetMailUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_list_.MergeFrom(from.pos_list_);
  ship_hp_list_.MergeFrom(from.ship_hp_list_);
  ship_list_.MergeFrom(from.ship_list_);
  pre_ship_energy_level_list_.MergeFrom(from.pre_ship_energy_level_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::OtherUserInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetMailUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetMailUser::CopyFrom(const PlanetMailUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMailUser::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  for (int i = 0; i < pos_list_size(); i++) {
    if (!this->pos_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ship_list_size(); i++) {
    if (!this->ship_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetMailUser::Swap(PlanetMailUser* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    pos_list_.Swap(&other->pos_list_);
    ship_hp_list_.Swap(&other->ship_hp_list_);
    ship_list_.Swap(&other->ship_list_);
    pre_ship_energy_level_list_.Swap(&other->pre_ship_energy_level_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetMailUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetMailUser_descriptor_;
  metadata.reflection = PlanetMailUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetArmyInfo::kMyBaseFieldNumber;
const int PlanetArmyInfo::kArmyFieldNumber;
const int PlanetArmyInfo::kTargetElementFieldNumber;
#endif  // !_MSC_VER

PlanetArmyInfo::PlanetArmyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetArmyInfo::InitAsDefaultInstance() {
  my_base_ = const_cast< ::PlanetElement*>(&::PlanetElement::default_instance());
  army_ = const_cast< ::PlanetArmy*>(&::PlanetArmy::default_instance());
  target_element_ = const_cast< ::PlanetElement*>(&::PlanetElement::default_instance());
}

PlanetArmyInfo::PlanetArmyInfo(const PlanetArmyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetArmyInfo::SharedCtor() {
  _cached_size_ = 0;
  my_base_ = NULL;
  army_ = NULL;
  target_element_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetArmyInfo::~PlanetArmyInfo() {
  SharedDtor();
}

void PlanetArmyInfo::SharedDtor() {
  if (this != default_instance_) {
    delete my_base_;
    delete army_;
    delete target_element_;
  }
}

void PlanetArmyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetArmyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetArmyInfo_descriptor_;
}

const PlanetArmyInfo& PlanetArmyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Planet_2eproto();
  return *default_instance_;
}

PlanetArmyInfo* PlanetArmyInfo::default_instance_ = NULL;

PlanetArmyInfo* PlanetArmyInfo::New() const {
  return new PlanetArmyInfo;
}

void PlanetArmyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_my_base()) {
      if (my_base_ != NULL) my_base_->::PlanetElement::Clear();
    }
    if (has_army()) {
      if (army_ != NULL) army_->::PlanetArmy::Clear();
    }
    if (has_target_element()) {
      if (target_element_ != NULL) target_element_->::PlanetElement::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetArmyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetElement my_base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_army;
        break;
      }

      // required .PlanetArmy army = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target_element;
        break;
      }

      // required .PlanetElement target_element = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetArmyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetElement my_base = 1;
  if (has_my_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->my_base(), output);
  }

  // required .PlanetArmy army = 2;
  if (has_army()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->army(), output);
  }

  // required .PlanetElement target_element = 3;
  if (has_target_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target_element(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetArmyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PlanetElement my_base = 1;
  if (has_my_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->my_base(), target);
  }

  // required .PlanetArmy army = 2;
  if (has_army()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->army(), target);
  }

  // required .PlanetElement target_element = 3;
  if (has_target_element()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target_element(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetArmyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetElement my_base = 1;
    if (has_my_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_base());
    }

    // required .PlanetArmy army = 2;
    if (has_army()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army());
    }

    // required .PlanetElement target_element = 3;
    if (has_target_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_element());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetArmyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetArmyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetArmyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetArmyInfo::MergeFrom(const PlanetArmyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_my_base()) {
      mutable_my_base()->::PlanetElement::MergeFrom(from.my_base());
    }
    if (from.has_army()) {
      mutable_army()->::PlanetArmy::MergeFrom(from.army());
    }
    if (from.has_target_element()) {
      mutable_target_element()->::PlanetElement::MergeFrom(from.target_element());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetArmyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetArmyInfo::CopyFrom(const PlanetArmyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetArmyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_my_base()) {
    if (!this->my_base().IsInitialized()) return false;
  }
  if (has_army()) {
    if (!this->army().IsInitialized()) return false;
  }
  if (has_target_element()) {
    if (!this->target_element().IsInitialized()) return false;
  }
  return true;
}

void PlanetArmyInfo::Swap(PlanetArmyInfo* other) {
  if (other != this) {
    std::swap(my_base_, other->my_base_);
    std::swap(army_, other->army_);
    std::swap(target_element_, other->target_element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetArmyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetArmyInfo_descriptor_;
  metadata.reflection = PlanetArmyInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
