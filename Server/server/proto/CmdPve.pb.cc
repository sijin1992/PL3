// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdPve.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdPve.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PveResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PveResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVEGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVEGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVEGetRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVEGetRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeTechReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeTechReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeTechResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeTechResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTechnologyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTechnologyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTechnologyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTechnologyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedUpTechnologyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedUpTechnologyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedUpTechnologyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedUpTechnologyResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdPve_2eproto() {
  protobuf_AddDesc_CmdPve_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdPve.proto");
  GOOGLE_CHECK(file != NULL);
  PveReq_descriptor_ = file->message_type(0);
  static const int PveReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveReq, checkpoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveReq, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveReq, star_),
  };
  PveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PveReq_descriptor_,
      PveReq::default_instance_,
      PveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PveReq));
  PveResp_descriptor_ = file->message_type(1);
  static const int PveResp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, attack_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, hurter_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, char_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, ship_exp_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, level_gold_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, level_point_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, checkpoint_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, get_item_list_),
  };
  PveResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PveResp_descriptor_,
      PveResp::default_instance_,
      PveResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PveResp));
  PVEGetRewardReq_descriptor_ = file->message_type(2);
  static const int PVEGetRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVEGetRewardReq, copy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVEGetRewardReq, score_id_),
  };
  PVEGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVEGetRewardReq_descriptor_,
      PVEGetRewardReq::default_instance_,
      PVEGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVEGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVEGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVEGetRewardReq));
  PVEGetRewardResp_descriptor_ = file->message_type(3);
  static const int PVEGetRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVEGetRewardResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVEGetRewardResp, user_sync_),
  };
  PVEGetRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVEGetRewardResp_descriptor_,
      PVEGetRewardResp::default_instance_,
      PVEGetRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVEGetRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVEGetRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVEGetRewardResp));
  UpgradeTechReq_descriptor_ = file->message_type(4);
  static const int UpgradeTechReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechReq, tech_id_),
  };
  UpgradeTechReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeTechReq_descriptor_,
      UpgradeTechReq::default_instance_,
      UpgradeTechReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeTechReq));
  UpgradeTechResp_descriptor_ = file->message_type(5);
  static const int UpgradeTechResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechResp, tech_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechResp, upgrade_begin_time_),
  };
  UpgradeTechResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeTechResp_descriptor_,
      UpgradeTechResp::default_instance_,
      UpgradeTechResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeTechResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeTechResp));
  GetTechnologyReq_descriptor_ = file->message_type(6);
  static const int GetTechnologyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTechnologyReq, tech_id_),
  };
  GetTechnologyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTechnologyReq_descriptor_,
      GetTechnologyReq::default_instance_,
      GetTechnologyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTechnologyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTechnologyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTechnologyReq));
  GetTechnologyResp_descriptor_ = file->message_type(7);
  static const int GetTechnologyResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTechnologyResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTechnologyResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTechnologyResp, hasupgrade_),
  };
  GetTechnologyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTechnologyResp_descriptor_,
      GetTechnologyResp::default_instance_,
      GetTechnologyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTechnologyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTechnologyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTechnologyResp));
  SpeedUpTechnologyReq_descriptor_ = file->message_type(8);
  static const int SpeedUpTechnologyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpTechnologyReq, tech_id_),
  };
  SpeedUpTechnologyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedUpTechnologyReq_descriptor_,
      SpeedUpTechnologyReq::default_instance_,
      SpeedUpTechnologyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpTechnologyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpTechnologyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedUpTechnologyReq));
  SpeedUpTechnologyResp_descriptor_ = file->message_type(9);
  static const int SpeedUpTechnologyResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpTechnologyResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpTechnologyResp, user_sync_),
  };
  SpeedUpTechnologyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedUpTechnologyResp_descriptor_,
      SpeedUpTechnologyResp::default_instance_,
      SpeedUpTechnologyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpTechnologyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpTechnologyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedUpTechnologyResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdPve_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PveReq_descriptor_, &PveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PveResp_descriptor_, &PveResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVEGetRewardReq_descriptor_, &PVEGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVEGetRewardResp_descriptor_, &PVEGetRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeTechReq_descriptor_, &UpgradeTechReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeTechResp_descriptor_, &UpgradeTechResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTechnologyReq_descriptor_, &GetTechnologyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTechnologyResp_descriptor_, &GetTechnologyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedUpTechnologyReq_descriptor_, &SpeedUpTechnologyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedUpTechnologyResp_descriptor_, &SpeedUpTechnologyResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdPve_2eproto() {
  delete PveReq::default_instance_;
  delete PveReq_reflection_;
  delete PveResp::default_instance_;
  delete PveResp_reflection_;
  delete PVEGetRewardReq::default_instance_;
  delete PVEGetRewardReq_reflection_;
  delete PVEGetRewardResp::default_instance_;
  delete PVEGetRewardResp_reflection_;
  delete UpgradeTechReq::default_instance_;
  delete UpgradeTechReq_reflection_;
  delete UpgradeTechResp::default_instance_;
  delete UpgradeTechResp_reflection_;
  delete GetTechnologyReq::default_instance_;
  delete GetTechnologyReq_reflection_;
  delete GetTechnologyResp::default_instance_;
  delete GetTechnologyResp_reflection_;
  delete SpeedUpTechnologyReq::default_instance_;
  delete SpeedUpTechnologyReq_reflection_;
  delete SpeedUpTechnologyResp::default_instance_;
  delete SpeedUpTechnologyResp_reflection_;
}

void protobuf_AddDesc_CmdPve_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::protobuf_AddDesc_Home_2eproto();
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CmdPve.proto\032\rAirShip.proto\032\nItem.prot"
    "o\032\016UserSync.proto\032\nHome.proto\032\016UserInfo."
    "proto\"K\n\006PveReq\022\025\n\rcheckpoint_id\030\001 \002(\005\022\014"
    "\n\004type\030\002 \002(\005\022\016\n\006result\030\003 \002(\005\022\014\n\004star\030\004 \002"
    "(\005\"\235\002\n\007PveResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_s"
    "ync\030\002 \001(\0132\t.UserSync\022\014\n\004type\030\003 \002(\005\022\035\n\013at"
    "tack_list\030\004 \003(\0132\010.AirShip\022\035\n\013hurter_list"
    "\030\005 \003(\0132\010.AirShip\022\026\n\016char_exp_bonus\030\006 \001(\005"
    "\022\026\n\016ship_exp_bonus\030\007 \001(\005\022\030\n\020level_gold_b"
    "onus\030\010 \001(\005\022\031\n\021level_point_bonus\030\t \001(\005\022\025\n"
    "\rcheckpoint_id\030\n \002(\005\022\034\n\rget_item_list\030\013 "
    "\003(\0132\005.Pair\"4\n\017PVEGetRewardReq\022\017\n\007copy_id"
    "\030\001 \002(\005\022\020\n\010score_id\030\002 \002(\005\"@\n\020PVEGetReward"
    "Resp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132"
    "\t.UserSync\"!\n\016UpgradeTechReq\022\017\n\007tech_id\030"
    "\001 \002(\005\"l\n\017UpgradeTechResp\022\016\n\006result\030\001 \002(\005"
    "\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\017\n\007tech_i"
    "d\030\003 \001(\005\022\032\n\022upgrade_begin_time\030\004 \001(\005\"#\n\020G"
    "etTechnologyReq\022\017\n\007tech_id\030\001 \002(\005\"U\n\021GetT"
    "echnologyResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sy"
    "nc\030\002 \001(\0132\t.UserSync\022\022\n\nhasUpgrade\030\003 \001(\010\""
    "\'\n\024SpeedUpTechnologyReq\022\017\n\007tech_id\030\001 \002(\005"
    "\"E\n\025SpeedUpTechnologyResp\022\016\n\006result\030\001 \002("
    "\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync", 951);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdPve.proto", &protobuf_RegisterTypes);
  PveReq::default_instance_ = new PveReq();
  PveResp::default_instance_ = new PveResp();
  PVEGetRewardReq::default_instance_ = new PVEGetRewardReq();
  PVEGetRewardResp::default_instance_ = new PVEGetRewardResp();
  UpgradeTechReq::default_instance_ = new UpgradeTechReq();
  UpgradeTechResp::default_instance_ = new UpgradeTechResp();
  GetTechnologyReq::default_instance_ = new GetTechnologyReq();
  GetTechnologyResp::default_instance_ = new GetTechnologyResp();
  SpeedUpTechnologyReq::default_instance_ = new SpeedUpTechnologyReq();
  SpeedUpTechnologyResp::default_instance_ = new SpeedUpTechnologyResp();
  PveReq::default_instance_->InitAsDefaultInstance();
  PveResp::default_instance_->InitAsDefaultInstance();
  PVEGetRewardReq::default_instance_->InitAsDefaultInstance();
  PVEGetRewardResp::default_instance_->InitAsDefaultInstance();
  UpgradeTechReq::default_instance_->InitAsDefaultInstance();
  UpgradeTechResp::default_instance_->InitAsDefaultInstance();
  GetTechnologyReq::default_instance_->InitAsDefaultInstance();
  GetTechnologyResp::default_instance_->InitAsDefaultInstance();
  SpeedUpTechnologyReq::default_instance_->InitAsDefaultInstance();
  SpeedUpTechnologyResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdPve_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdPve_2eproto {
  StaticDescriptorInitializer_CmdPve_2eproto() {
    protobuf_AddDesc_CmdPve_2eproto();
  }
} static_descriptor_initializer_CmdPve_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PveReq::kCheckpointIdFieldNumber;
const int PveReq::kTypeFieldNumber;
const int PveReq::kResultFieldNumber;
const int PveReq::kStarFieldNumber;
#endif  // !_MSC_VER

PveReq::PveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PveReq::InitAsDefaultInstance() {
}

PveReq::PveReq(const PveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PveReq::SharedCtor() {
  _cached_size_ = 0;
  checkpoint_id_ = 0;
  type_ = 0;
  result_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveReq::~PveReq() {
  SharedDtor();
}

void PveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PveReq_descriptor_;
}

const PveReq& PveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

PveReq* PveReq::default_instance_ = NULL;

PveReq* PveReq::New() const {
  return new PveReq;
}

void PveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    checkpoint_id_ = 0;
    type_ = 0;
    result_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 checkpoint_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_id_)));
          set_has_checkpoint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 checkpoint_id = 1;
  if (has_checkpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->checkpoint_id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // required int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 checkpoint_id = 1;
  if (has_checkpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->checkpoint_id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // required int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 checkpoint_id = 1;
    if (has_checkpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PveReq::MergeFrom(const PveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checkpoint_id()) {
      set_checkpoint_id(from.checkpoint_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PveReq::CopyFrom(const PveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PveReq::Swap(PveReq* other) {
  if (other != this) {
    std::swap(checkpoint_id_, other->checkpoint_id_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PveReq_descriptor_;
  metadata.reflection = PveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PveResp::kResultFieldNumber;
const int PveResp::kUserSyncFieldNumber;
const int PveResp::kTypeFieldNumber;
const int PveResp::kAttackListFieldNumber;
const int PveResp::kHurterListFieldNumber;
const int PveResp::kCharExpBonusFieldNumber;
const int PveResp::kShipExpBonusFieldNumber;
const int PveResp::kLevelGoldBonusFieldNumber;
const int PveResp::kLevelPointBonusFieldNumber;
const int PveResp::kCheckpointIdFieldNumber;
const int PveResp::kGetItemListFieldNumber;
#endif  // !_MSC_VER

PveResp::PveResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PveResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

PveResp::PveResp(const PveResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PveResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  type_ = 0;
  char_exp_bonus_ = 0;
  ship_exp_bonus_ = 0;
  level_gold_bonus_ = 0;
  level_point_bonus_ = 0;
  checkpoint_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveResp::~PveResp() {
  SharedDtor();
}

void PveResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void PveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PveResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PveResp_descriptor_;
}

const PveResp& PveResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

PveResp* PveResp::default_instance_ = NULL;

PveResp* PveResp::New() const {
  return new PveResp;
}

void PveResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    type_ = 0;
    char_exp_bonus_ = 0;
    ship_exp_bonus_ = 0;
    level_gold_bonus_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_point_bonus_ = 0;
    checkpoint_id_ = 0;
  }
  attack_list_.Clear();
  hurter_list_.Clear();
  get_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attack_list;
        break;
      }

      // repeated .AirShip attack_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attack_list;
        if (input->ExpectTag(42)) goto parse_hurter_list;
        break;
      }

      // repeated .AirShip hurter_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hurter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hurter_list;
        if (input->ExpectTag(48)) goto parse_char_exp_bonus;
        break;
      }

      // optional int32 char_exp_bonus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_char_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_exp_bonus_)));
          set_has_char_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ship_exp_bonus;
        break;
      }

      // optional int32 ship_exp_bonus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_exp_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_exp_bonus_)));
          set_has_ship_exp_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level_gold_bonus;
        break;
      }

      // optional int32 level_gold_bonus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_gold_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_gold_bonus_)));
          set_has_level_gold_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level_point_bonus;
        break;
      }

      // optional int32 level_point_bonus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_point_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_point_bonus_)));
          set_has_level_point_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_checkpoint_id;
        break;
      }

      // required int32 checkpoint_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_id_)));
          set_has_checkpoint_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_get_item_list;
        break;
      }

      // repeated .Pair get_item_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_get_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated .AirShip attack_list = 4;
  for (int i = 0; i < this->attack_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attack_list(i), output);
  }

  // repeated .AirShip hurter_list = 5;
  for (int i = 0; i < this->hurter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hurter_list(i), output);
  }

  // optional int32 char_exp_bonus = 6;
  if (has_char_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->char_exp_bonus(), output);
  }

  // optional int32 ship_exp_bonus = 7;
  if (has_ship_exp_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ship_exp_bonus(), output);
  }

  // optional int32 level_gold_bonus = 8;
  if (has_level_gold_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level_gold_bonus(), output);
  }

  // optional int32 level_point_bonus = 9;
  if (has_level_point_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level_point_bonus(), output);
  }

  // required int32 checkpoint_id = 10;
  if (has_checkpoint_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->checkpoint_id(), output);
  }

  // repeated .Pair get_item_list = 11;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->get_item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PveResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated .AirShip attack_list = 4;
  for (int i = 0; i < this->attack_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attack_list(i), target);
  }

  // repeated .AirShip hurter_list = 5;
  for (int i = 0; i < this->hurter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hurter_list(i), target);
  }

  // optional int32 char_exp_bonus = 6;
  if (has_char_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->char_exp_bonus(), target);
  }

  // optional int32 ship_exp_bonus = 7;
  if (has_ship_exp_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ship_exp_bonus(), target);
  }

  // optional int32 level_gold_bonus = 8;
  if (has_level_gold_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level_gold_bonus(), target);
  }

  // optional int32 level_point_bonus = 9;
  if (has_level_point_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level_point_bonus(), target);
  }

  // required int32 checkpoint_id = 10;
  if (has_checkpoint_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->checkpoint_id(), target);
  }

  // repeated .Pair get_item_list = 11;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->get_item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PveResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 char_exp_bonus = 6;
    if (has_char_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->char_exp_bonus());
    }

    // optional int32 ship_exp_bonus = 7;
    if (has_ship_exp_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_exp_bonus());
    }

    // optional int32 level_gold_bonus = 8;
    if (has_level_gold_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_gold_bonus());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level_point_bonus = 9;
    if (has_level_point_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_point_bonus());
    }

    // required int32 checkpoint_id = 10;
    if (has_checkpoint_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_id());
    }

  }
  // repeated .AirShip attack_list = 4;
  total_size += 1 * this->attack_list_size();
  for (int i = 0; i < this->attack_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_list(i));
  }

  // repeated .AirShip hurter_list = 5;
  total_size += 1 * this->hurter_list_size();
  for (int i = 0; i < this->hurter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hurter_list(i));
  }

  // repeated .Pair get_item_list = 11;
  total_size += 1 * this->get_item_list_size();
  for (int i = 0; i < this->get_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PveResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PveResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PveResp::MergeFrom(const PveResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_list_.MergeFrom(from.attack_list_);
  hurter_list_.MergeFrom(from.hurter_list_);
  get_item_list_.MergeFrom(from.get_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_char_exp_bonus()) {
      set_char_exp_bonus(from.char_exp_bonus());
    }
    if (from.has_ship_exp_bonus()) {
      set_ship_exp_bonus(from.ship_exp_bonus());
    }
    if (from.has_level_gold_bonus()) {
      set_level_gold_bonus(from.level_gold_bonus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level_point_bonus()) {
      set_level_point_bonus(from.level_point_bonus());
    }
    if (from.has_checkpoint_id()) {
      set_checkpoint_id(from.checkpoint_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PveResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PveResp::CopyFrom(const PveResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000205) != 0x00000205) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < attack_list_size(); i++) {
    if (!this->attack_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hurter_list_size(); i++) {
    if (!this->hurter_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < get_item_list_size(); i++) {
    if (!this->get_item_list(i).IsInitialized()) return false;
  }
  return true;
}

void PveResp::Swap(PveResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(type_, other->type_);
    attack_list_.Swap(&other->attack_list_);
    hurter_list_.Swap(&other->hurter_list_);
    std::swap(char_exp_bonus_, other->char_exp_bonus_);
    std::swap(ship_exp_bonus_, other->ship_exp_bonus_);
    std::swap(level_gold_bonus_, other->level_gold_bonus_);
    std::swap(level_point_bonus_, other->level_point_bonus_);
    std::swap(checkpoint_id_, other->checkpoint_id_);
    get_item_list_.Swap(&other->get_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PveResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PveResp_descriptor_;
  metadata.reflection = PveResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVEGetRewardReq::kCopyIdFieldNumber;
const int PVEGetRewardReq::kScoreIdFieldNumber;
#endif  // !_MSC_VER

PVEGetRewardReq::PVEGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVEGetRewardReq::InitAsDefaultInstance() {
}

PVEGetRewardReq::PVEGetRewardReq(const PVEGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVEGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  copy_id_ = 0;
  score_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVEGetRewardReq::~PVEGetRewardReq() {
  SharedDtor();
}

void PVEGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVEGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVEGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVEGetRewardReq_descriptor_;
}

const PVEGetRewardReq& PVEGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

PVEGetRewardReq* PVEGetRewardReq::default_instance_ = NULL;

PVEGetRewardReq* PVEGetRewardReq::New() const {
  return new PVEGetRewardReq;
}

void PVEGetRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copy_id_ = 0;
    score_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVEGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copy_id_)));
          set_has_copy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score_id;
        break;
      }

      // required int32 score_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_id_)));
          set_has_score_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVEGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copy_id = 1;
  if (has_copy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copy_id(), output);
  }

  // required int32 score_id = 2;
  if (has_score_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVEGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 copy_id = 1;
  if (has_copy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copy_id(), target);
  }

  // required int32 score_id = 2;
  if (has_score_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVEGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copy_id = 1;
    if (has_copy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copy_id());
    }

    // required int32 score_id = 2;
    if (has_score_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVEGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVEGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVEGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVEGetRewardReq::MergeFrom(const PVEGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copy_id()) {
      set_copy_id(from.copy_id());
    }
    if (from.has_score_id()) {
      set_score_id(from.score_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVEGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVEGetRewardReq::CopyFrom(const PVEGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVEGetRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PVEGetRewardReq::Swap(PVEGetRewardReq* other) {
  if (other != this) {
    std::swap(copy_id_, other->copy_id_);
    std::swap(score_id_, other->score_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVEGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVEGetRewardReq_descriptor_;
  metadata.reflection = PVEGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVEGetRewardResp::kResultFieldNumber;
const int PVEGetRewardResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

PVEGetRewardResp::PVEGetRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVEGetRewardResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

PVEGetRewardResp::PVEGetRewardResp(const PVEGetRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVEGetRewardResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVEGetRewardResp::~PVEGetRewardResp() {
  SharedDtor();
}

void PVEGetRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void PVEGetRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVEGetRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVEGetRewardResp_descriptor_;
}

const PVEGetRewardResp& PVEGetRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

PVEGetRewardResp* PVEGetRewardResp::default_instance_ = NULL;

PVEGetRewardResp* PVEGetRewardResp::New() const {
  return new PVEGetRewardResp;
}

void PVEGetRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVEGetRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVEGetRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVEGetRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVEGetRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVEGetRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVEGetRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVEGetRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVEGetRewardResp::MergeFrom(const PVEGetRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVEGetRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVEGetRewardResp::CopyFrom(const PVEGetRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVEGetRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void PVEGetRewardResp::Swap(PVEGetRewardResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVEGetRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVEGetRewardResp_descriptor_;
  metadata.reflection = PVEGetRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeTechReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

UpgradeTechReq::UpgradeTechReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeTechReq::InitAsDefaultInstance() {
}

UpgradeTechReq::UpgradeTechReq(const UpgradeTechReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeTechReq::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeTechReq::~UpgradeTechReq() {
  SharedDtor();
}

void UpgradeTechReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeTechReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeTechReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeTechReq_descriptor_;
}

const UpgradeTechReq& UpgradeTechReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

UpgradeTechReq* UpgradeTechReq::default_instance_ = NULL;

UpgradeTechReq* UpgradeTechReq::New() const {
  return new UpgradeTechReq;
}

void UpgradeTechReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeTechReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeTechReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeTechReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tech_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeTechReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeTechReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeTechReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeTechReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeTechReq::MergeFrom(const UpgradeTechReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeTechReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeTechReq::CopyFrom(const UpgradeTechReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeTechReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpgradeTechReq::Swap(UpgradeTechReq* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeTechReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeTechReq_descriptor_;
  metadata.reflection = UpgradeTechReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeTechResp::kResultFieldNumber;
const int UpgradeTechResp::kUserSyncFieldNumber;
const int UpgradeTechResp::kTechIdFieldNumber;
const int UpgradeTechResp::kUpgradeBeginTimeFieldNumber;
#endif  // !_MSC_VER

UpgradeTechResp::UpgradeTechResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeTechResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

UpgradeTechResp::UpgradeTechResp(const UpgradeTechResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeTechResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  tech_id_ = 0;
  upgrade_begin_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeTechResp::~UpgradeTechResp() {
  SharedDtor();
}

void UpgradeTechResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void UpgradeTechResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeTechResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeTechResp_descriptor_;
}

const UpgradeTechResp& UpgradeTechResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

UpgradeTechResp* UpgradeTechResp::default_instance_ = NULL;

UpgradeTechResp* UpgradeTechResp::New() const {
  return new UpgradeTechResp;
}

void UpgradeTechResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    tech_id_ = 0;
    upgrade_begin_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeTechResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tech_id;
        break;
      }

      // optional int32 tech_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tech_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_upgrade_begin_time;
        break;
      }

      // optional int32 upgrade_begin_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_begin_time_)));
          set_has_upgrade_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeTechResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 tech_id = 3;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tech_id(), output);
  }

  // optional int32 upgrade_begin_time = 4;
  if (has_upgrade_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgrade_begin_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeTechResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 tech_id = 3;
  if (has_tech_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tech_id(), target);
  }

  // optional int32 upgrade_begin_time = 4;
  if (has_upgrade_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upgrade_begin_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeTechResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 tech_id = 3;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

    // optional int32 upgrade_begin_time = 4;
    if (has_upgrade_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_begin_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeTechResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeTechResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeTechResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeTechResp::MergeFrom(const UpgradeTechResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
    if (from.has_upgrade_begin_time()) {
      set_upgrade_begin_time(from.upgrade_begin_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeTechResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeTechResp::CopyFrom(const UpgradeTechResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeTechResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void UpgradeTechResp::Swap(UpgradeTechResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(tech_id_, other->tech_id_);
    std::swap(upgrade_begin_time_, other->upgrade_begin_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeTechResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeTechResp_descriptor_;
  metadata.reflection = UpgradeTechResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTechnologyReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

GetTechnologyReq::GetTechnologyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTechnologyReq::InitAsDefaultInstance() {
}

GetTechnologyReq::GetTechnologyReq(const GetTechnologyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTechnologyReq::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTechnologyReq::~GetTechnologyReq() {
  SharedDtor();
}

void GetTechnologyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTechnologyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTechnologyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTechnologyReq_descriptor_;
}

const GetTechnologyReq& GetTechnologyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

GetTechnologyReq* GetTechnologyReq::default_instance_ = NULL;

GetTechnologyReq* GetTechnologyReq::New() const {
  return new GetTechnologyReq;
}

void GetTechnologyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTechnologyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTechnologyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTechnologyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tech_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTechnologyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTechnologyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTechnologyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTechnologyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTechnologyReq::MergeFrom(const GetTechnologyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTechnologyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTechnologyReq::CopyFrom(const GetTechnologyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechnologyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTechnologyReq::Swap(GetTechnologyReq* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTechnologyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTechnologyReq_descriptor_;
  metadata.reflection = GetTechnologyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTechnologyResp::kResultFieldNumber;
const int GetTechnologyResp::kUserSyncFieldNumber;
const int GetTechnologyResp::kHasUpgradeFieldNumber;
#endif  // !_MSC_VER

GetTechnologyResp::GetTechnologyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTechnologyResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GetTechnologyResp::GetTechnologyResp(const GetTechnologyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTechnologyResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  hasupgrade_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTechnologyResp::~GetTechnologyResp() {
  SharedDtor();
}

void GetTechnologyResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GetTechnologyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTechnologyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTechnologyResp_descriptor_;
}

const GetTechnologyResp& GetTechnologyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

GetTechnologyResp* GetTechnologyResp::default_instance_ = NULL;

GetTechnologyResp* GetTechnologyResp::New() const {
  return new GetTechnologyResp;
}

void GetTechnologyResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    hasupgrade_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTechnologyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasUpgrade;
        break;
      }

      // optional bool hasUpgrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasUpgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasupgrade_)));
          set_has_hasupgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTechnologyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional bool hasUpgrade = 3;
  if (has_hasupgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasupgrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTechnologyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional bool hasUpgrade = 3;
  if (has_hasupgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hasupgrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTechnologyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional bool hasUpgrade = 3;
    if (has_hasupgrade()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTechnologyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTechnologyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTechnologyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTechnologyResp::MergeFrom(const GetTechnologyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_hasupgrade()) {
      set_hasupgrade(from.hasupgrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTechnologyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTechnologyResp::CopyFrom(const GetTechnologyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTechnologyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GetTechnologyResp::Swap(GetTechnologyResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(hasupgrade_, other->hasupgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTechnologyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTechnologyResp_descriptor_;
  metadata.reflection = GetTechnologyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpTechnologyReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

SpeedUpTechnologyReq::SpeedUpTechnologyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedUpTechnologyReq::InitAsDefaultInstance() {
}

SpeedUpTechnologyReq::SpeedUpTechnologyReq(const SpeedUpTechnologyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpTechnologyReq::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpTechnologyReq::~SpeedUpTechnologyReq() {
  SharedDtor();
}

void SpeedUpTechnologyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedUpTechnologyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedUpTechnologyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpTechnologyReq_descriptor_;
}

const SpeedUpTechnologyReq& SpeedUpTechnologyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

SpeedUpTechnologyReq* SpeedUpTechnologyReq::default_instance_ = NULL;

SpeedUpTechnologyReq* SpeedUpTechnologyReq::New() const {
  return new SpeedUpTechnologyReq;
}

void SpeedUpTechnologyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedUpTechnologyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpTechnologyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedUpTechnologyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tech_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedUpTechnologyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpTechnologyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedUpTechnologyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedUpTechnologyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedUpTechnologyReq::MergeFrom(const SpeedUpTechnologyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedUpTechnologyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedUpTechnologyReq::CopyFrom(const SpeedUpTechnologyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpTechnologyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SpeedUpTechnologyReq::Swap(SpeedUpTechnologyReq* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedUpTechnologyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedUpTechnologyReq_descriptor_;
  metadata.reflection = SpeedUpTechnologyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpTechnologyResp::kResultFieldNumber;
const int SpeedUpTechnologyResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

SpeedUpTechnologyResp::SpeedUpTechnologyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedUpTechnologyResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

SpeedUpTechnologyResp::SpeedUpTechnologyResp(const SpeedUpTechnologyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpTechnologyResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpTechnologyResp::~SpeedUpTechnologyResp() {
  SharedDtor();
}

void SpeedUpTechnologyResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void SpeedUpTechnologyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedUpTechnologyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpTechnologyResp_descriptor_;
}

const SpeedUpTechnologyResp& SpeedUpTechnologyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPve_2eproto();
  return *default_instance_;
}

SpeedUpTechnologyResp* SpeedUpTechnologyResp::default_instance_ = NULL;

SpeedUpTechnologyResp* SpeedUpTechnologyResp::New() const {
  return new SpeedUpTechnologyResp;
}

void SpeedUpTechnologyResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedUpTechnologyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpTechnologyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedUpTechnologyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedUpTechnologyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpTechnologyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedUpTechnologyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedUpTechnologyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedUpTechnologyResp::MergeFrom(const SpeedUpTechnologyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedUpTechnologyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedUpTechnologyResp::CopyFrom(const SpeedUpTechnologyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpTechnologyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void SpeedUpTechnologyResp::Swap(SpeedUpTechnologyResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedUpTechnologyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedUpTechnologyResp_descriptor_;
  metadata.reflection = SpeedUpTechnologyResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
