// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdArena.proto

#ifndef PROTOBUF_CmdArena_2eproto__INCLUDED
#define PROTOBUF_CmdArena_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AirShip.pb.h"
#include "UserInfo.pb.h"
#include "UserSync.pb.h"
#include "OtherInfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CmdArena_2eproto();
void protobuf_AssignDesc_CmdArena_2eproto();
void protobuf_ShutdownFile_CmdArena_2eproto();

class ArenaInfoData;
class ArenaRecordData;
class ArenaRecordDataList;
class ArenaInfoReq;
class ArenaInfoResp;
class ArenaAddTimesReq;
class ArenaAddTimesResp;
class ArenaGetDailyRewardReq;
class ArenaGetDailyRewardResp;
class ArenaChallengeReq;
class ArenaChallengeResp;
class ArenaTitleReq;
class ArenaTitleResp;

// ===================================================================

class ArenaInfoData : public ::google::protobuf::Message {
 public:
  ArenaInfoData();
  virtual ~ArenaInfoData();

  ArenaInfoData(const ArenaInfoData& from);

  inline ArenaInfoData& operator=(const ArenaInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaInfoData& default_instance();

  void Swap(ArenaInfoData* other);

  // implements Message ----------------------------------------------

  ArenaInfoData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaInfoData& from);
  void MergeFrom(const ArenaInfoData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required int32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // required string nickname = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 icon_id = 6;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 6;
  inline ::google::protobuf::int32 icon_id() const;
  inline void set_icon_id(::google::protobuf::int32 value);

  // required int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated int32 ship_guid_list = 8;
  inline int ship_guid_list_size() const;
  inline void clear_ship_guid_list();
  static const int kShipGuidListFieldNumber = 8;
  inline ::google::protobuf::int32 ship_guid_list(int index) const;
  inline void set_ship_guid_list(int index, ::google::protobuf::int32 value);
  inline void add_ship_guid_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ship_guid_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ship_guid_list();

  // repeated int32 ship_id_list = 9;
  inline int ship_id_list_size() const;
  inline void clear_ship_id_list();
  static const int kShipIdListFieldNumber = 9;
  inline ::google::protobuf::int32 ship_id_list(int index) const;
  inline void set_ship_id_list(int index, ::google::protobuf::int32 value);
  inline void add_ship_id_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ship_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ship_id_list();

  // repeated int32 ship_level_list = 10;
  inline int ship_level_list_size() const;
  inline void clear_ship_level_list();
  static const int kShipLevelListFieldNumber = 10;
  inline ::google::protobuf::int32 ship_level_list(int index) const;
  inline void set_ship_level_list(int index, ::google::protobuf::int32 value);
  inline void add_ship_level_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ship_level_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ship_level_list();

  // @@protoc_insertion_point(class_scope:ArenaInfoData)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 power_;
  ::std::string* nickname_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 icon_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ship_guid_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ship_id_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ship_level_list_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaInfoData* default_instance_;
};
// -------------------------------------------------------------------

class ArenaRecordData : public ::google::protobuf::Message {
 public:
  ArenaRecordData();
  virtual ~ArenaRecordData();

  ArenaRecordData(const ArenaRecordData& from);

  inline ArenaRecordData& operator=(const ArenaRecordData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaRecordData& default_instance();

  void Swap(ArenaRecordData* other);

  // implements Message ----------------------------------------------

  ArenaRecordData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaRecordData& from);
  void MergeFrom(const ArenaRecordData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string enemy_user_name = 1;
  inline bool has_enemy_user_name() const;
  inline void clear_enemy_user_name();
  static const int kEnemyUserNameFieldNumber = 1;
  inline const ::std::string& enemy_user_name() const;
  inline void set_enemy_user_name(const ::std::string& value);
  inline void set_enemy_user_name(const char* value);
  inline void set_enemy_user_name(const char* value, size_t size);
  inline ::std::string* mutable_enemy_user_name();
  inline ::std::string* release_enemy_user_name();
  inline void set_allocated_enemy_user_name(::std::string* enemy_user_name);

  // optional .OtherUserInfo other_user_info = 2;
  inline bool has_other_user_info() const;
  inline void clear_other_user_info();
  static const int kOtherUserInfoFieldNumber = 2;
  inline const ::OtherUserInfo& other_user_info() const;
  inline ::OtherUserInfo* mutable_other_user_info();
  inline ::OtherUserInfo* release_other_user_info();
  inline void set_allocated_other_user_info(::OtherUserInfo* other_user_info);

  // required int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required int32 add_score = 4;
  inline bool has_add_score() const;
  inline void clear_add_score();
  static const int kAddScoreFieldNumber = 4;
  inline ::google::protobuf::int32 add_score() const;
  inline void set_add_score(::google::protobuf::int32 value);

  // required int32 add_point = 5;
  inline bool has_add_point() const;
  inline void clear_add_point();
  static const int kAddPointFieldNumber = 5;
  inline ::google::protobuf::int32 add_point() const;
  inline void set_add_point(::google::protobuf::int32 value);

  // required int32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaRecordData)
 private:
  inline void set_has_enemy_user_name();
  inline void clear_has_enemy_user_name();
  inline void set_has_other_user_info();
  inline void clear_has_other_user_info();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_add_score();
  inline void clear_has_add_score();
  inline void set_has_add_point();
  inline void clear_has_add_point();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* enemy_user_name_;
  ::OtherUserInfo* other_user_info_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 add_score_;
  ::google::protobuf::int32 add_point_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaRecordData* default_instance_;
};
// -------------------------------------------------------------------

class ArenaRecordDataList : public ::google::protobuf::Message {
 public:
  ArenaRecordDataList();
  virtual ~ArenaRecordDataList();

  ArenaRecordDataList(const ArenaRecordDataList& from);

  inline ArenaRecordDataList& operator=(const ArenaRecordDataList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaRecordDataList& default_instance();

  void Swap(ArenaRecordDataList* other);

  // implements Message ----------------------------------------------

  ArenaRecordDataList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaRecordDataList& from);
  void MergeFrom(const ArenaRecordDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string current_enemy_user_name = 2;
  inline bool has_current_enemy_user_name() const;
  inline void clear_current_enemy_user_name();
  static const int kCurrentEnemyUserNameFieldNumber = 2;
  inline const ::std::string& current_enemy_user_name() const;
  inline void set_current_enemy_user_name(const ::std::string& value);
  inline void set_current_enemy_user_name(const char* value);
  inline void set_current_enemy_user_name(const char* value, size_t size);
  inline ::std::string* mutable_current_enemy_user_name();
  inline ::std::string* release_current_enemy_user_name();
  inline void set_allocated_current_enemy_user_name(::std::string* current_enemy_user_name);

  // repeated .ArenaRecordData record_info_list = 3;
  inline int record_info_list_size() const;
  inline void clear_record_info_list();
  static const int kRecordInfoListFieldNumber = 3;
  inline const ::ArenaRecordData& record_info_list(int index) const;
  inline ::ArenaRecordData* mutable_record_info_list(int index);
  inline ::ArenaRecordData* add_record_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ArenaRecordData >&
      record_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ArenaRecordData >*
      mutable_record_info_list();

  // @@protoc_insertion_point(class_scope:ArenaRecordDataList)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_current_enemy_user_name();
  inline void clear_has_current_enemy_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::std::string* current_enemy_user_name_;
  ::google::protobuf::RepeatedPtrField< ::ArenaRecordData > record_info_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaRecordDataList* default_instance_;
};
// -------------------------------------------------------------------

class ArenaInfoReq : public ::google::protobuf::Message {
 public:
  ArenaInfoReq();
  virtual ~ArenaInfoReq();

  ArenaInfoReq(const ArenaInfoReq& from);

  inline ArenaInfoReq& operator=(const ArenaInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaInfoReq& default_instance();

  void Swap(ArenaInfoReq* other);

  // implements Message ----------------------------------------------

  ArenaInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaInfoReq& from);
  void MergeFrom(const ArenaInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaInfoReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class ArenaInfoResp : public ::google::protobuf::Message {
 public:
  ArenaInfoResp();
  virtual ~ArenaInfoResp();

  ArenaInfoResp(const ArenaInfoResp& from);

  inline ArenaInfoResp& operator=(const ArenaInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaInfoResp& default_instance();

  void Swap(ArenaInfoResp* other);

  // implements Message ----------------------------------------------

  ArenaInfoResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaInfoResp& from);
  void MergeFrom(const ArenaInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // optional .ArenaInfoData my_info = 3;
  inline bool has_my_info() const;
  inline void clear_my_info();
  static const int kMyInfoFieldNumber = 3;
  inline const ::ArenaInfoData& my_info() const;
  inline ::ArenaInfoData* mutable_my_info();
  inline ::ArenaInfoData* release_my_info();
  inline void set_allocated_my_info(::ArenaInfoData* my_info);

  // repeated .ArenaInfoData their_info = 4;
  inline int their_info_size() const;
  inline void clear_their_info();
  static const int kTheirInfoFieldNumber = 4;
  inline const ::ArenaInfoData& their_info(int index) const;
  inline ::ArenaInfoData* mutable_their_info(int index);
  inline ::ArenaInfoData* add_their_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ArenaInfoData >&
      their_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ArenaInfoData >*
      mutable_their_info();

  // optional int64 cur_3_day = 5;
  inline bool has_cur_3_day() const;
  inline void clear_cur_3_day();
  static const int kCur3DayFieldNumber = 5;
  inline ::google::protobuf::int64 cur_3_day() const;
  inline void set_cur_3_day(::google::protobuf::int64 value);

  // optional int64 last_reflesh = 6;
  inline bool has_last_reflesh() const;
  inline void clear_last_reflesh();
  static const int kLastRefleshFieldNumber = 6;
  inline ::google::protobuf::int64 last_reflesh() const;
  inline void set_last_reflesh(::google::protobuf::int64 value);

  // optional .ArenaRecordDataList record_list = 7;
  inline bool has_record_list() const;
  inline void clear_record_list();
  static const int kRecordListFieldNumber = 7;
  inline const ::ArenaRecordDataList& record_list() const;
  inline ::ArenaRecordDataList* mutable_record_list();
  inline ::ArenaRecordDataList* release_record_list();
  inline void set_allocated_record_list(::ArenaRecordDataList* record_list);

  // @@protoc_insertion_point(class_scope:ArenaInfoResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();
  inline void set_has_my_info();
  inline void clear_has_my_info();
  inline void set_has_cur_3_day();
  inline void clear_has_cur_3_day();
  inline void set_has_last_reflesh();
  inline void clear_has_last_reflesh();
  inline void set_has_record_list();
  inline void clear_has_record_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::ArenaInfoData* my_info_;
  ::google::protobuf::RepeatedPtrField< ::ArenaInfoData > their_info_;
  ::google::protobuf::int64 cur_3_day_;
  ::google::protobuf::int64 last_reflesh_;
  ::ArenaRecordDataList* record_list_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class ArenaAddTimesReq : public ::google::protobuf::Message {
 public:
  ArenaAddTimesReq();
  virtual ~ArenaAddTimesReq();

  ArenaAddTimesReq(const ArenaAddTimesReq& from);

  inline ArenaAddTimesReq& operator=(const ArenaAddTimesReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaAddTimesReq& default_instance();

  void Swap(ArenaAddTimesReq* other);

  // implements Message ----------------------------------------------

  ArenaAddTimesReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaAddTimesReq& from);
  void MergeFrom(const ArenaAddTimesReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaAddTimesReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaAddTimesReq* default_instance_;
};
// -------------------------------------------------------------------

class ArenaAddTimesResp : public ::google::protobuf::Message {
 public:
  ArenaAddTimesResp();
  virtual ~ArenaAddTimesResp();

  ArenaAddTimesResp(const ArenaAddTimesResp& from);

  inline ArenaAddTimesResp& operator=(const ArenaAddTimesResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaAddTimesResp& default_instance();

  void Swap(ArenaAddTimesResp* other);

  // implements Message ----------------------------------------------

  ArenaAddTimesResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaAddTimesResp& from);
  void MergeFrom(const ArenaAddTimesResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // @@protoc_insertion_point(class_scope:ArenaAddTimesResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaAddTimesResp* default_instance_;
};
// -------------------------------------------------------------------

class ArenaGetDailyRewardReq : public ::google::protobuf::Message {
 public:
  ArenaGetDailyRewardReq();
  virtual ~ArenaGetDailyRewardReq();

  ArenaGetDailyRewardReq(const ArenaGetDailyRewardReq& from);

  inline ArenaGetDailyRewardReq& operator=(const ArenaGetDailyRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaGetDailyRewardReq& default_instance();

  void Swap(ArenaGetDailyRewardReq* other);

  // implements Message ----------------------------------------------

  ArenaGetDailyRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaGetDailyRewardReq& from);
  void MergeFrom(const ArenaGetDailyRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaGetDailyRewardReq)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaGetDailyRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class ArenaGetDailyRewardResp : public ::google::protobuf::Message {
 public:
  ArenaGetDailyRewardResp();
  virtual ~ArenaGetDailyRewardResp();

  ArenaGetDailyRewardResp(const ArenaGetDailyRewardResp& from);

  inline ArenaGetDailyRewardResp& operator=(const ArenaGetDailyRewardResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaGetDailyRewardResp& default_instance();

  void Swap(ArenaGetDailyRewardResp* other);

  // implements Message ----------------------------------------------

  ArenaGetDailyRewardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaGetDailyRewardResp& from);
  void MergeFrom(const ArenaGetDailyRewardResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // @@protoc_insertion_point(class_scope:ArenaGetDailyRewardResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaGetDailyRewardResp* default_instance_;
};
// -------------------------------------------------------------------

class ArenaChallengeReq : public ::google::protobuf::Message {
 public:
  ArenaChallengeReq();
  virtual ~ArenaChallengeReq();

  ArenaChallengeReq(const ArenaChallengeReq& from);

  inline ArenaChallengeReq& operator=(const ArenaChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaChallengeReq& default_instance();

  void Swap(ArenaChallengeReq* other);

  // implements Message ----------------------------------------------

  ArenaChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaChallengeReq& from);
  void MergeFrom(const ArenaChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaChallengeReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

class ArenaChallengeResp : public ::google::protobuf::Message {
 public:
  ArenaChallengeResp();
  virtual ~ArenaChallengeResp();

  ArenaChallengeResp(const ArenaChallengeResp& from);

  inline ArenaChallengeResp& operator=(const ArenaChallengeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaChallengeResp& default_instance();

  void Swap(ArenaChallengeResp* other);

  // implements Message ----------------------------------------------

  ArenaChallengeResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaChallengeResp& from);
  void MergeFrom(const ArenaChallengeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // repeated .AirShip attack_list = 3;
  inline int attack_list_size() const;
  inline void clear_attack_list();
  static const int kAttackListFieldNumber = 3;
  inline const ::AirShip& attack_list(int index) const;
  inline ::AirShip* mutable_attack_list(int index);
  inline ::AirShip* add_attack_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
      attack_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
      mutable_attack_list();

  // repeated .AirShip hurter_list = 4;
  inline int hurter_list_size() const;
  inline void clear_hurter_list();
  static const int kHurterListFieldNumber = 4;
  inline const ::AirShip& hurter_list(int index) const;
  inline ::AirShip* mutable_hurter_list(int index);
  inline ::AirShip* add_hurter_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
      hurter_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
      mutable_hurter_list();

  // optional int32 get_score = 5;
  inline bool has_get_score() const;
  inline void clear_get_score();
  static const int kGetScoreFieldNumber = 5;
  inline ::google::protobuf::int32 get_score() const;
  inline void set_get_score(::google::protobuf::int32 value);

  // optional int32 add_point = 6;
  inline bool has_add_point() const;
  inline void clear_add_point();
  static const int kAddPointFieldNumber = 6;
  inline ::google::protobuf::int32 add_point() const;
  inline void set_add_point(::google::protobuf::int32 value);

  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaChallengeResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();
  inline void set_has_get_score();
  inline void clear_has_get_score();
  inline void set_has_add_point();
  inline void clear_has_add_point();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::RepeatedPtrField< ::AirShip > attack_list_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 get_score_;
  ::google::protobuf::RepeatedPtrField< ::AirShip > hurter_list_;
  ::google::protobuf::int32 add_point_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaChallengeResp* default_instance_;
};
// -------------------------------------------------------------------

class ArenaTitleReq : public ::google::protobuf::Message {
 public:
  ArenaTitleReq();
  virtual ~ArenaTitleReq();

  ArenaTitleReq(const ArenaTitleReq& from);

  inline ArenaTitleReq& operator=(const ArenaTitleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaTitleReq& default_instance();

  void Swap(ArenaTitleReq* other);

  // implements Message ----------------------------------------------

  ArenaTitleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaTitleReq& from);
  void MergeFrom(const ArenaTitleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaTitleReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaTitleReq* default_instance_;
};
// -------------------------------------------------------------------

class ArenaTitleResp : public ::google::protobuf::Message {
 public:
  ArenaTitleResp();
  virtual ~ArenaTitleResp();

  ArenaTitleResp(const ArenaTitleResp& from);

  inline ArenaTitleResp& operator=(const ArenaTitleResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaTitleResp& default_instance();

  void Swap(ArenaTitleResp* other);

  // implements Message ----------------------------------------------

  ArenaTitleResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaTitleResp& from);
  void MergeFrom(const ArenaTitleResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .UserSync user_sync = 2;
  inline bool has_user_sync() const;
  inline void clear_user_sync();
  static const int kUserSyncFieldNumber = 2;
  inline const ::UserSync& user_sync() const;
  inline ::UserSync* mutable_user_sync();
  inline ::UserSync* release_user_sync();
  inline void set_allocated_user_sync(::UserSync* user_sync);

  // @@protoc_insertion_point(class_scope:ArenaTitleResp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_user_sync();
  inline void clear_has_user_sync();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::UserSync* user_sync_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CmdArena_2eproto();
  friend void protobuf_AssignDesc_CmdArena_2eproto();
  friend void protobuf_ShutdownFile_CmdArena_2eproto();

  void InitAsDefaultInstance();
  static ArenaTitleResp* default_instance_;
};
// ===================================================================


// ===================================================================

// ArenaInfoData

// required int32 rank = 1;
inline bool ArenaInfoData::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaInfoData::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaInfoData::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaInfoData::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ArenaInfoData::rank() const {
  return rank_;
}
inline void ArenaInfoData::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required string user_name = 2;
inline bool ArenaInfoData::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaInfoData::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaInfoData::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaInfoData::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& ArenaInfoData::user_name() const {
  return *user_name_;
}
inline void ArenaInfoData::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void ArenaInfoData::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void ArenaInfoData::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaInfoData::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* ArenaInfoData::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaInfoData::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 power = 3;
inline bool ArenaInfoData::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaInfoData::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaInfoData::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaInfoData::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 ArenaInfoData::power() const {
  return power_;
}
inline void ArenaInfoData::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// required string nickname = 4;
inline bool ArenaInfoData::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaInfoData::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaInfoData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaInfoData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ArenaInfoData::nickname() const {
  return *nickname_;
}
inline void ArenaInfoData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ArenaInfoData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ArenaInfoData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaInfoData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ArenaInfoData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaInfoData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 score = 5;
inline bool ArenaInfoData::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaInfoData::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaInfoData::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaInfoData::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ArenaInfoData::score() const {
  return score_;
}
inline void ArenaInfoData::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// required int32 icon_id = 6;
inline bool ArenaInfoData::has_icon_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaInfoData::set_has_icon_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaInfoData::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaInfoData::clear_icon_id() {
  icon_id_ = 0;
  clear_has_icon_id();
}
inline ::google::protobuf::int32 ArenaInfoData::icon_id() const {
  return icon_id_;
}
inline void ArenaInfoData::set_icon_id(::google::protobuf::int32 value) {
  set_has_icon_id();
  icon_id_ = value;
}

// required int32 level = 7;
inline bool ArenaInfoData::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaInfoData::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaInfoData::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaInfoData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ArenaInfoData::level() const {
  return level_;
}
inline void ArenaInfoData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated int32 ship_guid_list = 8;
inline int ArenaInfoData::ship_guid_list_size() const {
  return ship_guid_list_.size();
}
inline void ArenaInfoData::clear_ship_guid_list() {
  ship_guid_list_.Clear();
}
inline ::google::protobuf::int32 ArenaInfoData::ship_guid_list(int index) const {
  return ship_guid_list_.Get(index);
}
inline void ArenaInfoData::set_ship_guid_list(int index, ::google::protobuf::int32 value) {
  ship_guid_list_.Set(index, value);
}
inline void ArenaInfoData::add_ship_guid_list(::google::protobuf::int32 value) {
  ship_guid_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ArenaInfoData::ship_guid_list() const {
  return ship_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ArenaInfoData::mutable_ship_guid_list() {
  return &ship_guid_list_;
}

// repeated int32 ship_id_list = 9;
inline int ArenaInfoData::ship_id_list_size() const {
  return ship_id_list_.size();
}
inline void ArenaInfoData::clear_ship_id_list() {
  ship_id_list_.Clear();
}
inline ::google::protobuf::int32 ArenaInfoData::ship_id_list(int index) const {
  return ship_id_list_.Get(index);
}
inline void ArenaInfoData::set_ship_id_list(int index, ::google::protobuf::int32 value) {
  ship_id_list_.Set(index, value);
}
inline void ArenaInfoData::add_ship_id_list(::google::protobuf::int32 value) {
  ship_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ArenaInfoData::ship_id_list() const {
  return ship_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ArenaInfoData::mutable_ship_id_list() {
  return &ship_id_list_;
}

// repeated int32 ship_level_list = 10;
inline int ArenaInfoData::ship_level_list_size() const {
  return ship_level_list_.size();
}
inline void ArenaInfoData::clear_ship_level_list() {
  ship_level_list_.Clear();
}
inline ::google::protobuf::int32 ArenaInfoData::ship_level_list(int index) const {
  return ship_level_list_.Get(index);
}
inline void ArenaInfoData::set_ship_level_list(int index, ::google::protobuf::int32 value) {
  ship_level_list_.Set(index, value);
}
inline void ArenaInfoData::add_ship_level_list(::google::protobuf::int32 value) {
  ship_level_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ArenaInfoData::ship_level_list() const {
  return ship_level_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ArenaInfoData::mutable_ship_level_list() {
  return &ship_level_list_;
}

// -------------------------------------------------------------------

// ArenaRecordData

// required string enemy_user_name = 1;
inline bool ArenaRecordData::has_enemy_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaRecordData::set_has_enemy_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaRecordData::clear_has_enemy_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaRecordData::clear_enemy_user_name() {
  if (enemy_user_name_ != &::google::protobuf::internal::kEmptyString) {
    enemy_user_name_->clear();
  }
  clear_has_enemy_user_name();
}
inline const ::std::string& ArenaRecordData::enemy_user_name() const {
  return *enemy_user_name_;
}
inline void ArenaRecordData::set_enemy_user_name(const ::std::string& value) {
  set_has_enemy_user_name();
  if (enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    enemy_user_name_ = new ::std::string;
  }
  enemy_user_name_->assign(value);
}
inline void ArenaRecordData::set_enemy_user_name(const char* value) {
  set_has_enemy_user_name();
  if (enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    enemy_user_name_ = new ::std::string;
  }
  enemy_user_name_->assign(value);
}
inline void ArenaRecordData::set_enemy_user_name(const char* value, size_t size) {
  set_has_enemy_user_name();
  if (enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    enemy_user_name_ = new ::std::string;
  }
  enemy_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaRecordData::mutable_enemy_user_name() {
  set_has_enemy_user_name();
  if (enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    enemy_user_name_ = new ::std::string;
  }
  return enemy_user_name_;
}
inline ::std::string* ArenaRecordData::release_enemy_user_name() {
  clear_has_enemy_user_name();
  if (enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = enemy_user_name_;
    enemy_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaRecordData::set_allocated_enemy_user_name(::std::string* enemy_user_name) {
  if (enemy_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete enemy_user_name_;
  }
  if (enemy_user_name) {
    set_has_enemy_user_name();
    enemy_user_name_ = enemy_user_name;
  } else {
    clear_has_enemy_user_name();
    enemy_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .OtherUserInfo other_user_info = 2;
inline bool ArenaRecordData::has_other_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaRecordData::set_has_other_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaRecordData::clear_has_other_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaRecordData::clear_other_user_info() {
  if (other_user_info_ != NULL) other_user_info_->::OtherUserInfo::Clear();
  clear_has_other_user_info();
}
inline const ::OtherUserInfo& ArenaRecordData::other_user_info() const {
  return other_user_info_ != NULL ? *other_user_info_ : *default_instance_->other_user_info_;
}
inline ::OtherUserInfo* ArenaRecordData::mutable_other_user_info() {
  set_has_other_user_info();
  if (other_user_info_ == NULL) other_user_info_ = new ::OtherUserInfo;
  return other_user_info_;
}
inline ::OtherUserInfo* ArenaRecordData::release_other_user_info() {
  clear_has_other_user_info();
  ::OtherUserInfo* temp = other_user_info_;
  other_user_info_ = NULL;
  return temp;
}
inline void ArenaRecordData::set_allocated_other_user_info(::OtherUserInfo* other_user_info) {
  delete other_user_info_;
  other_user_info_ = other_user_info;
  if (other_user_info) {
    set_has_other_user_info();
  } else {
    clear_has_other_user_info();
  }
}

// required int64 time = 3;
inline bool ArenaRecordData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaRecordData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaRecordData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaRecordData::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ArenaRecordData::time() const {
  return time_;
}
inline void ArenaRecordData::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required int32 add_score = 4;
inline bool ArenaRecordData::has_add_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaRecordData::set_has_add_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaRecordData::clear_has_add_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaRecordData::clear_add_score() {
  add_score_ = 0;
  clear_has_add_score();
}
inline ::google::protobuf::int32 ArenaRecordData::add_score() const {
  return add_score_;
}
inline void ArenaRecordData::set_add_score(::google::protobuf::int32 value) {
  set_has_add_score();
  add_score_ = value;
}

// required int32 add_point = 5;
inline bool ArenaRecordData::has_add_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaRecordData::set_has_add_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaRecordData::clear_has_add_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaRecordData::clear_add_point() {
  add_point_ = 0;
  clear_has_add_point();
}
inline ::google::protobuf::int32 ArenaRecordData::add_point() const {
  return add_point_;
}
inline void ArenaRecordData::set_add_point(::google::protobuf::int32 value) {
  set_has_add_point();
  add_point_ = value;
}

// required int32 result = 6;
inline bool ArenaRecordData::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaRecordData::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaRecordData::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaRecordData::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaRecordData::result() const {
  return result_;
}
inline void ArenaRecordData::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ArenaRecordDataList

// required string user_name = 1;
inline bool ArenaRecordDataList::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaRecordDataList::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaRecordDataList::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaRecordDataList::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& ArenaRecordDataList::user_name() const {
  return *user_name_;
}
inline void ArenaRecordDataList::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void ArenaRecordDataList::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void ArenaRecordDataList::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaRecordDataList::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* ArenaRecordDataList::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaRecordDataList::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string current_enemy_user_name = 2;
inline bool ArenaRecordDataList::has_current_enemy_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaRecordDataList::set_has_current_enemy_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaRecordDataList::clear_has_current_enemy_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaRecordDataList::clear_current_enemy_user_name() {
  if (current_enemy_user_name_ != &::google::protobuf::internal::kEmptyString) {
    current_enemy_user_name_->clear();
  }
  clear_has_current_enemy_user_name();
}
inline const ::std::string& ArenaRecordDataList::current_enemy_user_name() const {
  return *current_enemy_user_name_;
}
inline void ArenaRecordDataList::set_current_enemy_user_name(const ::std::string& value) {
  set_has_current_enemy_user_name();
  if (current_enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    current_enemy_user_name_ = new ::std::string;
  }
  current_enemy_user_name_->assign(value);
}
inline void ArenaRecordDataList::set_current_enemy_user_name(const char* value) {
  set_has_current_enemy_user_name();
  if (current_enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    current_enemy_user_name_ = new ::std::string;
  }
  current_enemy_user_name_->assign(value);
}
inline void ArenaRecordDataList::set_current_enemy_user_name(const char* value, size_t size) {
  set_has_current_enemy_user_name();
  if (current_enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    current_enemy_user_name_ = new ::std::string;
  }
  current_enemy_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaRecordDataList::mutable_current_enemy_user_name() {
  set_has_current_enemy_user_name();
  if (current_enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    current_enemy_user_name_ = new ::std::string;
  }
  return current_enemy_user_name_;
}
inline ::std::string* ArenaRecordDataList::release_current_enemy_user_name() {
  clear_has_current_enemy_user_name();
  if (current_enemy_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = current_enemy_user_name_;
    current_enemy_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaRecordDataList::set_allocated_current_enemy_user_name(::std::string* current_enemy_user_name) {
  if (current_enemy_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete current_enemy_user_name_;
  }
  if (current_enemy_user_name) {
    set_has_current_enemy_user_name();
    current_enemy_user_name_ = current_enemy_user_name;
  } else {
    clear_has_current_enemy_user_name();
    current_enemy_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ArenaRecordData record_info_list = 3;
inline int ArenaRecordDataList::record_info_list_size() const {
  return record_info_list_.size();
}
inline void ArenaRecordDataList::clear_record_info_list() {
  record_info_list_.Clear();
}
inline const ::ArenaRecordData& ArenaRecordDataList::record_info_list(int index) const {
  return record_info_list_.Get(index);
}
inline ::ArenaRecordData* ArenaRecordDataList::mutable_record_info_list(int index) {
  return record_info_list_.Mutable(index);
}
inline ::ArenaRecordData* ArenaRecordDataList::add_record_info_list() {
  return record_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ArenaRecordData >&
ArenaRecordDataList::record_info_list() const {
  return record_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ArenaRecordData >*
ArenaRecordDataList::mutable_record_info_list() {
  return &record_info_list_;
}

// -------------------------------------------------------------------

// ArenaInfoReq

// required int32 type = 1;
inline bool ArenaInfoReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaInfoReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaInfoReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaInfoReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ArenaInfoReq::type() const {
  return type_;
}
inline void ArenaInfoReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ArenaInfoResp

// required int32 result = 1;
inline bool ArenaInfoResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaInfoResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaInfoResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaInfoResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaInfoResp::result() const {
  return result_;
}
inline void ArenaInfoResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool ArenaInfoResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaInfoResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaInfoResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaInfoResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& ArenaInfoResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* ArenaInfoResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* ArenaInfoResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void ArenaInfoResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// optional .ArenaInfoData my_info = 3;
inline bool ArenaInfoResp::has_my_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaInfoResp::set_has_my_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaInfoResp::clear_has_my_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaInfoResp::clear_my_info() {
  if (my_info_ != NULL) my_info_->::ArenaInfoData::Clear();
  clear_has_my_info();
}
inline const ::ArenaInfoData& ArenaInfoResp::my_info() const {
  return my_info_ != NULL ? *my_info_ : *default_instance_->my_info_;
}
inline ::ArenaInfoData* ArenaInfoResp::mutable_my_info() {
  set_has_my_info();
  if (my_info_ == NULL) my_info_ = new ::ArenaInfoData;
  return my_info_;
}
inline ::ArenaInfoData* ArenaInfoResp::release_my_info() {
  clear_has_my_info();
  ::ArenaInfoData* temp = my_info_;
  my_info_ = NULL;
  return temp;
}
inline void ArenaInfoResp::set_allocated_my_info(::ArenaInfoData* my_info) {
  delete my_info_;
  my_info_ = my_info;
  if (my_info) {
    set_has_my_info();
  } else {
    clear_has_my_info();
  }
}

// repeated .ArenaInfoData their_info = 4;
inline int ArenaInfoResp::their_info_size() const {
  return their_info_.size();
}
inline void ArenaInfoResp::clear_their_info() {
  their_info_.Clear();
}
inline const ::ArenaInfoData& ArenaInfoResp::their_info(int index) const {
  return their_info_.Get(index);
}
inline ::ArenaInfoData* ArenaInfoResp::mutable_their_info(int index) {
  return their_info_.Mutable(index);
}
inline ::ArenaInfoData* ArenaInfoResp::add_their_info() {
  return their_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ArenaInfoData >&
ArenaInfoResp::their_info() const {
  return their_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ArenaInfoData >*
ArenaInfoResp::mutable_their_info() {
  return &their_info_;
}

// optional int64 cur_3_day = 5;
inline bool ArenaInfoResp::has_cur_3_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaInfoResp::set_has_cur_3_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaInfoResp::clear_has_cur_3_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaInfoResp::clear_cur_3_day() {
  cur_3_day_ = GOOGLE_LONGLONG(0);
  clear_has_cur_3_day();
}
inline ::google::protobuf::int64 ArenaInfoResp::cur_3_day() const {
  return cur_3_day_;
}
inline void ArenaInfoResp::set_cur_3_day(::google::protobuf::int64 value) {
  set_has_cur_3_day();
  cur_3_day_ = value;
}

// optional int64 last_reflesh = 6;
inline bool ArenaInfoResp::has_last_reflesh() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaInfoResp::set_has_last_reflesh() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaInfoResp::clear_has_last_reflesh() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaInfoResp::clear_last_reflesh() {
  last_reflesh_ = GOOGLE_LONGLONG(0);
  clear_has_last_reflesh();
}
inline ::google::protobuf::int64 ArenaInfoResp::last_reflesh() const {
  return last_reflesh_;
}
inline void ArenaInfoResp::set_last_reflesh(::google::protobuf::int64 value) {
  set_has_last_reflesh();
  last_reflesh_ = value;
}

// optional .ArenaRecordDataList record_list = 7;
inline bool ArenaInfoResp::has_record_list() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaInfoResp::set_has_record_list() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaInfoResp::clear_has_record_list() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaInfoResp::clear_record_list() {
  if (record_list_ != NULL) record_list_->::ArenaRecordDataList::Clear();
  clear_has_record_list();
}
inline const ::ArenaRecordDataList& ArenaInfoResp::record_list() const {
  return record_list_ != NULL ? *record_list_ : *default_instance_->record_list_;
}
inline ::ArenaRecordDataList* ArenaInfoResp::mutable_record_list() {
  set_has_record_list();
  if (record_list_ == NULL) record_list_ = new ::ArenaRecordDataList;
  return record_list_;
}
inline ::ArenaRecordDataList* ArenaInfoResp::release_record_list() {
  clear_has_record_list();
  ::ArenaRecordDataList* temp = record_list_;
  record_list_ = NULL;
  return temp;
}
inline void ArenaInfoResp::set_allocated_record_list(::ArenaRecordDataList* record_list) {
  delete record_list_;
  record_list_ = record_list;
  if (record_list) {
    set_has_record_list();
  } else {
    clear_has_record_list();
  }
}

// -------------------------------------------------------------------

// ArenaAddTimesReq

// required int32 type = 1;
inline bool ArenaAddTimesReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaAddTimesReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaAddTimesReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaAddTimesReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ArenaAddTimesReq::type() const {
  return type_;
}
inline void ArenaAddTimesReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 times = 2;
inline bool ArenaAddTimesReq::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaAddTimesReq::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaAddTimesReq::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaAddTimesReq::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 ArenaAddTimesReq::times() const {
  return times_;
}
inline void ArenaAddTimesReq::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// ArenaAddTimesResp

// required int32 result = 1;
inline bool ArenaAddTimesResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaAddTimesResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaAddTimesResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaAddTimesResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaAddTimesResp::result() const {
  return result_;
}
inline void ArenaAddTimesResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool ArenaAddTimesResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaAddTimesResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaAddTimesResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaAddTimesResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& ArenaAddTimesResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* ArenaAddTimesResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* ArenaAddTimesResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void ArenaAddTimesResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// -------------------------------------------------------------------

// ArenaGetDailyRewardReq

// required int32 result = 1;
inline bool ArenaGetDailyRewardReq::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaGetDailyRewardReq::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaGetDailyRewardReq::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaGetDailyRewardReq::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaGetDailyRewardReq::result() const {
  return result_;
}
inline void ArenaGetDailyRewardReq::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ArenaGetDailyRewardResp

// required int32 result = 1;
inline bool ArenaGetDailyRewardResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaGetDailyRewardResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaGetDailyRewardResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaGetDailyRewardResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaGetDailyRewardResp::result() const {
  return result_;
}
inline void ArenaGetDailyRewardResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool ArenaGetDailyRewardResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaGetDailyRewardResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaGetDailyRewardResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaGetDailyRewardResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& ArenaGetDailyRewardResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* ArenaGetDailyRewardResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* ArenaGetDailyRewardResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void ArenaGetDailyRewardResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// -------------------------------------------------------------------

// ArenaChallengeReq

// required int32 type = 1;
inline bool ArenaChallengeReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaChallengeReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaChallengeReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaChallengeReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ArenaChallengeReq::type() const {
  return type_;
}
inline void ArenaChallengeReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 rank = 2;
inline bool ArenaChallengeReq::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaChallengeReq::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaChallengeReq::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaChallengeReq::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ArenaChallengeReq::rank() const {
  return rank_;
}
inline void ArenaChallengeReq::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 result = 3;
inline bool ArenaChallengeReq::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaChallengeReq::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaChallengeReq::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaChallengeReq::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaChallengeReq::result() const {
  return result_;
}
inline void ArenaChallengeReq::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ArenaChallengeResp

// required int32 result = 1;
inline bool ArenaChallengeResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaChallengeResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaChallengeResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaChallengeResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaChallengeResp::result() const {
  return result_;
}
inline void ArenaChallengeResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool ArenaChallengeResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaChallengeResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaChallengeResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaChallengeResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& ArenaChallengeResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* ArenaChallengeResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* ArenaChallengeResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void ArenaChallengeResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}

// repeated .AirShip attack_list = 3;
inline int ArenaChallengeResp::attack_list_size() const {
  return attack_list_.size();
}
inline void ArenaChallengeResp::clear_attack_list() {
  attack_list_.Clear();
}
inline const ::AirShip& ArenaChallengeResp::attack_list(int index) const {
  return attack_list_.Get(index);
}
inline ::AirShip* ArenaChallengeResp::mutable_attack_list(int index) {
  return attack_list_.Mutable(index);
}
inline ::AirShip* ArenaChallengeResp::add_attack_list() {
  return attack_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
ArenaChallengeResp::attack_list() const {
  return attack_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
ArenaChallengeResp::mutable_attack_list() {
  return &attack_list_;
}

// repeated .AirShip hurter_list = 4;
inline int ArenaChallengeResp::hurter_list_size() const {
  return hurter_list_.size();
}
inline void ArenaChallengeResp::clear_hurter_list() {
  hurter_list_.Clear();
}
inline const ::AirShip& ArenaChallengeResp::hurter_list(int index) const {
  return hurter_list_.Get(index);
}
inline ::AirShip* ArenaChallengeResp::mutable_hurter_list(int index) {
  return hurter_list_.Mutable(index);
}
inline ::AirShip* ArenaChallengeResp::add_hurter_list() {
  return hurter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
ArenaChallengeResp::hurter_list() const {
  return hurter_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
ArenaChallengeResp::mutable_hurter_list() {
  return &hurter_list_;
}

// optional int32 get_score = 5;
inline bool ArenaChallengeResp::has_get_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaChallengeResp::set_has_get_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaChallengeResp::clear_has_get_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaChallengeResp::clear_get_score() {
  get_score_ = 0;
  clear_has_get_score();
}
inline ::google::protobuf::int32 ArenaChallengeResp::get_score() const {
  return get_score_;
}
inline void ArenaChallengeResp::set_get_score(::google::protobuf::int32 value) {
  set_has_get_score();
  get_score_ = value;
}

// optional int32 add_point = 6;
inline bool ArenaChallengeResp::has_add_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaChallengeResp::set_has_add_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaChallengeResp::clear_has_add_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaChallengeResp::clear_add_point() {
  add_point_ = 0;
  clear_has_add_point();
}
inline ::google::protobuf::int32 ArenaChallengeResp::add_point() const {
  return add_point_;
}
inline void ArenaChallengeResp::set_add_point(::google::protobuf::int32 value) {
  set_has_add_point();
  add_point_ = value;
}

// optional int32 type = 7;
inline bool ArenaChallengeResp::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaChallengeResp::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaChallengeResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaChallengeResp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ArenaChallengeResp::type() const {
  return type_;
}
inline void ArenaChallengeResp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ArenaTitleReq

// required int32 type = 1;
inline bool ArenaTitleReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaTitleReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaTitleReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaTitleReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ArenaTitleReq::type() const {
  return type_;
}
inline void ArenaTitleReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ArenaTitleResp

// required int32 result = 1;
inline bool ArenaTitleResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaTitleResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaTitleResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaTitleResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ArenaTitleResp::result() const {
  return result_;
}
inline void ArenaTitleResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .UserSync user_sync = 2;
inline bool ArenaTitleResp::has_user_sync() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaTitleResp::set_has_user_sync() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaTitleResp::clear_has_user_sync() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaTitleResp::clear_user_sync() {
  if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
  clear_has_user_sync();
}
inline const ::UserSync& ArenaTitleResp::user_sync() const {
  return user_sync_ != NULL ? *user_sync_ : *default_instance_->user_sync_;
}
inline ::UserSync* ArenaTitleResp::mutable_user_sync() {
  set_has_user_sync();
  if (user_sync_ == NULL) user_sync_ = new ::UserSync;
  return user_sync_;
}
inline ::UserSync* ArenaTitleResp::release_user_sync() {
  clear_has_user_sync();
  ::UserSync* temp = user_sync_;
  user_sync_ = NULL;
  return temp;
}
inline void ArenaTitleResp::set_allocated_user_sync(::UserSync* user_sync) {
  delete user_sync_;
  user_sync_ = user_sync;
  if (user_sync) {
    set_has_user_sync();
  } else {
    clear_has_user_sync();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CmdArena_2eproto__INCLUDED
