// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdBuilding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdBuilding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BuildingUpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpgradeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpgradeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpdateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpdateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpdateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpdateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpgradeSpeedUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpgradeSpeedUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpgradeSpeedUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpgradeSpeedUpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildQueueAddReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildQueueAddReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildQueueAddResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildQueueAddResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildQueueRemoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildQueueRemoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildQueueRemoveResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildQueueRemoveResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdBuilding_2eproto() {
  protobuf_AddDesc_CmdBuilding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdBuilding.proto");
  GOOGLE_CHECK(file != NULL);
  BuildingUpgradeReq_descriptor_ = file->message_type(0);
  static const int BuildingUpgradeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeReq, index_),
  };
  BuildingUpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpgradeReq_descriptor_,
      BuildingUpgradeReq::default_instance_,
      BuildingUpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpgradeReq));
  BuildingUpgradeResp_descriptor_ = file->message_type(1);
  static const int BuildingUpgradeResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResp, info_),
  };
  BuildingUpgradeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpgradeResp_descriptor_,
      BuildingUpgradeResp::default_instance_,
      BuildingUpgradeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpgradeResp));
  BuildingUpdateReq_descriptor_ = file->message_type(2);
  static const int BuildingUpdateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateReq, index_),
  };
  BuildingUpdateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpdateReq_descriptor_,
      BuildingUpdateReq::default_instance_,
      BuildingUpdateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpdateReq));
  BuildingUpdateResp_descriptor_ = file->message_type(3);
  static const int BuildingUpdateResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateResp, index_),
  };
  BuildingUpdateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpdateResp_descriptor_,
      BuildingUpdateResp::default_instance_,
      BuildingUpdateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpdateResp));
  BuildingUpgradeSpeedUpReq_descriptor_ = file->message_type(4);
  static const int BuildingUpgradeSpeedUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpReq, index_),
  };
  BuildingUpgradeSpeedUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpgradeSpeedUpReq_descriptor_,
      BuildingUpgradeSpeedUpReq::default_instance_,
      BuildingUpgradeSpeedUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpgradeSpeedUpReq));
  BuildingUpgradeSpeedUpResp_descriptor_ = file->message_type(5);
  static const int BuildingUpgradeSpeedUpResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpResp, index_),
  };
  BuildingUpgradeSpeedUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpgradeSpeedUpResp_descriptor_,
      BuildingUpgradeSpeedUpResp::default_instance_,
      BuildingUpgradeSpeedUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpgradeSpeedUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpgradeSpeedUpResp));
  BuildQueueAddReq_descriptor_ = file->message_type(6);
  static const int BuildQueueAddReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueAddReq, num_),
  };
  BuildQueueAddReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildQueueAddReq_descriptor_,
      BuildQueueAddReq::default_instance_,
      BuildQueueAddReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueAddReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueAddReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildQueueAddReq));
  BuildQueueAddResp_descriptor_ = file->message_type(7);
  static const int BuildQueueAddResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueAddResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueAddResp, user_sync_),
  };
  BuildQueueAddResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildQueueAddResp_descriptor_,
      BuildQueueAddResp::default_instance_,
      BuildQueueAddResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueAddResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueAddResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildQueueAddResp));
  BuildQueueRemoveReq_descriptor_ = file->message_type(8);
  static const int BuildQueueRemoveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueRemoveReq, index_),
  };
  BuildQueueRemoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildQueueRemoveReq_descriptor_,
      BuildQueueRemoveReq::default_instance_,
      BuildQueueRemoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueRemoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueRemoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildQueueRemoveReq));
  BuildQueueRemoveResp_descriptor_ = file->message_type(9);
  static const int BuildQueueRemoveResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueRemoveResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueRemoveResp, user_sync_),
  };
  BuildQueueRemoveResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildQueueRemoveResp_descriptor_,
      BuildQueueRemoveResp::default_instance_,
      BuildQueueRemoveResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueRemoveResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildQueueRemoveResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildQueueRemoveResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdBuilding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpgradeReq_descriptor_, &BuildingUpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpgradeResp_descriptor_, &BuildingUpgradeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpdateReq_descriptor_, &BuildingUpdateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpdateResp_descriptor_, &BuildingUpdateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpgradeSpeedUpReq_descriptor_, &BuildingUpgradeSpeedUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpgradeSpeedUpResp_descriptor_, &BuildingUpgradeSpeedUpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildQueueAddReq_descriptor_, &BuildQueueAddReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildQueueAddResp_descriptor_, &BuildQueueAddResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildQueueRemoveReq_descriptor_, &BuildQueueRemoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildQueueRemoveResp_descriptor_, &BuildQueueRemoveResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdBuilding_2eproto() {
  delete BuildingUpgradeReq::default_instance_;
  delete BuildingUpgradeReq_reflection_;
  delete BuildingUpgradeResp::default_instance_;
  delete BuildingUpgradeResp_reflection_;
  delete BuildingUpdateReq::default_instance_;
  delete BuildingUpdateReq_reflection_;
  delete BuildingUpdateResp::default_instance_;
  delete BuildingUpdateResp_reflection_;
  delete BuildingUpgradeSpeedUpReq::default_instance_;
  delete BuildingUpgradeSpeedUpReq_reflection_;
  delete BuildingUpgradeSpeedUpResp::default_instance_;
  delete BuildingUpgradeSpeedUpResp_reflection_;
  delete BuildQueueAddReq::default_instance_;
  delete BuildQueueAddReq_reflection_;
  delete BuildQueueAddResp::default_instance_;
  delete BuildQueueAddResp_reflection_;
  delete BuildQueueRemoveReq::default_instance_;
  delete BuildQueueRemoveReq_reflection_;
  delete BuildQueueRemoveResp::default_instance_;
  delete BuildQueueRemoveResp_reflection_;
}

void protobuf_AddDesc_CmdBuilding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Building_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CmdBuilding.proto\032\016Building.proto\032\016Use"
    "rSync.proto\"#\n\022BuildingUpgradeReq\022\r\n\005ind"
    "ex\030\001 \002(\005\"`\n\023BuildingUpgradeResp\022\016\n\006resul"
    "t\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\033\n"
    "\004info\030\003 \001(\0132\r.BuildingInfo\"\"\n\021BuildingUp"
    "dateReq\022\r\n\005index\030\001 \002(\005\"Q\n\022BuildingUpdate"
    "Resp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132"
    "\t.UserSync\022\r\n\005index\030\003 \002(\005\"*\n\031BuildingUpg"
    "radeSpeedUpReq\022\r\n\005index\030\001 \002(\005\"v\n\032Buildin"
    "gUpgradeSpeedUpResp\022\016\n\006result\030\001 \002(\005\022\034\n\tu"
    "ser_sync\030\002 \001(\0132\t.UserSync\022\033\n\004info\030\003 \001(\0132"
    "\r.BuildingInfo\022\r\n\005index\030\004 \002(\005\"\037\n\020BuildQu"
    "eueAddReq\022\013\n\003num\030\001 \002(\005\"A\n\021BuildQueueAddR"
    "esp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t"
    ".UserSync\"$\n\023BuildQueueRemoveReq\022\r\n\005inde"
    "x\030\001 \002(\005\"D\n\024BuildQueueRemoveResp\022\016\n\006resul"
    "t\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync", 677);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdBuilding.proto", &protobuf_RegisterTypes);
  BuildingUpgradeReq::default_instance_ = new BuildingUpgradeReq();
  BuildingUpgradeResp::default_instance_ = new BuildingUpgradeResp();
  BuildingUpdateReq::default_instance_ = new BuildingUpdateReq();
  BuildingUpdateResp::default_instance_ = new BuildingUpdateResp();
  BuildingUpgradeSpeedUpReq::default_instance_ = new BuildingUpgradeSpeedUpReq();
  BuildingUpgradeSpeedUpResp::default_instance_ = new BuildingUpgradeSpeedUpResp();
  BuildQueueAddReq::default_instance_ = new BuildQueueAddReq();
  BuildQueueAddResp::default_instance_ = new BuildQueueAddResp();
  BuildQueueRemoveReq::default_instance_ = new BuildQueueRemoveReq();
  BuildQueueRemoveResp::default_instance_ = new BuildQueueRemoveResp();
  BuildingUpgradeReq::default_instance_->InitAsDefaultInstance();
  BuildingUpgradeResp::default_instance_->InitAsDefaultInstance();
  BuildingUpdateReq::default_instance_->InitAsDefaultInstance();
  BuildingUpdateResp::default_instance_->InitAsDefaultInstance();
  BuildingUpgradeSpeedUpReq::default_instance_->InitAsDefaultInstance();
  BuildingUpgradeSpeedUpResp::default_instance_->InitAsDefaultInstance();
  BuildQueueAddReq::default_instance_->InitAsDefaultInstance();
  BuildQueueAddResp::default_instance_->InitAsDefaultInstance();
  BuildQueueRemoveReq::default_instance_->InitAsDefaultInstance();
  BuildQueueRemoveResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdBuilding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdBuilding_2eproto {
  StaticDescriptorInitializer_CmdBuilding_2eproto() {
    protobuf_AddDesc_CmdBuilding_2eproto();
  }
} static_descriptor_initializer_CmdBuilding_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BuildingUpgradeReq::kIndexFieldNumber;
#endif  // !_MSC_VER

BuildingUpgradeReq::BuildingUpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingUpgradeReq::InitAsDefaultInstance() {
}

BuildingUpgradeReq::BuildingUpgradeReq(const BuildingUpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingUpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpgradeReq::~BuildingUpgradeReq() {
  SharedDtor();
}

void BuildingUpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpgradeReq_descriptor_;
}

const BuildingUpgradeReq& BuildingUpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildingUpgradeReq* BuildingUpgradeReq::default_instance_ = NULL;

BuildingUpgradeReq* BuildingUpgradeReq::New() const {
  return new BuildingUpgradeReq;
}

void BuildingUpgradeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingUpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingUpgradeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpgradeReq::MergeFrom(const BuildingUpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpgradeReq::CopyFrom(const BuildingUpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpgradeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildingUpgradeReq::Swap(BuildingUpgradeReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpgradeReq_descriptor_;
  metadata.reflection = BuildingUpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpgradeResp::kResultFieldNumber;
const int BuildingUpgradeResp::kUserSyncFieldNumber;
const int BuildingUpgradeResp::kInfoFieldNumber;
#endif  // !_MSC_VER

BuildingUpgradeResp::BuildingUpgradeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingUpgradeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  info_ = const_cast< ::BuildingInfo*>(&::BuildingInfo::default_instance());
}

BuildingUpgradeResp::BuildingUpgradeResp(const BuildingUpgradeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingUpgradeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpgradeResp::~BuildingUpgradeResp() {
  SharedDtor();
}

void BuildingUpgradeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete info_;
  }
}

void BuildingUpgradeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpgradeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpgradeResp_descriptor_;
}

const BuildingUpgradeResp& BuildingUpgradeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildingUpgradeResp* BuildingUpgradeResp::default_instance_ = NULL;

BuildingUpgradeResp* BuildingUpgradeResp::New() const {
  return new BuildingUpgradeResp;
}

void BuildingUpgradeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::BuildingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpgradeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .BuildingInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingUpgradeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .BuildingInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingUpgradeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .BuildingInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingUpgradeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .BuildingInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpgradeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpgradeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpgradeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpgradeResp::MergeFrom(const BuildingUpgradeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_info()) {
      mutable_info()->::BuildingInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpgradeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpgradeResp::CopyFrom(const BuildingUpgradeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpgradeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void BuildingUpgradeResp::Swap(BuildingUpgradeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpgradeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpgradeResp_descriptor_;
  metadata.reflection = BuildingUpgradeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpdateReq::kIndexFieldNumber;
#endif  // !_MSC_VER

BuildingUpdateReq::BuildingUpdateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingUpdateReq::InitAsDefaultInstance() {
}

BuildingUpdateReq::BuildingUpdateReq(const BuildingUpdateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingUpdateReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpdateReq::~BuildingUpdateReq() {
  SharedDtor();
}

void BuildingUpdateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpdateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpdateReq_descriptor_;
}

const BuildingUpdateReq& BuildingUpdateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildingUpdateReq* BuildingUpdateReq::default_instance_ = NULL;

BuildingUpdateReq* BuildingUpdateReq::New() const {
  return new BuildingUpdateReq;
}

void BuildingUpdateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingUpdateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpdateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpdateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpdateReq::MergeFrom(const BuildingUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpdateReq::CopyFrom(const BuildingUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildingUpdateReq::Swap(BuildingUpdateReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpdateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpdateReq_descriptor_;
  metadata.reflection = BuildingUpdateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpdateResp::kResultFieldNumber;
const int BuildingUpdateResp::kUserSyncFieldNumber;
const int BuildingUpdateResp::kIndexFieldNumber;
#endif  // !_MSC_VER

BuildingUpdateResp::BuildingUpdateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingUpdateResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

BuildingUpdateResp::BuildingUpdateResp(const BuildingUpdateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingUpdateResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpdateResp::~BuildingUpdateResp() {
  SharedDtor();
}

void BuildingUpdateResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void BuildingUpdateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpdateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpdateResp_descriptor_;
}

const BuildingUpdateResp& BuildingUpdateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildingUpdateResp* BuildingUpdateResp::default_instance_ = NULL;

BuildingUpdateResp* BuildingUpdateResp::New() const {
  return new BuildingUpdateResp;
}

void BuildingUpdateResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpdateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingUpdateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingUpdateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingUpdateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpdateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpdateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpdateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpdateResp::MergeFrom(const BuildingUpdateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpdateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpdateResp::CopyFrom(const BuildingUpdateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpdateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void BuildingUpdateResp::Swap(BuildingUpdateResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpdateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpdateResp_descriptor_;
  metadata.reflection = BuildingUpdateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpgradeSpeedUpReq::kIndexFieldNumber;
#endif  // !_MSC_VER

BuildingUpgradeSpeedUpReq::BuildingUpgradeSpeedUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingUpgradeSpeedUpReq::InitAsDefaultInstance() {
}

BuildingUpgradeSpeedUpReq::BuildingUpgradeSpeedUpReq(const BuildingUpgradeSpeedUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingUpgradeSpeedUpReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpgradeSpeedUpReq::~BuildingUpgradeSpeedUpReq() {
  SharedDtor();
}

void BuildingUpgradeSpeedUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingUpgradeSpeedUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpgradeSpeedUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpgradeSpeedUpReq_descriptor_;
}

const BuildingUpgradeSpeedUpReq& BuildingUpgradeSpeedUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildingUpgradeSpeedUpReq* BuildingUpgradeSpeedUpReq::default_instance_ = NULL;

BuildingUpgradeSpeedUpReq* BuildingUpgradeSpeedUpReq::New() const {
  return new BuildingUpgradeSpeedUpReq;
}

void BuildingUpgradeSpeedUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpgradeSpeedUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingUpgradeSpeedUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingUpgradeSpeedUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingUpgradeSpeedUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpgradeSpeedUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpgradeSpeedUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpgradeSpeedUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpgradeSpeedUpReq::MergeFrom(const BuildingUpgradeSpeedUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpgradeSpeedUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpgradeSpeedUpReq::CopyFrom(const BuildingUpgradeSpeedUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpgradeSpeedUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildingUpgradeSpeedUpReq::Swap(BuildingUpgradeSpeedUpReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpgradeSpeedUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpgradeSpeedUpReq_descriptor_;
  metadata.reflection = BuildingUpgradeSpeedUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpgradeSpeedUpResp::kResultFieldNumber;
const int BuildingUpgradeSpeedUpResp::kUserSyncFieldNumber;
const int BuildingUpgradeSpeedUpResp::kInfoFieldNumber;
const int BuildingUpgradeSpeedUpResp::kIndexFieldNumber;
#endif  // !_MSC_VER

BuildingUpgradeSpeedUpResp::BuildingUpgradeSpeedUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildingUpgradeSpeedUpResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  info_ = const_cast< ::BuildingInfo*>(&::BuildingInfo::default_instance());
}

BuildingUpgradeSpeedUpResp::BuildingUpgradeSpeedUpResp(const BuildingUpgradeSpeedUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildingUpgradeSpeedUpResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  info_ = NULL;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpgradeSpeedUpResp::~BuildingUpgradeSpeedUpResp() {
  SharedDtor();
}

void BuildingUpgradeSpeedUpResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete info_;
  }
}

void BuildingUpgradeSpeedUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpgradeSpeedUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpgradeSpeedUpResp_descriptor_;
}

const BuildingUpgradeSpeedUpResp& BuildingUpgradeSpeedUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildingUpgradeSpeedUpResp* BuildingUpgradeSpeedUpResp::default_instance_ = NULL;

BuildingUpgradeSpeedUpResp* BuildingUpgradeSpeedUpResp::New() const {
  return new BuildingUpgradeSpeedUpResp;
}

void BuildingUpgradeSpeedUpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::BuildingInfo::Clear();
    }
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpgradeSpeedUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .BuildingInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildingUpgradeSpeedUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .BuildingInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildingUpgradeSpeedUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .BuildingInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildingUpgradeSpeedUpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .BuildingInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpgradeSpeedUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpgradeSpeedUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpgradeSpeedUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpgradeSpeedUpResp::MergeFrom(const BuildingUpgradeSpeedUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_info()) {
      mutable_info()->::BuildingInfo::MergeFrom(from.info());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpgradeSpeedUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpgradeSpeedUpResp::CopyFrom(const BuildingUpgradeSpeedUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpgradeSpeedUpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void BuildingUpgradeSpeedUpResp::Swap(BuildingUpgradeSpeedUpResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(info_, other->info_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpgradeSpeedUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpgradeSpeedUpResp_descriptor_;
  metadata.reflection = BuildingUpgradeSpeedUpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildQueueAddReq::kNumFieldNumber;
#endif  // !_MSC_VER

BuildQueueAddReq::BuildQueueAddReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildQueueAddReq::InitAsDefaultInstance() {
}

BuildQueueAddReq::BuildQueueAddReq(const BuildQueueAddReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildQueueAddReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildQueueAddReq::~BuildQueueAddReq() {
  SharedDtor();
}

void BuildQueueAddReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildQueueAddReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildQueueAddReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildQueueAddReq_descriptor_;
}

const BuildQueueAddReq& BuildQueueAddReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildQueueAddReq* BuildQueueAddReq::default_instance_ = NULL;

BuildQueueAddReq* BuildQueueAddReq::New() const {
  return new BuildQueueAddReq;
}

void BuildQueueAddReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildQueueAddReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildQueueAddReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildQueueAddReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildQueueAddReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildQueueAddReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildQueueAddReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildQueueAddReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildQueueAddReq::MergeFrom(const BuildQueueAddReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildQueueAddReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildQueueAddReq::CopyFrom(const BuildQueueAddReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildQueueAddReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildQueueAddReq::Swap(BuildQueueAddReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildQueueAddReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildQueueAddReq_descriptor_;
  metadata.reflection = BuildQueueAddReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildQueueAddResp::kResultFieldNumber;
const int BuildQueueAddResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

BuildQueueAddResp::BuildQueueAddResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildQueueAddResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

BuildQueueAddResp::BuildQueueAddResp(const BuildQueueAddResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildQueueAddResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildQueueAddResp::~BuildQueueAddResp() {
  SharedDtor();
}

void BuildQueueAddResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void BuildQueueAddResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildQueueAddResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildQueueAddResp_descriptor_;
}

const BuildQueueAddResp& BuildQueueAddResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildQueueAddResp* BuildQueueAddResp::default_instance_ = NULL;

BuildQueueAddResp* BuildQueueAddResp::New() const {
  return new BuildQueueAddResp;
}

void BuildQueueAddResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildQueueAddResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildQueueAddResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildQueueAddResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildQueueAddResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildQueueAddResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildQueueAddResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildQueueAddResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildQueueAddResp::MergeFrom(const BuildQueueAddResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildQueueAddResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildQueueAddResp::CopyFrom(const BuildQueueAddResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildQueueAddResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void BuildQueueAddResp::Swap(BuildQueueAddResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildQueueAddResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildQueueAddResp_descriptor_;
  metadata.reflection = BuildQueueAddResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildQueueRemoveReq::kIndexFieldNumber;
#endif  // !_MSC_VER

BuildQueueRemoveReq::BuildQueueRemoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildQueueRemoveReq::InitAsDefaultInstance() {
}

BuildQueueRemoveReq::BuildQueueRemoveReq(const BuildQueueRemoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildQueueRemoveReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildQueueRemoveReq::~BuildQueueRemoveReq() {
  SharedDtor();
}

void BuildQueueRemoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildQueueRemoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildQueueRemoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildQueueRemoveReq_descriptor_;
}

const BuildQueueRemoveReq& BuildQueueRemoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildQueueRemoveReq* BuildQueueRemoveReq::default_instance_ = NULL;

BuildQueueRemoveReq* BuildQueueRemoveReq::New() const {
  return new BuildQueueRemoveReq;
}

void BuildQueueRemoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildQueueRemoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildQueueRemoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildQueueRemoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildQueueRemoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildQueueRemoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildQueueRemoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildQueueRemoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildQueueRemoveReq::MergeFrom(const BuildQueueRemoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildQueueRemoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildQueueRemoveReq::CopyFrom(const BuildQueueRemoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildQueueRemoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildQueueRemoveReq::Swap(BuildQueueRemoveReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildQueueRemoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildQueueRemoveReq_descriptor_;
  metadata.reflection = BuildQueueRemoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildQueueRemoveResp::kResultFieldNumber;
const int BuildQueueRemoveResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

BuildQueueRemoveResp::BuildQueueRemoveResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildQueueRemoveResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

BuildQueueRemoveResp::BuildQueueRemoveResp(const BuildQueueRemoveResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildQueueRemoveResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildQueueRemoveResp::~BuildQueueRemoveResp() {
  SharedDtor();
}

void BuildQueueRemoveResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void BuildQueueRemoveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildQueueRemoveResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildQueueRemoveResp_descriptor_;
}

const BuildQueueRemoveResp& BuildQueueRemoveResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdBuilding_2eproto();
  return *default_instance_;
}

BuildQueueRemoveResp* BuildQueueRemoveResp::default_instance_ = NULL;

BuildQueueRemoveResp* BuildQueueRemoveResp::New() const {
  return new BuildQueueRemoveResp;
}

void BuildQueueRemoveResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildQueueRemoveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildQueueRemoveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildQueueRemoveResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildQueueRemoveResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildQueueRemoveResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildQueueRemoveResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildQueueRemoveResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildQueueRemoveResp::MergeFrom(const BuildQueueRemoveResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildQueueRemoveResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildQueueRemoveResp::CopyFrom(const BuildQueueRemoveResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildQueueRemoveResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void BuildQueueRemoveResp::Swap(BuildQueueRemoveResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildQueueRemoveResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildQueueRemoveResp_descriptor_;
  metadata.reflection = BuildQueueRemoveResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
