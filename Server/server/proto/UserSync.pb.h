// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserSync.proto

#ifndef PROTOBUF_UserSync_2eproto__INCLUDED
#define PROTOBUF_UserSync_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AirShip.pb.h"
#include "Weapon.pb.h"
#include "Item.pb.h"
#include "Equip.pb.h"
#include "UserInfo.pb.h"
#include "Slave.pb.h"
#include "Mail.pb.h"
#include "Group.pb.h"
#include "Activity.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserSync_2eproto();
void protobuf_AssignDesc_UserSync_2eproto();
void protobuf_ShutdownFile_UserSync_2eproto();

class UserSync;
class RedoRecharge;
class RedoEntry;
class SyncUser;

// ===================================================================

class UserSync : public ::google::protobuf::Message {
 public:
  UserSync();
  virtual ~UserSync();

  UserSync(const UserSync& from);

  inline UserSync& operator=(const UserSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSync& default_instance();

  void Swap(UserSync* other);

  // implements Message ----------------------------------------------

  UserSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSync& from);
  void MergeFrom(const UserSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AirShip ship_list = 1;
  inline int ship_list_size() const;
  inline void clear_ship_list();
  static const int kShipListFieldNumber = 1;
  inline const ::AirShip& ship_list(int index) const;
  inline ::AirShip* mutable_ship_list(int index);
  inline ::AirShip* add_ship_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
      ship_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
      mutable_ship_list();

  // repeated .Weapon weapon_list = 2;
  inline int weapon_list_size() const;
  inline void clear_weapon_list();
  static const int kWeaponListFieldNumber = 2;
  inline const ::Weapon& weapon_list(int index) const;
  inline ::Weapon* mutable_weapon_list(int index);
  inline ::Weapon* add_weapon_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Weapon >&
      weapon_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Weapon >*
      mutable_weapon_list();

  // repeated .Equip equip_list = 3;
  inline int equip_list_size() const;
  inline void clear_equip_list();
  static const int kEquipListFieldNumber = 3;
  inline const ::Equip& equip_list(int index) const;
  inline ::Equip* mutable_equip_list(int index);
  inline ::Equip* add_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Equip >&
      equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Equip >*
      mutable_equip_list();

  // repeated .Item item_list = 4;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 4;
  inline const ::Item& item_list(int index) const;
  inline ::Item* mutable_item_list(int index);
  inline ::Item* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Item >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Item >*
      mutable_item_list();

  // optional .UserInfo user_info = 5;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 5;
  inline const ::UserInfo& user_info() const;
  inline ::UserInfo* mutable_user_info();
  inline ::UserInfo* release_user_info();
  inline void set_allocated_user_info(::UserInfo* user_info);

  // repeated .Mail mail_list = 6;
  inline int mail_list_size() const;
  inline void clear_mail_list();
  static const int kMailListFieldNumber = 6;
  inline const ::Mail& mail_list(int index) const;
  inline ::Mail* mutable_mail_list(int index);
  inline ::Mail* add_mail_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Mail >&
      mail_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mail >*
      mutable_mail_list();

  // optional .GroupMainData group_main = 7;
  inline bool has_group_main() const;
  inline void clear_group_main();
  static const int kGroupMainFieldNumber = 7;
  inline const ::GroupMainData& group_main() const;
  inline ::GroupMainData* mutable_group_main();
  inline ::GroupMainData* release_group_main();
  inline void set_allocated_group_main(::GroupMainData* group_main);

  // repeated .TaskInfo task_list = 8;
  inline int task_list_size() const;
  inline void clear_task_list();
  static const int kTaskListFieldNumber = 8;
  inline const ::TaskInfo& task_list(int index) const;
  inline ::TaskInfo* mutable_task_list(int index);
  inline ::TaskInfo* add_task_list();
  inline const ::google::protobuf::RepeatedPtrField< ::TaskInfo >&
      task_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::TaskInfo >*
      mutable_task_list();

  // repeated .Gem gem_list = 9;
  inline int gem_list_size() const;
  inline void clear_gem_list();
  static const int kGemListFieldNumber = 9;
  inline const ::Gem& gem_list(int index) const;
  inline ::Gem* mutable_gem_list(int index);
  inline ::Gem* add_gem_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Gem >&
      gem_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Gem >*
      mutable_gem_list();

  // repeated .Activity activity_list = 10;
  inline int activity_list_size() const;
  inline void clear_activity_list();
  static const int kActivityListFieldNumber = 10;
  inline const ::Activity& activity_list(int index) const;
  inline ::Activity* mutable_activity_list(int index);
  inline ::Activity* add_activity_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Activity >&
      activity_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Activity >*
      mutable_activity_list();

  // optional .SlaveData slave_data = 11;
  inline bool has_slave_data() const;
  inline void clear_slave_data();
  static const int kSlaveDataFieldNumber = 11;
  inline const ::SlaveData& slave_data() const;
  inline ::SlaveData* mutable_slave_data();
  inline ::SlaveData* release_slave_data();
  inline void set_allocated_slave_data(::SlaveData* slave_data);

  // repeated .ForgeEquip forge_equip_list = 12;
  inline int forge_equip_list_size() const;
  inline void clear_forge_equip_list();
  static const int kForgeEquipListFieldNumber = 12;
  inline const ::ForgeEquip& forge_equip_list(int index) const;
  inline ::ForgeEquip* mutable_forge_equip_list(int index);
  inline ::ForgeEquip* add_forge_equip_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ForgeEquip >&
      forge_equip_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ForgeEquip >*
      mutable_forge_equip_list();

  // @@protoc_insertion_point(class_scope:UserSync)
 private:
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_group_main();
  inline void clear_has_group_main();
  inline void set_has_slave_data();
  inline void clear_has_slave_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AirShip > ship_list_;
  ::google::protobuf::RepeatedPtrField< ::Weapon > weapon_list_;
  ::google::protobuf::RepeatedPtrField< ::Equip > equip_list_;
  ::google::protobuf::RepeatedPtrField< ::Item > item_list_;
  ::UserInfo* user_info_;
  ::google::protobuf::RepeatedPtrField< ::Mail > mail_list_;
  ::GroupMainData* group_main_;
  ::google::protobuf::RepeatedPtrField< ::TaskInfo > task_list_;
  ::google::protobuf::RepeatedPtrField< ::Gem > gem_list_;
  ::google::protobuf::RepeatedPtrField< ::Activity > activity_list_;
  ::SlaveData* slave_data_;
  ::google::protobuf::RepeatedPtrField< ::ForgeEquip > forge_equip_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_UserSync_2eproto();
  friend void protobuf_AssignDesc_UserSync_2eproto();
  friend void protobuf_ShutdownFile_UserSync_2eproto();

  void InitAsDefaultInstance();
  static UserSync* default_instance_;
};
// -------------------------------------------------------------------

class RedoRecharge : public ::google::protobuf::Message {
 public:
  RedoRecharge();
  virtual ~RedoRecharge();

  RedoRecharge(const RedoRecharge& from);

  inline RedoRecharge& operator=(const RedoRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedoRecharge& default_instance();

  void Swap(RedoRecharge* other);

  // implements Message ----------------------------------------------

  RedoRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedoRecharge& from);
  void MergeFrom(const RedoRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // required int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required int32 fake = 3;
  inline bool has_fake() const;
  inline void clear_fake();
  static const int kFakeFieldNumber = 3;
  inline ::google::protobuf::int32 fake() const;
  inline void set_fake(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RedoRecharge)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_fake();
  inline void clear_has_fake();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 fake_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_UserSync_2eproto();
  friend void protobuf_AssignDesc_UserSync_2eproto();
  friend void protobuf_ShutdownFile_UserSync_2eproto();

  void InitAsDefaultInstance();
  static RedoRecharge* default_instance_;
};
// -------------------------------------------------------------------

class RedoEntry : public ::google::protobuf::Message {
 public:
  RedoEntry();
  virtual ~RedoEntry();

  RedoEntry(const RedoEntry& from);

  inline RedoEntry& operator=(const RedoEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedoEntry& default_instance();

  void Swap(RedoEntry* other);

  // implements Message ----------------------------------------------

  RedoEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedoEntry& from);
  void MergeFrom(const RedoEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // repeated .Mail mail_list = 2;
  inline int mail_list_size() const;
  inline void clear_mail_list();
  static const int kMailListFieldNumber = 2;
  inline const ::Mail& mail_list(int index) const;
  inline ::Mail* mutable_mail_list(int index);
  inline ::Mail* add_mail_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Mail >&
      mail_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Mail >*
      mutable_mail_list();

  // repeated .RedoRecharge recharge_list = 3;
  inline int recharge_list_size() const;
  inline void clear_recharge_list();
  static const int kRechargeListFieldNumber = 3;
  inline const ::RedoRecharge& recharge_list(int index) const;
  inline ::RedoRecharge* mutable_recharge_list(int index);
  inline ::RedoRecharge* add_recharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::RedoRecharge >&
      recharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::RedoRecharge >*
      mutable_recharge_list();

  // @@protoc_insertion_point(class_scope:RedoEntry)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google::protobuf::RepeatedPtrField< ::Mail > mail_list_;
  ::google::protobuf::RepeatedPtrField< ::RedoRecharge > recharge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_UserSync_2eproto();
  friend void protobuf_AssignDesc_UserSync_2eproto();
  friend void protobuf_ShutdownFile_UserSync_2eproto();

  void InitAsDefaultInstance();
  static RedoEntry* default_instance_;
};
// -------------------------------------------------------------------

class SyncUser : public ::google::protobuf::Message {
 public:
  SyncUser();
  virtual ~SyncUser();

  SyncUser(const SyncUser& from);

  inline SyncUser& operator=(const SyncUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncUser& default_instance();

  void Swap(SyncUser* other);

  // implements Message ----------------------------------------------

  SyncUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncUser& from);
  void MergeFrom(const SyncUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // repeated int64 res = 2;
  inline int res_size() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline ::google::protobuf::int64 res(int index) const;
  inline void set_res(int index, ::google::protobuf::int64 value);
  inline void add_res(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      res() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_res();

  // @@protoc_insertion_point(class_scope:SyncUser)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_UserSync_2eproto();
  friend void protobuf_AssignDesc_UserSync_2eproto();
  friend void protobuf_ShutdownFile_UserSync_2eproto();

  void InitAsDefaultInstance();
  static SyncUser* default_instance_;
};
// ===================================================================


// ===================================================================

// UserSync

// repeated .AirShip ship_list = 1;
inline int UserSync::ship_list_size() const {
  return ship_list_.size();
}
inline void UserSync::clear_ship_list() {
  ship_list_.Clear();
}
inline const ::AirShip& UserSync::ship_list(int index) const {
  return ship_list_.Get(index);
}
inline ::AirShip* UserSync::mutable_ship_list(int index) {
  return ship_list_.Mutable(index);
}
inline ::AirShip* UserSync::add_ship_list() {
  return ship_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AirShip >&
UserSync::ship_list() const {
  return ship_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AirShip >*
UserSync::mutable_ship_list() {
  return &ship_list_;
}

// repeated .Weapon weapon_list = 2;
inline int UserSync::weapon_list_size() const {
  return weapon_list_.size();
}
inline void UserSync::clear_weapon_list() {
  weapon_list_.Clear();
}
inline const ::Weapon& UserSync::weapon_list(int index) const {
  return weapon_list_.Get(index);
}
inline ::Weapon* UserSync::mutable_weapon_list(int index) {
  return weapon_list_.Mutable(index);
}
inline ::Weapon* UserSync::add_weapon_list() {
  return weapon_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Weapon >&
UserSync::weapon_list() const {
  return weapon_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Weapon >*
UserSync::mutable_weapon_list() {
  return &weapon_list_;
}

// repeated .Equip equip_list = 3;
inline int UserSync::equip_list_size() const {
  return equip_list_.size();
}
inline void UserSync::clear_equip_list() {
  equip_list_.Clear();
}
inline const ::Equip& UserSync::equip_list(int index) const {
  return equip_list_.Get(index);
}
inline ::Equip* UserSync::mutable_equip_list(int index) {
  return equip_list_.Mutable(index);
}
inline ::Equip* UserSync::add_equip_list() {
  return equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Equip >&
UserSync::equip_list() const {
  return equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Equip >*
UserSync::mutable_equip_list() {
  return &equip_list_;
}

// repeated .Item item_list = 4;
inline int UserSync::item_list_size() const {
  return item_list_.size();
}
inline void UserSync::clear_item_list() {
  item_list_.Clear();
}
inline const ::Item& UserSync::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::Item* UserSync::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::Item* UserSync::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Item >&
UserSync::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Item >*
UserSync::mutable_item_list() {
  return &item_list_;
}

// optional .UserInfo user_info = 5;
inline bool UserSync::has_user_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSync::set_has_user_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSync::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSync::clear_user_info() {
  if (user_info_ != NULL) user_info_->::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::UserInfo& UserSync::user_info() const {
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::UserInfo* UserSync::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::UserInfo;
  return user_info_;
}
inline ::UserInfo* UserSync::release_user_info() {
  clear_has_user_info();
  ::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void UserSync::set_allocated_user_info(::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
}

// repeated .Mail mail_list = 6;
inline int UserSync::mail_list_size() const {
  return mail_list_.size();
}
inline void UserSync::clear_mail_list() {
  mail_list_.Clear();
}
inline const ::Mail& UserSync::mail_list(int index) const {
  return mail_list_.Get(index);
}
inline ::Mail* UserSync::mutable_mail_list(int index) {
  return mail_list_.Mutable(index);
}
inline ::Mail* UserSync::add_mail_list() {
  return mail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mail >&
UserSync::mail_list() const {
  return mail_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mail >*
UserSync::mutable_mail_list() {
  return &mail_list_;
}

// optional .GroupMainData group_main = 7;
inline bool UserSync::has_group_main() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserSync::set_has_group_main() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserSync::clear_has_group_main() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserSync::clear_group_main() {
  if (group_main_ != NULL) group_main_->::GroupMainData::Clear();
  clear_has_group_main();
}
inline const ::GroupMainData& UserSync::group_main() const {
  return group_main_ != NULL ? *group_main_ : *default_instance_->group_main_;
}
inline ::GroupMainData* UserSync::mutable_group_main() {
  set_has_group_main();
  if (group_main_ == NULL) group_main_ = new ::GroupMainData;
  return group_main_;
}
inline ::GroupMainData* UserSync::release_group_main() {
  clear_has_group_main();
  ::GroupMainData* temp = group_main_;
  group_main_ = NULL;
  return temp;
}
inline void UserSync::set_allocated_group_main(::GroupMainData* group_main) {
  delete group_main_;
  group_main_ = group_main;
  if (group_main) {
    set_has_group_main();
  } else {
    clear_has_group_main();
  }
}

// repeated .TaskInfo task_list = 8;
inline int UserSync::task_list_size() const {
  return task_list_.size();
}
inline void UserSync::clear_task_list() {
  task_list_.Clear();
}
inline const ::TaskInfo& UserSync::task_list(int index) const {
  return task_list_.Get(index);
}
inline ::TaskInfo* UserSync::mutable_task_list(int index) {
  return task_list_.Mutable(index);
}
inline ::TaskInfo* UserSync::add_task_list() {
  return task_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TaskInfo >&
UserSync::task_list() const {
  return task_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::TaskInfo >*
UserSync::mutable_task_list() {
  return &task_list_;
}

// repeated .Gem gem_list = 9;
inline int UserSync::gem_list_size() const {
  return gem_list_.size();
}
inline void UserSync::clear_gem_list() {
  gem_list_.Clear();
}
inline const ::Gem& UserSync::gem_list(int index) const {
  return gem_list_.Get(index);
}
inline ::Gem* UserSync::mutable_gem_list(int index) {
  return gem_list_.Mutable(index);
}
inline ::Gem* UserSync::add_gem_list() {
  return gem_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Gem >&
UserSync::gem_list() const {
  return gem_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Gem >*
UserSync::mutable_gem_list() {
  return &gem_list_;
}

// repeated .Activity activity_list = 10;
inline int UserSync::activity_list_size() const {
  return activity_list_.size();
}
inline void UserSync::clear_activity_list() {
  activity_list_.Clear();
}
inline const ::Activity& UserSync::activity_list(int index) const {
  return activity_list_.Get(index);
}
inline ::Activity* UserSync::mutable_activity_list(int index) {
  return activity_list_.Mutable(index);
}
inline ::Activity* UserSync::add_activity_list() {
  return activity_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Activity >&
UserSync::activity_list() const {
  return activity_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Activity >*
UserSync::mutable_activity_list() {
  return &activity_list_;
}

// optional .SlaveData slave_data = 11;
inline bool UserSync::has_slave_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserSync::set_has_slave_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserSync::clear_has_slave_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserSync::clear_slave_data() {
  if (slave_data_ != NULL) slave_data_->::SlaveData::Clear();
  clear_has_slave_data();
}
inline const ::SlaveData& UserSync::slave_data() const {
  return slave_data_ != NULL ? *slave_data_ : *default_instance_->slave_data_;
}
inline ::SlaveData* UserSync::mutable_slave_data() {
  set_has_slave_data();
  if (slave_data_ == NULL) slave_data_ = new ::SlaveData;
  return slave_data_;
}
inline ::SlaveData* UserSync::release_slave_data() {
  clear_has_slave_data();
  ::SlaveData* temp = slave_data_;
  slave_data_ = NULL;
  return temp;
}
inline void UserSync::set_allocated_slave_data(::SlaveData* slave_data) {
  delete slave_data_;
  slave_data_ = slave_data;
  if (slave_data) {
    set_has_slave_data();
  } else {
    clear_has_slave_data();
  }
}

// repeated .ForgeEquip forge_equip_list = 12;
inline int UserSync::forge_equip_list_size() const {
  return forge_equip_list_.size();
}
inline void UserSync::clear_forge_equip_list() {
  forge_equip_list_.Clear();
}
inline const ::ForgeEquip& UserSync::forge_equip_list(int index) const {
  return forge_equip_list_.Get(index);
}
inline ::ForgeEquip* UserSync::mutable_forge_equip_list(int index) {
  return forge_equip_list_.Mutable(index);
}
inline ::ForgeEquip* UserSync::add_forge_equip_list() {
  return forge_equip_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ForgeEquip >&
UserSync::forge_equip_list() const {
  return forge_equip_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ForgeEquip >*
UserSync::mutable_forge_equip_list() {
  return &forge_equip_list_;
}

// -------------------------------------------------------------------

// RedoRecharge

// required int32 money = 1;
inline bool RedoRecharge::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedoRecharge::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedoRecharge::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedoRecharge::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 RedoRecharge::money() const {
  return money_;
}
inline void RedoRecharge::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// required int32 item_id = 2;
inline bool RedoRecharge::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedoRecharge::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedoRecharge::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedoRecharge::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 RedoRecharge::item_id() const {
  return item_id_;
}
inline void RedoRecharge::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required int32 fake = 3;
inline bool RedoRecharge::has_fake() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedoRecharge::set_has_fake() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedoRecharge::clear_has_fake() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedoRecharge::clear_fake() {
  fake_ = 0;
  clear_has_fake();
}
inline ::google::protobuf::int32 RedoRecharge::fake() const {
  return fake_;
}
inline void RedoRecharge::set_fake(::google::protobuf::int32 value) {
  set_has_fake();
  fake_ = value;
}

// -------------------------------------------------------------------

// RedoEntry

// required string user_name = 1;
inline bool RedoEntry::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedoEntry::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedoEntry::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedoEntry::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& RedoEntry::user_name() const {
  return *user_name_;
}
inline void RedoEntry::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RedoEntry::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RedoEntry::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedoEntry::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* RedoEntry::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RedoEntry::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Mail mail_list = 2;
inline int RedoEntry::mail_list_size() const {
  return mail_list_.size();
}
inline void RedoEntry::clear_mail_list() {
  mail_list_.Clear();
}
inline const ::Mail& RedoEntry::mail_list(int index) const {
  return mail_list_.Get(index);
}
inline ::Mail* RedoEntry::mutable_mail_list(int index) {
  return mail_list_.Mutable(index);
}
inline ::Mail* RedoEntry::add_mail_list() {
  return mail_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Mail >&
RedoEntry::mail_list() const {
  return mail_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Mail >*
RedoEntry::mutable_mail_list() {
  return &mail_list_;
}

// repeated .RedoRecharge recharge_list = 3;
inline int RedoEntry::recharge_list_size() const {
  return recharge_list_.size();
}
inline void RedoEntry::clear_recharge_list() {
  recharge_list_.Clear();
}
inline const ::RedoRecharge& RedoEntry::recharge_list(int index) const {
  return recharge_list_.Get(index);
}
inline ::RedoRecharge* RedoEntry::mutable_recharge_list(int index) {
  return recharge_list_.Mutable(index);
}
inline ::RedoRecharge* RedoEntry::add_recharge_list() {
  return recharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RedoRecharge >&
RedoEntry::recharge_list() const {
  return recharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::RedoRecharge >*
RedoEntry::mutable_recharge_list() {
  return &recharge_list_;
}

// -------------------------------------------------------------------

// SyncUser

// required string user_name = 1;
inline bool SyncUser::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncUser::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncUser::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncUser::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& SyncUser::user_name() const {
  return *user_name_;
}
inline void SyncUser::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void SyncUser::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void SyncUser::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncUser::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* SyncUser::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncUser::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 res = 2;
inline int SyncUser::res_size() const {
  return res_.size();
}
inline void SyncUser::clear_res() {
  res_.Clear();
}
inline ::google::protobuf::int64 SyncUser::res(int index) const {
  return res_.Get(index);
}
inline void SyncUser::set_res(int index, ::google::protobuf::int64 value) {
  res_.Set(index, value);
}
inline void SyncUser::add_res(::google::protobuf::int64 value) {
  res_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SyncUser::res() const {
  return res_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SyncUser::mutable_res() {
  return &res_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserSync_2eproto__INCLUDED
