// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdUser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdUser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AddMoneyCallBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMoneyCallBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTimeStampResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTimeStampResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateResReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateResReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateResResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateResResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChatLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChatLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetChatLogResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetChatLogResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatResp_ChatRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChatMsg_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsg_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdClientGMReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdClientGMReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdClientGMResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdClientGMResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGetOtherUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGetOtherUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGetOtherUserInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGetOtherUserInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGetOtherUserInfoListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGetOtherUserInfoListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CmdGetOtherUserInfoListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CmdGetOtherUserInfoListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewFriendUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewFriendUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeFriendUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeFriendUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendsInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendsInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFriendsInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFriendsInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyFriendResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyFriendResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplyFriendResp_ApplyFriendRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AcceptFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptFriendResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptFriendResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AcceptFriendResp_AcceptFriendRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RemoveFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveFriendResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveFriendResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlackListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlackListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlackListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlackListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStrengthResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStrengthResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddStrengthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddStrengthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddStrengthResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddStrengthResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AddStrengthResp_AddStrengthRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RankReq_RankType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RankResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopTimeItemListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopTimeItemListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopTimeItemListResp_TimeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopTimeItemListResp_TimeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopBuyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopBuyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipLotteryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipLotteryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipLotteryResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipLotteryResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsOnlineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsOnlineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsOnlineResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsOnlineResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideStepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideStepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideStepResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideStepResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AidAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AidAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AidAwardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AidAwardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenGiftResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenGiftResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdUser_2eproto() {
  protobuf_AddDesc_CmdUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdUser.proto");
  GOOGLE_CHECK(file != NULL);
  AddMoneyCallBack_descriptor_ = file->message_type(0);
  static const int AddMoneyCallBack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, orderno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, cur_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, cur_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, total_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, buqian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, zsyk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, new_item_id_),
  };
  AddMoneyCallBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMoneyCallBack_descriptor_,
      AddMoneyCallBack::default_instance_,
      AddMoneyCallBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMoneyCallBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMoneyCallBack));
  UpdateTimeStampResp_descriptor_ = file->message_type(1);
  static const int UpdateTimeStampResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimeStampResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimeStampResp, user_sync_),
  };
  UpdateTimeStampResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTimeStampResp_descriptor_,
      UpdateTimeStampResp::default_instance_,
      UpdateTimeStampResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimeStampResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTimeStampResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTimeStampResp));
  UpdateResReq_descriptor_ = file->message_type(2);
  static const int UpdateResReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResReq, type_),
  };
  UpdateResReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateResReq_descriptor_,
      UpdateResReq::default_instance_,
      UpdateResReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateResReq));
  UpdateResResp_descriptor_ = file->message_type(3);
  static const int UpdateResResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResResp, credit_),
  };
  UpdateResResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateResResp_descriptor_,
      UpdateResResp::default_instance_,
      UpdateResResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateResResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateResResp));
  ChatLog_descriptor_ = file->message_type(4);
  static const int ChatLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLog, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLog, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLog, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLog, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLog, user_name_),
  };
  ChatLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatLog_descriptor_,
      ChatLog::default_instance_,
      ChatLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatLog));
  ChatLogList_descriptor_ = file->message_type(5);
  static const int ChatLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogList, log_list_),
  };
  ChatLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatLogList_descriptor_,
      ChatLogList::default_instance_,
      ChatLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatLogList));
  GetChatLogReq_descriptor_ = file->message_type(6);
  static const int GetChatLogReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogReq, chat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogReq, minor_),
  };
  GetChatLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChatLogReq_descriptor_,
      GetChatLogReq::default_instance_,
      GetChatLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChatLogReq));
  GetChatLogResp_descriptor_ = file->message_type(7);
  static const int GetChatLogResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogResp, log_list_),
  };
  GetChatLogResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetChatLogResp_descriptor_,
      GetChatLogResp::default_instance_,
      GetChatLogResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetChatLogResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetChatLogResp));
  ChatUserInfo_descriptor_ = file->message_type(8);
  static const int ChatUserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUserInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUserInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUserInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUserInfo, group_nickname_),
  };
  ChatUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatUserInfo_descriptor_,
      ChatUserInfo::default_instance_,
      ChatUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatUserInfo));
  ChatReq_descriptor_ = file->message_type(9);
  static const int ChatReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, recver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, minor_),
  };
  ChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatReq_descriptor_,
      ChatReq::default_instance_,
      ChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatReq));
  ChatResp_descriptor_ = file->message_type(10);
  static const int ChatResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, user_sync_),
  };
  ChatResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatResp_descriptor_,
      ChatResp::default_instance_,
      ChatResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatResp));
  ChatResp_ChatRet_descriptor_ = ChatResp_descriptor_->enum_type(0);
  ChatMsg_t_descriptor_ = file->message_type(11);
  static const int ChatMsg_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, recver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, recvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, minor_),
  };
  ChatMsg_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsg_t_descriptor_,
      ChatMsg_t::default_instance_,
      ChatMsg_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsg_t));
  ChatMsg_descriptor_ = file->message_type(12);
  static const int ChatMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, recver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, recvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, minor_),
  };
  ChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMsg_descriptor_,
      ChatMsg::default_instance_,
      ChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMsg));
  CmdClientGMReq_descriptor_ = file->message_type(13);
  static const int CmdClientGMReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdClientGMReq, cmd_),
  };
  CmdClientGMReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdClientGMReq_descriptor_,
      CmdClientGMReq::default_instance_,
      CmdClientGMReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdClientGMReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdClientGMReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdClientGMReq));
  CmdClientGMResp_descriptor_ = file->message_type(14);
  static const int CmdClientGMResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdClientGMResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdClientGMResp, user_sync_),
  };
  CmdClientGMResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdClientGMResp_descriptor_,
      CmdClientGMResp::default_instance_,
      CmdClientGMResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdClientGMResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdClientGMResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdClientGMResp));
  CmdGetOtherUserInfoReq_descriptor_ = file->message_type(15);
  static const int CmdGetOtherUserInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoReq, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoReq, lineup_),
  };
  CmdGetOtherUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGetOtherUserInfoReq_descriptor_,
      CmdGetOtherUserInfoReq::default_instance_,
      CmdGetOtherUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGetOtherUserInfoReq));
  CmdGetOtherUserInfoResp_descriptor_ = file->message_type(16);
  static const int CmdGetOtherUserInfoResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoResp, info_),
  };
  CmdGetOtherUserInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGetOtherUserInfoResp_descriptor_,
      CmdGetOtherUserInfoResp::default_instance_,
      CmdGetOtherUserInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGetOtherUserInfoResp));
  CmdGetOtherUserInfoListReq_descriptor_ = file->message_type(17);
  static const int CmdGetOtherUserInfoListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListReq, user_name_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListReq, sid_),
  };
  CmdGetOtherUserInfoListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGetOtherUserInfoListReq_descriptor_,
      CmdGetOtherUserInfoListReq::default_instance_,
      CmdGetOtherUserInfoListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGetOtherUserInfoListReq));
  CmdGetOtherUserInfoListResp_descriptor_ = file->message_type(18);
  static const int CmdGetOtherUserInfoListResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListResp, info_list_),
  };
  CmdGetOtherUserInfoListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CmdGetOtherUserInfoListResp_descriptor_,
      CmdGetOtherUserInfoListResp::default_instance_,
      CmdGetOtherUserInfoListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CmdGetOtherUserInfoListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CmdGetOtherUserInfoListResp));
  NewFriendUpdate_descriptor_ = file->message_type(19);
  static const int NewFriendUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFriendUpdate, sender_),
  };
  NewFriendUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewFriendUpdate_descriptor_,
      NewFriendUpdate::default_instance_,
      NewFriendUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFriendUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewFriendUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewFriendUpdate));
  BeFriendUpdate_descriptor_ = file->message_type(20);
  static const int BeFriendUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFriendUpdate, result_),
  };
  BeFriendUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeFriendUpdate_descriptor_,
      BeFriendUpdate::default_instance_,
      BeFriendUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFriendUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFriendUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeFriendUpdate));
  GetFriendsInfoReq_descriptor_ = file->message_type(21);
  static const int GetFriendsInfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoReq, nickname_),
  };
  GetFriendsInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendsInfoReq_descriptor_,
      GetFriendsInfoReq::default_instance_,
      GetFriendsInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendsInfoReq));
  GetFriendsInfoResp_descriptor_ = file->message_type(22);
  static const int GetFriendsInfoResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoResp, list_),
  };
  GetFriendsInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFriendsInfoResp_descriptor_,
      GetFriendsInfoResp::default_instance_,
      GetFriendsInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFriendsInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFriendsInfoResp));
  ApplyFriendReq_descriptor_ = file->message_type(23);
  static const int ApplyFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendReq, recver_),
  };
  ApplyFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyFriendReq_descriptor_,
      ApplyFriendReq::default_instance_,
      ApplyFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyFriendReq));
  ApplyFriendResp_descriptor_ = file->message_type(24);
  static const int ApplyFriendResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendResp, result_),
  };
  ApplyFriendResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyFriendResp_descriptor_,
      ApplyFriendResp::default_instance_,
      ApplyFriendResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyFriendResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyFriendResp));
  ApplyFriendResp_ApplyFriendRet_descriptor_ = ApplyFriendResp_descriptor_->enum_type(0);
  AcceptFriendReq_descriptor_ = file->message_type(25);
  static const int AcceptFriendReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptFriendReq, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptFriendReq, mail_guid_),
  };
  AcceptFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptFriendReq_descriptor_,
      AcceptFriendReq::default_instance_,
      AcceptFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptFriendReq));
  AcceptFriendResp_descriptor_ = file->message_type(26);
  static const int AcceptFriendResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptFriendResp, result_),
  };
  AcceptFriendResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptFriendResp_descriptor_,
      AcceptFriendResp::default_instance_,
      AcceptFriendResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptFriendResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptFriendResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptFriendResp));
  AcceptFriendResp_AcceptFriendRet_descriptor_ = AcceptFriendResp_descriptor_->enum_type(0);
  RemoveFriendReq_descriptor_ = file->message_type(27);
  static const int RemoveFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFriendReq, user_name_),
  };
  RemoveFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveFriendReq_descriptor_,
      RemoveFriendReq::default_instance_,
      RemoveFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveFriendReq));
  RemoveFriendResp_descriptor_ = file->message_type(28);
  static const int RemoveFriendResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFriendResp, result_),
  };
  RemoveFriendResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveFriendResp_descriptor_,
      RemoveFriendResp::default_instance_,
      RemoveFriendResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFriendResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveFriendResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveFriendResp));
  BlackListReq_descriptor_ = file->message_type(29);
  static const int BlackListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListReq, user_name_),
  };
  BlackListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlackListReq_descriptor_,
      BlackListReq::default_instance_,
      BlackListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlackListReq));
  BlackListResp_descriptor_ = file->message_type(30);
  static const int BlackListResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListResp, result_),
  };
  BlackListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlackListResp_descriptor_,
      BlackListResp::default_instance_,
      BlackListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlackListResp));
  TalkListReq_descriptor_ = file->message_type(31);
  static const int TalkListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkListReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkListReq, user_name_),
  };
  TalkListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkListReq_descriptor_,
      TalkListReq::default_instance_,
      TalkListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkListReq));
  TalkListResp_descriptor_ = file->message_type(32);
  static const int TalkListResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkListResp, result_),
  };
  TalkListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkListResp_descriptor_,
      TalkListResp::default_instance_,
      TalkListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkListResp));
  TaskListResp_descriptor_ = file->message_type(33);
  static const int TaskListResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResp, task_list_),
  };
  TaskListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskListResp_descriptor_,
      TaskListResp::default_instance_,
      TaskListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskListResp));
  TaskRewardReq_descriptor_ = file->message_type(34);
  static const int TaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRewardReq, task_id_),
  };
  TaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskRewardReq_descriptor_,
      TaskRewardReq::default_instance_,
      TaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskRewardReq));
  TaskRewardResp_descriptor_ = file->message_type(35);
  static const int TaskRewardResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRewardResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRewardResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRewardResp, task_id_),
  };
  TaskRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskRewardResp_descriptor_,
      TaskRewardResp::default_instance_,
      TaskRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskRewardResp));
  GetStrengthResp_descriptor_ = file->message_type(36);
  static const int GetStrengthResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStrengthResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStrengthResp, user_sync_),
  };
  GetStrengthResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStrengthResp_descriptor_,
      GetStrengthResp::default_instance_,
      GetStrengthResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStrengthResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStrengthResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStrengthResp));
  AddStrengthReq_descriptor_ = file->message_type(37);
  static const int AddStrengthReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStrengthReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStrengthReq, item_),
  };
  AddStrengthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddStrengthReq_descriptor_,
      AddStrengthReq::default_instance_,
      AddStrengthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStrengthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStrengthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddStrengthReq));
  AddStrengthResp_descriptor_ = file->message_type(38);
  static const int AddStrengthResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStrengthResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStrengthResp, user_sync_),
  };
  AddStrengthResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddStrengthResp_descriptor_,
      AddStrengthResp::default_instance_,
      AddStrengthResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStrengthResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddStrengthResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddStrengthResp));
  AddStrengthResp_AddStrengthRet_descriptor_ = AddStrengthResp_descriptor_->enum_type(0);
  RankReq_descriptor_ = file->message_type(39);
  static const int RankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankReq, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankReq, start_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankReq, need_my_),
  };
  RankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankReq_descriptor_,
      RankReq::default_instance_,
      RankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankReq));
  RankReq_RankType_descriptor_ = RankReq_descriptor_->enum_type(0);
  RankResp_descriptor_ = file->message_type(40);
  static const int RankResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResp, user_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResp, group_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResp, my_user_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResp, my_group_rank_),
  };
  RankResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankResp_descriptor_,
      RankResp::default_instance_,
      RankResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankResp));
  ShopTimeItemListResp_descriptor_ = file->message_type(41);
  static const int ShopTimeItemListResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp, list_),
  };
  ShopTimeItemListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopTimeItemListResp_descriptor_,
      ShopTimeItemListResp::default_instance_,
      ShopTimeItemListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopTimeItemListResp));
  ShopTimeItemListResp_TimeItem_descriptor_ = ShopTimeItemListResp_descriptor_->nested_type(0);
  static const int ShopTimeItemListResp_TimeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp_TimeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp_TimeItem, end_time_),
  };
  ShopTimeItemListResp_TimeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopTimeItemListResp_TimeItem_descriptor_,
      ShopTimeItemListResp_TimeItem::default_instance_,
      ShopTimeItemListResp_TimeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp_TimeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopTimeItemListResp_TimeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopTimeItemListResp_TimeItem));
  ShopBuyReq_descriptor_ = file->message_type(42);
  static const int ShopBuyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyReq, num_),
  };
  ShopBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopBuyReq_descriptor_,
      ShopBuyReq::default_instance_,
      ShopBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopBuyReq));
  ShopBuyResp_descriptor_ = file->message_type(43);
  static const int ShopBuyResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyResp, req_),
  };
  ShopBuyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopBuyResp_descriptor_,
      ShopBuyResp::default_instance_,
      ShopBuyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopBuyResp));
  ShipLotteryReq_descriptor_ = file->message_type(44);
  static const int ShipLotteryReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryReq, type_),
  };
  ShipLotteryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipLotteryReq_descriptor_,
      ShipLotteryReq::default_instance_,
      ShipLotteryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipLotteryReq));
  ShipLotteryResp_descriptor_ = file->message_type(45);
  static const int ShipLotteryResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryResp, item_list_),
  };
  ShipLotteryResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipLotteryResp_descriptor_,
      ShipLotteryResp::default_instance_,
      ShipLotteryResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipLotteryResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipLotteryResp));
  IsOnlineReq_descriptor_ = file->message_type(46);
  static const int IsOnlineReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineReq, user_name_list_),
  };
  IsOnlineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsOnlineReq_descriptor_,
      IsOnlineReq::default_instance_,
      IsOnlineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsOnlineReq));
  IsOnlineResp_descriptor_ = file->message_type(47);
  static const int IsOnlineResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineResp, user_name_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineResp, is_online_list_),
  };
  IsOnlineResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsOnlineResp_descriptor_,
      IsOnlineResp::default_instance_,
      IsOnlineResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsOnlineResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsOnlineResp));
  GuideStepReq_descriptor_ = file->message_type(48);
  static const int GuideStepReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepReq, step_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepReq, step_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepReq, talk_key_),
  };
  GuideStepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideStepReq_descriptor_,
      GuideStepReq::default_instance_,
      GuideStepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideStepReq));
  GuideStepResp_descriptor_ = file->message_type(49);
  static const int GuideStepResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepResp, user_sync_),
  };
  GuideStepResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideStepResp_descriptor_,
      GuideStepResp::default_instance_,
      GuideStepResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideStepResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideStepResp));
  AidAwardReq_descriptor_ = file->message_type(50);
  static const int AidAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidAwardReq, type_),
  };
  AidAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AidAwardReq_descriptor_,
      AidAwardReq::default_instance_,
      AidAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AidAwardReq));
  AidAwardResp_descriptor_ = file->message_type(51);
  static const int AidAwardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidAwardResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidAwardResp, user_sync_),
  };
  AidAwardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AidAwardResp_descriptor_,
      AidAwardResp::default_instance_,
      AidAwardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidAwardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidAwardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AidAwardResp));
  OpenGiftReq_descriptor_ = file->message_type(52);
  static const int OpenGiftReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftReq, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftReq, num_),
  };
  OpenGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenGiftReq_descriptor_,
      OpenGiftReq::default_instance_,
      OpenGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenGiftReq));
  OpenGiftResp_descriptor_ = file->message_type(53);
  static const int OpenGiftResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftResp, get_item_list_),
  };
  OpenGiftResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenGiftResp_descriptor_,
      OpenGiftResp::default_instance_,
      OpenGiftResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGiftResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenGiftResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMoneyCallBack_descriptor_, &AddMoneyCallBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTimeStampResp_descriptor_, &UpdateTimeStampResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateResReq_descriptor_, &UpdateResReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateResResp_descriptor_, &UpdateResResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatLog_descriptor_, &ChatLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatLogList_descriptor_, &ChatLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChatLogReq_descriptor_, &GetChatLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetChatLogResp_descriptor_, &GetChatLogResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatUserInfo_descriptor_, &ChatUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatReq_descriptor_, &ChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatResp_descriptor_, &ChatResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsg_t_descriptor_, &ChatMsg_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMsg_descriptor_, &ChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdClientGMReq_descriptor_, &CmdClientGMReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdClientGMResp_descriptor_, &CmdClientGMResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGetOtherUserInfoReq_descriptor_, &CmdGetOtherUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGetOtherUserInfoResp_descriptor_, &CmdGetOtherUserInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGetOtherUserInfoListReq_descriptor_, &CmdGetOtherUserInfoListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CmdGetOtherUserInfoListResp_descriptor_, &CmdGetOtherUserInfoListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewFriendUpdate_descriptor_, &NewFriendUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeFriendUpdate_descriptor_, &BeFriendUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendsInfoReq_descriptor_, &GetFriendsInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFriendsInfoResp_descriptor_, &GetFriendsInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyFriendReq_descriptor_, &ApplyFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyFriendResp_descriptor_, &ApplyFriendResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptFriendReq_descriptor_, &AcceptFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptFriendResp_descriptor_, &AcceptFriendResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveFriendReq_descriptor_, &RemoveFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveFriendResp_descriptor_, &RemoveFriendResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlackListReq_descriptor_, &BlackListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlackListResp_descriptor_, &BlackListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkListReq_descriptor_, &TalkListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkListResp_descriptor_, &TalkListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskListResp_descriptor_, &TaskListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskRewardReq_descriptor_, &TaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskRewardResp_descriptor_, &TaskRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStrengthResp_descriptor_, &GetStrengthResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddStrengthReq_descriptor_, &AddStrengthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddStrengthResp_descriptor_, &AddStrengthResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankReq_descriptor_, &RankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankResp_descriptor_, &RankResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopTimeItemListResp_descriptor_, &ShopTimeItemListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopTimeItemListResp_TimeItem_descriptor_, &ShopTimeItemListResp_TimeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopBuyReq_descriptor_, &ShopBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopBuyResp_descriptor_, &ShopBuyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipLotteryReq_descriptor_, &ShipLotteryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipLotteryResp_descriptor_, &ShipLotteryResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsOnlineReq_descriptor_, &IsOnlineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsOnlineResp_descriptor_, &IsOnlineResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideStepReq_descriptor_, &GuideStepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideStepResp_descriptor_, &GuideStepResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AidAwardReq_descriptor_, &AidAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AidAwardResp_descriptor_, &AidAwardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenGiftReq_descriptor_, &OpenGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenGiftResp_descriptor_, &OpenGiftResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdUser_2eproto() {
  delete AddMoneyCallBack::default_instance_;
  delete AddMoneyCallBack_reflection_;
  delete UpdateTimeStampResp::default_instance_;
  delete UpdateTimeStampResp_reflection_;
  delete UpdateResReq::default_instance_;
  delete UpdateResReq_reflection_;
  delete UpdateResResp::default_instance_;
  delete UpdateResResp_reflection_;
  delete ChatLog::default_instance_;
  delete ChatLog_reflection_;
  delete ChatLogList::default_instance_;
  delete ChatLogList_reflection_;
  delete GetChatLogReq::default_instance_;
  delete GetChatLogReq_reflection_;
  delete GetChatLogResp::default_instance_;
  delete GetChatLogResp_reflection_;
  delete ChatUserInfo::default_instance_;
  delete ChatUserInfo_reflection_;
  delete ChatReq::default_instance_;
  delete ChatReq_reflection_;
  delete ChatResp::default_instance_;
  delete ChatResp_reflection_;
  delete ChatMsg_t::default_instance_;
  delete ChatMsg_t_reflection_;
  delete ChatMsg::default_instance_;
  delete ChatMsg_reflection_;
  delete CmdClientGMReq::default_instance_;
  delete CmdClientGMReq_reflection_;
  delete CmdClientGMResp::default_instance_;
  delete CmdClientGMResp_reflection_;
  delete CmdGetOtherUserInfoReq::default_instance_;
  delete CmdGetOtherUserInfoReq_reflection_;
  delete CmdGetOtherUserInfoResp::default_instance_;
  delete CmdGetOtherUserInfoResp_reflection_;
  delete CmdGetOtherUserInfoListReq::default_instance_;
  delete CmdGetOtherUserInfoListReq_reflection_;
  delete CmdGetOtherUserInfoListResp::default_instance_;
  delete CmdGetOtherUserInfoListResp_reflection_;
  delete NewFriendUpdate::default_instance_;
  delete NewFriendUpdate_reflection_;
  delete BeFriendUpdate::default_instance_;
  delete BeFriendUpdate_reflection_;
  delete GetFriendsInfoReq::default_instance_;
  delete GetFriendsInfoReq_reflection_;
  delete GetFriendsInfoResp::default_instance_;
  delete GetFriendsInfoResp_reflection_;
  delete ApplyFriendReq::default_instance_;
  delete ApplyFriendReq_reflection_;
  delete ApplyFriendResp::default_instance_;
  delete ApplyFriendResp_reflection_;
  delete AcceptFriendReq::default_instance_;
  delete AcceptFriendReq_reflection_;
  delete AcceptFriendResp::default_instance_;
  delete AcceptFriendResp_reflection_;
  delete RemoveFriendReq::default_instance_;
  delete RemoveFriendReq_reflection_;
  delete RemoveFriendResp::default_instance_;
  delete RemoveFriendResp_reflection_;
  delete BlackListReq::default_instance_;
  delete BlackListReq_reflection_;
  delete BlackListResp::default_instance_;
  delete BlackListResp_reflection_;
  delete TalkListReq::default_instance_;
  delete TalkListReq_reflection_;
  delete TalkListResp::default_instance_;
  delete TalkListResp_reflection_;
  delete TaskListResp::default_instance_;
  delete TaskListResp_reflection_;
  delete TaskRewardReq::default_instance_;
  delete TaskRewardReq_reflection_;
  delete TaskRewardResp::default_instance_;
  delete TaskRewardResp_reflection_;
  delete GetStrengthResp::default_instance_;
  delete GetStrengthResp_reflection_;
  delete AddStrengthReq::default_instance_;
  delete AddStrengthReq_reflection_;
  delete AddStrengthResp::default_instance_;
  delete AddStrengthResp_reflection_;
  delete RankReq::default_instance_;
  delete RankReq_reflection_;
  delete RankResp::default_instance_;
  delete RankResp_reflection_;
  delete ShopTimeItemListResp::default_instance_;
  delete ShopTimeItemListResp_reflection_;
  delete ShopTimeItemListResp_TimeItem::default_instance_;
  delete ShopTimeItemListResp_TimeItem_reflection_;
  delete ShopBuyReq::default_instance_;
  delete ShopBuyReq_reflection_;
  delete ShopBuyResp::default_instance_;
  delete ShopBuyResp_reflection_;
  delete ShipLotteryReq::default_instance_;
  delete ShipLotteryReq_reflection_;
  delete ShipLotteryResp::default_instance_;
  delete ShipLotteryResp_reflection_;
  delete IsOnlineReq::default_instance_;
  delete IsOnlineReq_reflection_;
  delete IsOnlineResp::default_instance_;
  delete IsOnlineResp_reflection_;
  delete GuideStepReq::default_instance_;
  delete GuideStepReq_reflection_;
  delete GuideStepResp::default_instance_;
  delete GuideStepResp_reflection_;
  delete AidAwardReq::default_instance_;
  delete AidAwardReq_reflection_;
  delete AidAwardResp::default_instance_;
  delete AidAwardResp_reflection_;
  delete OpenGiftReq::default_instance_;
  delete OpenGiftReq_reflection_;
  delete OpenGiftResp::default_instance_;
  delete OpenGiftResp_reflection_;
}

void protobuf_AddDesc_CmdUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_OtherInfo_2eproto();
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCmdUser.proto\032\017OtherInfo.proto\032\016UserIn"
    "fo.proto\032\016UserSync.proto\032\nItem.proto\"\275\001\n"
    "\020AddMoneyCallBack\022\013\n\003sid\030\001 \002(\t\022\017\n\007ordern"
    "o\030\002 \002(\t\022\016\n\006amount\030\003 \002(\005\022\021\n\tcur_money\030\004 \002"
    "(\005\022\017\n\007cur_vip\030\005 \002(\005\022\023\n\013total_money\030\006 \002(\005"
    "\022\017\n\007item_id\030\007 \002(\005\022\016\n\006buqian\030\010 \002(\005\022\014\n\004zsy"
    "k\030\n \001(\005\022\023\n\013new_item_id\030\013 \001(\005\"C\n\023UpdateTi"
    "meStampResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync"
    "\030\002 \001(\0132\t.UserSync\"\034\n\014UpdateResReq\022\014\n\004typ"
    "e\030\001 \002(\005\"M\n\rUpdateResResp\022\016\n\006result\030\001 \002(\005"
    "\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\016\n\006credit"
    "\030\003 \001(\003\"_\n\007ChatLog\022\r\n\005stamp\030\001 \002(\005\022\014\n\004chat"
    "\030\002 \002(\t\022\020\n\010nickname\030\003 \002(\t\022\022\n\ngroup_name\030\004"
    " \001(\t\022\021\n\tuser_name\030\005 \002(\t\")\n\013ChatLogList\022\032"
    "\n\010log_list\030\001 \003(\0132\010.ChatLog\"/\n\rGetChatLog"
    "Req\022\017\n\007chat_id\030\001 \002(\t\022\r\n\005minor\030\002 \003(\005\"Z\n\016G"
    "etChatLogResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sy"
    "nc\030\002 \001(\0132\t.UserSync\022\032\n\010log_list\030\003 \003(\0132\010."
    "ChatLog\"n\n\014ChatUserInfo\022\013\n\003uid\030\001 \001(\t\022\020\n\010"
    "nickname\030\002 \001(\t\022\013\n\003vip\030\003 \001(\005\022\013\n\003sex\030\004 \001(\005"
    "\022\r\n\005level\030\005 \001(\005\022\026\n\016group_nickname\030\006 \001(\t\""
    "\202\001\n\007ChatReq\022\035\n\006recver\030\001 \001(\0132\r.ChatUserIn"
    "fo\022\013\n\003msg\030\002 \001(\t\022\017\n\007channel\030\003 \001(\005\022\035\n\006send"
    "er\030\004 \001(\0132\r.ChatUserInfo\022\014\n\004type\030\005 \001(\005\022\r\n"
    "\005minor\030\006 \003(\005\"\302\001\n\010ChatResp\022!\n\006result\030\001 \002("
    "\0162\021.ChatResp.ChatRet\022\034\n\tuser_sync\030\002 \001(\0132"
    "\t.UserSync\"u\n\007ChatRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377"
    "\377\377\377\377\377\377\377\001\022\022\n\005DIRTY\020\376\377\377\377\377\377\377\377\377\001\022\022\n\005BLACK\020\375\377"
    "\377\377\377\377\377\377\377\001\022\021\n\004SELF\020\374\377\377\377\377\377\377\377\377\001\022\024\n\007NOMONEY\020\373"
    "\377\377\377\377\377\377\377\377\001\"\223\001\n\tChatMsg_t\022\013\n\003msg\030\001 \003(\t\022\017\n\007"
    "channel\030\002 \001(\005\022\035\n\006sender\030\003 \001(\0132\r.ChatUser"
    "Info\022\035\n\006recver\030\004 \001(\0132\r.ChatUserInfo\022\r\n\005r"
    "ecvs\030\005 \003(\t\022\014\n\004type\030\006 \001(\005\022\r\n\005minor\030\007 \003(\005\""
    "\221\001\n\007ChatMsg\022\013\n\003msg\030\001 \001(\t\022\017\n\007channel\030\002 \001("
    "\005\022\035\n\006sender\030\003 \001(\0132\r.ChatUserInfo\022\035\n\006recv"
    "er\030\004 \001(\0132\r.ChatUserInfo\022\r\n\005recvs\030\005 \003(\t\022\014"
    "\n\004type\030\006 \001(\005\022\r\n\005minor\030\007 \003(\005\"\035\n\016CmdClient"
    "GMReq\022\013\n\003cmd\030\001 \002(\t\"\?\n\017CmdClientGMResp\022\016\n"
    "\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserS"
    "ync\"H\n\026CmdGetOtherUserInfoReq\022\021\n\tuser_na"
    "me\030\001 \002(\t\022\013\n\003sid\030\002 \002(\005\022\016\n\006lineup\030\003 \003(\005\"U\n"
    "\027CmdGetOtherUserInfoResp\022\016\n\006result\030\001 \002(\005"
    "\022\014\n\004type\030\002 \001(\005\022\034\n\004info\030\003 \001(\0132\016.OtherUser"
    "Info\"A\n\032CmdGetOtherUserInfoListReq\022\026\n\016us"
    "er_name_list\030\001 \003(\t\022\013\n\003sid\030\002 \002(\005\"^\n\033CmdGe"
    "tOtherUserInfoListResp\022\016\n\006result\030\001 \002(\005\022\014"
    "\n\004type\030\002 \001(\005\022!\n\tinfo_list\030\003 \003(\0132\016.OtherU"
    "serInfo\"!\n\017NewFriendUpdate\022\016\n\006sender\030\001 \002"
    "(\t\" \n\016BeFriendUpdate\022\016\n\006result\030\001 \002(\005\"O\n\021"
    "GetFriendsInfoReq\022\014\n\004type\030\001 \002(\005\022\r\n\005index"
    "\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\020\n\010nickname\030\004 \001(\t\"P\n"
    "\022GetFriendsInfoResp\022\016\n\006result\030\001 \002(\005\022\014\n\004t"
    "ype\030\002 \002(\005\022\034\n\004list\030\003 \003(\0132\016.OtherUserInfo\""
    " \n\016ApplyFriendReq\022\016\n\006recver\030\001 \002(\t\"\267\001\n\017Ap"
    "plyFriendResp\022/\n\006result\030\001 \002(\0162\037.ApplyFri"
    "endResp.ApplyFriendRet\"s\n\016ApplyFriendRet"
    "\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006FRIEND\020\001\022"
    "\017\n\013OTHER_BLACK\020\002\022\014\n\010MY_BLACK\020\003\022\017\n\013FIREND"
    "_FULL\020\004\022\n\n\006SENDED\020\005\"4\n\017AcceptFriendReq\022\016"
    "\n\006sender\030\001 \002(\t\022\021\n\tmail_guid\030\002 \002(\005\"\341\001\n\020Ac"
    "ceptFriendResp\0221\n\006result\030\001 \002(\0162!.AcceptF"
    "riendResp.AcceptFriendRet\"\231\001\n\017AcceptFrie"
    "ndRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006FRIE"
    "ND\020\001\022\013\n\007NO_MAIL\020\002\022\010\n\004SELF\020\003\022\017\n\013OTHER_BLA"
    "CK\020\004\022\014\n\010MY_BLACK\020\005\022\022\n\016MY_FRIEND_FULL\020\006\022\025"
    "\n\021OTHER_FRIEND_FULL\020\007\"$\n\017RemoveFriendReq"
    "\022\021\n\tuser_name\030\001 \002(\t\"\"\n\020RemoveFriendResp\022"
    "\016\n\006result\030\001 \002(\005\"/\n\014BlackListReq\022\014\n\004type\030"
    "\001 \002(\005\022\021\n\tuser_name\030\002 \002(\t\"\037\n\rBlackListRes"
    "p\022\016\n\006result\030\001 \002(\005\".\n\013TalkListReq\022\014\n\004type"
    "\030\001 \002(\005\022\021\n\tuser_name\030\002 \002(\t\"\036\n\014TalkListRes"
    "p\022\016\n\006result\030\001 \002(\005\"Z\n\014TaskListResp\022\016\n\006res"
    "ult\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022"
    "\034\n\ttask_list\030\003 \003(\0132\t.TaskInfo\" \n\rTaskRew"
    "ardReq\022\017\n\007task_id\030\001 \002(\005\"O\n\016TaskRewardRes"
    "p\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.U"
    "serSync\022\017\n\007task_id\030\003 \001(\005\"\?\n\017GetStrengthR"
    "esp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t"
    ".UserSync\"3\n\016AddStrengthReq\022\014\n\004type\030\001 \002("
    "\005\022\023\n\004item\030\002 \001(\0132\005.Pair\"\337\001\n\017AddStrengthRe"
    "sp\022/\n\006result\030\001 \002(\0162\037.AddStrengthResp.Add"
    "StrengthRet\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSyn"
    "c\"}\n\016AddStrengthRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377"
    "\377\377\377\377\377\001\022\022\n\016REQ_DATA_ERROR\020\001\022\013\n\007NO_ITEM\020\002\022"
    "\022\n\016ITEM_KEY_ERROR\020\003\022\r\n\tMAX_TIMES\020\004\022\014\n\010NO"
    "_MONEY\020\005\"\300\001\n\007RankReq\022$\n\trank_type\030\001 \002(\0162"
    "\021.RankReq.RankType\022\022\n\nstart_rank\030\002 \002(\005\022\017"
    "\n\007need_my\030\003 \002(\010\"j\n\010RankType\022\020\n\014PLAYER_LE"
    "VEL\020\001\022\020\n\014PLAYER_POWER\020\002\022\023\n\017MAIN_CITY_LEV"
    "EL\020\003\022\017\n\013GROUP_POWER\020\004\022\t\n\005ARENA\020\005\022\t\n\005TRIA"
    "L\020\006\"\316\001\n\010RankResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser"
    "_sync\030\002 \001(\0132\t.UserSync\022!\n\tuser_rank\030\003 \003("
    "\0132\016.OtherUserInfo\022#\n\ngroup_rank\030\004 \003(\0132\017."
    "OtherGroupInfo\022$\n\014my_user_rank\030\005 \001(\0132\016.O"
    "therUserInfo\022&\n\rmy_group_rank\030\006 \001(\0132\017.Ot"
    "herGroupInfo\"\234\001\n\024ShopTimeItemListResp\022\016\n"
    "\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserS"
    "ync\022,\n\004list\030\003 \003(\0132\036.ShopTimeItemListResp"
    ".TimeItem\032(\n\010TimeItem\022\n\n\002id\030\001 \002(\005\022\020\n\010end"
    "_time\030\002 \002(\003\"%\n\nShopBuyReq\022\n\n\002id\030\001 \002(\005\022\013\n"
    "\003num\030\002 \002(\005\"U\n\013ShopBuyResp\022\016\n\006result\030\001 \002("
    "\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\030\n\003req\030\003"
    " \001(\0132\013.ShopBuyReq\"*\n\016ShipLotteryReq\022\n\n\002i"
    "d\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\"Y\n\017ShipLotteryResp"
    "\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.Us"
    "erSync\022\030\n\titem_list\030\003 \003(\0132\005.Item\"%\n\013IsOn"
    "lineReq\022\026\n\016user_name_list\030\001 \003(\t\"l\n\014IsOnl"
    "ineResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001"
    "(\0132\t.UserSync\022\026\n\016user_name_list\030\003 \003(\t\022\026\n"
    "\016is_online_list\030\004 \003(\010\"T\n\014GuideStepReq\022\014\n"
    "\004type\030\001 \002(\005\022\022\n\nstep_index\030\002 \001(\005\022\020\n\010step_"
    "num\030\003 \001(\005\022\020\n\010talk_key\030\004 \001(\t\"=\n\rGuideStep"
    "Resp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132"
    "\t.UserSync\"\033\n\013AidAwardReq\022\014\n\004type\030\001 \002(\005\""
    "<\n\014AidAwardResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_"
    "sync\030\002 \001(\0132\t.UserSync\"+\n\013OpenGiftReq\022\017\n\007"
    "item_id\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\"Z\n\014OpenGiftRe"
    "sp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t."
    "UserSync\022\034\n\rget_item_list\030\003 \003(\0132\005.Item", 4758);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdUser.proto", &protobuf_RegisterTypes);
  AddMoneyCallBack::default_instance_ = new AddMoneyCallBack();
  UpdateTimeStampResp::default_instance_ = new UpdateTimeStampResp();
  UpdateResReq::default_instance_ = new UpdateResReq();
  UpdateResResp::default_instance_ = new UpdateResResp();
  ChatLog::default_instance_ = new ChatLog();
  ChatLogList::default_instance_ = new ChatLogList();
  GetChatLogReq::default_instance_ = new GetChatLogReq();
  GetChatLogResp::default_instance_ = new GetChatLogResp();
  ChatUserInfo::default_instance_ = new ChatUserInfo();
  ChatReq::default_instance_ = new ChatReq();
  ChatResp::default_instance_ = new ChatResp();
  ChatMsg_t::default_instance_ = new ChatMsg_t();
  ChatMsg::default_instance_ = new ChatMsg();
  CmdClientGMReq::default_instance_ = new CmdClientGMReq();
  CmdClientGMResp::default_instance_ = new CmdClientGMResp();
  CmdGetOtherUserInfoReq::default_instance_ = new CmdGetOtherUserInfoReq();
  CmdGetOtherUserInfoResp::default_instance_ = new CmdGetOtherUserInfoResp();
  CmdGetOtherUserInfoListReq::default_instance_ = new CmdGetOtherUserInfoListReq();
  CmdGetOtherUserInfoListResp::default_instance_ = new CmdGetOtherUserInfoListResp();
  NewFriendUpdate::default_instance_ = new NewFriendUpdate();
  BeFriendUpdate::default_instance_ = new BeFriendUpdate();
  GetFriendsInfoReq::default_instance_ = new GetFriendsInfoReq();
  GetFriendsInfoResp::default_instance_ = new GetFriendsInfoResp();
  ApplyFriendReq::default_instance_ = new ApplyFriendReq();
  ApplyFriendResp::default_instance_ = new ApplyFriendResp();
  AcceptFriendReq::default_instance_ = new AcceptFriendReq();
  AcceptFriendResp::default_instance_ = new AcceptFriendResp();
  RemoveFriendReq::default_instance_ = new RemoveFriendReq();
  RemoveFriendResp::default_instance_ = new RemoveFriendResp();
  BlackListReq::default_instance_ = new BlackListReq();
  BlackListResp::default_instance_ = new BlackListResp();
  TalkListReq::default_instance_ = new TalkListReq();
  TalkListResp::default_instance_ = new TalkListResp();
  TaskListResp::default_instance_ = new TaskListResp();
  TaskRewardReq::default_instance_ = new TaskRewardReq();
  TaskRewardResp::default_instance_ = new TaskRewardResp();
  GetStrengthResp::default_instance_ = new GetStrengthResp();
  AddStrengthReq::default_instance_ = new AddStrengthReq();
  AddStrengthResp::default_instance_ = new AddStrengthResp();
  RankReq::default_instance_ = new RankReq();
  RankResp::default_instance_ = new RankResp();
  ShopTimeItemListResp::default_instance_ = new ShopTimeItemListResp();
  ShopTimeItemListResp_TimeItem::default_instance_ = new ShopTimeItemListResp_TimeItem();
  ShopBuyReq::default_instance_ = new ShopBuyReq();
  ShopBuyResp::default_instance_ = new ShopBuyResp();
  ShipLotteryReq::default_instance_ = new ShipLotteryReq();
  ShipLotteryResp::default_instance_ = new ShipLotteryResp();
  IsOnlineReq::default_instance_ = new IsOnlineReq();
  IsOnlineResp::default_instance_ = new IsOnlineResp();
  GuideStepReq::default_instance_ = new GuideStepReq();
  GuideStepResp::default_instance_ = new GuideStepResp();
  AidAwardReq::default_instance_ = new AidAwardReq();
  AidAwardResp::default_instance_ = new AidAwardResp();
  OpenGiftReq::default_instance_ = new OpenGiftReq();
  OpenGiftResp::default_instance_ = new OpenGiftResp();
  AddMoneyCallBack::default_instance_->InitAsDefaultInstance();
  UpdateTimeStampResp::default_instance_->InitAsDefaultInstance();
  UpdateResReq::default_instance_->InitAsDefaultInstance();
  UpdateResResp::default_instance_->InitAsDefaultInstance();
  ChatLog::default_instance_->InitAsDefaultInstance();
  ChatLogList::default_instance_->InitAsDefaultInstance();
  GetChatLogReq::default_instance_->InitAsDefaultInstance();
  GetChatLogResp::default_instance_->InitAsDefaultInstance();
  ChatUserInfo::default_instance_->InitAsDefaultInstance();
  ChatReq::default_instance_->InitAsDefaultInstance();
  ChatResp::default_instance_->InitAsDefaultInstance();
  ChatMsg_t::default_instance_->InitAsDefaultInstance();
  ChatMsg::default_instance_->InitAsDefaultInstance();
  CmdClientGMReq::default_instance_->InitAsDefaultInstance();
  CmdClientGMResp::default_instance_->InitAsDefaultInstance();
  CmdGetOtherUserInfoReq::default_instance_->InitAsDefaultInstance();
  CmdGetOtherUserInfoResp::default_instance_->InitAsDefaultInstance();
  CmdGetOtherUserInfoListReq::default_instance_->InitAsDefaultInstance();
  CmdGetOtherUserInfoListResp::default_instance_->InitAsDefaultInstance();
  NewFriendUpdate::default_instance_->InitAsDefaultInstance();
  BeFriendUpdate::default_instance_->InitAsDefaultInstance();
  GetFriendsInfoReq::default_instance_->InitAsDefaultInstance();
  GetFriendsInfoResp::default_instance_->InitAsDefaultInstance();
  ApplyFriendReq::default_instance_->InitAsDefaultInstance();
  ApplyFriendResp::default_instance_->InitAsDefaultInstance();
  AcceptFriendReq::default_instance_->InitAsDefaultInstance();
  AcceptFriendResp::default_instance_->InitAsDefaultInstance();
  RemoveFriendReq::default_instance_->InitAsDefaultInstance();
  RemoveFriendResp::default_instance_->InitAsDefaultInstance();
  BlackListReq::default_instance_->InitAsDefaultInstance();
  BlackListResp::default_instance_->InitAsDefaultInstance();
  TalkListReq::default_instance_->InitAsDefaultInstance();
  TalkListResp::default_instance_->InitAsDefaultInstance();
  TaskListResp::default_instance_->InitAsDefaultInstance();
  TaskRewardReq::default_instance_->InitAsDefaultInstance();
  TaskRewardResp::default_instance_->InitAsDefaultInstance();
  GetStrengthResp::default_instance_->InitAsDefaultInstance();
  AddStrengthReq::default_instance_->InitAsDefaultInstance();
  AddStrengthResp::default_instance_->InitAsDefaultInstance();
  RankReq::default_instance_->InitAsDefaultInstance();
  RankResp::default_instance_->InitAsDefaultInstance();
  ShopTimeItemListResp::default_instance_->InitAsDefaultInstance();
  ShopTimeItemListResp_TimeItem::default_instance_->InitAsDefaultInstance();
  ShopBuyReq::default_instance_->InitAsDefaultInstance();
  ShopBuyResp::default_instance_->InitAsDefaultInstance();
  ShipLotteryReq::default_instance_->InitAsDefaultInstance();
  ShipLotteryResp::default_instance_->InitAsDefaultInstance();
  IsOnlineReq::default_instance_->InitAsDefaultInstance();
  IsOnlineResp::default_instance_->InitAsDefaultInstance();
  GuideStepReq::default_instance_->InitAsDefaultInstance();
  GuideStepResp::default_instance_->InitAsDefaultInstance();
  AidAwardReq::default_instance_->InitAsDefaultInstance();
  AidAwardResp::default_instance_->InitAsDefaultInstance();
  OpenGiftReq::default_instance_->InitAsDefaultInstance();
  OpenGiftResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdUser_2eproto {
  StaticDescriptorInitializer_CmdUser_2eproto() {
    protobuf_AddDesc_CmdUser_2eproto();
  }
} static_descriptor_initializer_CmdUser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AddMoneyCallBack::kSidFieldNumber;
const int AddMoneyCallBack::kOrdernoFieldNumber;
const int AddMoneyCallBack::kAmountFieldNumber;
const int AddMoneyCallBack::kCurMoneyFieldNumber;
const int AddMoneyCallBack::kCurVipFieldNumber;
const int AddMoneyCallBack::kTotalMoneyFieldNumber;
const int AddMoneyCallBack::kItemIdFieldNumber;
const int AddMoneyCallBack::kBuqianFieldNumber;
const int AddMoneyCallBack::kZsykFieldNumber;
const int AddMoneyCallBack::kNewItemIdFieldNumber;
#endif  // !_MSC_VER

AddMoneyCallBack::AddMoneyCallBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddMoneyCallBack::InitAsDefaultInstance() {
}

AddMoneyCallBack::AddMoneyCallBack(const AddMoneyCallBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddMoneyCallBack::SharedCtor() {
  _cached_size_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = 0;
  cur_money_ = 0;
  cur_vip_ = 0;
  total_money_ = 0;
  item_id_ = 0;
  buqian_ = 0;
  zsyk_ = 0;
  new_item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMoneyCallBack::~AddMoneyCallBack() {
  SharedDtor();
}

void AddMoneyCallBack::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (orderno_ != &::google::protobuf::internal::kEmptyString) {
    delete orderno_;
  }
  if (this != default_instance_) {
  }
}

void AddMoneyCallBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMoneyCallBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMoneyCallBack_descriptor_;
}

const AddMoneyCallBack& AddMoneyCallBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

AddMoneyCallBack* AddMoneyCallBack::default_instance_ = NULL;

AddMoneyCallBack* AddMoneyCallBack::New() const {
  return new AddMoneyCallBack;
}

void AddMoneyCallBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    if (has_orderno()) {
      if (orderno_ != &::google::protobuf::internal::kEmptyString) {
        orderno_->clear();
      }
    }
    amount_ = 0;
    cur_money_ = 0;
    cur_vip_ = 0;
    total_money_ = 0;
    item_id_ = 0;
    buqian_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zsyk_ = 0;
    new_item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMoneyCallBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orderno;
        break;
      }

      // required string orderno = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderno().data(), this->orderno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // required int32 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_money;
        break;
      }

      // required int32 cur_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_money_)));
          set_has_cur_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_vip;
        break;
      }

      // required int32 cur_vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_vip_)));
          set_has_cur_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_money;
        break;
      }

      // required int32 total_money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_money_)));
          set_has_total_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buqian;
        break;
      }

      // required int32 buqian = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buqian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buqian_)));
          set_has_buqian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_zsyk;
        break;
      }

      // optional int32 zsyk = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zsyk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zsyk_)));
          set_has_zsyk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_new_item_id;
        break;
      }

      // optional int32 new_item_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_item_id_)));
          set_has_new_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddMoneyCallBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sid(), output);
  }

  // required string orderno = 2;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderno().data(), this->orderno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orderno(), output);
  }

  // required int32 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }

  // required int32 cur_money = 4;
  if (has_cur_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_money(), output);
  }

  // required int32 cur_vip = 5;
  if (has_cur_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cur_vip(), output);
  }

  // required int32 total_money = 6;
  if (has_total_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_money(), output);
  }

  // required int32 item_id = 7;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->item_id(), output);
  }

  // required int32 buqian = 8;
  if (has_buqian()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buqian(), output);
  }

  // optional int32 zsyk = 10;
  if (has_zsyk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->zsyk(), output);
  }

  // optional int32 new_item_id = 11;
  if (has_new_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->new_item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddMoneyCallBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sid(), target);
  }

  // required string orderno = 2;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderno().data(), this->orderno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }

  // required int32 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }

  // required int32 cur_money = 4;
  if (has_cur_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_money(), target);
  }

  // required int32 cur_vip = 5;
  if (has_cur_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cur_vip(), target);
  }

  // required int32 total_money = 6;
  if (has_total_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total_money(), target);
  }

  // required int32 item_id = 7;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->item_id(), target);
  }

  // required int32 buqian = 8;
  if (has_buqian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buqian(), target);
  }

  // optional int32 zsyk = 10;
  if (has_zsyk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->zsyk(), target);
  }

  // optional int32 new_item_id = 11;
  if (has_new_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->new_item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddMoneyCallBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }

    // required string orderno = 2;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }

    // required int32 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // required int32 cur_money = 4;
    if (has_cur_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_money());
    }

    // required int32 cur_vip = 5;
    if (has_cur_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_vip());
    }

    // required int32 total_money = 6;
    if (has_total_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_money());
    }

    // required int32 item_id = 7;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 buqian = 8;
    if (has_buqian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buqian());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 zsyk = 10;
    if (has_zsyk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zsyk());
    }

    // optional int32 new_item_id = 11;
    if (has_new_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMoneyCallBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMoneyCallBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMoneyCallBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMoneyCallBack::MergeFrom(const AddMoneyCallBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_orderno()) {
      set_orderno(from.orderno());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_cur_money()) {
      set_cur_money(from.cur_money());
    }
    if (from.has_cur_vip()) {
      set_cur_vip(from.cur_vip());
    }
    if (from.has_total_money()) {
      set_total_money(from.total_money());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_buqian()) {
      set_buqian(from.buqian());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zsyk()) {
      set_zsyk(from.zsyk());
    }
    if (from.has_new_item_id()) {
      set_new_item_id(from.new_item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMoneyCallBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMoneyCallBack::CopyFrom(const AddMoneyCallBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMoneyCallBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void AddMoneyCallBack::Swap(AddMoneyCallBack* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(orderno_, other->orderno_);
    std::swap(amount_, other->amount_);
    std::swap(cur_money_, other->cur_money_);
    std::swap(cur_vip_, other->cur_vip_);
    std::swap(total_money_, other->total_money_);
    std::swap(item_id_, other->item_id_);
    std::swap(buqian_, other->buqian_);
    std::swap(zsyk_, other->zsyk_);
    std::swap(new_item_id_, other->new_item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMoneyCallBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMoneyCallBack_descriptor_;
  metadata.reflection = AddMoneyCallBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTimeStampResp::kResultFieldNumber;
const int UpdateTimeStampResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

UpdateTimeStampResp::UpdateTimeStampResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateTimeStampResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

UpdateTimeStampResp::UpdateTimeStampResp(const UpdateTimeStampResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateTimeStampResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTimeStampResp::~UpdateTimeStampResp() {
  SharedDtor();
}

void UpdateTimeStampResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void UpdateTimeStampResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTimeStampResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTimeStampResp_descriptor_;
}

const UpdateTimeStampResp& UpdateTimeStampResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

UpdateTimeStampResp* UpdateTimeStampResp::default_instance_ = NULL;

UpdateTimeStampResp* UpdateTimeStampResp::New() const {
  return new UpdateTimeStampResp;
}

void UpdateTimeStampResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTimeStampResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateTimeStampResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateTimeStampResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateTimeStampResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTimeStampResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTimeStampResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTimeStampResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTimeStampResp::MergeFrom(const UpdateTimeStampResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTimeStampResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTimeStampResp::CopyFrom(const UpdateTimeStampResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTimeStampResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void UpdateTimeStampResp::Swap(UpdateTimeStampResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTimeStampResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTimeStampResp_descriptor_;
  metadata.reflection = UpdateTimeStampResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateResReq::kTypeFieldNumber;
#endif  // !_MSC_VER

UpdateResReq::UpdateResReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateResReq::InitAsDefaultInstance() {
}

UpdateResReq::UpdateResReq(const UpdateResReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateResReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateResReq::~UpdateResReq() {
  SharedDtor();
}

void UpdateResReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateResReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateResReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateResReq_descriptor_;
}

const UpdateResReq& UpdateResReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

UpdateResReq* UpdateResReq::default_instance_ = NULL;

UpdateResReq* UpdateResReq::New() const {
  return new UpdateResReq;
}

void UpdateResReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateResReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateResReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateResReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateResReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateResReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateResReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateResReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateResReq::MergeFrom(const UpdateResReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateResReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResReq::CopyFrom(const UpdateResReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateResReq::Swap(UpdateResReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateResReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateResReq_descriptor_;
  metadata.reflection = UpdateResReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateResResp::kResultFieldNumber;
const int UpdateResResp::kUserSyncFieldNumber;
const int UpdateResResp::kCreditFieldNumber;
#endif  // !_MSC_VER

UpdateResResp::UpdateResResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateResResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

UpdateResResp::UpdateResResp(const UpdateResResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateResResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  credit_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateResResp::~UpdateResResp() {
  SharedDtor();
}

void UpdateResResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void UpdateResResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateResResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateResResp_descriptor_;
}

const UpdateResResp& UpdateResResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

UpdateResResp* UpdateResResp::default_instance_ = NULL;

UpdateResResp* UpdateResResp::New() const {
  return new UpdateResResp;
}

void UpdateResResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    credit_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateResResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_credit;
        break;
      }

      // optional int64 credit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateResResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int64 credit = 3;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->credit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateResResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int64 credit = 3;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->credit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateResResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int64 credit = 3;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->credit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateResResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateResResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateResResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateResResp::MergeFrom(const UpdateResResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateResResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResResp::CopyFrom(const UpdateResResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void UpdateResResp::Swap(UpdateResResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(credit_, other->credit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateResResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateResResp_descriptor_;
  metadata.reflection = UpdateResResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatLog::kStampFieldNumber;
const int ChatLog::kChatFieldNumber;
const int ChatLog::kNicknameFieldNumber;
const int ChatLog::kGroupNameFieldNumber;
const int ChatLog::kUserNameFieldNumber;
#endif  // !_MSC_VER

ChatLog::ChatLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatLog::InitAsDefaultInstance() {
}

ChatLog::ChatLog(const ChatLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatLog::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = 0;
  chat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatLog::~ChatLog() {
  SharedDtor();
}

void ChatLog::SharedDtor() {
  if (chat_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void ChatLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatLog_descriptor_;
}

const ChatLog& ChatLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ChatLog* ChatLog::default_instance_ = NULL;

ChatLog* ChatLog::New() const {
  return new ChatLog;
}

void ChatLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stamp_ = 0;
    if (has_chat()) {
      if (chat_ != &::google::protobuf::internal::kEmptyString) {
        chat_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat;
        break;
      }

      // required string chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat().data(), this->chat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // required string nickname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group_name;
        break;
      }

      // optional string group_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_name;
        break;
      }

      // required string user_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stamp(), output);
  }

  // required string chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat().data(), this->chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chat(), output);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nickname(), output);
  }

  // optional string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->group_name(), output);
  }

  // required string user_name = 5;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stamp(), target);
  }

  // required string chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat().data(), this->chat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chat(), target);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string group_name = 4;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_name(), target);
  }

  // required string user_name = 5;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stamp());
    }

    // required string chat = 2;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat());
    }

    // required string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string group_name = 4;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // required string user_name = 5;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatLog::MergeFrom(const ChatLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatLog::CopyFrom(const ChatLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void ChatLog::Swap(ChatLog* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(chat_, other->chat_);
    std::swap(nickname_, other->nickname_);
    std::swap(group_name_, other->group_name_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatLog_descriptor_;
  metadata.reflection = ChatLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatLogList::kLogListFieldNumber;
#endif  // !_MSC_VER

ChatLogList::ChatLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatLogList::InitAsDefaultInstance() {
}

ChatLogList::ChatLogList(const ChatLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatLogList::~ChatLogList() {
  SharedDtor();
}

void ChatLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatLogList_descriptor_;
}

const ChatLogList& ChatLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ChatLogList* ChatLogList::default_instance_ = NULL;

ChatLogList* ChatLogList::New() const {
  return new ChatLogList;
}

void ChatLogList::Clear() {
  log_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ChatLog log_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ChatLog log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ChatLog log_list = 1;
  for (int i = 0; i < this->log_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatLogList::ByteSize() const {
  int total_size = 0;

  // repeated .ChatLog log_list = 1;
  total_size += 1 * this->log_list_size();
  for (int i = 0; i < this->log_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatLogList::MergeFrom(const ChatLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_list_.MergeFrom(from.log_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatLogList::CopyFrom(const ChatLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLogList::IsInitialized() const {

  for (int i = 0; i < log_list_size(); i++) {
    if (!this->log_list(i).IsInitialized()) return false;
  }
  return true;
}

void ChatLogList::Swap(ChatLogList* other) {
  if (other != this) {
    log_list_.Swap(&other->log_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatLogList_descriptor_;
  metadata.reflection = ChatLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChatLogReq::kChatIdFieldNumber;
const int GetChatLogReq::kMinorFieldNumber;
#endif  // !_MSC_VER

GetChatLogReq::GetChatLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChatLogReq::InitAsDefaultInstance() {
}

GetChatLogReq::GetChatLogReq(const GetChatLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChatLogReq::SharedCtor() {
  _cached_size_ = 0;
  chat_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChatLogReq::~GetChatLogReq() {
  SharedDtor();
}

void GetChatLogReq::SharedDtor() {
  if (chat_id_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_id_;
  }
  if (this != default_instance_) {
  }
}

void GetChatLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChatLogReq_descriptor_;
}

const GetChatLogReq& GetChatLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

GetChatLogReq* GetChatLogReq::default_instance_ = NULL;

GetChatLogReq* GetChatLogReq::New() const {
  return new GetChatLogReq;
}

void GetChatLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_id()) {
      if (chat_id_ != &::google::protobuf::internal::kEmptyString) {
        chat_id_->clear();
      }
    }
  }
  minor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChatLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_id().data(), this->chat_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // repeated int32 minor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_minor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChatLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chat_id = 1;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_id().data(), this->chat_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chat_id(), output);
  }

  // repeated int32 minor = 2;
  for (int i = 0; i < this->minor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->minor(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChatLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chat_id = 1;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_id().data(), this->chat_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chat_id(), target);
  }

  // repeated int32 minor = 2;
  for (int i = 0; i < this->minor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->minor(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChatLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_id());
    }

  }
  // repeated int32 minor = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->minor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minor(i));
    }
    total_size += 1 * this->minor_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChatLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChatLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChatLogReq::MergeFrom(const GetChatLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  minor_.MergeFrom(from.minor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_id()) {
      set_chat_id(from.chat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChatLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatLogReq::CopyFrom(const GetChatLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatLogReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetChatLogReq::Swap(GetChatLogReq* other) {
  if (other != this) {
    std::swap(chat_id_, other->chat_id_);
    minor_.Swap(&other->minor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChatLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChatLogReq_descriptor_;
  metadata.reflection = GetChatLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetChatLogResp::kResultFieldNumber;
const int GetChatLogResp::kUserSyncFieldNumber;
const int GetChatLogResp::kLogListFieldNumber;
#endif  // !_MSC_VER

GetChatLogResp::GetChatLogResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetChatLogResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GetChatLogResp::GetChatLogResp(const GetChatLogResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetChatLogResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetChatLogResp::~GetChatLogResp() {
  SharedDtor();
}

void GetChatLogResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GetChatLogResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetChatLogResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetChatLogResp_descriptor_;
}

const GetChatLogResp& GetChatLogResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

GetChatLogResp* GetChatLogResp::default_instance_ = NULL;

GetChatLogResp* GetChatLogResp::New() const {
  return new GetChatLogResp;
}

void GetChatLogResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  log_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetChatLogResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log_list;
        break;
      }

      // repeated .ChatLog log_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetChatLogResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .ChatLog log_list = 3;
  for (int i = 0; i < this->log_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetChatLogResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .ChatLog log_list = 3;
  for (int i = 0; i < this->log_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetChatLogResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .ChatLog log_list = 3;
  total_size += 1 * this->log_list_size();
  for (int i = 0; i < this->log_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetChatLogResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetChatLogResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetChatLogResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetChatLogResp::MergeFrom(const GetChatLogResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_list_.MergeFrom(from.log_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetChatLogResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChatLogResp::CopyFrom(const GetChatLogResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatLogResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < log_list_size(); i++) {
    if (!this->log_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetChatLogResp::Swap(GetChatLogResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    log_list_.Swap(&other->log_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetChatLogResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetChatLogResp_descriptor_;
  metadata.reflection = GetChatLogResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatUserInfo::kUidFieldNumber;
const int ChatUserInfo::kNicknameFieldNumber;
const int ChatUserInfo::kVipFieldNumber;
const int ChatUserInfo::kSexFieldNumber;
const int ChatUserInfo::kLevelFieldNumber;
const int ChatUserInfo::kGroupNicknameFieldNumber;
#endif  // !_MSC_VER

ChatUserInfo::ChatUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatUserInfo::InitAsDefaultInstance() {
}

ChatUserInfo::ChatUserInfo(const ChatUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0;
  sex_ = 0;
  level_ = 0;
  group_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatUserInfo::~ChatUserInfo() {
  SharedDtor();
}

void ChatUserInfo::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete group_nickname_;
  }
  if (this != default_instance_) {
  }
}

void ChatUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatUserInfo_descriptor_;
}

const ChatUserInfo& ChatUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ChatUserInfo* ChatUserInfo::default_instance_ = NULL;

ChatUserInfo* ChatUserInfo::New() const {
  return new ChatUserInfo;
}

void ChatUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    vip_ = 0;
    sex_ = 0;
    level_ = 0;
    if (has_group_nickname()) {
      if (group_nickname_ != &::google::protobuf::internal::kEmptyString) {
        group_nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip;
        break;
      }

      // optional int32 vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_group_nickname;
        break;
      }

      // optional string group_nickname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_nickname().data(), this->group_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional int32 vip = 3;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vip(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional string group_nickname = 6;
  if (has_group_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_nickname().data(), this->group_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->group_nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 vip = 3;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vip(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional string group_nickname = 6;
  if (has_group_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_nickname().data(), this->group_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 vip = 3;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string group_nickname = 6;
    if (has_group_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatUserInfo::MergeFrom(const ChatUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_group_nickname()) {
      set_group_nickname(from.group_nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatUserInfo::CopyFrom(const ChatUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatUserInfo::IsInitialized() const {

  return true;
}

void ChatUserInfo::Swap(ChatUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(vip_, other->vip_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(group_nickname_, other->group_nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatUserInfo_descriptor_;
  metadata.reflection = ChatUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatReq::kRecverFieldNumber;
const int ChatReq::kMsgFieldNumber;
const int ChatReq::kChannelFieldNumber;
const int ChatReq::kSenderFieldNumber;
const int ChatReq::kTypeFieldNumber;
const int ChatReq::kMinorFieldNumber;
#endif  // !_MSC_VER

ChatReq::ChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatReq::InitAsDefaultInstance() {
  recver_ = const_cast< ::ChatUserInfo*>(&::ChatUserInfo::default_instance());
  sender_ = const_cast< ::ChatUserInfo*>(&::ChatUserInfo::default_instance());
}

ChatReq::ChatReq(const ChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatReq::SharedCtor() {
  _cached_size_ = 0;
  recver_ = NULL;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  sender_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatReq::~ChatReq() {
  SharedDtor();
}

void ChatReq::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete recver_;
    delete sender_;
  }
}

void ChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatReq_descriptor_;
}

const ChatReq& ChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ChatReq* ChatReq::default_instance_ = NULL;

ChatReq* ChatReq::New() const {
  return new ChatReq;
}

void ChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recver()) {
      if (recver_ != NULL) recver_->::ChatUserInfo::Clear();
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    channel_ = 0;
    if (has_sender()) {
      if (sender_ != NULL) sender_->::ChatUserInfo::Clear();
    }
    type_ = 0;
  }
  minor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ChatUserInfo recver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // optional int32 channel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sender;
        break;
      }

      // optional .ChatUserInfo sender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minor;
        break;
      }

      // repeated int32 minor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_minor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minor;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ChatUserInfo recver = 1;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recver(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  // optional .ChatUserInfo sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sender(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // repeated int32 minor = 6;
  for (int i = 0; i < this->minor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->minor(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ChatUserInfo recver = 1;
  if (has_recver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recver(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional int32 channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  // optional .ChatUserInfo sender = 4;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sender(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // repeated int32 minor = 6;
  for (int i = 0; i < this->minor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->minor(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ChatUserInfo recver = 1;
    if (has_recver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recver());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .ChatUserInfo sender = 4;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 minor = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->minor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minor(i));
    }
    total_size += 1 * this->minor_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatReq::MergeFrom(const ChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  minor_.MergeFrom(from.minor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recver()) {
      mutable_recver()->::ChatUserInfo::MergeFrom(from.recver());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_sender()) {
      mutable_sender()->::ChatUserInfo::MergeFrom(from.sender());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReq::CopyFrom(const ChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReq::IsInitialized() const {

  return true;
}

void ChatReq::Swap(ChatReq* other) {
  if (other != this) {
    std::swap(recver_, other->recver_);
    std::swap(msg_, other->msg_);
    std::swap(channel_, other->channel_);
    std::swap(sender_, other->sender_);
    std::swap(type_, other->type_);
    minor_.Swap(&other->minor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatReq_descriptor_;
  metadata.reflection = ChatReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatResp_ChatRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatResp_ChatRet_descriptor_;
}
bool ChatResp_ChatRet_IsValid(int value) {
  switch(value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChatResp_ChatRet ChatResp::OK;
const ChatResp_ChatRet ChatResp::FAIL;
const ChatResp_ChatRet ChatResp::DIRTY;
const ChatResp_ChatRet ChatResp::BLACK;
const ChatResp_ChatRet ChatResp::SELF;
const ChatResp_ChatRet ChatResp::NOMONEY;
const ChatResp_ChatRet ChatResp::ChatRet_MIN;
const ChatResp_ChatRet ChatResp::ChatRet_MAX;
const int ChatResp::ChatRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChatResp::kResultFieldNumber;
const int ChatResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ChatResp::ChatResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ChatResp::ChatResp(const ChatResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatResp::~ChatResp() {
  SharedDtor();
}

void ChatResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ChatResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatResp_descriptor_;
}

const ChatResp& ChatResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ChatResp* ChatResp::default_instance_ = NULL;

ChatResp* ChatResp::New() const {
  return new ChatResp;
}

void ChatResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ChatResp.ChatRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatResp_ChatRet_IsValid(value)) {
            set_result(static_cast< ::ChatResp_ChatRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ChatResp.ChatRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ChatResp.ChatRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ChatResp.ChatRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatResp::MergeFrom(const ChatResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatResp::CopyFrom(const ChatResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ChatResp::Swap(ChatResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatResp_descriptor_;
  metadata.reflection = ChatResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMsg_t::kMsgFieldNumber;
const int ChatMsg_t::kChannelFieldNumber;
const int ChatMsg_t::kSenderFieldNumber;
const int ChatMsg_t::kRecverFieldNumber;
const int ChatMsg_t::kRecvsFieldNumber;
const int ChatMsg_t::kTypeFieldNumber;
const int ChatMsg_t::kMinorFieldNumber;
#endif  // !_MSC_VER

ChatMsg_t::ChatMsg_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMsg_t::InitAsDefaultInstance() {
  sender_ = const_cast< ::ChatUserInfo*>(&::ChatUserInfo::default_instance());
  recver_ = const_cast< ::ChatUserInfo*>(&::ChatUserInfo::default_instance());
}

ChatMsg_t::ChatMsg_t(const ChatMsg_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMsg_t::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  sender_ = NULL;
  recver_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsg_t::~ChatMsg_t() {
  SharedDtor();
}

void ChatMsg_t::SharedDtor() {
  if (this != default_instance_) {
    delete sender_;
    delete recver_;
  }
}

void ChatMsg_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsg_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsg_t_descriptor_;
}

const ChatMsg_t& ChatMsg_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ChatMsg_t* ChatMsg_t::default_instance_ = NULL;

ChatMsg_t* ChatMsg_t::New() const {
  return new ChatMsg_t;
}

void ChatMsg_t::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    channel_ = 0;
    if (has_sender()) {
      if (sender_ != NULL) sender_->::ChatUserInfo::Clear();
    }
    if (has_recver()) {
      if (recver_ != NULL) recver_->::ChatUserInfo::Clear();
    }
    type_ = 0;
  }
  msg_.Clear();
  recvs_.Clear();
  minor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsg_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg(this->msg_size() - 1).data(),
            this->msg(this->msg_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_msg;
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // optional .ChatUserInfo sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recver;
        break;
      }

      // optional .ChatUserInfo recver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recvs;
        break;
      }

      // repeated string recvs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recvs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recvs(this->recvs_size() - 1).data(),
            this->recvs(this->recvs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recvs;
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_minor;
        break;
      }

      // repeated int32 minor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_minor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_minor;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMsg_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string msg = 1;
  for (int i = 0; i < this->msg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->msg(i).data(), this->msg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(i), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional .ChatUserInfo sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sender(), output);
  }

  // optional .ChatUserInfo recver = 4;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recver(), output);
  }

  // repeated string recvs = 5;
  for (int i = 0; i < this->recvs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recvs(i).data(), this->recvs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->recvs(i), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // repeated int32 minor = 7;
  for (int i = 0; i < this->minor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->minor(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMsg_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string msg = 1;
  for (int i = 0; i < this->msg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg(i).data(), this->msg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->msg(i), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional .ChatUserInfo sender = 3;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sender(), target);
  }

  // optional .ChatUserInfo recver = 4;
  if (has_recver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recver(), target);
  }

  // repeated string recvs = 5;
  for (int i = 0; i < this->recvs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recvs(i).data(), this->recvs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->recvs(i), target);
  }

  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // repeated int32 minor = 7;
  for (int i = 0; i < this->minor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->minor(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMsg_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .ChatUserInfo sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // optional .ChatUserInfo recver = 4;
    if (has_recver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recver());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated string msg = 1;
  total_size += 1 * this->msg_size();
  for (int i = 0; i < this->msg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msg(i));
  }

  // repeated string recvs = 5;
  total_size += 1 * this->recvs_size();
  for (int i = 0; i < this->recvs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recvs(i));
  }

  // repeated int32 minor = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->minor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minor(i));
    }
    total_size += 1 * this->minor_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsg_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsg_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsg_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsg_t::MergeFrom(const ChatMsg_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_.MergeFrom(from.msg_);
  recvs_.MergeFrom(from.recvs_);
  minor_.MergeFrom(from.minor_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_sender()) {
      mutable_sender()->::ChatUserInfo::MergeFrom(from.sender());
    }
    if (from.has_recver()) {
      mutable_recver()->::ChatUserInfo::MergeFrom(from.recver());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsg_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsg_t::CopyFrom(const ChatMsg_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsg_t::IsInitialized() const {

  return true;
}

void ChatMsg_t::Swap(ChatMsg_t* other) {
  if (other != this) {
    msg_.Swap(&other->msg_);
    std::swap(channel_, other->channel_);
    std::swap(sender_, other->sender_);
    std::swap(recver_, other->recver_);
    recvs_.Swap(&other->recvs_);
    std::swap(type_, other->type_);
    minor_.Swap(&other->minor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsg_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsg_t_descriptor_;
  metadata.reflection = ChatMsg_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatMsg::kMsgFieldNumber;
const int ChatMsg::kChannelFieldNumber;
const int ChatMsg::kSenderFieldNumber;
const int ChatMsg::kRecverFieldNumber;
const int ChatMsg::kRecvsFieldNumber;
const int ChatMsg::kTypeFieldNumber;
const int ChatMsg::kMinorFieldNumber;
#endif  // !_MSC_VER

ChatMsg::ChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMsg::InitAsDefaultInstance() {
  sender_ = const_cast< ::ChatUserInfo*>(&::ChatUserInfo::default_instance());
  recver_ = const_cast< ::ChatUserInfo*>(&::ChatUserInfo::default_instance());
}

ChatMsg::ChatMsg(const ChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = 0;
  sender_ = NULL;
  recver_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMsg::~ChatMsg() {
  SharedDtor();
}

void ChatMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete sender_;
    delete recver_;
  }
}

void ChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMsg_descriptor_;
}

const ChatMsg& ChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ChatMsg* ChatMsg::default_instance_ = NULL;

ChatMsg* ChatMsg::New() const {
  return new ChatMsg;
}

void ChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    channel_ = 0;
    if (has_sender()) {
      if (sender_ != NULL) sender_->::ChatUserInfo::Clear();
    }
    if (has_recver()) {
      if (recver_ != NULL) recver_->::ChatUserInfo::Clear();
    }
    type_ = 0;
  }
  recvs_.Clear();
  minor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // optional .ChatUserInfo sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recver;
        break;
      }

      // optional .ChatUserInfo recver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recvs;
        break;
      }

      // repeated string recvs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recvs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recvs(this->recvs_size() - 1).data(),
            this->recvs(this->recvs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recvs;
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_minor;
        break;
      }

      // repeated int32 minor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_minor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_minor;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional .ChatUserInfo sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sender(), output);
  }

  // optional .ChatUserInfo recver = 4;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recver(), output);
  }

  // repeated string recvs = 5;
  for (int i = 0; i < this->recvs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recvs(i).data(), this->recvs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->recvs(i), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // repeated int32 minor = 7;
  for (int i = 0; i < this->minor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->minor(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional .ChatUserInfo sender = 3;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sender(), target);
  }

  // optional .ChatUserInfo recver = 4;
  if (has_recver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recver(), target);
  }

  // repeated string recvs = 5;
  for (int i = 0; i < this->recvs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recvs(i).data(), this->recvs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->recvs(i), target);
  }

  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // repeated int32 minor = 7;
  for (int i = 0; i < this->minor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->minor(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional .ChatUserInfo sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // optional .ChatUserInfo recver = 4;
    if (has_recver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recver());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated string recvs = 5;
  total_size += 1 * this->recvs_size();
  for (int i = 0; i < this->recvs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recvs(i));
  }

  // repeated int32 minor = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->minor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minor(i));
    }
    total_size += 1 * this->minor_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMsg::MergeFrom(const ChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  recvs_.MergeFrom(from.recvs_);
  minor_.MergeFrom(from.minor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_sender()) {
      mutable_sender()->::ChatUserInfo::MergeFrom(from.sender());
    }
    if (from.has_recver()) {
      mutable_recver()->::ChatUserInfo::MergeFrom(from.recver());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMsg::CopyFrom(const ChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsg::IsInitialized() const {

  return true;
}

void ChatMsg::Swap(ChatMsg* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(channel_, other->channel_);
    std::swap(sender_, other->sender_);
    std::swap(recver_, other->recver_);
    recvs_.Swap(&other->recvs_);
    std::swap(type_, other->type_);
    minor_.Swap(&other->minor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMsg_descriptor_;
  metadata.reflection = ChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdClientGMReq::kCmdFieldNumber;
#endif  // !_MSC_VER

CmdClientGMReq::CmdClientGMReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdClientGMReq::InitAsDefaultInstance() {
}

CmdClientGMReq::CmdClientGMReq(const CmdClientGMReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdClientGMReq::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdClientGMReq::~CmdClientGMReq() {
  SharedDtor();
}

void CmdClientGMReq::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void CmdClientGMReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdClientGMReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdClientGMReq_descriptor_;
}

const CmdClientGMReq& CmdClientGMReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

CmdClientGMReq* CmdClientGMReq::default_instance_ = NULL;

CmdClientGMReq* CmdClientGMReq::New() const {
  return new CmdClientGMReq;
}

void CmdClientGMReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdClientGMReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdClientGMReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdClientGMReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdClientGMReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdClientGMReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdClientGMReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdClientGMReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdClientGMReq::MergeFrom(const CmdClientGMReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdClientGMReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdClientGMReq::CopyFrom(const CmdClientGMReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdClientGMReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CmdClientGMReq::Swap(CmdClientGMReq* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdClientGMReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdClientGMReq_descriptor_;
  metadata.reflection = CmdClientGMReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdClientGMResp::kResultFieldNumber;
const int CmdClientGMResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

CmdClientGMResp::CmdClientGMResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdClientGMResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

CmdClientGMResp::CmdClientGMResp(const CmdClientGMResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdClientGMResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdClientGMResp::~CmdClientGMResp() {
  SharedDtor();
}

void CmdClientGMResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void CmdClientGMResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdClientGMResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdClientGMResp_descriptor_;
}

const CmdClientGMResp& CmdClientGMResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

CmdClientGMResp* CmdClientGMResp::default_instance_ = NULL;

CmdClientGMResp* CmdClientGMResp::New() const {
  return new CmdClientGMResp;
}

void CmdClientGMResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdClientGMResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdClientGMResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdClientGMResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdClientGMResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdClientGMResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdClientGMResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdClientGMResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdClientGMResp::MergeFrom(const CmdClientGMResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdClientGMResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdClientGMResp::CopyFrom(const CmdClientGMResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdClientGMResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void CmdClientGMResp::Swap(CmdClientGMResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdClientGMResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdClientGMResp_descriptor_;
  metadata.reflection = CmdClientGMResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGetOtherUserInfoReq::kUserNameFieldNumber;
const int CmdGetOtherUserInfoReq::kSidFieldNumber;
const int CmdGetOtherUserInfoReq::kLineupFieldNumber;
#endif  // !_MSC_VER

CmdGetOtherUserInfoReq::CmdGetOtherUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdGetOtherUserInfoReq::InitAsDefaultInstance() {
}

CmdGetOtherUserInfoReq::CmdGetOtherUserInfoReq(const CmdGetOtherUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdGetOtherUserInfoReq::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGetOtherUserInfoReq::~CmdGetOtherUserInfoReq() {
  SharedDtor();
}

void CmdGetOtherUserInfoReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void CmdGetOtherUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGetOtherUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGetOtherUserInfoReq_descriptor_;
}

const CmdGetOtherUserInfoReq& CmdGetOtherUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

CmdGetOtherUserInfoReq* CmdGetOtherUserInfoReq::default_instance_ = NULL;

CmdGetOtherUserInfoReq* CmdGetOtherUserInfoReq::New() const {
  return new CmdGetOtherUserInfoReq;
}

void CmdGetOtherUserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    sid_ = 0;
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGetOtherUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // required int32 sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdGetOtherUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lineup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdGetOtherUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lineup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdGetOtherUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

  }
  // repeated int32 lineup = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGetOtherUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGetOtherUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGetOtherUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGetOtherUserInfoReq::MergeFrom(const CmdGetOtherUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGetOtherUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGetOtherUserInfoReq::CopyFrom(const CmdGetOtherUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGetOtherUserInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CmdGetOtherUserInfoReq::Swap(CmdGetOtherUserInfoReq* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(sid_, other->sid_);
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGetOtherUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGetOtherUserInfoReq_descriptor_;
  metadata.reflection = CmdGetOtherUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGetOtherUserInfoResp::kResultFieldNumber;
const int CmdGetOtherUserInfoResp::kTypeFieldNumber;
const int CmdGetOtherUserInfoResp::kInfoFieldNumber;
#endif  // !_MSC_VER

CmdGetOtherUserInfoResp::CmdGetOtherUserInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdGetOtherUserInfoResp::InitAsDefaultInstance() {
  info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
}

CmdGetOtherUserInfoResp::CmdGetOtherUserInfoResp(const CmdGetOtherUserInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdGetOtherUserInfoResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGetOtherUserInfoResp::~CmdGetOtherUserInfoResp() {
  SharedDtor();
}

void CmdGetOtherUserInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void CmdGetOtherUserInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGetOtherUserInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGetOtherUserInfoResp_descriptor_;
}

const CmdGetOtherUserInfoResp& CmdGetOtherUserInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

CmdGetOtherUserInfoResp* CmdGetOtherUserInfoResp::default_instance_ = NULL;

CmdGetOtherUserInfoResp* CmdGetOtherUserInfoResp::New() const {
  return new CmdGetOtherUserInfoResp;
}

void CmdGetOtherUserInfoResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    type_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::OtherUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGetOtherUserInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .OtherUserInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdGetOtherUserInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .OtherUserInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdGetOtherUserInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .OtherUserInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdGetOtherUserInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .OtherUserInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGetOtherUserInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGetOtherUserInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGetOtherUserInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGetOtherUserInfoResp::MergeFrom(const CmdGetOtherUserInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      mutable_info()->::OtherUserInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGetOtherUserInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGetOtherUserInfoResp::CopyFrom(const CmdGetOtherUserInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGetOtherUserInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void CmdGetOtherUserInfoResp::Swap(CmdGetOtherUserInfoResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGetOtherUserInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGetOtherUserInfoResp_descriptor_;
  metadata.reflection = CmdGetOtherUserInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGetOtherUserInfoListReq::kUserNameListFieldNumber;
const int CmdGetOtherUserInfoListReq::kSidFieldNumber;
#endif  // !_MSC_VER

CmdGetOtherUserInfoListReq::CmdGetOtherUserInfoListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdGetOtherUserInfoListReq::InitAsDefaultInstance() {
}

CmdGetOtherUserInfoListReq::CmdGetOtherUserInfoListReq(const CmdGetOtherUserInfoListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdGetOtherUserInfoListReq::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGetOtherUserInfoListReq::~CmdGetOtherUserInfoListReq() {
  SharedDtor();
}

void CmdGetOtherUserInfoListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdGetOtherUserInfoListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGetOtherUserInfoListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGetOtherUserInfoListReq_descriptor_;
}

const CmdGetOtherUserInfoListReq& CmdGetOtherUserInfoListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

CmdGetOtherUserInfoListReq* CmdGetOtherUserInfoListReq::default_instance_ = NULL;

CmdGetOtherUserInfoListReq* CmdGetOtherUserInfoListReq::New() const {
  return new CmdGetOtherUserInfoListReq;
}

void CmdGetOtherUserInfoListReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    sid_ = 0;
  }
  user_name_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGetOtherUserInfoListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string user_name_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_name_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name_list(this->user_name_list_size() - 1).data(),
            this->user_name_list(this->user_name_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_name_list;
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // required int32 sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdGetOtherUserInfoListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string user_name_list = 1;
  for (int i = 0; i < this->user_name_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_name_list(i).data(), this->user_name_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name_list(i), output);
  }

  // required int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdGetOtherUserInfoListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string user_name_list = 1;
  for (int i = 0; i < this->user_name_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name_list(i).data(), this->user_name_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->user_name_list(i), target);
  }

  // required int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdGetOtherUserInfoListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

  }
  // repeated string user_name_list = 1;
  total_size += 1 * this->user_name_list_size();
  for (int i = 0; i < this->user_name_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_name_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGetOtherUserInfoListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGetOtherUserInfoListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGetOtherUserInfoListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGetOtherUserInfoListReq::MergeFrom(const CmdGetOtherUserInfoListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_name_list_.MergeFrom(from.user_name_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGetOtherUserInfoListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGetOtherUserInfoListReq::CopyFrom(const CmdGetOtherUserInfoListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGetOtherUserInfoListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CmdGetOtherUserInfoListReq::Swap(CmdGetOtherUserInfoListReq* other) {
  if (other != this) {
    user_name_list_.Swap(&other->user_name_list_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGetOtherUserInfoListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGetOtherUserInfoListReq_descriptor_;
  metadata.reflection = CmdGetOtherUserInfoListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CmdGetOtherUserInfoListResp::kResultFieldNumber;
const int CmdGetOtherUserInfoListResp::kTypeFieldNumber;
const int CmdGetOtherUserInfoListResp::kInfoListFieldNumber;
#endif  // !_MSC_VER

CmdGetOtherUserInfoListResp::CmdGetOtherUserInfoListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CmdGetOtherUserInfoListResp::InitAsDefaultInstance() {
}

CmdGetOtherUserInfoListResp::CmdGetOtherUserInfoListResp(const CmdGetOtherUserInfoListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CmdGetOtherUserInfoListResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CmdGetOtherUserInfoListResp::~CmdGetOtherUserInfoListResp() {
  SharedDtor();
}

void CmdGetOtherUserInfoListResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CmdGetOtherUserInfoListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CmdGetOtherUserInfoListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdGetOtherUserInfoListResp_descriptor_;
}

const CmdGetOtherUserInfoListResp& CmdGetOtherUserInfoListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

CmdGetOtherUserInfoListResp* CmdGetOtherUserInfoListResp::default_instance_ = NULL;

CmdGetOtherUserInfoListResp* CmdGetOtherUserInfoListResp::New() const {
  return new CmdGetOtherUserInfoListResp;
}

void CmdGetOtherUserInfoListResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    type_ = 0;
  }
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CmdGetOtherUserInfoListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info_list;
        break;
      }

      // repeated .OtherUserInfo info_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CmdGetOtherUserInfoListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .OtherUserInfo info_list = 3;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CmdGetOtherUserInfoListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .OtherUserInfo info_list = 3;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CmdGetOtherUserInfoListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .OtherUserInfo info_list = 3;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CmdGetOtherUserInfoListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CmdGetOtherUserInfoListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CmdGetOtherUserInfoListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CmdGetOtherUserInfoListResp::MergeFrom(const CmdGetOtherUserInfoListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CmdGetOtherUserInfoListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdGetOtherUserInfoListResp::CopyFrom(const CmdGetOtherUserInfoListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdGetOtherUserInfoListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_list_size(); i++) {
    if (!this->info_list(i).IsInitialized()) return false;
  }
  return true;
}

void CmdGetOtherUserInfoListResp::Swap(CmdGetOtherUserInfoListResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    info_list_.Swap(&other->info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CmdGetOtherUserInfoListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CmdGetOtherUserInfoListResp_descriptor_;
  metadata.reflection = CmdGetOtherUserInfoListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewFriendUpdate::kSenderFieldNumber;
#endif  // !_MSC_VER

NewFriendUpdate::NewFriendUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewFriendUpdate::InitAsDefaultInstance() {
}

NewFriendUpdate::NewFriendUpdate(const NewFriendUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewFriendUpdate::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewFriendUpdate::~NewFriendUpdate() {
  SharedDtor();
}

void NewFriendUpdate::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void NewFriendUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewFriendUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewFriendUpdate_descriptor_;
}

const NewFriendUpdate& NewFriendUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

NewFriendUpdate* NewFriendUpdate::default_instance_ = NULL;

NewFriendUpdate* NewFriendUpdate::New() const {
  return new NewFriendUpdate;
}

void NewFriendUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewFriendUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewFriendUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewFriendUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewFriendUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewFriendUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewFriendUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewFriendUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewFriendUpdate::MergeFrom(const NewFriendUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewFriendUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewFriendUpdate::CopyFrom(const NewFriendUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewFriendUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NewFriendUpdate::Swap(NewFriendUpdate* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewFriendUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewFriendUpdate_descriptor_;
  metadata.reflection = NewFriendUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeFriendUpdate::kResultFieldNumber;
#endif  // !_MSC_VER

BeFriendUpdate::BeFriendUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeFriendUpdate::InitAsDefaultInstance() {
}

BeFriendUpdate::BeFriendUpdate(const BeFriendUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeFriendUpdate::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeFriendUpdate::~BeFriendUpdate() {
  SharedDtor();
}

void BeFriendUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeFriendUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeFriendUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeFriendUpdate_descriptor_;
}

const BeFriendUpdate& BeFriendUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

BeFriendUpdate* BeFriendUpdate::default_instance_ = NULL;

BeFriendUpdate* BeFriendUpdate::New() const {
  return new BeFriendUpdate;
}

void BeFriendUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeFriendUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeFriendUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeFriendUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeFriendUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeFriendUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeFriendUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeFriendUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeFriendUpdate::MergeFrom(const BeFriendUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeFriendUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeFriendUpdate::CopyFrom(const BeFriendUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeFriendUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BeFriendUpdate::Swap(BeFriendUpdate* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeFriendUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeFriendUpdate_descriptor_;
  metadata.reflection = BeFriendUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendsInfoReq::kTypeFieldNumber;
const int GetFriendsInfoReq::kIndexFieldNumber;
const int GetFriendsInfoReq::kNumFieldNumber;
const int GetFriendsInfoReq::kNicknameFieldNumber;
#endif  // !_MSC_VER

GetFriendsInfoReq::GetFriendsInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFriendsInfoReq::InitAsDefaultInstance() {
}

GetFriendsInfoReq::GetFriendsInfoReq(const GetFriendsInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendsInfoReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0;
  num_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendsInfoReq::~GetFriendsInfoReq() {
  SharedDtor();
}

void GetFriendsInfoReq::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void GetFriendsInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendsInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendsInfoReq_descriptor_;
}

const GetFriendsInfoReq& GetFriendsInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

GetFriendsInfoReq* GetFriendsInfoReq::default_instance_ = NULL;

GetFriendsInfoReq* GetFriendsInfoReq::New() const {
  return new GetFriendsInfoReq;
}

void GetFriendsInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    index_ = 0;
    num_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendsInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFriendsInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFriendsInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFriendsInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendsInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendsInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendsInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendsInfoReq::MergeFrom(const GetFriendsInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendsInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendsInfoReq::CopyFrom(const GetFriendsInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendsInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFriendsInfoReq::Swap(GetFriendsInfoReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendsInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendsInfoReq_descriptor_;
  metadata.reflection = GetFriendsInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFriendsInfoResp::kResultFieldNumber;
const int GetFriendsInfoResp::kTypeFieldNumber;
const int GetFriendsInfoResp::kListFieldNumber;
#endif  // !_MSC_VER

GetFriendsInfoResp::GetFriendsInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFriendsInfoResp::InitAsDefaultInstance() {
}

GetFriendsInfoResp::GetFriendsInfoResp(const GetFriendsInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFriendsInfoResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFriendsInfoResp::~GetFriendsInfoResp() {
  SharedDtor();
}

void GetFriendsInfoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFriendsInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFriendsInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFriendsInfoResp_descriptor_;
}

const GetFriendsInfoResp& GetFriendsInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

GetFriendsInfoResp* GetFriendsInfoResp::default_instance_ = NULL;

GetFriendsInfoResp* GetFriendsInfoResp::New() const {
  return new GetFriendsInfoResp;
}

void GetFriendsInfoResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    type_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFriendsInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .OtherUserInfo list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFriendsInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .OtherUserInfo list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFriendsInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .OtherUserInfo list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFriendsInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .OtherUserInfo list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFriendsInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFriendsInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFriendsInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFriendsInfoResp::MergeFrom(const GetFriendsInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFriendsInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFriendsInfoResp::CopyFrom(const GetFriendsInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFriendsInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GetFriendsInfoResp::Swap(GetFriendsInfoResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFriendsInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFriendsInfoResp_descriptor_;
  metadata.reflection = GetFriendsInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyFriendReq::kRecverFieldNumber;
#endif  // !_MSC_VER

ApplyFriendReq::ApplyFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyFriendReq::InitAsDefaultInstance() {
}

ApplyFriendReq::ApplyFriendReq(const ApplyFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyFriendReq::SharedCtor() {
  _cached_size_ = 0;
  recver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyFriendReq::~ApplyFriendReq() {
  SharedDtor();
}

void ApplyFriendReq::SharedDtor() {
  if (recver_ != &::google::protobuf::internal::kEmptyString) {
    delete recver_;
  }
  if (this != default_instance_) {
  }
}

void ApplyFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyFriendReq_descriptor_;
}

const ApplyFriendReq& ApplyFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ApplyFriendReq* ApplyFriendReq::default_instance_ = NULL;

ApplyFriendReq* ApplyFriendReq::New() const {
  return new ApplyFriendReq;
}

void ApplyFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recver()) {
      if (recver_ != &::google::protobuf::internal::kEmptyString) {
        recver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string recver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recver().data(), this->recver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string recver = 1;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recver().data(), this->recver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string recver = 1;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recver().data(), this->recver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->recver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string recver = 1;
    if (has_recver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyFriendReq::MergeFrom(const ApplyFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recver()) {
      set_recver(from.recver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFriendReq::CopyFrom(const ApplyFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApplyFriendReq::Swap(ApplyFriendReq* other) {
  if (other != this) {
    std::swap(recver_, other->recver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyFriendReq_descriptor_;
  metadata.reflection = ApplyFriendReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ApplyFriendResp_ApplyFriendRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyFriendResp_ApplyFriendRet_descriptor_;
}
bool ApplyFriendResp_ApplyFriendRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::OK;
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::FAIL;
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::FRIEND;
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::OTHER_BLACK;
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::MY_BLACK;
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::FIREND_FULL;
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::SENDED;
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::ApplyFriendRet_MIN;
const ApplyFriendResp_ApplyFriendRet ApplyFriendResp::ApplyFriendRet_MAX;
const int ApplyFriendResp::ApplyFriendRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ApplyFriendResp::kResultFieldNumber;
#endif  // !_MSC_VER

ApplyFriendResp::ApplyFriendResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyFriendResp::InitAsDefaultInstance() {
}

ApplyFriendResp::ApplyFriendResp(const ApplyFriendResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyFriendResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyFriendResp::~ApplyFriendResp() {
  SharedDtor();
}

void ApplyFriendResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyFriendResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyFriendResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyFriendResp_descriptor_;
}

const ApplyFriendResp& ApplyFriendResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ApplyFriendResp* ApplyFriendResp::default_instance_ = NULL;

ApplyFriendResp* ApplyFriendResp::New() const {
  return new ApplyFriendResp;
}

void ApplyFriendResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyFriendResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ApplyFriendResp.ApplyFriendRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ApplyFriendResp_ApplyFriendRet_IsValid(value)) {
            set_result(static_cast< ::ApplyFriendResp_ApplyFriendRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyFriendResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ApplyFriendResp.ApplyFriendRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyFriendResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ApplyFriendResp.ApplyFriendRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyFriendResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ApplyFriendResp.ApplyFriendRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyFriendResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyFriendResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyFriendResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyFriendResp::MergeFrom(const ApplyFriendResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyFriendResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyFriendResp::CopyFrom(const ApplyFriendResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyFriendResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApplyFriendResp::Swap(ApplyFriendResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyFriendResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyFriendResp_descriptor_;
  metadata.reflection = ApplyFriendResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptFriendReq::kSenderFieldNumber;
const int AcceptFriendReq::kMailGuidFieldNumber;
#endif  // !_MSC_VER

AcceptFriendReq::AcceptFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptFriendReq::InitAsDefaultInstance() {
}

AcceptFriendReq::AcceptFriendReq(const AcceptFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptFriendReq::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mail_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptFriendReq::~AcceptFriendReq() {
  SharedDtor();
}

void AcceptFriendReq::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void AcceptFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptFriendReq_descriptor_;
}

const AcceptFriendReq& AcceptFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

AcceptFriendReq* AcceptFriendReq::default_instance_ = NULL;

AcceptFriendReq* AcceptFriendReq::New() const {
  return new AcceptFriendReq;
}

void AcceptFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
    mail_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_guid;
        break;
      }

      // required int32 mail_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_guid_)));
          set_has_mail_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  // required int32 mail_guid = 2;
  if (has_mail_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // required int32 mail_guid = 2;
  if (has_mail_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // required int32 mail_guid = 2;
    if (has_mail_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptFriendReq::MergeFrom(const AcceptFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_mail_guid()) {
      set_mail_guid(from.mail_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptFriendReq::CopyFrom(const AcceptFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AcceptFriendReq::Swap(AcceptFriendReq* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(mail_guid_, other->mail_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptFriendReq_descriptor_;
  metadata.reflection = AcceptFriendReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AcceptFriendResp_AcceptFriendRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptFriendResp_AcceptFriendRet_descriptor_;
}
bool AcceptFriendResp_AcceptFriendRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::OK;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::FAIL;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::FRIEND;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::NO_MAIL;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::SELF;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::OTHER_BLACK;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::MY_BLACK;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::MY_FRIEND_FULL;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::OTHER_FRIEND_FULL;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::AcceptFriendRet_MIN;
const AcceptFriendResp_AcceptFriendRet AcceptFriendResp::AcceptFriendRet_MAX;
const int AcceptFriendResp::AcceptFriendRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AcceptFriendResp::kResultFieldNumber;
#endif  // !_MSC_VER

AcceptFriendResp::AcceptFriendResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptFriendResp::InitAsDefaultInstance() {
}

AcceptFriendResp::AcceptFriendResp(const AcceptFriendResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptFriendResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptFriendResp::~AcceptFriendResp() {
  SharedDtor();
}

void AcceptFriendResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptFriendResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptFriendResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptFriendResp_descriptor_;
}

const AcceptFriendResp& AcceptFriendResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

AcceptFriendResp* AcceptFriendResp::default_instance_ = NULL;

AcceptFriendResp* AcceptFriendResp::New() const {
  return new AcceptFriendResp;
}

void AcceptFriendResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptFriendResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AcceptFriendResp.AcceptFriendRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AcceptFriendResp_AcceptFriendRet_IsValid(value)) {
            set_result(static_cast< ::AcceptFriendResp_AcceptFriendRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptFriendResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AcceptFriendResp.AcceptFriendRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptFriendResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AcceptFriendResp.AcceptFriendRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptFriendResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AcceptFriendResp.AcceptFriendRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptFriendResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptFriendResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptFriendResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptFriendResp::MergeFrom(const AcceptFriendResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptFriendResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptFriendResp::CopyFrom(const AcceptFriendResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptFriendResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AcceptFriendResp::Swap(AcceptFriendResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptFriendResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptFriendResp_descriptor_;
  metadata.reflection = AcceptFriendResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveFriendReq::kUserNameFieldNumber;
#endif  // !_MSC_VER

RemoveFriendReq::RemoveFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveFriendReq::InitAsDefaultInstance() {
}

RemoveFriendReq::RemoveFriendReq(const RemoveFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveFriendReq::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveFriendReq::~RemoveFriendReq() {
  SharedDtor();
}

void RemoveFriendReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void RemoveFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFriendReq_descriptor_;
}

const RemoveFriendReq& RemoveFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

RemoveFriendReq* RemoveFriendReq::default_instance_ = NULL;

RemoveFriendReq* RemoveFriendReq::New() const {
  return new RemoveFriendReq;
}

void RemoveFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveFriendReq::MergeFrom(const RemoveFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFriendReq::CopyFrom(const RemoveFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveFriendReq::Swap(RemoveFriendReq* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveFriendReq_descriptor_;
  metadata.reflection = RemoveFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveFriendResp::kResultFieldNumber;
#endif  // !_MSC_VER

RemoveFriendResp::RemoveFriendResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveFriendResp::InitAsDefaultInstance() {
}

RemoveFriendResp::RemoveFriendResp(const RemoveFriendResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveFriendResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveFriendResp::~RemoveFriendResp() {
  SharedDtor();
}

void RemoveFriendResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveFriendResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveFriendResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveFriendResp_descriptor_;
}

const RemoveFriendResp& RemoveFriendResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

RemoveFriendResp* RemoveFriendResp::default_instance_ = NULL;

RemoveFriendResp* RemoveFriendResp::New() const {
  return new RemoveFriendResp;
}

void RemoveFriendResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveFriendResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveFriendResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveFriendResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveFriendResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveFriendResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveFriendResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveFriendResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveFriendResp::MergeFrom(const RemoveFriendResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveFriendResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveFriendResp::CopyFrom(const RemoveFriendResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFriendResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveFriendResp::Swap(RemoveFriendResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveFriendResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveFriendResp_descriptor_;
  metadata.reflection = RemoveFriendResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlackListReq::kTypeFieldNumber;
const int BlackListReq::kUserNameFieldNumber;
#endif  // !_MSC_VER

BlackListReq::BlackListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlackListReq::InitAsDefaultInstance() {
}

BlackListReq::BlackListReq(const BlackListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlackListReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackListReq::~BlackListReq() {
  SharedDtor();
}

void BlackListReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void BlackListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackListReq_descriptor_;
}

const BlackListReq& BlackListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

BlackListReq* BlackListReq::default_instance_ = NULL;

BlackListReq* BlackListReq::New() const {
  return new BlackListReq;
}

void BlackListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlackListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlackListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlackListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlackListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlackListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlackListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlackListReq::MergeFrom(const BlackListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlackListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackListReq::CopyFrom(const BlackListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BlackListReq::Swap(BlackListReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlackListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlackListReq_descriptor_;
  metadata.reflection = BlackListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlackListResp::kResultFieldNumber;
#endif  // !_MSC_VER

BlackListResp::BlackListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlackListResp::InitAsDefaultInstance() {
}

BlackListResp::BlackListResp(const BlackListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlackListResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackListResp::~BlackListResp() {
  SharedDtor();
}

void BlackListResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlackListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackListResp_descriptor_;
}

const BlackListResp& BlackListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

BlackListResp* BlackListResp::default_instance_ = NULL;

BlackListResp* BlackListResp::New() const {
  return new BlackListResp;
}

void BlackListResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlackListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlackListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlackListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlackListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlackListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlackListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlackListResp::MergeFrom(const BlackListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlackListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackListResp::CopyFrom(const BlackListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlackListResp::Swap(BlackListResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlackListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlackListResp_descriptor_;
  metadata.reflection = BlackListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkListReq::kTypeFieldNumber;
const int TalkListReq::kUserNameFieldNumber;
#endif  // !_MSC_VER

TalkListReq::TalkListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkListReq::InitAsDefaultInstance() {
}

TalkListReq::TalkListReq(const TalkListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkListReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkListReq::~TalkListReq() {
  SharedDtor();
}

void TalkListReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void TalkListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkListReq_descriptor_;
}

const TalkListReq& TalkListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

TalkListReq* TalkListReq::default_instance_ = NULL;

TalkListReq* TalkListReq::New() const {
  return new TalkListReq;
}

void TalkListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkListReq::MergeFrom(const TalkListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkListReq::CopyFrom(const TalkListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TalkListReq::Swap(TalkListReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkListReq_descriptor_;
  metadata.reflection = TalkListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkListResp::kResultFieldNumber;
#endif  // !_MSC_VER

TalkListResp::TalkListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TalkListResp::InitAsDefaultInstance() {
}

TalkListResp::TalkListResp(const TalkListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TalkListResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkListResp::~TalkListResp() {
  SharedDtor();
}

void TalkListResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TalkListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkListResp_descriptor_;
}

const TalkListResp& TalkListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

TalkListResp* TalkListResp::default_instance_ = NULL;

TalkListResp* TalkListResp::New() const {
  return new TalkListResp;
}

void TalkListResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TalkListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TalkListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TalkListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkListResp::MergeFrom(const TalkListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkListResp::CopyFrom(const TalkListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TalkListResp::Swap(TalkListResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkListResp_descriptor_;
  metadata.reflection = TalkListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskListResp::kResultFieldNumber;
const int TaskListResp::kUserSyncFieldNumber;
const int TaskListResp::kTaskListFieldNumber;
#endif  // !_MSC_VER

TaskListResp::TaskListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskListResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

TaskListResp::TaskListResp(const TaskListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskListResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskListResp::~TaskListResp() {
  SharedDtor();
}

void TaskListResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void TaskListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskListResp_descriptor_;
}

const TaskListResp& TaskListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

TaskListResp* TaskListResp::default_instance_ = NULL;

TaskListResp* TaskListResp::New() const {
  return new TaskListResp;
}

void TaskListResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_list;
        break;
      }

      // repeated .TaskInfo task_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .TaskInfo task_list = 3;
  for (int i = 0; i < this->task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->task_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .TaskInfo task_list = 3;
  for (int i = 0; i < this->task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->task_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .TaskInfo task_list = 3;
  total_size += 1 * this->task_list_size();
  for (int i = 0; i < this->task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskListResp::MergeFrom(const TaskListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_list_.MergeFrom(from.task_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskListResp::CopyFrom(const TaskListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < task_list_size(); i++) {
    if (!this->task_list(i).IsInitialized()) return false;
  }
  return true;
}

void TaskListResp::Swap(TaskListResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    task_list_.Swap(&other->task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskListResp_descriptor_;
  metadata.reflection = TaskListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskRewardReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TaskRewardReq::TaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskRewardReq::InitAsDefaultInstance() {
}

TaskRewardReq::TaskRewardReq(const TaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskRewardReq::~TaskRewardReq() {
  SharedDtor();
}

void TaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskRewardReq_descriptor_;
}

const TaskRewardReq& TaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

TaskRewardReq* TaskRewardReq::default_instance_ = NULL;

TaskRewardReq* TaskRewardReq::New() const {
  return new TaskRewardReq;
}

void TaskRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskRewardReq::MergeFrom(const TaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRewardReq::CopyFrom(const TaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskRewardReq::Swap(TaskRewardReq* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskRewardReq_descriptor_;
  metadata.reflection = TaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskRewardResp::kResultFieldNumber;
const int TaskRewardResp::kUserSyncFieldNumber;
const int TaskRewardResp::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TaskRewardResp::TaskRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskRewardResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

TaskRewardResp::TaskRewardResp(const TaskRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskRewardResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  task_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskRewardResp::~TaskRewardResp() {
  SharedDtor();
}

void TaskRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void TaskRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskRewardResp_descriptor_;
}

const TaskRewardResp& TaskRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

TaskRewardResp* TaskRewardResp::default_instance_ = NULL;

TaskRewardResp* TaskRewardResp::New() const {
  return new TaskRewardResp;
}

void TaskRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    task_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // optional int32 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskRewardResp::MergeFrom(const TaskRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRewardResp::CopyFrom(const TaskRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void TaskRewardResp::Swap(TaskRewardResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskRewardResp_descriptor_;
  metadata.reflection = TaskRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStrengthResp::kResultFieldNumber;
const int GetStrengthResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GetStrengthResp::GetStrengthResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStrengthResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GetStrengthResp::GetStrengthResp(const GetStrengthResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStrengthResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStrengthResp::~GetStrengthResp() {
  SharedDtor();
}

void GetStrengthResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GetStrengthResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStrengthResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStrengthResp_descriptor_;
}

const GetStrengthResp& GetStrengthResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

GetStrengthResp* GetStrengthResp::default_instance_ = NULL;

GetStrengthResp* GetStrengthResp::New() const {
  return new GetStrengthResp;
}

void GetStrengthResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStrengthResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStrengthResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStrengthResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStrengthResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStrengthResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStrengthResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStrengthResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStrengthResp::MergeFrom(const GetStrengthResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStrengthResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStrengthResp::CopyFrom(const GetStrengthResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStrengthResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GetStrengthResp::Swap(GetStrengthResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStrengthResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStrengthResp_descriptor_;
  metadata.reflection = GetStrengthResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddStrengthReq::kTypeFieldNumber;
const int AddStrengthReq::kItemFieldNumber;
#endif  // !_MSC_VER

AddStrengthReq::AddStrengthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddStrengthReq::InitAsDefaultInstance() {
  item_ = const_cast< ::Pair*>(&::Pair::default_instance());
}

AddStrengthReq::AddStrengthReq(const AddStrengthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddStrengthReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddStrengthReq::~AddStrengthReq() {
  SharedDtor();
}

void AddStrengthReq::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void AddStrengthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddStrengthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddStrengthReq_descriptor_;
}

const AddStrengthReq& AddStrengthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

AddStrengthReq* AddStrengthReq::default_instance_ = NULL;

AddStrengthReq* AddStrengthReq::New() const {
  return new AddStrengthReq;
}

void AddStrengthReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::Pair::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddStrengthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .Pair item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddStrengthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .Pair item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddStrengthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .Pair item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddStrengthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .Pair item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddStrengthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddStrengthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddStrengthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddStrengthReq::MergeFrom(const AddStrengthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_item()) {
      mutable_item()->::Pair::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddStrengthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStrengthReq::CopyFrom(const AddStrengthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStrengthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void AddStrengthReq::Swap(AddStrengthReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddStrengthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddStrengthReq_descriptor_;
  metadata.reflection = AddStrengthReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AddStrengthResp_AddStrengthRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddStrengthResp_AddStrengthRet_descriptor_;
}
bool AddStrengthResp_AddStrengthRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AddStrengthResp_AddStrengthRet AddStrengthResp::OK;
const AddStrengthResp_AddStrengthRet AddStrengthResp::FAIL;
const AddStrengthResp_AddStrengthRet AddStrengthResp::REQ_DATA_ERROR;
const AddStrengthResp_AddStrengthRet AddStrengthResp::NO_ITEM;
const AddStrengthResp_AddStrengthRet AddStrengthResp::ITEM_KEY_ERROR;
const AddStrengthResp_AddStrengthRet AddStrengthResp::MAX_TIMES;
const AddStrengthResp_AddStrengthRet AddStrengthResp::NO_MONEY;
const AddStrengthResp_AddStrengthRet AddStrengthResp::AddStrengthRet_MIN;
const AddStrengthResp_AddStrengthRet AddStrengthResp::AddStrengthRet_MAX;
const int AddStrengthResp::AddStrengthRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AddStrengthResp::kResultFieldNumber;
const int AddStrengthResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

AddStrengthResp::AddStrengthResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddStrengthResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

AddStrengthResp::AddStrengthResp(const AddStrengthResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddStrengthResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddStrengthResp::~AddStrengthResp() {
  SharedDtor();
}

void AddStrengthResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void AddStrengthResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddStrengthResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddStrengthResp_descriptor_;
}

const AddStrengthResp& AddStrengthResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

AddStrengthResp* AddStrengthResp::default_instance_ = NULL;

AddStrengthResp* AddStrengthResp::New() const {
  return new AddStrengthResp;
}

void AddStrengthResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddStrengthResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AddStrengthResp.AddStrengthRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AddStrengthResp_AddStrengthRet_IsValid(value)) {
            set_result(static_cast< ::AddStrengthResp_AddStrengthRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddStrengthResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AddStrengthResp.AddStrengthRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddStrengthResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AddStrengthResp.AddStrengthRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddStrengthResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AddStrengthResp.AddStrengthRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddStrengthResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddStrengthResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddStrengthResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddStrengthResp::MergeFrom(const AddStrengthResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddStrengthResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddStrengthResp::CopyFrom(const AddStrengthResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddStrengthResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void AddStrengthResp::Swap(AddStrengthResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddStrengthResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddStrengthResp_descriptor_;
  metadata.reflection = AddStrengthResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RankReq_RankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankReq_RankType_descriptor_;
}
bool RankReq_RankType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RankReq_RankType RankReq::PLAYER_LEVEL;
const RankReq_RankType RankReq::PLAYER_POWER;
const RankReq_RankType RankReq::MAIN_CITY_LEVEL;
const RankReq_RankType RankReq::GROUP_POWER;
const RankReq_RankType RankReq::ARENA;
const RankReq_RankType RankReq::TRIAL;
const RankReq_RankType RankReq::RankType_MIN;
const RankReq_RankType RankReq::RankType_MAX;
const int RankReq::RankType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RankReq::kRankTypeFieldNumber;
const int RankReq::kStartRankFieldNumber;
const int RankReq::kNeedMyFieldNumber;
#endif  // !_MSC_VER

RankReq::RankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankReq::InitAsDefaultInstance() {
}

RankReq::RankReq(const RankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankReq::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 1;
  start_rank_ = 0;
  need_my_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankReq::~RankReq() {
  SharedDtor();
}

void RankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankReq_descriptor_;
}

const RankReq& RankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

RankReq* RankReq::default_instance_ = NULL;

RankReq* RankReq::New() const {
  return new RankReq;
}

void RankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 1;
    start_rank_ = 0;
    need_my_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RankReq.RankType rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RankReq_RankType_IsValid(value)) {
            set_rank_type(static_cast< ::RankReq_RankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_rank;
        break;
      }

      // required int32 start_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_rank_)));
          set_has_start_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_my;
        break;
      }

      // required bool need_my = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_my:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_my_)));
          set_has_need_my();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RankReq.RankType rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_type(), output);
  }

  // required int32 start_rank = 2;
  if (has_start_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_rank(), output);
  }

  // required bool need_my = 3;
  if (has_need_my()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->need_my(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RankReq.RankType rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_type(), target);
  }

  // required int32 start_rank = 2;
  if (has_start_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_rank(), target);
  }

  // required bool need_my = 3;
  if (has_need_my()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->need_my(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RankReq.RankType rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

    // required int32 start_rank = 2;
    if (has_start_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_rank());
    }

    // required bool need_my = 3;
    if (has_need_my()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankReq::MergeFrom(const RankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_start_rank()) {
      set_start_rank(from.start_rank());
    }
    if (from.has_need_my()) {
      set_need_my(from.need_my());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankReq::CopyFrom(const RankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RankReq::Swap(RankReq* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(start_rank_, other->start_rank_);
    std::swap(need_my_, other->need_my_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankReq_descriptor_;
  metadata.reflection = RankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankResp::kResultFieldNumber;
const int RankResp::kUserSyncFieldNumber;
const int RankResp::kUserRankFieldNumber;
const int RankResp::kGroupRankFieldNumber;
const int RankResp::kMyUserRankFieldNumber;
const int RankResp::kMyGroupRankFieldNumber;
#endif  // !_MSC_VER

RankResp::RankResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  my_user_rank_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
  my_group_rank_ = const_cast< ::OtherGroupInfo*>(&::OtherGroupInfo::default_instance());
}

RankResp::RankResp(const RankResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  my_user_rank_ = NULL;
  my_group_rank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankResp::~RankResp() {
  SharedDtor();
}

void RankResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete my_user_rank_;
    delete my_group_rank_;
  }
}

void RankResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankResp_descriptor_;
}

const RankResp& RankResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

RankResp* RankResp::default_instance_ = NULL;

RankResp* RankResp::New() const {
  return new RankResp;
}

void RankResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_my_user_rank()) {
      if (my_user_rank_ != NULL) my_user_rank_->::OtherUserInfo::Clear();
    }
    if (has_my_group_rank()) {
      if (my_group_rank_ != NULL) my_group_rank_->::OtherGroupInfo::Clear();
    }
  }
  user_rank_.Clear();
  group_rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_rank;
        break;
      }

      // repeated .OtherUserInfo user_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_rank;
        if (input->ExpectTag(34)) goto parse_group_rank;
        break;
      }

      // repeated .OtherGroupInfo group_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group_rank;
        if (input->ExpectTag(42)) goto parse_my_user_rank;
        break;
      }

      // optional .OtherUserInfo my_user_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_user_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_user_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_my_group_rank;
        break;
      }

      // optional .OtherGroupInfo my_group_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_group_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_group_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .OtherUserInfo user_rank = 3;
  for (int i = 0; i < this->user_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_rank(i), output);
  }

  // repeated .OtherGroupInfo group_rank = 4;
  for (int i = 0; i < this->group_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->group_rank(i), output);
  }

  // optional .OtherUserInfo my_user_rank = 5;
  if (has_my_user_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->my_user_rank(), output);
  }

  // optional .OtherGroupInfo my_group_rank = 6;
  if (has_my_group_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->my_group_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .OtherUserInfo user_rank = 3;
  for (int i = 0; i < this->user_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user_rank(i), target);
  }

  // repeated .OtherGroupInfo group_rank = 4;
  for (int i = 0; i < this->group_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->group_rank(i), target);
  }

  // optional .OtherUserInfo my_user_rank = 5;
  if (has_my_user_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->my_user_rank(), target);
  }

  // optional .OtherGroupInfo my_group_rank = 6;
  if (has_my_group_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->my_group_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .OtherUserInfo my_user_rank = 5;
    if (has_my_user_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_user_rank());
    }

    // optional .OtherGroupInfo my_group_rank = 6;
    if (has_my_group_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_group_rank());
    }

  }
  // repeated .OtherUserInfo user_rank = 3;
  total_size += 1 * this->user_rank_size();
  for (int i = 0; i < this->user_rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_rank(i));
  }

  // repeated .OtherGroupInfo group_rank = 4;
  total_size += 1 * this->group_rank_size();
  for (int i = 0; i < this->group_rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankResp::MergeFrom(const RankResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_rank_.MergeFrom(from.user_rank_);
  group_rank_.MergeFrom(from.group_rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_my_user_rank()) {
      mutable_my_user_rank()->::OtherUserInfo::MergeFrom(from.my_user_rank());
    }
    if (from.has_my_group_rank()) {
      mutable_my_group_rank()->::OtherGroupInfo::MergeFrom(from.my_group_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankResp::CopyFrom(const RankResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < user_rank_size(); i++) {
    if (!this->user_rank(i).IsInitialized()) return false;
  }
  for (int i = 0; i < group_rank_size(); i++) {
    if (!this->group_rank(i).IsInitialized()) return false;
  }
  if (has_my_user_rank()) {
    if (!this->my_user_rank().IsInitialized()) return false;
  }
  if (has_my_group_rank()) {
    if (!this->my_group_rank().IsInitialized()) return false;
  }
  return true;
}

void RankResp::Swap(RankResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    user_rank_.Swap(&other->user_rank_);
    group_rank_.Swap(&other->group_rank_);
    std::swap(my_user_rank_, other->my_user_rank_);
    std::swap(my_group_rank_, other->my_group_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankResp_descriptor_;
  metadata.reflection = RankResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopTimeItemListResp_TimeItem::kIdFieldNumber;
const int ShopTimeItemListResp_TimeItem::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ShopTimeItemListResp_TimeItem::ShopTimeItemListResp_TimeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopTimeItemListResp_TimeItem::InitAsDefaultInstance() {
}

ShopTimeItemListResp_TimeItem::ShopTimeItemListResp_TimeItem(const ShopTimeItemListResp_TimeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopTimeItemListResp_TimeItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopTimeItemListResp_TimeItem::~ShopTimeItemListResp_TimeItem() {
  SharedDtor();
}

void ShopTimeItemListResp_TimeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopTimeItemListResp_TimeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopTimeItemListResp_TimeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopTimeItemListResp_TimeItem_descriptor_;
}

const ShopTimeItemListResp_TimeItem& ShopTimeItemListResp_TimeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ShopTimeItemListResp_TimeItem* ShopTimeItemListResp_TimeItem::default_instance_ = NULL;

ShopTimeItemListResp_TimeItem* ShopTimeItemListResp_TimeItem::New() const {
  return new ShopTimeItemListResp_TimeItem;
}

void ShopTimeItemListResp_TimeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    end_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopTimeItemListResp_TimeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopTimeItemListResp_TimeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopTimeItemListResp_TimeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopTimeItemListResp_TimeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int64 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopTimeItemListResp_TimeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopTimeItemListResp_TimeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopTimeItemListResp_TimeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopTimeItemListResp_TimeItem::MergeFrom(const ShopTimeItemListResp_TimeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopTimeItemListResp_TimeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopTimeItemListResp_TimeItem::CopyFrom(const ShopTimeItemListResp_TimeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopTimeItemListResp_TimeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShopTimeItemListResp_TimeItem::Swap(ShopTimeItemListResp_TimeItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopTimeItemListResp_TimeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopTimeItemListResp_TimeItem_descriptor_;
  metadata.reflection = ShopTimeItemListResp_TimeItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ShopTimeItemListResp::kResultFieldNumber;
const int ShopTimeItemListResp::kUserSyncFieldNumber;
const int ShopTimeItemListResp::kListFieldNumber;
#endif  // !_MSC_VER

ShopTimeItemListResp::ShopTimeItemListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopTimeItemListResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShopTimeItemListResp::ShopTimeItemListResp(const ShopTimeItemListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopTimeItemListResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopTimeItemListResp::~ShopTimeItemListResp() {
  SharedDtor();
}

void ShopTimeItemListResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShopTimeItemListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopTimeItemListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopTimeItemListResp_descriptor_;
}

const ShopTimeItemListResp& ShopTimeItemListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ShopTimeItemListResp* ShopTimeItemListResp::default_instance_ = NULL;

ShopTimeItemListResp* ShopTimeItemListResp::New() const {
  return new ShopTimeItemListResp;
}

void ShopTimeItemListResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopTimeItemListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .ShopTimeItemListResp.TimeItem list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopTimeItemListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .ShopTimeItemListResp.TimeItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopTimeItemListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .ShopTimeItemListResp.TimeItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopTimeItemListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .ShopTimeItemListResp.TimeItem list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopTimeItemListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopTimeItemListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopTimeItemListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopTimeItemListResp::MergeFrom(const ShopTimeItemListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopTimeItemListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopTimeItemListResp::CopyFrom(const ShopTimeItemListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopTimeItemListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ShopTimeItemListResp::Swap(ShopTimeItemListResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopTimeItemListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopTimeItemListResp_descriptor_;
  metadata.reflection = ShopTimeItemListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopBuyReq::kIdFieldNumber;
const int ShopBuyReq::kNumFieldNumber;
#endif  // !_MSC_VER

ShopBuyReq::ShopBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopBuyReq::InitAsDefaultInstance() {
}

ShopBuyReq::ShopBuyReq(const ShopBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopBuyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopBuyReq::~ShopBuyReq() {
  SharedDtor();
}

void ShopBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopBuyReq_descriptor_;
}

const ShopBuyReq& ShopBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ShopBuyReq* ShopBuyReq::default_instance_ = NULL;

ShopBuyReq* ShopBuyReq::New() const {
  return new ShopBuyReq;
}

void ShopBuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopBuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopBuyReq::MergeFrom(const ShopBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopBuyReq::CopyFrom(const ShopBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopBuyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShopBuyReq::Swap(ShopBuyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopBuyReq_descriptor_;
  metadata.reflection = ShopBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopBuyResp::kResultFieldNumber;
const int ShopBuyResp::kUserSyncFieldNumber;
const int ShopBuyResp::kReqFieldNumber;
#endif  // !_MSC_VER

ShopBuyResp::ShopBuyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopBuyResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  req_ = const_cast< ::ShopBuyReq*>(&::ShopBuyReq::default_instance());
}

ShopBuyResp::ShopBuyResp(const ShopBuyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopBuyResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopBuyResp::~ShopBuyResp() {
  SharedDtor();
}

void ShopBuyResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete req_;
  }
}

void ShopBuyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopBuyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopBuyResp_descriptor_;
}

const ShopBuyResp& ShopBuyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ShopBuyResp* ShopBuyResp::default_instance_ = NULL;

ShopBuyResp* ShopBuyResp::New() const {
  return new ShopBuyResp;
}

void ShopBuyResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_req()) {
      if (req_ != NULL) req_->::ShopBuyReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopBuyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req;
        break;
      }

      // optional .ShopBuyReq req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopBuyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .ShopBuyReq req = 3;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopBuyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .ShopBuyReq req = 3;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopBuyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .ShopBuyReq req = 3;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopBuyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopBuyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopBuyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopBuyResp::MergeFrom(const ShopBuyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_req()) {
      mutable_req()->::ShopBuyReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopBuyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopBuyResp::CopyFrom(const ShopBuyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopBuyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void ShopBuyResp::Swap(ShopBuyResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopBuyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopBuyResp_descriptor_;
  metadata.reflection = ShopBuyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipLotteryReq::kIdFieldNumber;
const int ShipLotteryReq::kTypeFieldNumber;
#endif  // !_MSC_VER

ShipLotteryReq::ShipLotteryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipLotteryReq::InitAsDefaultInstance() {
}

ShipLotteryReq::ShipLotteryReq(const ShipLotteryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipLotteryReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipLotteryReq::~ShipLotteryReq() {
  SharedDtor();
}

void ShipLotteryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipLotteryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipLotteryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipLotteryReq_descriptor_;
}

const ShipLotteryReq& ShipLotteryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ShipLotteryReq* ShipLotteryReq::default_instance_ = NULL;

ShipLotteryReq* ShipLotteryReq::New() const {
  return new ShipLotteryReq;
}

void ShipLotteryReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipLotteryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipLotteryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipLotteryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipLotteryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipLotteryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipLotteryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipLotteryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipLotteryReq::MergeFrom(const ShipLotteryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipLotteryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipLotteryReq::CopyFrom(const ShipLotteryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipLotteryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShipLotteryReq::Swap(ShipLotteryReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipLotteryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipLotteryReq_descriptor_;
  metadata.reflection = ShipLotteryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipLotteryResp::kResultFieldNumber;
const int ShipLotteryResp::kUserSyncFieldNumber;
const int ShipLotteryResp::kItemListFieldNumber;
#endif  // !_MSC_VER

ShipLotteryResp::ShipLotteryResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipLotteryResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShipLotteryResp::ShipLotteryResp(const ShipLotteryResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipLotteryResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipLotteryResp::~ShipLotteryResp() {
  SharedDtor();
}

void ShipLotteryResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShipLotteryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipLotteryResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipLotteryResp_descriptor_;
}

const ShipLotteryResp& ShipLotteryResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

ShipLotteryResp* ShipLotteryResp::default_instance_ = NULL;

ShipLotteryResp* ShipLotteryResp::New() const {
  return new ShipLotteryResp;
}

void ShipLotteryResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipLotteryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .Item item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipLotteryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .Item item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipLotteryResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .Item item_list = 3;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipLotteryResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .Item item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipLotteryResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipLotteryResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipLotteryResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipLotteryResp::MergeFrom(const ShipLotteryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipLotteryResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipLotteryResp::CopyFrom(const ShipLotteryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipLotteryResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ShipLotteryResp::Swap(ShipLotteryResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipLotteryResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipLotteryResp_descriptor_;
  metadata.reflection = ShipLotteryResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsOnlineReq::kUserNameListFieldNumber;
#endif  // !_MSC_VER

IsOnlineReq::IsOnlineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsOnlineReq::InitAsDefaultInstance() {
}

IsOnlineReq::IsOnlineReq(const IsOnlineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsOnlineReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsOnlineReq::~IsOnlineReq() {
  SharedDtor();
}

void IsOnlineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsOnlineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsOnlineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsOnlineReq_descriptor_;
}

const IsOnlineReq& IsOnlineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

IsOnlineReq* IsOnlineReq::default_instance_ = NULL;

IsOnlineReq* IsOnlineReq::New() const {
  return new IsOnlineReq;
}

void IsOnlineReq::Clear() {
  user_name_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsOnlineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string user_name_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_name_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name_list(this->user_name_list_size() - 1).data(),
            this->user_name_list(this->user_name_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_name_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsOnlineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string user_name_list = 1;
  for (int i = 0; i < this->user_name_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_name_list(i).data(), this->user_name_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsOnlineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string user_name_list = 1;
  for (int i = 0; i < this->user_name_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name_list(i).data(), this->user_name_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->user_name_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsOnlineReq::ByteSize() const {
  int total_size = 0;

  // repeated string user_name_list = 1;
  total_size += 1 * this->user_name_list_size();
  for (int i = 0; i < this->user_name_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_name_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsOnlineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsOnlineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsOnlineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsOnlineReq::MergeFrom(const IsOnlineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_name_list_.MergeFrom(from.user_name_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsOnlineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOnlineReq::CopyFrom(const IsOnlineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsOnlineReq::IsInitialized() const {

  return true;
}

void IsOnlineReq::Swap(IsOnlineReq* other) {
  if (other != this) {
    user_name_list_.Swap(&other->user_name_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsOnlineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsOnlineReq_descriptor_;
  metadata.reflection = IsOnlineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsOnlineResp::kResultFieldNumber;
const int IsOnlineResp::kUserSyncFieldNumber;
const int IsOnlineResp::kUserNameListFieldNumber;
const int IsOnlineResp::kIsOnlineListFieldNumber;
#endif  // !_MSC_VER

IsOnlineResp::IsOnlineResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsOnlineResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

IsOnlineResp::IsOnlineResp(const IsOnlineResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsOnlineResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsOnlineResp::~IsOnlineResp() {
  SharedDtor();
}

void IsOnlineResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void IsOnlineResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsOnlineResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsOnlineResp_descriptor_;
}

const IsOnlineResp& IsOnlineResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

IsOnlineResp* IsOnlineResp::default_instance_ = NULL;

IsOnlineResp* IsOnlineResp::New() const {
  return new IsOnlineResp;
}

void IsOnlineResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  user_name_list_.Clear();
  is_online_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsOnlineResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name_list;
        break;
      }

      // repeated string user_name_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_name_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name_list(this->user_name_list_size() - 1).data(),
            this->user_name_list(this->user_name_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name_list;
        if (input->ExpectTag(32)) goto parse_is_online_list;
        break;
      }

      // repeated bool is_online_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_is_online_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_online_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_online_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsOnlineResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated string user_name_list = 3;
  for (int i = 0; i < this->user_name_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_name_list(i).data(), this->user_name_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name_list(i), output);
  }

  // repeated bool is_online_list = 4;
  for (int i = 0; i < this->is_online_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->is_online_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsOnlineResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated string user_name_list = 3;
  for (int i = 0; i < this->user_name_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name_list(i).data(), this->user_name_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->user_name_list(i), target);
  }

  // repeated bool is_online_list = 4;
  for (int i = 0; i < this->is_online_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->is_online_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsOnlineResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated string user_name_list = 3;
  total_size += 1 * this->user_name_list_size();
  for (int i = 0; i < this->user_name_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_name_list(i));
  }

  // repeated bool is_online_list = 4;
  {
    int data_size = 0;
    data_size = 1 * this->is_online_list_size();
    total_size += 1 * this->is_online_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsOnlineResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsOnlineResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsOnlineResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsOnlineResp::MergeFrom(const IsOnlineResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_name_list_.MergeFrom(from.user_name_list_);
  is_online_list_.MergeFrom(from.is_online_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsOnlineResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOnlineResp::CopyFrom(const IsOnlineResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsOnlineResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void IsOnlineResp::Swap(IsOnlineResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    user_name_list_.Swap(&other->user_name_list_);
    is_online_list_.Swap(&other->is_online_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsOnlineResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsOnlineResp_descriptor_;
  metadata.reflection = IsOnlineResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideStepReq::kTypeFieldNumber;
const int GuideStepReq::kStepIndexFieldNumber;
const int GuideStepReq::kStepNumFieldNumber;
const int GuideStepReq::kTalkKeyFieldNumber;
#endif  // !_MSC_VER

GuideStepReq::GuideStepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideStepReq::InitAsDefaultInstance() {
}

GuideStepReq::GuideStepReq(const GuideStepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideStepReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  step_index_ = 0;
  step_num_ = 0;
  talk_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideStepReq::~GuideStepReq() {
  SharedDtor();
}

void GuideStepReq::SharedDtor() {
  if (talk_key_ != &::google::protobuf::internal::kEmptyString) {
    delete talk_key_;
  }
  if (this != default_instance_) {
  }
}

void GuideStepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideStepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideStepReq_descriptor_;
}

const GuideStepReq& GuideStepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

GuideStepReq* GuideStepReq::default_instance_ = NULL;

GuideStepReq* GuideStepReq::New() const {
  return new GuideStepReq;
}

void GuideStepReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    step_index_ = 0;
    step_num_ = 0;
    if (has_talk_key()) {
      if (talk_key_ != &::google::protobuf::internal::kEmptyString) {
        talk_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideStepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_index;
        break;
      }

      // optional int32 step_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_index_)));
          set_has_step_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_num;
        break;
      }

      // optional int32 step_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_num_)));
          set_has_step_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_talk_key;
        break;
      }

      // optional string talk_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talk_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->talk_key().data(), this->talk_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideStepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 step_index = 2;
  if (has_step_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step_index(), output);
  }

  // optional int32 step_num = 3;
  if (has_step_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step_num(), output);
  }

  // optional string talk_key = 4;
  if (has_talk_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->talk_key().data(), this->talk_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->talk_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideStepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 step_index = 2;
  if (has_step_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step_index(), target);
  }

  // optional int32 step_num = 3;
  if (has_step_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step_num(), target);
  }

  // optional string talk_key = 4;
  if (has_talk_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->talk_key().data(), this->talk_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->talk_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideStepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 step_index = 2;
    if (has_step_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step_index());
    }

    // optional int32 step_num = 3;
    if (has_step_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step_num());
    }

    // optional string talk_key = 4;
    if (has_talk_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talk_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideStepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideStepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideStepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideStepReq::MergeFrom(const GuideStepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_step_index()) {
      set_step_index(from.step_index());
    }
    if (from.has_step_num()) {
      set_step_num(from.step_num());
    }
    if (from.has_talk_key()) {
      set_talk_key(from.talk_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideStepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideStepReq::CopyFrom(const GuideStepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideStepReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuideStepReq::Swap(GuideStepReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(step_index_, other->step_index_);
    std::swap(step_num_, other->step_num_);
    std::swap(talk_key_, other->talk_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideStepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideStepReq_descriptor_;
  metadata.reflection = GuideStepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideStepResp::kResultFieldNumber;
const int GuideStepResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GuideStepResp::GuideStepResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideStepResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GuideStepResp::GuideStepResp(const GuideStepResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideStepResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideStepResp::~GuideStepResp() {
  SharedDtor();
}

void GuideStepResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GuideStepResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideStepResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideStepResp_descriptor_;
}

const GuideStepResp& GuideStepResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

GuideStepResp* GuideStepResp::default_instance_ = NULL;

GuideStepResp* GuideStepResp::New() const {
  return new GuideStepResp;
}

void GuideStepResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideStepResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideStepResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideStepResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideStepResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideStepResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideStepResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideStepResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideStepResp::MergeFrom(const GuideStepResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideStepResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideStepResp::CopyFrom(const GuideStepResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideStepResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GuideStepResp::Swap(GuideStepResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideStepResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideStepResp_descriptor_;
  metadata.reflection = GuideStepResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AidAwardReq::kTypeFieldNumber;
#endif  // !_MSC_VER

AidAwardReq::AidAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AidAwardReq::InitAsDefaultInstance() {
}

AidAwardReq::AidAwardReq(const AidAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AidAwardReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AidAwardReq::~AidAwardReq() {
  SharedDtor();
}

void AidAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AidAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AidAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AidAwardReq_descriptor_;
}

const AidAwardReq& AidAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

AidAwardReq* AidAwardReq::default_instance_ = NULL;

AidAwardReq* AidAwardReq::New() const {
  return new AidAwardReq;
}

void AidAwardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AidAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AidAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AidAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AidAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AidAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AidAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AidAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AidAwardReq::MergeFrom(const AidAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AidAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AidAwardReq::CopyFrom(const AidAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AidAwardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AidAwardReq::Swap(AidAwardReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AidAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AidAwardReq_descriptor_;
  metadata.reflection = AidAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AidAwardResp::kResultFieldNumber;
const int AidAwardResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

AidAwardResp::AidAwardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AidAwardResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

AidAwardResp::AidAwardResp(const AidAwardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AidAwardResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AidAwardResp::~AidAwardResp() {
  SharedDtor();
}

void AidAwardResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void AidAwardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AidAwardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AidAwardResp_descriptor_;
}

const AidAwardResp& AidAwardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

AidAwardResp* AidAwardResp::default_instance_ = NULL;

AidAwardResp* AidAwardResp::New() const {
  return new AidAwardResp;
}

void AidAwardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AidAwardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AidAwardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AidAwardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AidAwardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AidAwardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AidAwardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AidAwardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AidAwardResp::MergeFrom(const AidAwardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AidAwardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AidAwardResp::CopyFrom(const AidAwardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AidAwardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void AidAwardResp::Swap(AidAwardResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AidAwardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AidAwardResp_descriptor_;
  metadata.reflection = AidAwardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenGiftReq::kItemIdFieldNumber;
const int OpenGiftReq::kNumFieldNumber;
#endif  // !_MSC_VER

OpenGiftReq::OpenGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenGiftReq::InitAsDefaultInstance() {
}

OpenGiftReq::OpenGiftReq(const OpenGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenGiftReq::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenGiftReq::~OpenGiftReq() {
  SharedDtor();
}

void OpenGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenGiftReq_descriptor_;
}

const OpenGiftReq& OpenGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

OpenGiftReq* OpenGiftReq::default_instance_ = NULL;

OpenGiftReq* OpenGiftReq::New() const {
  return new OpenGiftReq;
}

void OpenGiftReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenGiftReq::MergeFrom(const OpenGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGiftReq::CopyFrom(const OpenGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGiftReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OpenGiftReq::Swap(OpenGiftReq* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenGiftReq_descriptor_;
  metadata.reflection = OpenGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenGiftResp::kResultFieldNumber;
const int OpenGiftResp::kUserSyncFieldNumber;
const int OpenGiftResp::kGetItemListFieldNumber;
#endif  // !_MSC_VER

OpenGiftResp::OpenGiftResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenGiftResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

OpenGiftResp::OpenGiftResp(const OpenGiftResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenGiftResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenGiftResp::~OpenGiftResp() {
  SharedDtor();
}

void OpenGiftResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void OpenGiftResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenGiftResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenGiftResp_descriptor_;
}

const OpenGiftResp& OpenGiftResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdUser_2eproto();
  return *default_instance_;
}

OpenGiftResp* OpenGiftResp::default_instance_ = NULL;

OpenGiftResp* OpenGiftResp::New() const {
  return new OpenGiftResp;
}

void OpenGiftResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  get_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenGiftResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_item_list;
        break;
      }

      // repeated .Item get_item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenGiftResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .Item get_item_list = 3;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenGiftResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .Item get_item_list = 3;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenGiftResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .Item get_item_list = 3;
  total_size += 1 * this->get_item_list_size();
  for (int i = 0; i < this->get_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenGiftResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenGiftResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenGiftResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenGiftResp::MergeFrom(const OpenGiftResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_item_list_.MergeFrom(from.get_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenGiftResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenGiftResp::CopyFrom(const OpenGiftResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenGiftResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < get_item_list_size(); i++) {
    if (!this->get_item_list(i).IsInitialized()) return false;
  }
  return true;
}

void OpenGiftResp::Swap(OpenGiftResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    get_item_list_.Swap(&other->get_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenGiftResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenGiftResp_descriptor_;
  metadata.reflection = OpenGiftResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
