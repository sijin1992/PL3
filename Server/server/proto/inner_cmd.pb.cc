// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inner_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RsyncLogicStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RsyncLogicStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* RsyncLogicStatus_CentreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RsyncLogicStatus_CentreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rsync2GlobalCB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rsync2GlobalCB_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerCDKEYReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerCDKEYReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerCDKEYResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerCDKEYResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerQueryBeforeRegReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerQueryBeforeRegReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnerQueryBeforeReqResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnerQueryBeforeReqResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Multicast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Multicast_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoReportReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserInfoReportReq_ActType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ServerBroadcastReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerBroadcastReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerBroadcastResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerBroadcastResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerBroadcastResp_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_5fcmd_2eproto() {
  protobuf_AddDesc_inner_5fcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner_cmd.proto");
  GOOGLE_CHECK(file != NULL);
  RsyncLogicStatus_descriptor_ = file->message_type(0);
  static const int RsyncLogicStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, max_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, cur_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, centre_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, max_reg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, cur_reg_),
  };
  RsyncLogicStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RsyncLogicStatus_descriptor_,
      RsyncLogicStatus::default_instance_,
      RsyncLogicStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RsyncLogicStatus));
  RsyncLogicStatus_CentreInfo_descriptor_ = RsyncLogicStatus_descriptor_->nested_type(0);
  static const int RsyncLogicStatus_CentreInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus_CentreInfo, centre_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus_CentreInfo, centre_port_),
  };
  RsyncLogicStatus_CentreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RsyncLogicStatus_CentreInfo_descriptor_,
      RsyncLogicStatus_CentreInfo::default_instance_,
      RsyncLogicStatus_CentreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus_CentreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsyncLogicStatus_CentreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RsyncLogicStatus_CentreInfo));
  Rsync2GlobalCB_descriptor_ = file->message_type(1);
  static const int Rsync2GlobalCB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rsync2GlobalCB, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rsync2GlobalCB, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rsync2GlobalCB, globalcb_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rsync2GlobalCB, globalcb_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rsync2GlobalCB, globalcb_ip_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rsync2GlobalCB, globalcb_port_2_),
  };
  Rsync2GlobalCB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rsync2GlobalCB_descriptor_,
      Rsync2GlobalCB::default_instance_,
      Rsync2GlobalCB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rsync2GlobalCB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rsync2GlobalCB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rsync2GlobalCB));
  InnerCDKEYReq_descriptor_ = file->message_type(2);
  static const int InnerCDKEYReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCDKEYReq, cdkey_),
  };
  InnerCDKEYReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerCDKEYReq_descriptor_,
      InnerCDKEYReq::default_instance_,
      InnerCDKEYReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCDKEYReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCDKEYReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerCDKEYReq));
  InnerCDKEYResp_descriptor_ = file->message_type(3);
  static const int InnerCDKEYResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCDKEYResp, ret_),
  };
  InnerCDKEYResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerCDKEYResp_descriptor_,
      InnerCDKEYResp::default_instance_,
      InnerCDKEYResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCDKEYResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerCDKEYResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerCDKEYResp));
  InnerQueryBeforeRegReq_descriptor_ = file->message_type(4);
  static const int InnerQueryBeforeRegReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeRegReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeRegReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeRegReq, act_id_),
  };
  InnerQueryBeforeRegReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerQueryBeforeRegReq_descriptor_,
      InnerQueryBeforeRegReq::default_instance_,
      InnerQueryBeforeRegReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeRegReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeRegReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerQueryBeforeRegReq));
  InnerQueryBeforeReqResp_descriptor_ = file->message_type(5);
  static const int InnerQueryBeforeReqResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeReqResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeReqResp, real_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeReqResp, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeReqResp, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeReqResp, czfl_),
  };
  InnerQueryBeforeReqResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InnerQueryBeforeReqResp_descriptor_,
      InnerQueryBeforeReqResp::default_instance_,
      InnerQueryBeforeReqResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeReqResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnerQueryBeforeReqResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InnerQueryBeforeReqResp));
  Multicast_descriptor_ = file->message_type(6);
  static const int Multicast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Multicast, recv_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Multicast, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Multicast, group_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Multicast, msg_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Multicast, user_sync_),
  };
  Multicast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Multicast_descriptor_,
      Multicast::default_instance_,
      Multicast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Multicast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Multicast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Multicast));
  UserInfoReportReq_descriptor_ = file->message_type(7);
  static const int UserInfoReportReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReportReq, act_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReportReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReportReq, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReportReq, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReportReq, time_),
  };
  UserInfoReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoReportReq_descriptor_,
      UserInfoReportReq::default_instance_,
      UserInfoReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoReportReq));
  UserInfoReportReq_ActType_descriptor_ = UserInfoReportReq_descriptor_->enum_type(0);
  ServerBroadcastReq_descriptor_ = file->message_type(8);
  static const int ServerBroadcastReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, gmuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, gmkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, session_),
  };
  ServerBroadcastReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerBroadcastReq_descriptor_,
      ServerBroadcastReq::default_instance_,
      ServerBroadcastReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerBroadcastReq));
  ServerBroadcastResp_descriptor_ = file->message_type(9);
  static const int ServerBroadcastResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastResp, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastResp, session_),
  };
  ServerBroadcastResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerBroadcastResp_descriptor_,
      ServerBroadcastResp::default_instance_,
      ServerBroadcastResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBroadcastResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerBroadcastResp));
  ServerBroadcastResp_Result_descriptor_ = ServerBroadcastResp_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_5fcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RsyncLogicStatus_descriptor_, &RsyncLogicStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RsyncLogicStatus_CentreInfo_descriptor_, &RsyncLogicStatus_CentreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rsync2GlobalCB_descriptor_, &Rsync2GlobalCB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerCDKEYReq_descriptor_, &InnerCDKEYReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerCDKEYResp_descriptor_, &InnerCDKEYResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerQueryBeforeRegReq_descriptor_, &InnerQueryBeforeRegReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InnerQueryBeforeReqResp_descriptor_, &InnerQueryBeforeReqResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Multicast_descriptor_, &Multicast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoReportReq_descriptor_, &UserInfoReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerBroadcastReq_descriptor_, &ServerBroadcastReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerBroadcastResp_descriptor_, &ServerBroadcastResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_5fcmd_2eproto() {
  delete RsyncLogicStatus::default_instance_;
  delete RsyncLogicStatus_reflection_;
  delete RsyncLogicStatus_CentreInfo::default_instance_;
  delete RsyncLogicStatus_CentreInfo_reflection_;
  delete Rsync2GlobalCB::default_instance_;
  delete Rsync2GlobalCB_reflection_;
  delete InnerCDKEYReq::default_instance_;
  delete InnerCDKEYReq_reflection_;
  delete InnerCDKEYResp::default_instance_;
  delete InnerCDKEYResp_reflection_;
  delete InnerQueryBeforeRegReq::default_instance_;
  delete InnerQueryBeforeRegReq_reflection_;
  delete InnerQueryBeforeReqResp::default_instance_;
  delete InnerQueryBeforeReqResp_reflection_;
  delete Multicast::default_instance_;
  delete Multicast_reflection_;
  delete UserInfoReportReq::default_instance_;
  delete UserInfoReportReq_reflection_;
  delete ServerBroadcastReq::default_instance_;
  delete ServerBroadcastReq_reflection_;
  delete ServerBroadcastResp::default_instance_;
  delete ServerBroadcastResp_reflection_;
}

void protobuf_AddDesc_inner_5fcmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_CmdGroup_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017inner_cmd.proto\032\016CmdGroup.proto\032\016UserS"
    "ync.proto\"\375\001\n\020RsyncLogicStatus\022\n\n\002ip\030\001 \002"
    "(\t\022\014\n\004port\030\002 \002(\005\022\013\n\003idx\030\003 \003(\005\022\017\n\007version"
    "\030\004 \002(\t\022\022\n\nmax_client\030\005 \002(\005\022\022\n\ncur_client"
    "\030\006 \002(\005\0221\n\013centre_list\030\007 \003(\0132\034.RsyncLogic"
    "Status.CentreInfo\022\017\n\007max_reg\030\t \001(\005\022\017\n\007cu"
    "r_reg\030\n \001(\005\0324\n\nCentreInfo\022\021\n\tcentre_ip\030\007"
    " \001(\t\022\023\n\013centre_port\030\010 \001(\005\"\207\001\n\016Rsync2Glob"
    "alCB\022\014\n\004port\030\002 \002(\005\022\013\n\003idx\030\003 \003(\005\022\023\n\013globa"
    "lcb_ip\030\004 \002(\t\022\025\n\rglobalcb_port\030\005 \002(\005\022\025\n\rg"
    "lobalcb_ip_2\030\006 \001(\t\022\027\n\017globalcb_port_2\030\007 "
    "\001(\005\"\036\n\rInnerCDKEYReq\022\r\n\005cdkey\030\001 \002(\t\"\035\n\016I"
    "nnerCDKEYResp\022\013\n\003ret\030\001 \002(\005\"G\n\026InnerQuery"
    "BeforeRegReq\022\014\n\004name\030\001 \002(\t\022\017\n\007account\030\002 "
    "\001(\t\022\016\n\006act_id\030\003 \001(\005\"g\n\027InnerQueryBeforeR"
    "eqResp\022\016\n\006result\030\001 \002(\005\022\022\n\nreal_money\030\002 \001"
    "(\005\022\r\n\005money\030\003 \001(\005\022\013\n\003vip\030\004 \001(\005\022\014\n\004czfl\030\005"
    " \001(\005\"\177\n\tMulticast\022\021\n\trecv_list\030\001 \003(\t\022\013\n\003"
    "cmd\030\002 \002(\005\022\"\n\014group_update\030\003 \001(\0132\014.GroupU"
    "pdate\022\020\n\010msg_buff\030\004 \001(\t\022\034\n\tuser_sync\030\005 \001"
    "(\0132\t.UserSync\"\237\001\n\021UserInfoReportReq\0224\n\010a"
    "ct_type\030\001 \001(\0162\032.UserInfoReportReq.ActTyp"
    "e:\006REGIST\022\017\n\007user_id\030\002 \001(\t\022\021\n\tnick_name\030"
    "\003 \001(\t\022\013\n\003sex\030\004 \001(\005\022\014\n\004time\030\005 \001(\003\"\025\n\007ActT"
    "ype\022\n\n\006REGIST\020\000\"\263\001\n\022ServerBroadcastReq\022\r"
    "\n\005btype\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\016\n\006target"
    "\030\003 \001(\t\022\r\n\005limit\030\004 \001(\005\022\021\n\tbegintime\030\005 \001(\003"
    "\022\017\n\007endtime\030\006 \001(\003\022\016\n\006gmuser\030\013 \001(\t\022\r\n\005gmk"
    "ey\030\014 \001(\t\022\n\n\002fd\030\025 \001(\005\022\017\n\007session\030\026 \001(\005\"\204\001"
    "\n\023ServerBroadcastResp\022+\n\006result\030\001 \002(\0162\033."
    "ServerBroadcastResp.Result\022\n\n\002fd\030\025 \001(\005\022\017"
    "\n\007session\030\026 \001(\003\"#\n\006Result\022\006\n\002OK\020\000\022\021\n\004FAI"
    "L\020\377\377\377\377\377\377\377\377\377\001", 1292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner_cmd.proto", &protobuf_RegisterTypes);
  RsyncLogicStatus::default_instance_ = new RsyncLogicStatus();
  RsyncLogicStatus_CentreInfo::default_instance_ = new RsyncLogicStatus_CentreInfo();
  Rsync2GlobalCB::default_instance_ = new Rsync2GlobalCB();
  InnerCDKEYReq::default_instance_ = new InnerCDKEYReq();
  InnerCDKEYResp::default_instance_ = new InnerCDKEYResp();
  InnerQueryBeforeRegReq::default_instance_ = new InnerQueryBeforeRegReq();
  InnerQueryBeforeReqResp::default_instance_ = new InnerQueryBeforeReqResp();
  Multicast::default_instance_ = new Multicast();
  UserInfoReportReq::default_instance_ = new UserInfoReportReq();
  ServerBroadcastReq::default_instance_ = new ServerBroadcastReq();
  ServerBroadcastResp::default_instance_ = new ServerBroadcastResp();
  RsyncLogicStatus::default_instance_->InitAsDefaultInstance();
  RsyncLogicStatus_CentreInfo::default_instance_->InitAsDefaultInstance();
  Rsync2GlobalCB::default_instance_->InitAsDefaultInstance();
  InnerCDKEYReq::default_instance_->InitAsDefaultInstance();
  InnerCDKEYResp::default_instance_->InitAsDefaultInstance();
  InnerQueryBeforeRegReq::default_instance_->InitAsDefaultInstance();
  InnerQueryBeforeReqResp::default_instance_->InitAsDefaultInstance();
  Multicast::default_instance_->InitAsDefaultInstance();
  UserInfoReportReq::default_instance_->InitAsDefaultInstance();
  ServerBroadcastReq::default_instance_->InitAsDefaultInstance();
  ServerBroadcastResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_5fcmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_5fcmd_2eproto {
  StaticDescriptorInitializer_inner_5fcmd_2eproto() {
    protobuf_AddDesc_inner_5fcmd_2eproto();
  }
} static_descriptor_initializer_inner_5fcmd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RsyncLogicStatus_CentreInfo::kCentreIpFieldNumber;
const int RsyncLogicStatus_CentreInfo::kCentrePortFieldNumber;
#endif  // !_MSC_VER

RsyncLogicStatus_CentreInfo::RsyncLogicStatus_CentreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RsyncLogicStatus_CentreInfo::InitAsDefaultInstance() {
}

RsyncLogicStatus_CentreInfo::RsyncLogicStatus_CentreInfo(const RsyncLogicStatus_CentreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RsyncLogicStatus_CentreInfo::SharedCtor() {
  _cached_size_ = 0;
  centre_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  centre_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RsyncLogicStatus_CentreInfo::~RsyncLogicStatus_CentreInfo() {
  SharedDtor();
}

void RsyncLogicStatus_CentreInfo::SharedDtor() {
  if (centre_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete centre_ip_;
  }
  if (this != default_instance_) {
  }
}

void RsyncLogicStatus_CentreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RsyncLogicStatus_CentreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RsyncLogicStatus_CentreInfo_descriptor_;
}

const RsyncLogicStatus_CentreInfo& RsyncLogicStatus_CentreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

RsyncLogicStatus_CentreInfo* RsyncLogicStatus_CentreInfo::default_instance_ = NULL;

RsyncLogicStatus_CentreInfo* RsyncLogicStatus_CentreInfo::New() const {
  return new RsyncLogicStatus_CentreInfo;
}

void RsyncLogicStatus_CentreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_centre_ip()) {
      if (centre_ip_ != &::google::protobuf::internal::kEmptyString) {
        centre_ip_->clear();
      }
    }
    centre_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RsyncLogicStatus_CentreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string centre_ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_centre_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->centre_ip().data(), this->centre_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_centre_port;
        break;
      }

      // optional int32 centre_port = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centre_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centre_port_)));
          set_has_centre_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RsyncLogicStatus_CentreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string centre_ip = 7;
  if (has_centre_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->centre_ip().data(), this->centre_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->centre_ip(), output);
  }

  // optional int32 centre_port = 8;
  if (has_centre_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->centre_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RsyncLogicStatus_CentreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string centre_ip = 7;
  if (has_centre_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->centre_ip().data(), this->centre_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->centre_ip(), target);
  }

  // optional int32 centre_port = 8;
  if (has_centre_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->centre_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RsyncLogicStatus_CentreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string centre_ip = 7;
    if (has_centre_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->centre_ip());
    }

    // optional int32 centre_port = 8;
    if (has_centre_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centre_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RsyncLogicStatus_CentreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RsyncLogicStatus_CentreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RsyncLogicStatus_CentreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RsyncLogicStatus_CentreInfo::MergeFrom(const RsyncLogicStatus_CentreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_centre_ip()) {
      set_centre_ip(from.centre_ip());
    }
    if (from.has_centre_port()) {
      set_centre_port(from.centre_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RsyncLogicStatus_CentreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RsyncLogicStatus_CentreInfo::CopyFrom(const RsyncLogicStatus_CentreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsyncLogicStatus_CentreInfo::IsInitialized() const {

  return true;
}

void RsyncLogicStatus_CentreInfo::Swap(RsyncLogicStatus_CentreInfo* other) {
  if (other != this) {
    std::swap(centre_ip_, other->centre_ip_);
    std::swap(centre_port_, other->centre_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RsyncLogicStatus_CentreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RsyncLogicStatus_CentreInfo_descriptor_;
  metadata.reflection = RsyncLogicStatus_CentreInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RsyncLogicStatus::kIpFieldNumber;
const int RsyncLogicStatus::kPortFieldNumber;
const int RsyncLogicStatus::kIdxFieldNumber;
const int RsyncLogicStatus::kVersionFieldNumber;
const int RsyncLogicStatus::kMaxClientFieldNumber;
const int RsyncLogicStatus::kCurClientFieldNumber;
const int RsyncLogicStatus::kCentreListFieldNumber;
const int RsyncLogicStatus::kMaxRegFieldNumber;
const int RsyncLogicStatus::kCurRegFieldNumber;
#endif  // !_MSC_VER

RsyncLogicStatus::RsyncLogicStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RsyncLogicStatus::InitAsDefaultInstance() {
}

RsyncLogicStatus::RsyncLogicStatus(const RsyncLogicStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RsyncLogicStatus::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_client_ = 0;
  cur_client_ = 0;
  max_reg_ = 0;
  cur_reg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RsyncLogicStatus::~RsyncLogicStatus() {
  SharedDtor();
}

void RsyncLogicStatus::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void RsyncLogicStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RsyncLogicStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RsyncLogicStatus_descriptor_;
}

const RsyncLogicStatus& RsyncLogicStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

RsyncLogicStatus* RsyncLogicStatus::default_instance_ = NULL;

RsyncLogicStatus* RsyncLogicStatus::New() const {
  return new RsyncLogicStatus;
}

void RsyncLogicStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    max_client_ = 0;
    cur_client_ = 0;
    max_reg_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_reg_ = 0;
  }
  idx_.Clear();
  centre_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RsyncLogicStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        break;
      }

      // repeated int32 idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_idx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_idx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // required string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_client;
        break;
      }

      // required int32 max_client = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_client_)));
          set_has_max_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_client;
        break;
      }

      // required int32 cur_client = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_client_)));
          set_has_cur_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_centre_list;
        break;
      }

      // repeated .RsyncLogicStatus.CentreInfo centre_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_centre_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_centre_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_centre_list;
        if (input->ExpectTag(72)) goto parse_max_reg;
        break;
      }

      // optional int32 max_reg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_reg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_reg_)));
          set_has_max_reg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cur_reg;
        break;
      }

      // optional int32 cur_reg = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_reg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_reg_)));
          set_has_cur_reg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RsyncLogicStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // repeated int32 idx = 3;
  for (int i = 0; i < this->idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->idx(i), output);
  }

  // required string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }

  // required int32 max_client = 5;
  if (has_max_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_client(), output);
  }

  // required int32 cur_client = 6;
  if (has_cur_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cur_client(), output);
  }

  // repeated .RsyncLogicStatus.CentreInfo centre_list = 7;
  for (int i = 0; i < this->centre_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->centre_list(i), output);
  }

  // optional int32 max_reg = 9;
  if (has_max_reg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_reg(), output);
  }

  // optional int32 cur_reg = 10;
  if (has_cur_reg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cur_reg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RsyncLogicStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // repeated int32 idx = 3;
  for (int i = 0; i < this->idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->idx(i), target);
  }

  // required string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // required int32 max_client = 5;
  if (has_max_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_client(), target);
  }

  // required int32 cur_client = 6;
  if (has_cur_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cur_client(), target);
  }

  // repeated .RsyncLogicStatus.CentreInfo centre_list = 7;
  for (int i = 0; i < this->centre_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->centre_list(i), target);
  }

  // optional int32 max_reg = 9;
  if (has_max_reg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_reg(), target);
  }

  // optional int32 cur_reg = 10;
  if (has_cur_reg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cur_reg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RsyncLogicStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required int32 max_client = 5;
    if (has_max_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_client());
    }

    // required int32 cur_client = 6;
    if (has_cur_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_client());
    }

    // optional int32 max_reg = 9;
    if (has_max_reg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_reg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cur_reg = 10;
    if (has_cur_reg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_reg());
    }

  }
  // repeated int32 idx = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->idx(i));
    }
    total_size += 1 * this->idx_size() + data_size;
  }

  // repeated .RsyncLogicStatus.CentreInfo centre_list = 7;
  total_size += 1 * this->centre_list_size();
  for (int i = 0; i < this->centre_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->centre_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RsyncLogicStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RsyncLogicStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RsyncLogicStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RsyncLogicStatus::MergeFrom(const RsyncLogicStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  idx_.MergeFrom(from.idx_);
  centre_list_.MergeFrom(from.centre_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_max_client()) {
      set_max_client(from.max_client());
    }
    if (from.has_cur_client()) {
      set_cur_client(from.cur_client());
    }
    if (from.has_max_reg()) {
      set_max_reg(from.max_reg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_reg()) {
      set_cur_reg(from.cur_reg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RsyncLogicStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RsyncLogicStatus::CopyFrom(const RsyncLogicStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsyncLogicStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void RsyncLogicStatus::Swap(RsyncLogicStatus* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    idx_.Swap(&other->idx_);
    std::swap(version_, other->version_);
    std::swap(max_client_, other->max_client_);
    std::swap(cur_client_, other->cur_client_);
    centre_list_.Swap(&other->centre_list_);
    std::swap(max_reg_, other->max_reg_);
    std::swap(cur_reg_, other->cur_reg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RsyncLogicStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RsyncLogicStatus_descriptor_;
  metadata.reflection = RsyncLogicStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rsync2GlobalCB::kPortFieldNumber;
const int Rsync2GlobalCB::kIdxFieldNumber;
const int Rsync2GlobalCB::kGlobalcbIpFieldNumber;
const int Rsync2GlobalCB::kGlobalcbPortFieldNumber;
const int Rsync2GlobalCB::kGlobalcbIp2FieldNumber;
const int Rsync2GlobalCB::kGlobalcbPort2FieldNumber;
#endif  // !_MSC_VER

Rsync2GlobalCB::Rsync2GlobalCB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rsync2GlobalCB::InitAsDefaultInstance() {
}

Rsync2GlobalCB::Rsync2GlobalCB(const Rsync2GlobalCB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rsync2GlobalCB::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
  globalcb_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalcb_port_ = 0;
  globalcb_ip_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  globalcb_port_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rsync2GlobalCB::~Rsync2GlobalCB() {
  SharedDtor();
}

void Rsync2GlobalCB::SharedDtor() {
  if (globalcb_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete globalcb_ip_;
  }
  if (globalcb_ip_2_ != &::google::protobuf::internal::kEmptyString) {
    delete globalcb_ip_2_;
  }
  if (this != default_instance_) {
  }
}

void Rsync2GlobalCB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rsync2GlobalCB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rsync2GlobalCB_descriptor_;
}

const Rsync2GlobalCB& Rsync2GlobalCB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

Rsync2GlobalCB* Rsync2GlobalCB::default_instance_ = NULL;

Rsync2GlobalCB* Rsync2GlobalCB::New() const {
  return new Rsync2GlobalCB;
}

void Rsync2GlobalCB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0;
    if (has_globalcb_ip()) {
      if (globalcb_ip_ != &::google::protobuf::internal::kEmptyString) {
        globalcb_ip_->clear();
      }
    }
    globalcb_port_ = 0;
    if (has_globalcb_ip_2()) {
      if (globalcb_ip_2_ != &::google::protobuf::internal::kEmptyString) {
        globalcb_ip_2_->clear();
      }
    }
    globalcb_port_2_ = 0;
  }
  idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rsync2GlobalCB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        break;
      }

      // repeated int32 idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_idx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_idx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        if (input->ExpectTag(34)) goto parse_globalcb_ip;
        break;
      }

      // required string globalcb_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalcb_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalcb_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalcb_ip().data(), this->globalcb_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_globalcb_port;
        break;
      }

      // required int32 globalcb_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalcb_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &globalcb_port_)));
          set_has_globalcb_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_globalcb_ip_2;
        break;
      }

      // optional string globalcb_ip_2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalcb_ip_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalcb_ip_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalcb_ip_2().data(), this->globalcb_ip_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_globalcb_port_2;
        break;
      }

      // optional int32 globalcb_port_2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalcb_port_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &globalcb_port_2_)));
          set_has_globalcb_port_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rsync2GlobalCB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // repeated int32 idx = 3;
  for (int i = 0; i < this->idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->idx(i), output);
  }

  // required string globalcb_ip = 4;
  if (has_globalcb_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalcb_ip().data(), this->globalcb_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->globalcb_ip(), output);
  }

  // required int32 globalcb_port = 5;
  if (has_globalcb_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->globalcb_port(), output);
  }

  // optional string globalcb_ip_2 = 6;
  if (has_globalcb_ip_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalcb_ip_2().data(), this->globalcb_ip_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->globalcb_ip_2(), output);
  }

  // optional int32 globalcb_port_2 = 7;
  if (has_globalcb_port_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->globalcb_port_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rsync2GlobalCB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // repeated int32 idx = 3;
  for (int i = 0; i < this->idx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->idx(i), target);
  }

  // required string globalcb_ip = 4;
  if (has_globalcb_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalcb_ip().data(), this->globalcb_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->globalcb_ip(), target);
  }

  // required int32 globalcb_port = 5;
  if (has_globalcb_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->globalcb_port(), target);
  }

  // optional string globalcb_ip_2 = 6;
  if (has_globalcb_ip_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalcb_ip_2().data(), this->globalcb_ip_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->globalcb_ip_2(), target);
  }

  // optional int32 globalcb_port_2 = 7;
  if (has_globalcb_port_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->globalcb_port_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rsync2GlobalCB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required string globalcb_ip = 4;
    if (has_globalcb_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalcb_ip());
    }

    // required int32 globalcb_port = 5;
    if (has_globalcb_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->globalcb_port());
    }

    // optional string globalcb_ip_2 = 6;
    if (has_globalcb_ip_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalcb_ip_2());
    }

    // optional int32 globalcb_port_2 = 7;
    if (has_globalcb_port_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->globalcb_port_2());
    }

  }
  // repeated int32 idx = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->idx(i));
    }
    total_size += 1 * this->idx_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rsync2GlobalCB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rsync2GlobalCB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rsync2GlobalCB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rsync2GlobalCB::MergeFrom(const Rsync2GlobalCB& from) {
  GOOGLE_CHECK_NE(&from, this);
  idx_.MergeFrom(from.idx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_globalcb_ip()) {
      set_globalcb_ip(from.globalcb_ip());
    }
    if (from.has_globalcb_port()) {
      set_globalcb_port(from.globalcb_port());
    }
    if (from.has_globalcb_ip_2()) {
      set_globalcb_ip_2(from.globalcb_ip_2());
    }
    if (from.has_globalcb_port_2()) {
      set_globalcb_port_2(from.globalcb_port_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rsync2GlobalCB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsync2GlobalCB::CopyFrom(const Rsync2GlobalCB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsync2GlobalCB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void Rsync2GlobalCB::Swap(Rsync2GlobalCB* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    idx_.Swap(&other->idx_);
    std::swap(globalcb_ip_, other->globalcb_ip_);
    std::swap(globalcb_port_, other->globalcb_port_);
    std::swap(globalcb_ip_2_, other->globalcb_ip_2_);
    std::swap(globalcb_port_2_, other->globalcb_port_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rsync2GlobalCB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rsync2GlobalCB_descriptor_;
  metadata.reflection = Rsync2GlobalCB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerCDKEYReq::kCdkeyFieldNumber;
#endif  // !_MSC_VER

InnerCDKEYReq::InnerCDKEYReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InnerCDKEYReq::InitAsDefaultInstance() {
}

InnerCDKEYReq::InnerCDKEYReq(const InnerCDKEYReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InnerCDKEYReq::SharedCtor() {
  _cached_size_ = 0;
  cdkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerCDKEYReq::~InnerCDKEYReq() {
  SharedDtor();
}

void InnerCDKEYReq::SharedDtor() {
  if (cdkey_ != &::google::protobuf::internal::kEmptyString) {
    delete cdkey_;
  }
  if (this != default_instance_) {
  }
}

void InnerCDKEYReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerCDKEYReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerCDKEYReq_descriptor_;
}

const InnerCDKEYReq& InnerCDKEYReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

InnerCDKEYReq* InnerCDKEYReq::default_instance_ = NULL;

InnerCDKEYReq* InnerCDKEYReq::New() const {
  return new InnerCDKEYReq;
}

void InnerCDKEYReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cdkey()) {
      if (cdkey_ != &::google::protobuf::internal::kEmptyString) {
        cdkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerCDKEYReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cdkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cdkey().data(), this->cdkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InnerCDKEYReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cdkey = 1;
  if (has_cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cdkey().data(), this->cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cdkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InnerCDKEYReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cdkey = 1;
  if (has_cdkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cdkey().data(), this->cdkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cdkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InnerCDKEYReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cdkey = 1;
    if (has_cdkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerCDKEYReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerCDKEYReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerCDKEYReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerCDKEYReq::MergeFrom(const InnerCDKEYReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdkey()) {
      set_cdkey(from.cdkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerCDKEYReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerCDKEYReq::CopyFrom(const InnerCDKEYReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCDKEYReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InnerCDKEYReq::Swap(InnerCDKEYReq* other) {
  if (other != this) {
    std::swap(cdkey_, other->cdkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerCDKEYReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerCDKEYReq_descriptor_;
  metadata.reflection = InnerCDKEYReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerCDKEYResp::kRetFieldNumber;
#endif  // !_MSC_VER

InnerCDKEYResp::InnerCDKEYResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InnerCDKEYResp::InitAsDefaultInstance() {
}

InnerCDKEYResp::InnerCDKEYResp(const InnerCDKEYResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InnerCDKEYResp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerCDKEYResp::~InnerCDKEYResp() {
  SharedDtor();
}

void InnerCDKEYResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InnerCDKEYResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerCDKEYResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerCDKEYResp_descriptor_;
}

const InnerCDKEYResp& InnerCDKEYResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

InnerCDKEYResp* InnerCDKEYResp::default_instance_ = NULL;

InnerCDKEYResp* InnerCDKEYResp::New() const {
  return new InnerCDKEYResp;
}

void InnerCDKEYResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerCDKEYResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InnerCDKEYResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InnerCDKEYResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InnerCDKEYResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerCDKEYResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerCDKEYResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerCDKEYResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerCDKEYResp::MergeFrom(const InnerCDKEYResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerCDKEYResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerCDKEYResp::CopyFrom(const InnerCDKEYResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerCDKEYResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InnerCDKEYResp::Swap(InnerCDKEYResp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerCDKEYResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerCDKEYResp_descriptor_;
  metadata.reflection = InnerCDKEYResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerQueryBeforeRegReq::kNameFieldNumber;
const int InnerQueryBeforeRegReq::kAccountFieldNumber;
const int InnerQueryBeforeRegReq::kActIdFieldNumber;
#endif  // !_MSC_VER

InnerQueryBeforeRegReq::InnerQueryBeforeRegReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InnerQueryBeforeRegReq::InitAsDefaultInstance() {
}

InnerQueryBeforeRegReq::InnerQueryBeforeRegReq(const InnerQueryBeforeRegReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InnerQueryBeforeRegReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  act_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerQueryBeforeRegReq::~InnerQueryBeforeRegReq() {
  SharedDtor();
}

void InnerQueryBeforeRegReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void InnerQueryBeforeRegReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerQueryBeforeRegReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerQueryBeforeRegReq_descriptor_;
}

const InnerQueryBeforeRegReq& InnerQueryBeforeRegReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

InnerQueryBeforeRegReq* InnerQueryBeforeRegReq::default_instance_ = NULL;

InnerQueryBeforeRegReq* InnerQueryBeforeRegReq::New() const {
  return new InnerQueryBeforeRegReq;
}

void InnerQueryBeforeRegReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    act_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerQueryBeforeRegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_act_id;
        break;
      }

      // optional int32 act_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_id_)));
          set_has_act_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InnerQueryBeforeRegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional int32 act_id = 3;
  if (has_act_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->act_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InnerQueryBeforeRegReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional int32 act_id = 3;
  if (has_act_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->act_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InnerQueryBeforeRegReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 act_id = 3;
    if (has_act_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerQueryBeforeRegReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerQueryBeforeRegReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerQueryBeforeRegReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerQueryBeforeRegReq::MergeFrom(const InnerQueryBeforeRegReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_act_id()) {
      set_act_id(from.act_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerQueryBeforeRegReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerQueryBeforeRegReq::CopyFrom(const InnerQueryBeforeRegReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerQueryBeforeRegReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InnerQueryBeforeRegReq::Swap(InnerQueryBeforeRegReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(account_, other->account_);
    std::swap(act_id_, other->act_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerQueryBeforeRegReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerQueryBeforeRegReq_descriptor_;
  metadata.reflection = InnerQueryBeforeRegReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InnerQueryBeforeReqResp::kResultFieldNumber;
const int InnerQueryBeforeReqResp::kRealMoneyFieldNumber;
const int InnerQueryBeforeReqResp::kMoneyFieldNumber;
const int InnerQueryBeforeReqResp::kVipFieldNumber;
const int InnerQueryBeforeReqResp::kCzflFieldNumber;
#endif  // !_MSC_VER

InnerQueryBeforeReqResp::InnerQueryBeforeReqResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InnerQueryBeforeReqResp::InitAsDefaultInstance() {
}

InnerQueryBeforeReqResp::InnerQueryBeforeReqResp(const InnerQueryBeforeReqResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InnerQueryBeforeReqResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  real_money_ = 0;
  money_ = 0;
  vip_ = 0;
  czfl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnerQueryBeforeReqResp::~InnerQueryBeforeReqResp() {
  SharedDtor();
}

void InnerQueryBeforeReqResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InnerQueryBeforeReqResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnerQueryBeforeReqResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnerQueryBeforeReqResp_descriptor_;
}

const InnerQueryBeforeReqResp& InnerQueryBeforeReqResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

InnerQueryBeforeReqResp* InnerQueryBeforeReqResp::default_instance_ = NULL;

InnerQueryBeforeReqResp* InnerQueryBeforeReqResp::New() const {
  return new InnerQueryBeforeReqResp;
}

void InnerQueryBeforeReqResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    real_money_ = 0;
    money_ = 0;
    vip_ = 0;
    czfl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InnerQueryBeforeReqResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_real_money;
        break;
      }

      // optional int32 real_money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_money_)));
          set_has_real_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vip;
        break;
      }

      // optional int32 vip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_czfl;
        break;
      }

      // optional int32 czfl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_czfl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &czfl_)));
          set_has_czfl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InnerQueryBeforeReqResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 real_money = 2;
  if (has_real_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->real_money(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // optional int32 vip = 4;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip(), output);
  }

  // optional int32 czfl = 5;
  if (has_czfl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->czfl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InnerQueryBeforeReqResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 real_money = 2;
  if (has_real_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->real_money(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // optional int32 vip = 4;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip(), target);
  }

  // optional int32 czfl = 5;
  if (has_czfl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->czfl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InnerQueryBeforeReqResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 real_money = 2;
    if (has_real_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_money());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 vip = 4;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 czfl = 5;
    if (has_czfl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->czfl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnerQueryBeforeReqResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InnerQueryBeforeReqResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InnerQueryBeforeReqResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InnerQueryBeforeReqResp::MergeFrom(const InnerQueryBeforeReqResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_real_money()) {
      set_real_money(from.real_money());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_czfl()) {
      set_czfl(from.czfl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InnerQueryBeforeReqResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerQueryBeforeReqResp::CopyFrom(const InnerQueryBeforeReqResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerQueryBeforeReqResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InnerQueryBeforeReqResp::Swap(InnerQueryBeforeReqResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(real_money_, other->real_money_);
    std::swap(money_, other->money_);
    std::swap(vip_, other->vip_);
    std::swap(czfl_, other->czfl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InnerQueryBeforeReqResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnerQueryBeforeReqResp_descriptor_;
  metadata.reflection = InnerQueryBeforeReqResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Multicast::kRecvListFieldNumber;
const int Multicast::kCmdFieldNumber;
const int Multicast::kGroupUpdateFieldNumber;
const int Multicast::kMsgBuffFieldNumber;
const int Multicast::kUserSyncFieldNumber;
#endif  // !_MSC_VER

Multicast::Multicast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Multicast::InitAsDefaultInstance() {
  group_update_ = const_cast< ::GroupUpdate*>(&::GroupUpdate::default_instance());
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

Multicast::Multicast(const Multicast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Multicast::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  group_update_ = NULL;
  msg_buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Multicast::~Multicast() {
  SharedDtor();
}

void Multicast::SharedDtor() {
  if (msg_buff_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_buff_;
  }
  if (this != default_instance_) {
    delete group_update_;
    delete user_sync_;
  }
}

void Multicast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Multicast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Multicast_descriptor_;
}

const Multicast& Multicast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

Multicast* Multicast::default_instance_ = NULL;

Multicast* Multicast::New() const {
  return new Multicast;
}

void Multicast::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cmd_ = 0;
    if (has_group_update()) {
      if (group_update_ != NULL) group_update_->::GroupUpdate::Clear();
    }
    if (has_msg_buff()) {
      if (msg_buff_ != &::google::protobuf::internal::kEmptyString) {
        msg_buff_->clear();
      }
    }
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  recv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Multicast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string recv_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recv_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recv_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recv_list(this->recv_list_size() - 1).data(),
            this->recv_list(this->recv_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recv_list;
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required int32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_update;
        break;
      }

      // optional .GroupUpdate group_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_buff;
        break;
      }

      // optional string msg_buff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_buff()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_buff().data(), this->msg_buff().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Multicast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string recv_list = 1;
  for (int i = 0; i < this->recv_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recv_list(i).data(), this->recv_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recv_list(i), output);
  }

  // required int32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // optional .GroupUpdate group_update = 3;
  if (has_group_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group_update(), output);
  }

  // optional string msg_buff = 4;
  if (has_msg_buff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_buff().data(), this->msg_buff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msg_buff(), output);
  }

  // optional .UserSync user_sync = 5;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Multicast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string recv_list = 1;
  for (int i = 0; i < this->recv_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recv_list(i).data(), this->recv_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->recv_list(i), target);
  }

  // required int32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // optional .GroupUpdate group_update = 3;
  if (has_group_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group_update(), target);
  }

  // optional string msg_buff = 4;
  if (has_msg_buff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_buff().data(), this->msg_buff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_buff(), target);
  }

  // optional .UserSync user_sync = 5;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Multicast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional .GroupUpdate group_update = 3;
    if (has_group_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_update());
    }

    // optional string msg_buff = 4;
    if (has_msg_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_buff());
    }

    // optional .UserSync user_sync = 5;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated string recv_list = 1;
  total_size += 1 * this->recv_list_size();
  for (int i = 0; i < this->recv_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Multicast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Multicast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Multicast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Multicast::MergeFrom(const Multicast& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_list_.MergeFrom(from.recv_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_group_update()) {
      mutable_group_update()->::GroupUpdate::MergeFrom(from.group_update());
    }
    if (from.has_msg_buff()) {
      set_msg_buff(from.msg_buff());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Multicast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Multicast::CopyFrom(const Multicast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Multicast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_group_update()) {
    if (!this->group_update().IsInitialized()) return false;
  }
  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void Multicast::Swap(Multicast* other) {
  if (other != this) {
    recv_list_.Swap(&other->recv_list_);
    std::swap(cmd_, other->cmd_);
    std::swap(group_update_, other->group_update_);
    std::swap(msg_buff_, other->msg_buff_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Multicast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Multicast_descriptor_;
  metadata.reflection = Multicast_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserInfoReportReq_ActType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoReportReq_ActType_descriptor_;
}
bool UserInfoReportReq_ActType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserInfoReportReq_ActType UserInfoReportReq::REGIST;
const UserInfoReportReq_ActType UserInfoReportReq::ActType_MIN;
const UserInfoReportReq_ActType UserInfoReportReq::ActType_MAX;
const int UserInfoReportReq::ActType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserInfoReportReq::kActTypeFieldNumber;
const int UserInfoReportReq::kUserIdFieldNumber;
const int UserInfoReportReq::kNickNameFieldNumber;
const int UserInfoReportReq::kSexFieldNumber;
const int UserInfoReportReq::kTimeFieldNumber;
#endif  // !_MSC_VER

UserInfoReportReq::UserInfoReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoReportReq::InitAsDefaultInstance() {
}

UserInfoReportReq::UserInfoReportReq(const UserInfoReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoReportReq::SharedCtor() {
  _cached_size_ = 0;
  act_type_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoReportReq::~UserInfoReportReq() {
  SharedDtor();
}

void UserInfoReportReq::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoReportReq_descriptor_;
}

const UserInfoReportReq& UserInfoReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

UserInfoReportReq* UserInfoReportReq::default_instance_ = NULL;

UserInfoReportReq* UserInfoReportReq::New() const {
  return new UserInfoReportReq;
}

void UserInfoReportReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    act_type_ = 0;
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    sex_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserInfoReportReq.ActType act_type = 1 [default = REGIST];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UserInfoReportReq_ActType_IsValid(value)) {
            set_act_type(static_cast< ::UserInfoReportReq_ActType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .UserInfoReportReq.ActType act_type = 1 [default = REGIST];
  if (has_act_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->act_type(), output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_id(), output);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional int64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .UserInfoReportReq.ActType act_type = 1 [default = REGIST];
  if (has_act_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->act_type(), target);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional int64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .UserInfoReportReq.ActType act_type = 1 [default = REGIST];
    if (has_act_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->act_type());
    }

    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoReportReq::MergeFrom(const UserInfoReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_act_type()) {
      set_act_type(from.act_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoReportReq::CopyFrom(const UserInfoReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoReportReq::IsInitialized() const {

  return true;
}

void UserInfoReportReq::Swap(UserInfoReportReq* other) {
  if (other != this) {
    std::swap(act_type_, other->act_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(sex_, other->sex_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoReportReq_descriptor_;
  metadata.reflection = UserInfoReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerBroadcastReq::kBtypeFieldNumber;
const int ServerBroadcastReq::kMessageFieldNumber;
const int ServerBroadcastReq::kTargetFieldNumber;
const int ServerBroadcastReq::kLimitFieldNumber;
const int ServerBroadcastReq::kBegintimeFieldNumber;
const int ServerBroadcastReq::kEndtimeFieldNumber;
const int ServerBroadcastReq::kGmuserFieldNumber;
const int ServerBroadcastReq::kGmkeyFieldNumber;
const int ServerBroadcastReq::kFdFieldNumber;
const int ServerBroadcastReq::kSessionFieldNumber;
#endif  // !_MSC_VER

ServerBroadcastReq::ServerBroadcastReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerBroadcastReq::InitAsDefaultInstance() {
}

ServerBroadcastReq::ServerBroadcastReq(const ServerBroadcastReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerBroadcastReq::SharedCtor() {
  _cached_size_ = 0;
  btype_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  gmuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gmkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fd_ = 0;
  session_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerBroadcastReq::~ServerBroadcastReq() {
  SharedDtor();
}

void ServerBroadcastReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (gmuser_ != &::google::protobuf::internal::kEmptyString) {
    delete gmuser_;
  }
  if (gmkey_ != &::google::protobuf::internal::kEmptyString) {
    delete gmkey_;
  }
  if (this != default_instance_) {
  }
}

void ServerBroadcastReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerBroadcastReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerBroadcastReq_descriptor_;
}

const ServerBroadcastReq& ServerBroadcastReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

ServerBroadcastReq* ServerBroadcastReq::default_instance_ = NULL;

ServerBroadcastReq* ServerBroadcastReq::New() const {
  return new ServerBroadcastReq;
}

void ServerBroadcastReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    btype_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    limit_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    if (has_gmuser()) {
      if (gmuser_ != &::google::protobuf::internal::kEmptyString) {
        gmuser_->clear();
      }
    }
    if (has_gmkey()) {
      if (gmkey_ != &::google::protobuf::internal::kEmptyString) {
        gmkey_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fd_ = 0;
    session_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerBroadcastReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 btype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btype_)));
          set_has_btype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }

      // optional string target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // optional int32 limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_begintime;
        break;
      }

      // optional int64 begintime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_endtime;
        break;
      }

      // optional int64 endtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_gmuser;
        break;
      }

      // optional string gmuser = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gmuser().data(), this->gmuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_gmkey;
        break;
      }

      // optional string gmkey = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gmkey().data(), this->gmkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fd;
        break;
      }

      // optional int32 fd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_session;
        break;
      }

      // optional int32 session = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerBroadcastReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 btype = 1;
  if (has_btype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->btype(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional string target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->target(), output);
  }

  // optional int32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit(), output);
  }

  // optional int64 begintime = 5;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->begintime(), output);
  }

  // optional int64 endtime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->endtime(), output);
  }

  // optional string gmuser = 11;
  if (has_gmuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmuser().data(), this->gmuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->gmuser(), output);
  }

  // optional string gmkey = 12;
  if (has_gmkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmkey().data(), this->gmkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->gmkey(), output);
  }

  // optional int32 fd = 21;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fd(), output);
  }

  // optional int32 session = 22;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerBroadcastReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 btype = 1;
  if (has_btype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->btype(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional string target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->target(), target);
  }

  // optional int32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit(), target);
  }

  // optional int64 begintime = 5;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->begintime(), target);
  }

  // optional int64 endtime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->endtime(), target);
  }

  // optional string gmuser = 11;
  if (has_gmuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmuser().data(), this->gmuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gmuser(), target);
  }

  // optional string gmkey = 12;
  if (has_gmkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmkey().data(), this->gmkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->gmkey(), target);
  }

  // optional int32 fd = 21;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fd(), target);
  }

  // optional int32 session = 22;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerBroadcastReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 btype = 1;
    if (has_btype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btype());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional int32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int64 begintime = 5;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endtime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional string gmuser = 11;
    if (has_gmuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmuser());
    }

    // optional string gmkey = 12;
    if (has_gmkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmkey());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fd = 21;
    if (has_fd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int32 session = 22;
    if (has_session()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerBroadcastReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerBroadcastReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerBroadcastReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerBroadcastReq::MergeFrom(const ServerBroadcastReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btype()) {
      set_btype(from.btype());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gmuser()) {
      set_gmuser(from.gmuser());
    }
    if (from.has_gmkey()) {
      set_gmkey(from.gmkey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerBroadcastReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerBroadcastReq::CopyFrom(const ServerBroadcastReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerBroadcastReq::IsInitialized() const {

  return true;
}

void ServerBroadcastReq::Swap(ServerBroadcastReq* other) {
  if (other != this) {
    std::swap(btype_, other->btype_);
    std::swap(message_, other->message_);
    std::swap(target_, other->target_);
    std::swap(limit_, other->limit_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(gmuser_, other->gmuser_);
    std::swap(gmkey_, other->gmkey_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerBroadcastReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerBroadcastReq_descriptor_;
  metadata.reflection = ServerBroadcastReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerBroadcastResp_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerBroadcastResp_Result_descriptor_;
}
bool ServerBroadcastResp_Result_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerBroadcastResp_Result ServerBroadcastResp::OK;
const ServerBroadcastResp_Result ServerBroadcastResp::FAIL;
const ServerBroadcastResp_Result ServerBroadcastResp::Result_MIN;
const ServerBroadcastResp_Result ServerBroadcastResp::Result_MAX;
const int ServerBroadcastResp::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerBroadcastResp::kResultFieldNumber;
const int ServerBroadcastResp::kFdFieldNumber;
const int ServerBroadcastResp::kSessionFieldNumber;
#endif  // !_MSC_VER

ServerBroadcastResp::ServerBroadcastResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerBroadcastResp::InitAsDefaultInstance() {
}

ServerBroadcastResp::ServerBroadcastResp(const ServerBroadcastResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerBroadcastResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerBroadcastResp::~ServerBroadcastResp() {
  SharedDtor();
}

void ServerBroadcastResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerBroadcastResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerBroadcastResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerBroadcastResp_descriptor_;
}

const ServerBroadcastResp& ServerBroadcastResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fcmd_2eproto();
  return *default_instance_;
}

ServerBroadcastResp* ServerBroadcastResp::default_instance_ = NULL;

ServerBroadcastResp* ServerBroadcastResp::New() const {
  return new ServerBroadcastResp;
}

void ServerBroadcastResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerBroadcastResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ServerBroadcastResp.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ServerBroadcastResp_Result_IsValid(value)) {
            set_result(static_cast< ::ServerBroadcastResp_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fd;
        break;
      }

      // optional int32 fd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_session;
        break;
      }

      // optional int64 session = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerBroadcastResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ServerBroadcastResp.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 fd = 21;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fd(), output);
  }

  // optional int64 session = 22;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerBroadcastResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ServerBroadcastResp.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 fd = 21;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fd(), target);
  }

  // optional int64 session = 22;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerBroadcastResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ServerBroadcastResp.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 fd = 21;
    if (has_fd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 session = 22;
    if (has_session()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerBroadcastResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerBroadcastResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerBroadcastResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerBroadcastResp::MergeFrom(const ServerBroadcastResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerBroadcastResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerBroadcastResp::CopyFrom(const ServerBroadcastResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerBroadcastResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerBroadcastResp::Swap(ServerBroadcastResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerBroadcastResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerBroadcastResp_descriptor_;
  metadata.reflection = ServerBroadcastResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
