// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdGroup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdGroup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CreateGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroupResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGroupResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGroupResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupUpdate_UserUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupUpdate_UserUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupJoinConditionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupJoinConditionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupJoinConditionResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupJoinConditionResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupJoinResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupJoinResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupJoinResp_GroupJoinRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupAllowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupAllowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupAllowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupAllowResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupAllowResp_GroupAllowRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupExitGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupExitGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupExitGroupResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupExitGroupResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupKickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupKickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupKickResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupKickResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupKickResp_GroupKickRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupBroadcastReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupBroadcastReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupBroadcastResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupBroadcastResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupBroadcastResp_GroupBroadcastRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupJobReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupJobReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupJobResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupJobResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupJobResp_GroupJobRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupDisbandResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupDisbandResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupDisbandResp_GroupDisbandRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupSearchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupSearchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupSearchResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupSearchResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupContributeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupContributeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupContributeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupContributeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupContributeCDResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupContributeCDResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupTechLevelupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupTechLevelupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupTechLevelupResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupTechLevelupResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGetTechReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGetTechReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGetTechResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGetTechResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupLevelupResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupLevelupResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupPVEGetInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVEGetInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupPVEGetInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVEGetInfoResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupPVEGetInfoResp_GroupPVEGetInfoRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupPVEReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVEReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupPVEResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVEResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupPVEResp_GroupPVERet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupPVEOKReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVEOKReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupPVEOKResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVEOKResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupPVEOKResp_GroupPVEOKRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupPVEAddTimsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVEAddTimsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupPVEAddTimsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVEAddTimsResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupPVEAddTimsResp_GroupPVEAddTimsRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupPVERewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVERewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupPVERewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupPVERewardResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupPVERewardResp_GroupPVERewardRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupRequestHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupRequestHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupRequestHelpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupRequestHelpResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupRequestHelpResp_GroupRequestHelpRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupHelpListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupHelpListResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupHelpListResp_GroupHelpListRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupHelpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupHelpResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupHelpResp_GroupHelpRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NewGroupUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewGroupUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInviteResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInviteResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupInviteResp_GroupInviteRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GroupWorshipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupWorshipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupWorshipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupWorshipResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupWorshipResp_GroupWorshipRet_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdGroup_2eproto() {
  protobuf_AddDesc_CmdGroup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdGroup.proto");
  GOOGLE_CHECK(file != NULL);
  CreateGroupReq_descriptor_ = file->message_type(0);
  static const int CreateGroupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupReq, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupReq, icon_id_),
  };
  CreateGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGroupReq_descriptor_,
      CreateGroupReq::default_instance_,
      CreateGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGroupReq));
  CreateGroupResp_descriptor_ = file->message_type(1);
  static const int CreateGroupResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResp, user_sync_),
  };
  CreateGroupResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGroupResp_descriptor_,
      CreateGroupResp::default_instance_,
      CreateGroupResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGroupResp));
  GetGroupReq_descriptor_ = file->message_type(2);
  static const int GetGroupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupReq, groupid_),
  };
  GetGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupReq_descriptor_,
      GetGroupReq::default_instance_,
      GetGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupReq));
  GetGroupResp_descriptor_ = file->message_type(3);
  static const int GetGroupResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResp, other_group_info_),
  };
  GetGroupResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGroupResp_descriptor_,
      GetGroupResp::default_instance_,
      GetGroupResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGroupResp));
  GroupUpdate_descriptor_ = file->message_type(4);
  static const int GroupUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate, group_main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate, user_update_list_),
  };
  GroupUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupUpdate_descriptor_,
      GroupUpdate::default_instance_,
      GroupUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupUpdate));
  GroupUpdate_UserUpdate_descriptor_ = GroupUpdate_descriptor_->nested_type(0);
  static const int GroupUpdate_UserUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate_UserUpdate, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate_UserUpdate, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate_UserUpdate, planet_user_),
  };
  GroupUpdate_UserUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupUpdate_UserUpdate_descriptor_,
      GroupUpdate_UserUpdate::default_instance_,
      GroupUpdate_UserUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate_UserUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupUpdate_UserUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupUpdate_UserUpdate));
  GroupJoinConditionReq_descriptor_ = file->message_type(5);
  static const int GroupJoinConditionReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionReq, needallow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionReq, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionReq, power_),
  };
  GroupJoinConditionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupJoinConditionReq_descriptor_,
      GroupJoinConditionReq::default_instance_,
      GroupJoinConditionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupJoinConditionReq));
  GroupJoinConditionResp_descriptor_ = file->message_type(6);
  static const int GroupJoinConditionResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionResp, user_sync_),
  };
  GroupJoinConditionResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupJoinConditionResp_descriptor_,
      GroupJoinConditionResp::default_instance_,
      GroupJoinConditionResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinConditionResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupJoinConditionResp));
  GroupJoinReq_descriptor_ = file->message_type(7);
  static const int GroupJoinReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinReq, type_),
  };
  GroupJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupJoinReq_descriptor_,
      GroupJoinReq::default_instance_,
      GroupJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupJoinReq));
  GroupJoinResp_descriptor_ = file->message_type(8);
  static const int GroupJoinResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinResp, user_sync_),
  };
  GroupJoinResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupJoinResp_descriptor_,
      GroupJoinResp::default_instance_,
      GroupJoinResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJoinResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupJoinResp));
  GroupJoinResp_GroupJoinRet_descriptor_ = GroupJoinResp_descriptor_->enum_type(0);
  GroupAllowReq_descriptor_ = file->message_type(9);
  static const int GroupAllowReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllowReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllowReq, type_),
  };
  GroupAllowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupAllowReq_descriptor_,
      GroupAllowReq::default_instance_,
      GroupAllowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupAllowReq));
  GroupAllowResp_descriptor_ = file->message_type(10);
  static const int GroupAllowResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllowResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllowResp, user_sync_),
  };
  GroupAllowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupAllowResp_descriptor_,
      GroupAllowResp::default_instance_,
      GroupAllowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupAllowResp));
  GroupAllowResp_GroupAllowRet_descriptor_ = GroupAllowResp_descriptor_->enum_type(0);
  GroupExitGroupReq_descriptor_ = file->message_type(11);
  static const int GroupExitGroupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupExitGroupReq, result_),
  };
  GroupExitGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupExitGroupReq_descriptor_,
      GroupExitGroupReq::default_instance_,
      GroupExitGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupExitGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupExitGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupExitGroupReq));
  GroupExitGroupResp_descriptor_ = file->message_type(12);
  static const int GroupExitGroupResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupExitGroupResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupExitGroupResp, user_sync_),
  };
  GroupExitGroupResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupExitGroupResp_descriptor_,
      GroupExitGroupResp::default_instance_,
      GroupExitGroupResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupExitGroupResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupExitGroupResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupExitGroupResp));
  GroupKickReq_descriptor_ = file->message_type(13);
  static const int GroupKickReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupKickReq, user_name_),
  };
  GroupKickReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupKickReq_descriptor_,
      GroupKickReq::default_instance_,
      GroupKickReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupKickReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupKickReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupKickReq));
  GroupKickResp_descriptor_ = file->message_type(14);
  static const int GroupKickResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupKickResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupKickResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupKickResp, req_),
  };
  GroupKickResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupKickResp_descriptor_,
      GroupKickResp::default_instance_,
      GroupKickResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupKickResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupKickResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupKickResp));
  GroupKickResp_GroupKickRet_descriptor_ = GroupKickResp_descriptor_->enum_type(0);
  GroupBroadcastReq_descriptor_ = file->message_type(15);
  static const int GroupBroadcastReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBroadcastReq, blurb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBroadcastReq, broadcast_),
  };
  GroupBroadcastReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupBroadcastReq_descriptor_,
      GroupBroadcastReq::default_instance_,
      GroupBroadcastReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBroadcastReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBroadcastReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupBroadcastReq));
  GroupBroadcastResp_descriptor_ = file->message_type(16);
  static const int GroupBroadcastResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBroadcastResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBroadcastResp, user_sync_),
  };
  GroupBroadcastResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupBroadcastResp_descriptor_,
      GroupBroadcastResp::default_instance_,
      GroupBroadcastResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBroadcastResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBroadcastResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupBroadcastResp));
  GroupBroadcastResp_GroupBroadcastRet_descriptor_ = GroupBroadcastResp_descriptor_->enum_type(0);
  GroupJobReq_descriptor_ = file->message_type(17);
  static const int GroupJobReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJobReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJobReq, job_),
  };
  GroupJobReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupJobReq_descriptor_,
      GroupJobReq::default_instance_,
      GroupJobReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJobReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJobReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupJobReq));
  GroupJobResp_descriptor_ = file->message_type(18);
  static const int GroupJobResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJobResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJobResp, user_sync_),
  };
  GroupJobResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupJobResp_descriptor_,
      GroupJobResp::default_instance_,
      GroupJobResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJobResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupJobResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupJobResp));
  GroupJobResp_GroupJobRet_descriptor_ = GroupJobResp_descriptor_->enum_type(0);
  GroupDisbandResp_descriptor_ = file->message_type(19);
  static const int GroupDisbandResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDisbandResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDisbandResp, user_sync_),
  };
  GroupDisbandResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupDisbandResp_descriptor_,
      GroupDisbandResp::default_instance_,
      GroupDisbandResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDisbandResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupDisbandResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupDisbandResp));
  GroupDisbandResp_GroupDisbandRet_descriptor_ = GroupDisbandResp_descriptor_->enum_type(0);
  GroupSearchReq_descriptor_ = file->message_type(20);
  static const int GroupSearchReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchReq, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchReq, group_name_),
  };
  GroupSearchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupSearchReq_descriptor_,
      GroupSearchReq::default_instance_,
      GroupSearchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupSearchReq));
  GroupSearchResp_descriptor_ = file->message_type(21);
  static const int GroupSearchResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchResp, group_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchResp, total_page_),
  };
  GroupSearchResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupSearchResp_descriptor_,
      GroupSearchResp::default_instance_,
      GroupSearchResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupSearchResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupSearchResp));
  GroupContributeReq_descriptor_ = file->message_type(22);
  static const int GroupContributeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeReq, tech_id_),
  };
  GroupContributeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupContributeReq_descriptor_,
      GroupContributeReq::default_instance_,
      GroupContributeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupContributeReq));
  GroupContributeResp_descriptor_ = file->message_type(23);
  static const int GroupContributeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeResp, user_sync_),
  };
  GroupContributeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupContributeResp_descriptor_,
      GroupContributeResp::default_instance_,
      GroupContributeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupContributeResp));
  GroupContributeCDResp_descriptor_ = file->message_type(24);
  static const int GroupContributeCDResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeCDResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeCDResp, user_sync_),
  };
  GroupContributeCDResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupContributeCDResp_descriptor_,
      GroupContributeCDResp::default_instance_,
      GroupContributeCDResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeCDResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupContributeCDResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupContributeCDResp));
  GroupTechLevelupReq_descriptor_ = file->message_type(25);
  static const int GroupTechLevelupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupTechLevelupReq, tech_id_),
  };
  GroupTechLevelupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupTechLevelupReq_descriptor_,
      GroupTechLevelupReq::default_instance_,
      GroupTechLevelupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupTechLevelupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupTechLevelupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupTechLevelupReq));
  GroupTechLevelupResp_descriptor_ = file->message_type(26);
  static const int GroupTechLevelupResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupTechLevelupResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupTechLevelupResp, user_sync_),
  };
  GroupTechLevelupResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupTechLevelupResp_descriptor_,
      GroupTechLevelupResp::default_instance_,
      GroupTechLevelupResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupTechLevelupResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupTechLevelupResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupTechLevelupResp));
  GroupGetTechReq_descriptor_ = file->message_type(27);
  static const int GroupGetTechReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetTechReq, tech_id_),
  };
  GroupGetTechReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGetTechReq_descriptor_,
      GroupGetTechReq::default_instance_,
      GroupGetTechReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetTechReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetTechReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGetTechReq));
  GroupGetTechResp_descriptor_ = file->message_type(28);
  static const int GroupGetTechResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetTechResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetTechResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetTechResp, group_tech_),
  };
  GroupGetTechResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGetTechResp_descriptor_,
      GroupGetTechResp::default_instance_,
      GroupGetTechResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetTechResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGetTechResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGetTechResp));
  GroupLevelupResp_descriptor_ = file->message_type(29);
  static const int GroupLevelupResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLevelupResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLevelupResp, user_sync_),
  };
  GroupLevelupResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupLevelupResp_descriptor_,
      GroupLevelupResp::default_instance_,
      GroupLevelupResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLevelupResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupLevelupResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupLevelupResp));
  GroupPVEGetInfoReq_descriptor_ = file->message_type(30);
  static const int GroupPVEGetInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEGetInfoReq, group_boss_id_),
  };
  GroupPVEGetInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVEGetInfoReq_descriptor_,
      GroupPVEGetInfoReq::default_instance_,
      GroupPVEGetInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEGetInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEGetInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVEGetInfoReq));
  GroupPVEGetInfoResp_descriptor_ = file->message_type(31);
  static const int GroupPVEGetInfoResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEGetInfoResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEGetInfoResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEGetInfoResp, info_),
  };
  GroupPVEGetInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVEGetInfoResp_descriptor_,
      GroupPVEGetInfoResp::default_instance_,
      GroupPVEGetInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEGetInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEGetInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVEGetInfoResp));
  GroupPVEGetInfoResp_GroupPVEGetInfoRet_descriptor_ = GroupPVEGetInfoResp_descriptor_->enum_type(0);
  GroupPVEReq_descriptor_ = file->message_type(32);
  static const int GroupPVEReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEReq, group_boss_id_),
  };
  GroupPVEReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVEReq_descriptor_,
      GroupPVEReq::default_instance_,
      GroupPVEReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVEReq));
  GroupPVEResp_descriptor_ = file->message_type(33);
  static const int GroupPVEResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEResp, attack_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEResp, hurter_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEResp, hurter_hp_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEResp, group_boss_id_),
  };
  GroupPVEResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVEResp_descriptor_,
      GroupPVEResp::default_instance_,
      GroupPVEResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVEResp));
  GroupPVEResp_GroupPVERet_descriptor_ = GroupPVEResp_descriptor_->enum_type(0);
  GroupPVEOKReq_descriptor_ = file->message_type(34);
  static const int GroupPVEOKReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKReq, group_boss_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKReq, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKReq, hurter_hp_list_),
  };
  GroupPVEOKReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVEOKReq_descriptor_,
      GroupPVEOKReq::default_instance_,
      GroupPVEOKReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVEOKReq));
  GroupPVEOKResp_descriptor_ = file->message_type(35);
  static const int GroupPVEOKResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKResp, user_sync_),
  };
  GroupPVEOKResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVEOKResp_descriptor_,
      GroupPVEOKResp::default_instance_,
      GroupPVEOKResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEOKResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVEOKResp));
  GroupPVEOKResp_GroupPVEOKRet_descriptor_ = GroupPVEOKResp_descriptor_->enum_type(0);
  GroupPVEAddTimsReq_descriptor_ = file->message_type(36);
  static const int GroupPVEAddTimsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsReq, group_boss_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsReq, times_),
  };
  GroupPVEAddTimsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVEAddTimsReq_descriptor_,
      GroupPVEAddTimsReq::default_instance_,
      GroupPVEAddTimsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVEAddTimsReq));
  GroupPVEAddTimsResp_descriptor_ = file->message_type(37);
  static const int GroupPVEAddTimsResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsResp, req_),
  };
  GroupPVEAddTimsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVEAddTimsResp_descriptor_,
      GroupPVEAddTimsResp::default_instance_,
      GroupPVEAddTimsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVEAddTimsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVEAddTimsResp));
  GroupPVEAddTimsResp_GroupPVEAddTimsRet_descriptor_ = GroupPVEAddTimsResp_descriptor_->enum_type(0);
  GroupPVERewardReq_descriptor_ = file->message_type(38);
  static const int GroupPVERewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardReq, group_boss_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardReq, reward_index_),
  };
  GroupPVERewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVERewardReq_descriptor_,
      GroupPVERewardReq::default_instance_,
      GroupPVERewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVERewardReq));
  GroupPVERewardResp_descriptor_ = file->message_type(39);
  static const int GroupPVERewardResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardResp, req_),
  };
  GroupPVERewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupPVERewardResp_descriptor_,
      GroupPVERewardResp::default_instance_,
      GroupPVERewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupPVERewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupPVERewardResp));
  GroupPVERewardResp_GroupPVERewardRet_descriptor_ = GroupPVERewardResp_descriptor_->enum_type(0);
  GroupRequestHelpReq_descriptor_ = file->message_type(40);
  static const int GroupRequestHelpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpReq, id_),
  };
  GroupRequestHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupRequestHelpReq_descriptor_,
      GroupRequestHelpReq::default_instance_,
      GroupRequestHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupRequestHelpReq));
  GroupRequestHelpResp_descriptor_ = file->message_type(41);
  static const int GroupRequestHelpResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpResp, help_list_),
  };
  GroupRequestHelpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupRequestHelpResp_descriptor_,
      GroupRequestHelpResp::default_instance_,
      GroupRequestHelpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequestHelpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupRequestHelpResp));
  GroupRequestHelpResp_GroupRequestHelpRet_descriptor_ = GroupRequestHelpResp_descriptor_->enum_type(0);
  GroupHelpListResp_descriptor_ = file->message_type(42);
  static const int GroupHelpListResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpListResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpListResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpListResp, help_list_),
  };
  GroupHelpListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupHelpListResp_descriptor_,
      GroupHelpListResp::default_instance_,
      GroupHelpListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupHelpListResp));
  GroupHelpListResp_GroupHelpListRet_descriptor_ = GroupHelpListResp_descriptor_->enum_type(0);
  GroupHelpReq_descriptor_ = file->message_type(43);
  static const int GroupHelpReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpReq, id_),
  };
  GroupHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupHelpReq_descriptor_,
      GroupHelpReq::default_instance_,
      GroupHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupHelpReq));
  GroupHelpResp_descriptor_ = file->message_type(44);
  static const int GroupHelpResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpResp, help_list_),
  };
  GroupHelpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupHelpResp_descriptor_,
      GroupHelpResp::default_instance_,
      GroupHelpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupHelpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupHelpResp));
  GroupHelpResp_GroupHelpRet_descriptor_ = GroupHelpResp_descriptor_->enum_type(0);
  NewGroupUpdate_descriptor_ = file->message_type(45);
  static const int NewGroupUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGroupUpdate, sender_),
  };
  NewGroupUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewGroupUpdate_descriptor_,
      NewGroupUpdate::default_instance_,
      NewGroupUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGroupUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewGroupUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewGroupUpdate));
  GroupInviteReq_descriptor_ = file->message_type(46);
  static const int GroupInviteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInviteReq, recver_),
  };
  GroupInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupInviteReq_descriptor_,
      GroupInviteReq::default_instance_,
      GroupInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInviteReq));
  GroupInviteResp_descriptor_ = file->message_type(47);
  static const int GroupInviteResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInviteResp, result_),
  };
  GroupInviteResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupInviteResp_descriptor_,
      GroupInviteResp::default_instance_,
      GroupInviteResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInviteResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInviteResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInviteResp));
  GroupInviteResp_GroupInviteRet_descriptor_ = GroupInviteResp_descriptor_->enum_type(0);
  GroupWorshipReq_descriptor_ = file->message_type(48);
  static const int GroupWorshipReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipReq, level_),
  };
  GroupWorshipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupWorshipReq_descriptor_,
      GroupWorshipReq::default_instance_,
      GroupWorshipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupWorshipReq));
  GroupWorshipResp_descriptor_ = file->message_type(49);
  static const int GroupWorshipResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipResp, req_),
  };
  GroupWorshipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupWorshipResp_descriptor_,
      GroupWorshipResp::default_instance_,
      GroupWorshipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupWorshipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupWorshipResp));
  GroupWorshipResp_GroupWorshipRet_descriptor_ = GroupWorshipResp_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdGroup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGroupReq_descriptor_, &CreateGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGroupResp_descriptor_, &CreateGroupResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupReq_descriptor_, &GetGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGroupResp_descriptor_, &GetGroupResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupUpdate_descriptor_, &GroupUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupUpdate_UserUpdate_descriptor_, &GroupUpdate_UserUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupJoinConditionReq_descriptor_, &GroupJoinConditionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupJoinConditionResp_descriptor_, &GroupJoinConditionResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupJoinReq_descriptor_, &GroupJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupJoinResp_descriptor_, &GroupJoinResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupAllowReq_descriptor_, &GroupAllowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupAllowResp_descriptor_, &GroupAllowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupExitGroupReq_descriptor_, &GroupExitGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupExitGroupResp_descriptor_, &GroupExitGroupResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupKickReq_descriptor_, &GroupKickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupKickResp_descriptor_, &GroupKickResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupBroadcastReq_descriptor_, &GroupBroadcastReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupBroadcastResp_descriptor_, &GroupBroadcastResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupJobReq_descriptor_, &GroupJobReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupJobResp_descriptor_, &GroupJobResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupDisbandResp_descriptor_, &GroupDisbandResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupSearchReq_descriptor_, &GroupSearchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupSearchResp_descriptor_, &GroupSearchResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupContributeReq_descriptor_, &GroupContributeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupContributeResp_descriptor_, &GroupContributeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupContributeCDResp_descriptor_, &GroupContributeCDResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupTechLevelupReq_descriptor_, &GroupTechLevelupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupTechLevelupResp_descriptor_, &GroupTechLevelupResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGetTechReq_descriptor_, &GroupGetTechReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGetTechResp_descriptor_, &GroupGetTechResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupLevelupResp_descriptor_, &GroupLevelupResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVEGetInfoReq_descriptor_, &GroupPVEGetInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVEGetInfoResp_descriptor_, &GroupPVEGetInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVEReq_descriptor_, &GroupPVEReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVEResp_descriptor_, &GroupPVEResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVEOKReq_descriptor_, &GroupPVEOKReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVEOKResp_descriptor_, &GroupPVEOKResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVEAddTimsReq_descriptor_, &GroupPVEAddTimsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVEAddTimsResp_descriptor_, &GroupPVEAddTimsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVERewardReq_descriptor_, &GroupPVERewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupPVERewardResp_descriptor_, &GroupPVERewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupRequestHelpReq_descriptor_, &GroupRequestHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupRequestHelpResp_descriptor_, &GroupRequestHelpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupHelpListResp_descriptor_, &GroupHelpListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupHelpReq_descriptor_, &GroupHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupHelpResp_descriptor_, &GroupHelpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewGroupUpdate_descriptor_, &NewGroupUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInviteReq_descriptor_, &GroupInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInviteResp_descriptor_, &GroupInviteResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupWorshipReq_descriptor_, &GroupWorshipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupWorshipResp_descriptor_, &GroupWorshipResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdGroup_2eproto() {
  delete CreateGroupReq::default_instance_;
  delete CreateGroupReq_reflection_;
  delete CreateGroupResp::default_instance_;
  delete CreateGroupResp_reflection_;
  delete GetGroupReq::default_instance_;
  delete GetGroupReq_reflection_;
  delete GetGroupResp::default_instance_;
  delete GetGroupResp_reflection_;
  delete GroupUpdate::default_instance_;
  delete GroupUpdate_reflection_;
  delete GroupUpdate_UserUpdate::default_instance_;
  delete GroupUpdate_UserUpdate_reflection_;
  delete GroupJoinConditionReq::default_instance_;
  delete GroupJoinConditionReq_reflection_;
  delete GroupJoinConditionResp::default_instance_;
  delete GroupJoinConditionResp_reflection_;
  delete GroupJoinReq::default_instance_;
  delete GroupJoinReq_reflection_;
  delete GroupJoinResp::default_instance_;
  delete GroupJoinResp_reflection_;
  delete GroupAllowReq::default_instance_;
  delete GroupAllowReq_reflection_;
  delete GroupAllowResp::default_instance_;
  delete GroupAllowResp_reflection_;
  delete GroupExitGroupReq::default_instance_;
  delete GroupExitGroupReq_reflection_;
  delete GroupExitGroupResp::default_instance_;
  delete GroupExitGroupResp_reflection_;
  delete GroupKickReq::default_instance_;
  delete GroupKickReq_reflection_;
  delete GroupKickResp::default_instance_;
  delete GroupKickResp_reflection_;
  delete GroupBroadcastReq::default_instance_;
  delete GroupBroadcastReq_reflection_;
  delete GroupBroadcastResp::default_instance_;
  delete GroupBroadcastResp_reflection_;
  delete GroupJobReq::default_instance_;
  delete GroupJobReq_reflection_;
  delete GroupJobResp::default_instance_;
  delete GroupJobResp_reflection_;
  delete GroupDisbandResp::default_instance_;
  delete GroupDisbandResp_reflection_;
  delete GroupSearchReq::default_instance_;
  delete GroupSearchReq_reflection_;
  delete GroupSearchResp::default_instance_;
  delete GroupSearchResp_reflection_;
  delete GroupContributeReq::default_instance_;
  delete GroupContributeReq_reflection_;
  delete GroupContributeResp::default_instance_;
  delete GroupContributeResp_reflection_;
  delete GroupContributeCDResp::default_instance_;
  delete GroupContributeCDResp_reflection_;
  delete GroupTechLevelupReq::default_instance_;
  delete GroupTechLevelupReq_reflection_;
  delete GroupTechLevelupResp::default_instance_;
  delete GroupTechLevelupResp_reflection_;
  delete GroupGetTechReq::default_instance_;
  delete GroupGetTechReq_reflection_;
  delete GroupGetTechResp::default_instance_;
  delete GroupGetTechResp_reflection_;
  delete GroupLevelupResp::default_instance_;
  delete GroupLevelupResp_reflection_;
  delete GroupPVEGetInfoReq::default_instance_;
  delete GroupPVEGetInfoReq_reflection_;
  delete GroupPVEGetInfoResp::default_instance_;
  delete GroupPVEGetInfoResp_reflection_;
  delete GroupPVEReq::default_instance_;
  delete GroupPVEReq_reflection_;
  delete GroupPVEResp::default_instance_;
  delete GroupPVEResp_reflection_;
  delete GroupPVEOKReq::default_instance_;
  delete GroupPVEOKReq_reflection_;
  delete GroupPVEOKResp::default_instance_;
  delete GroupPVEOKResp_reflection_;
  delete GroupPVEAddTimsReq::default_instance_;
  delete GroupPVEAddTimsReq_reflection_;
  delete GroupPVEAddTimsResp::default_instance_;
  delete GroupPVEAddTimsResp_reflection_;
  delete GroupPVERewardReq::default_instance_;
  delete GroupPVERewardReq_reflection_;
  delete GroupPVERewardResp::default_instance_;
  delete GroupPVERewardResp_reflection_;
  delete GroupRequestHelpReq::default_instance_;
  delete GroupRequestHelpReq_reflection_;
  delete GroupRequestHelpResp::default_instance_;
  delete GroupRequestHelpResp_reflection_;
  delete GroupHelpListResp::default_instance_;
  delete GroupHelpListResp_reflection_;
  delete GroupHelpReq::default_instance_;
  delete GroupHelpReq_reflection_;
  delete GroupHelpResp::default_instance_;
  delete GroupHelpResp_reflection_;
  delete NewGroupUpdate::default_instance_;
  delete NewGroupUpdate_reflection_;
  delete GroupInviteReq::default_instance_;
  delete GroupInviteReq_reflection_;
  delete GroupInviteResp::default_instance_;
  delete GroupInviteResp_reflection_;
  delete GroupWorshipReq::default_instance_;
  delete GroupWorshipReq_reflection_;
  delete GroupWorshipResp::default_instance_;
  delete GroupWorshipResp_reflection_;
}

void protobuf_AddDesc_CmdGroup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Group_2eproto();
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_PvpInfo_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::protobuf_AddDesc_OtherInfo_2eproto();
  ::protobuf_AddDesc_Planet_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CmdGroup.proto\032\013Group.proto\032\016UserInfo."
    "proto\032\nItem.proto\032\rAirShip.proto\032\rPvpInf"
    "o.proto\032\016UserSync.proto\032\017OtherInfo.proto"
    "\032\014Planet.proto\"3\n\016CreateGroupReq\022\020\n\010nick"
    "name\030\001 \001(\t\022\017\n\007icon_id\030\002 \001(\005\"\?\n\017CreateGro"
    "upResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001("
    "\0132\t.UserSync\"\036\n\013GetGroupReq\022\017\n\007groupid\030\001"
    " \002(\t\"g\n\014GetGroupResp\022\016\n\006result\030\001 \002(\005\022\034\n\t"
    "user_sync\030\002 \001(\0132\t.UserSync\022)\n\020other_grou"
    "p_info\030\003 \001(\0132\017.OtherGroupInfo\"\330\001\n\013GroupU"
    "pdate\022\"\n\ngroup_main\030\001 \001(\0132\016.GroupMainDat"
    "a\022\021\n\tuser_name\030\002 \001(\t\0221\n\020user_update_list"
    "\030\003 \003(\0132\027.GroupUpdate.UserUpdate\032_\n\nUserU"
    "pdate\022\021\n\tuser_name\030\001 \001(\t\022\034\n\tuser_sync\030\002 "
    "\001(\0132\t.UserSync\022 \n\013planet_user\030\003 \001(\0132\013.Pl"
    "anetUser\"H\n\025GroupJoinConditionReq\022\021\n\tnee"
    "dAllow\030\001 \002(\010\022\r\n\005level\030\002 \001(\005\022\r\n\005power\030\003 \001"
    "(\005\"F\n\026GroupJoinConditionResp\022\016\n\006result\030\001"
    " \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\"-\n\014Gr"
    "oupJoinReq\022\017\n\007groupid\030\001 \002(\t\022\014\n\004type\030\002 \002("
    "\005\"\266\002\n\rGroupJoinResp\022+\n\006result\030\001 \002(\0162\033.Gr"
    "oupJoinResp.GroupJoinRet\022\034\n\tuser_sync\030\002 "
    "\001(\0132\t.UserSync\"\331\001\n\014GroupJoinRet\022\006\n\002OK\020\000\022"
    "\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\016\n\tHAS_GROUP\020\347\007\022\014\n\007NO"
    "_NUMS\020\346\007\022\014\n\007NO_TIME\020\345\007\022\017\n\nERROR_TYPE\020\343\007\022"
    "\017\n\nDATA_ERROR\020\350\007\022\r\n\tSAME_USER\020\001\022\020\n\014STATU"
    "S_ERROR\020\002\022\013\n\007NO_USER\020\003\022\014\n\010NO_POWER\020\004\022\022\n\016"
    "USER_COUNT_MAX\020\005\022\020\n\014NO_CONDITION\020\006\"/\n\rGr"
    "oupAllowReq\022\020\n\010username\030\001 \002(\t\022\014\n\004type\030\002 "
    "\002(\005\"\272\002\n\016GroupAllowResp\022-\n\006result\030\001 \002(\0162\035"
    ".GroupAllowResp.GroupAllowRet\022\034\n\tuser_sy"
    "nc\030\002 \001(\0132\t.UserSync\"\332\001\n\rGroupAllowRet\022\006\n"
    "\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\016\n\tHAS_GROUP\020\347\007"
    "\022\014\n\007NO_NUMS\020\346\007\022\014\n\007NO_TIME\020\345\007\022\017\n\nERROR_TY"
    "PE\020\343\007\022\017\n\nDATA_ERROR\020\350\007\022\r\n\tSAME_USER\020\001\022\020\n"
    "\014STATUS_ERROR\020\002\022\013\n\007NO_USER\020\003\022\014\n\010NO_POWER"
    "\020\004\022\022\n\016USER_COUNT_MAX\020\005\022\020\n\014NO_CONDITION\020\006"
    "\"#\n\021GroupExitGroupReq\022\016\n\006result\030\001 \002(\005\"B\n"
    "\022GroupExitGroupResp\022\016\n\006result\030\001 \002(\005\022\034\n\tu"
    "ser_sync\030\002 \001(\0132\t.UserSync\"!\n\014GroupKickRe"
    "q\022\021\n\tuser_name\030\001 \002(\t\"\341\001\n\rGroupKickResp\022+"
    "\n\006result\030\001 \002(\0162\033.GroupKickResp.GroupKick"
    "Ret\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\032\n\003req"
    "\030\003 \001(\0132\r.GroupKickReq\"i\n\014GroupKickRet\022\006\n"
    "\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\023\n\006LOCKED\020\376\377\377\377\377"
    "\377\377\377\377\001\022\023\n\006NOUSER\020\375\377\377\377\377\377\377\377\377\001\022\024\n\007NOPOWER\020\374\377"
    "\377\377\377\377\377\377\377\001\"5\n\021GroupBroadcastReq\022\r\n\005blurb\030\001"
    " \001(\t\022\021\n\tbroadcast\030\002 \001(\t\"\311\001\n\022GroupBroadca"
    "stResp\0225\n\006result\030\001 \002(\0162%.GroupBroadcastR"
    "esp.GroupBroadcastRet\022\034\n\tuser_sync\030\002 \001(\013"
    "2\t.UserSync\"^\n\021GroupBroadcastRet\022\006\n\002OK\020\000"
    "\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\t\n\005DIRTY\020\001\022\n\n\006NOUSER"
    "\020\002\022\013\n\007NOPOWER\020\003\022\n\n\006NOTYPE\020\004\"-\n\013GroupJobR"
    "eq\022\021\n\tuser_name\030\001 \002(\t\022\013\n\003job\030\002 \002(\005\"\311\001\n\014G"
    "roupJobResp\022)\n\006result\030\001 \002(\0162\031.GroupJobRe"
    "sp.GroupJobRet\022\034\n\tuser_sync\030\002 \001(\0132\t.User"
    "Sync\"p\n\013GroupJobRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377"
    "\377\377\377\377\377\001\022\n\n\006NOUSER\020\001\022\013\n\007NOPOWER\020\002\022\r\n\tERROR"
    "_JOB\020\003\022\020\n\014FULL_MANAGER\020\004\022\014\n\010SAME_JOB\020\005\"\265"
    "\001\n\020GroupDisbandResp\0221\n\006result\030\001 \002(\0162!.Gr"
    "oupDisbandResp.GroupDisbandRet\022\034\n\tuser_s"
    "ync\030\002 \001(\0132\t.UserSync\"P\n\017GroupDisbandRet\022"
    "\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006LOCKED\020\001\022\013"
    "\n\007NOPOWER\020\002\022\t\n\005ERROR\020\003\"C\n\016GroupSearchReq"
    "\022\017\n\007groupid\030\001 \001(\t\022\014\n\004page\030\002 \001(\005\022\022\n\ngroup"
    "_name\030\003 \001(\t\"w\n\017GroupSearchResp\022\016\n\006result"
    "\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\"\n\n"
    "group_list\030\003 \003(\0132\016.GroupMainData\022\022\n\ntota"
    "l_page\030\004 \001(\005\"3\n\022GroupContributeReq\022\014\n\004ty"
    "pe\030\001 \002(\005\022\017\n\007tech_id\030\002 \002(\005\"C\n\023GroupContri"
    "buteResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 "
    "\001(\0132\t.UserSync\"E\n\025GroupContributeCDResp\022"
    "\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.Use"
    "rSync\"&\n\023GroupTechLevelupReq\022\017\n\007tech_id\030"
    "\001 \002(\005\"D\n\024GroupTechLevelupResp\022\016\n\006result\030"
    "\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\"\"\n\017G"
    "roupGetTechReq\022\017\n\007tech_id\030\001 \002(\005\"f\n\020Group"
    "GetTechResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync"
    "\030\002 \001(\0132\t.UserSync\022$\n\ngroup_tech\030\003 \001(\0132\020."
    "GroupTechnology\"@\n\020GroupLevelupResp\022\016\n\006r"
    "esult\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSyn"
    "c\"+\n\022GroupPVEGetInfoReq\022\025\n\rgroup_boss_id"
    "\030\001 \002(\005\"\316\001\n\023GroupPVEGetInfoResp\0227\n\006result"
    "\030\001 \002(\0162\'.GroupPVEGetInfoResp.GroupPVEGet"
    "InfoRet\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022!\n"
    "\004info\030\003 \001(\0132\023.GroupPVECheckpoint\"=\n\022Grou"
    "pPVEGetInfoRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377"
    "\001\022\014\n\010NO_GROUP\020\001\"$\n\013GroupPVEReq\022\025\n\rgroup_"
    "boss_id\030\001 \002(\005\"\225\003\n\014GroupPVEResp\022)\n\006result"
    "\030\001 \002(\0162\031.GroupPVEResp.GroupPVERet\022\034\n\tuse"
    "r_sync\030\002 \001(\0132\t.UserSync\022\035\n\013attack_list\030\003"
    " \003(\0132\010.AirShip\022\035\n\013hurter_list\030\004 \003(\0132\010.Ai"
    "rShip\022\026\n\016hurter_hp_list\030\005 \003(\005\022\025\n\rgroup_b"
    "oss_id\030\006 \001(\005\"\316\001\n\013GroupPVERet\022\006\n\002OK\020\000\022\021\n\004"
    "FAIL\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013GROUP_LEVEL\020\001\022\014\n\010TIME"
    "_OUT\020\002\022\010\n\004WDAY\020\003\022\023\n\017CHALLENGE_TIMES\020\004\022\016\n"
    "\nNO_DURABEL\020\005\022\017\n\013SHIP_FIXING\020\006\022\017\n\013NO_STR"
    "ENGTH\020\007\022\010\n\004DEAD\020\010\022\014\n\010NO_GROUP\020\t\022\013\n\007NO_DA"
    "TA\020\n\022\017\n\013SHIP_OUTING\020\013\"N\n\rGroupPVEOKReq\022\025"
    "\n\rgroup_boss_id\030\001 \002(\005\022\016\n\006result\030\002 \002(\005\022\026\n"
    "\016hurter_hp_list\030\003 \003(\005\"\336\001\n\016GroupPVEOKResp"
    "\022-\n\006result\030\001 \002(\0162\035.GroupPVEOKResp.GroupP"
    "VEOKRet\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\"\177\n"
    "\rGroupPVEOKRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377"
    "\001\022\013\n\007NO_DATA\020\001\022\022\n\016HP_LIST_ERROR0\020\002\022\022\n\016HP"
    "_LIST_ERROR1\020\003\022\014\n\010NO_GROUP\020\004\022\020\n\014ERROR_RE"
    "SULT\020\005\":\n\022GroupPVEAddTimsReq\022\025\n\rgroup_bo"
    "ss_id\030\001 \002(\005\022\r\n\005times\030\002 \002(\005\"\210\002\n\023GroupPVEA"
    "ddTimsResp\0227\n\006result\030\001 \002(\0162\'.GroupPVEAdd"
    "TimsResp.GroupPVEAddTimsRet\022\034\n\tuser_sync"
    "\030\002 \001(\0132\t.UserSync\022 \n\003req\030\003 \001(\0132\023.GroupPV"
    "EAddTimsReq\"x\n\022GroupPVEAddTimsRet\022\006\n\002OK\020"
    "\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010NO_GROUP\020\001\022\013\n\007NO"
    "_DATA\020\002\022\r\n\tMAX_TIMES\020\003\022\017\n\013ERROR_TIMES\020\004\022"
    "\014\n\010NO_MONEY\020\005\"@\n\021GroupPVERewardReq\022\025\n\rgr"
    "oup_boss_id\030\001 \002(\005\022\024\n\014reward_index\030\002 \002(\005\""
    "\225\002\n\022GroupPVERewardResp\0225\n\006result\030\001 \002(\0162%"
    ".GroupPVERewardResp.GroupPVERewardRet\022\034\n"
    "\tuser_sync\030\002 \001(\0132\t.UserSync\022\037\n\003req\030\003 \001(\013"
    "2\022.GroupPVERewardReq\"\210\001\n\021GroupPVERewardR"
    "et\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010NO_GROU"
    "P\020\001\022\013\n\007NO_DATA\020\002\022\014\n\010NO_INDEX\020\003\022\021\n\rNO_IND"
    "EX_DATA\020\004\022\020\n\014SMALL_DAMAGE\020\005\022\n\n\006GETTED\020\006\""
    "/\n\023GroupRequestHelpReq\022\014\n\004type\030\001 \002(\005\022\n\n\002"
    "id\030\002 \003(\005\"\206\002\n\024GroupRequestHelpResp\0229\n\006res"
    "ult\030\001 \002(\0162).GroupRequestHelpResp.GroupRe"
    "questHelpRet\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSy"
    "nc\022\034\n\thelp_list\030\003 \003(\0132\t.HelpInfo\"w\n\023Grou"
    "pRequestHelpRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377"
    "\377\001\022\013\n\007NO_DATA\020\001\022\t\n\005NO_CD\020\002\022\r\n\tREQUESTED\020"
    "\003\022\022\n\016REQ_DATA_ERROR\020\004\022\n\n\006HELPED\020\005\"\263\001\n\021Gr"
    "oupHelpListResp\0223\n\006result\030\001 \002(\0162#.GroupH"
    "elpListResp.GroupHelpListRet\022\034\n\tuser_syn"
    "c\030\002 \001(\0132\t.UserSync\022\034\n\thelp_list\030\003 \003(\0132\t."
    "HelpInfo\"-\n\020GroupHelpListRet\022\006\n\002OK\020\000\022\021\n\004"
    "FAIL\020\377\377\377\377\377\377\377\377\377\001\";\n\014GroupHelpReq\022\021\n\tuser_"
    "name\030\001 \002(\t\022\014\n\004type\030\002 \002(\005\022\n\n\002id\030\003 \003(\005\"\364\001\n"
    "\rGroupHelpResp\022+\n\006result\030\001 \002(\0162\033.GroupHe"
    "lpResp.GroupHelpRet\022\034\n\tuser_sync\030\002 \001(\0132\t"
    ".UserSync\022\034\n\thelp_list\030\003 \003(\0132\t.HelpInfo\""
    "z\n\014GroupHelpRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377"
    "\377\001\022\021\n\rHELP_TIME_MAX\020\001\022\013\n\007NO_DATA\020\002\022\020\n\014NO"
    "_INFO_DATA\020\003\022\t\n\005NO_CD\020\004\022\022\n\016REQ_DATA_ERRO"
    "R\020\005\" \n\016NewGroupUpdate\022\016\n\006sender\030\001 \002(\t\" \n"
    "\016GroupInviteReq\022\016\n\006recver\030\001 \002(\t\"\305\001\n\017Grou"
    "pInviteResp\022/\n\006result\030\001 \002(\0162\037.GroupInvit"
    "eResp.GroupInviteRet\"\200\001\n\016GroupInviteRet\022"
    "\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013OTHER_BLAC"
    "K\020\001\022\014\n\010MY_BLACK\020\002\022\n\n\006SENDED\020\003\022\r\n\tHAS_GRO"
    "UP\020\004\022\014\n\010NO_POWER\020\005\022\013\n\007NO_OPEN\020\006\".\n\017Group"
    "WorshipReq\022\014\n\004type\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\""
    "\220\002\n\020GroupWorshipResp\0221\n\006result\030\001 \002(\0162!.G"
    "roupWorshipResp.GroupWorshipRet\022\034\n\tuser_"
    "sync\030\002 \001(\0132\t.UserSync\022\035\n\003req\030\003 \001(\0132\020.Gro"
    "upWorshipReq\"\213\001\n\017GroupWorshipRet\022\006\n\002OK\020\000"
    "\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007ALREADY\020\001\022\013\n\007NO_C"
    "ONF\020\002\022\014\n\010NO_GROUP\020\003\022\n\n\006NO_RES\020\004\022\n\n\006GETTE"
    "D\020\005\022\r\n\tLOW_POINT\020\006\022\016\n\nNO_WORSHIP\020\007", 6314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdGroup.proto", &protobuf_RegisterTypes);
  CreateGroupReq::default_instance_ = new CreateGroupReq();
  CreateGroupResp::default_instance_ = new CreateGroupResp();
  GetGroupReq::default_instance_ = new GetGroupReq();
  GetGroupResp::default_instance_ = new GetGroupResp();
  GroupUpdate::default_instance_ = new GroupUpdate();
  GroupUpdate_UserUpdate::default_instance_ = new GroupUpdate_UserUpdate();
  GroupJoinConditionReq::default_instance_ = new GroupJoinConditionReq();
  GroupJoinConditionResp::default_instance_ = new GroupJoinConditionResp();
  GroupJoinReq::default_instance_ = new GroupJoinReq();
  GroupJoinResp::default_instance_ = new GroupJoinResp();
  GroupAllowReq::default_instance_ = new GroupAllowReq();
  GroupAllowResp::default_instance_ = new GroupAllowResp();
  GroupExitGroupReq::default_instance_ = new GroupExitGroupReq();
  GroupExitGroupResp::default_instance_ = new GroupExitGroupResp();
  GroupKickReq::default_instance_ = new GroupKickReq();
  GroupKickResp::default_instance_ = new GroupKickResp();
  GroupBroadcastReq::default_instance_ = new GroupBroadcastReq();
  GroupBroadcastResp::default_instance_ = new GroupBroadcastResp();
  GroupJobReq::default_instance_ = new GroupJobReq();
  GroupJobResp::default_instance_ = new GroupJobResp();
  GroupDisbandResp::default_instance_ = new GroupDisbandResp();
  GroupSearchReq::default_instance_ = new GroupSearchReq();
  GroupSearchResp::default_instance_ = new GroupSearchResp();
  GroupContributeReq::default_instance_ = new GroupContributeReq();
  GroupContributeResp::default_instance_ = new GroupContributeResp();
  GroupContributeCDResp::default_instance_ = new GroupContributeCDResp();
  GroupTechLevelupReq::default_instance_ = new GroupTechLevelupReq();
  GroupTechLevelupResp::default_instance_ = new GroupTechLevelupResp();
  GroupGetTechReq::default_instance_ = new GroupGetTechReq();
  GroupGetTechResp::default_instance_ = new GroupGetTechResp();
  GroupLevelupResp::default_instance_ = new GroupLevelupResp();
  GroupPVEGetInfoReq::default_instance_ = new GroupPVEGetInfoReq();
  GroupPVEGetInfoResp::default_instance_ = new GroupPVEGetInfoResp();
  GroupPVEReq::default_instance_ = new GroupPVEReq();
  GroupPVEResp::default_instance_ = new GroupPVEResp();
  GroupPVEOKReq::default_instance_ = new GroupPVEOKReq();
  GroupPVEOKResp::default_instance_ = new GroupPVEOKResp();
  GroupPVEAddTimsReq::default_instance_ = new GroupPVEAddTimsReq();
  GroupPVEAddTimsResp::default_instance_ = new GroupPVEAddTimsResp();
  GroupPVERewardReq::default_instance_ = new GroupPVERewardReq();
  GroupPVERewardResp::default_instance_ = new GroupPVERewardResp();
  GroupRequestHelpReq::default_instance_ = new GroupRequestHelpReq();
  GroupRequestHelpResp::default_instance_ = new GroupRequestHelpResp();
  GroupHelpListResp::default_instance_ = new GroupHelpListResp();
  GroupHelpReq::default_instance_ = new GroupHelpReq();
  GroupHelpResp::default_instance_ = new GroupHelpResp();
  NewGroupUpdate::default_instance_ = new NewGroupUpdate();
  GroupInviteReq::default_instance_ = new GroupInviteReq();
  GroupInviteResp::default_instance_ = new GroupInviteResp();
  GroupWorshipReq::default_instance_ = new GroupWorshipReq();
  GroupWorshipResp::default_instance_ = new GroupWorshipResp();
  CreateGroupReq::default_instance_->InitAsDefaultInstance();
  CreateGroupResp::default_instance_->InitAsDefaultInstance();
  GetGroupReq::default_instance_->InitAsDefaultInstance();
  GetGroupResp::default_instance_->InitAsDefaultInstance();
  GroupUpdate::default_instance_->InitAsDefaultInstance();
  GroupUpdate_UserUpdate::default_instance_->InitAsDefaultInstance();
  GroupJoinConditionReq::default_instance_->InitAsDefaultInstance();
  GroupJoinConditionResp::default_instance_->InitAsDefaultInstance();
  GroupJoinReq::default_instance_->InitAsDefaultInstance();
  GroupJoinResp::default_instance_->InitAsDefaultInstance();
  GroupAllowReq::default_instance_->InitAsDefaultInstance();
  GroupAllowResp::default_instance_->InitAsDefaultInstance();
  GroupExitGroupReq::default_instance_->InitAsDefaultInstance();
  GroupExitGroupResp::default_instance_->InitAsDefaultInstance();
  GroupKickReq::default_instance_->InitAsDefaultInstance();
  GroupKickResp::default_instance_->InitAsDefaultInstance();
  GroupBroadcastReq::default_instance_->InitAsDefaultInstance();
  GroupBroadcastResp::default_instance_->InitAsDefaultInstance();
  GroupJobReq::default_instance_->InitAsDefaultInstance();
  GroupJobResp::default_instance_->InitAsDefaultInstance();
  GroupDisbandResp::default_instance_->InitAsDefaultInstance();
  GroupSearchReq::default_instance_->InitAsDefaultInstance();
  GroupSearchResp::default_instance_->InitAsDefaultInstance();
  GroupContributeReq::default_instance_->InitAsDefaultInstance();
  GroupContributeResp::default_instance_->InitAsDefaultInstance();
  GroupContributeCDResp::default_instance_->InitAsDefaultInstance();
  GroupTechLevelupReq::default_instance_->InitAsDefaultInstance();
  GroupTechLevelupResp::default_instance_->InitAsDefaultInstance();
  GroupGetTechReq::default_instance_->InitAsDefaultInstance();
  GroupGetTechResp::default_instance_->InitAsDefaultInstance();
  GroupLevelupResp::default_instance_->InitAsDefaultInstance();
  GroupPVEGetInfoReq::default_instance_->InitAsDefaultInstance();
  GroupPVEGetInfoResp::default_instance_->InitAsDefaultInstance();
  GroupPVEReq::default_instance_->InitAsDefaultInstance();
  GroupPVEResp::default_instance_->InitAsDefaultInstance();
  GroupPVEOKReq::default_instance_->InitAsDefaultInstance();
  GroupPVEOKResp::default_instance_->InitAsDefaultInstance();
  GroupPVEAddTimsReq::default_instance_->InitAsDefaultInstance();
  GroupPVEAddTimsResp::default_instance_->InitAsDefaultInstance();
  GroupPVERewardReq::default_instance_->InitAsDefaultInstance();
  GroupPVERewardResp::default_instance_->InitAsDefaultInstance();
  GroupRequestHelpReq::default_instance_->InitAsDefaultInstance();
  GroupRequestHelpResp::default_instance_->InitAsDefaultInstance();
  GroupHelpListResp::default_instance_->InitAsDefaultInstance();
  GroupHelpReq::default_instance_->InitAsDefaultInstance();
  GroupHelpResp::default_instance_->InitAsDefaultInstance();
  NewGroupUpdate::default_instance_->InitAsDefaultInstance();
  GroupInviteReq::default_instance_->InitAsDefaultInstance();
  GroupInviteResp::default_instance_->InitAsDefaultInstance();
  GroupWorshipReq::default_instance_->InitAsDefaultInstance();
  GroupWorshipResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdGroup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdGroup_2eproto {
  StaticDescriptorInitializer_CmdGroup_2eproto() {
    protobuf_AddDesc_CmdGroup_2eproto();
  }
} static_descriptor_initializer_CmdGroup_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateGroupReq::kNicknameFieldNumber;
const int CreateGroupReq::kIconIdFieldNumber;
#endif  // !_MSC_VER

CreateGroupReq::CreateGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateGroupReq::InitAsDefaultInstance() {
}

CreateGroupReq::CreateGroupReq(const CreateGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateGroupReq::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroupReq::~CreateGroupReq() {
  SharedDtor();
}

void CreateGroupReq::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CreateGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupReq_descriptor_;
}

const CreateGroupReq& CreateGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

CreateGroupReq* CreateGroupReq::default_instance_ = NULL;

CreateGroupReq* CreateGroupReq::New() const {
  return new CreateGroupReq;
}

void CreateGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    icon_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_icon_id;
        break;
      }

      // optional int32 icon_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  // optional int32 icon_id = 2;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icon_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional int32 icon_id = 2;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icon_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 icon_id = 2;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGroupReq::MergeFrom(const CreateGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupReq::CopyFrom(const CreateGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupReq::IsInitialized() const {

  return true;
}

void CreateGroupReq::Swap(CreateGroupReq* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupReq_descriptor_;
  metadata.reflection = CreateGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGroupResp::kResultFieldNumber;
const int CreateGroupResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

CreateGroupResp::CreateGroupResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateGroupResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

CreateGroupResp::CreateGroupResp(const CreateGroupResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateGroupResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGroupResp::~CreateGroupResp() {
  SharedDtor();
}

void CreateGroupResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void CreateGroupResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupResp_descriptor_;
}

const CreateGroupResp& CreateGroupResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

CreateGroupResp* CreateGroupResp::default_instance_ = NULL;

CreateGroupResp* CreateGroupResp::New() const {
  return new CreateGroupResp;
}

void CreateGroupResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGroupResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateGroupResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateGroupResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateGroupResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGroupResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGroupResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGroupResp::MergeFrom(const CreateGroupResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGroupResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupResp::CopyFrom(const CreateGroupResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void CreateGroupResp::Swap(CreateGroupResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGroupResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupResp_descriptor_;
  metadata.reflection = CreateGroupResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

GetGroupReq::GetGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGroupReq::InitAsDefaultInstance() {
}

GetGroupReq::GetGroupReq(const GetGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupReq::~GetGroupReq() {
  SharedDtor();
}

void GetGroupReq::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void GetGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupReq_descriptor_;
}

const GetGroupReq& GetGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GetGroupReq* GetGroupReq::default_instance_ = NULL;

GetGroupReq* GetGroupReq::New() const {
  return new GetGroupReq;
}

void GetGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupReq::MergeFrom(const GetGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupReq::CopyFrom(const GetGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetGroupReq::Swap(GetGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupReq_descriptor_;
  metadata.reflection = GetGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGroupResp::kResultFieldNumber;
const int GetGroupResp::kUserSyncFieldNumber;
const int GetGroupResp::kOtherGroupInfoFieldNumber;
#endif  // !_MSC_VER

GetGroupResp::GetGroupResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGroupResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  other_group_info_ = const_cast< ::OtherGroupInfo*>(&::OtherGroupInfo::default_instance());
}

GetGroupResp::GetGroupResp(const GetGroupResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGroupResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  other_group_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGroupResp::~GetGroupResp() {
  SharedDtor();
}

void GetGroupResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete other_group_info_;
  }
}

void GetGroupResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGroupResp_descriptor_;
}

const GetGroupResp& GetGroupResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GetGroupResp* GetGroupResp::default_instance_ = NULL;

GetGroupResp* GetGroupResp::New() const {
  return new GetGroupResp;
}

void GetGroupResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_other_group_info()) {
      if (other_group_info_ != NULL) other_group_info_->::OtherGroupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetGroupResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_other_group_info;
        break;
      }

      // optional .OtherGroupInfo other_group_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_group_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other_group_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetGroupResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .OtherGroupInfo other_group_info = 3;
  if (has_other_group_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->other_group_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGroupResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .OtherGroupInfo other_group_info = 3;
  if (has_other_group_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->other_group_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGroupResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .OtherGroupInfo other_group_info = 3;
    if (has_other_group_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_group_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGroupResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGroupResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetGroupResp::MergeFrom(const GetGroupResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_other_group_info()) {
      mutable_other_group_info()->::OtherGroupInfo::MergeFrom(from.other_group_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetGroupResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupResp::CopyFrom(const GetGroupResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_other_group_info()) {
    if (!this->other_group_info().IsInitialized()) return false;
  }
  return true;
}

void GetGroupResp::Swap(GetGroupResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(other_group_info_, other->other_group_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetGroupResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGroupResp_descriptor_;
  metadata.reflection = GetGroupResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupUpdate_UserUpdate::kUserNameFieldNumber;
const int GroupUpdate_UserUpdate::kUserSyncFieldNumber;
const int GroupUpdate_UserUpdate::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

GroupUpdate_UserUpdate::GroupUpdate_UserUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupUpdate_UserUpdate::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
}

GroupUpdate_UserUpdate::GroupUpdate_UserUpdate(const GroupUpdate_UserUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupUpdate_UserUpdate::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupUpdate_UserUpdate::~GroupUpdate_UserUpdate() {
  SharedDtor();
}

void GroupUpdate_UserUpdate::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
    delete user_sync_;
    delete planet_user_;
  }
}

void GroupUpdate_UserUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupUpdate_UserUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUpdate_UserUpdate_descriptor_;
}

const GroupUpdate_UserUpdate& GroupUpdate_UserUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupUpdate_UserUpdate* GroupUpdate_UserUpdate::default_instance_ = NULL;

GroupUpdate_UserUpdate* GroupUpdate_UserUpdate::New() const {
  return new GroupUpdate_UserUpdate;
}

void GroupUpdate_UserUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupUpdate_UserUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupUpdate_UserUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->planet_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupUpdate_UserUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->planet_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupUpdate_UserUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUpdate_UserUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupUpdate_UserUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupUpdate_UserUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupUpdate_UserUpdate::MergeFrom(const GroupUpdate_UserUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupUpdate_UserUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUpdate_UserUpdate::CopyFrom(const GroupUpdate_UserUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpdate_UserUpdate::IsInitialized() const {

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void GroupUpdate_UserUpdate::Swap(GroupUpdate_UserUpdate* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupUpdate_UserUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupUpdate_UserUpdate_descriptor_;
  metadata.reflection = GroupUpdate_UserUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GroupUpdate::kGroupMainFieldNumber;
const int GroupUpdate::kUserNameFieldNumber;
const int GroupUpdate::kUserUpdateListFieldNumber;
#endif  // !_MSC_VER

GroupUpdate::GroupUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupUpdate::InitAsDefaultInstance() {
  group_main_ = const_cast< ::GroupMainData*>(&::GroupMainData::default_instance());
}

GroupUpdate::GroupUpdate(const GroupUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupUpdate::SharedCtor() {
  _cached_size_ = 0;
  group_main_ = NULL;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupUpdate::~GroupUpdate() {
  SharedDtor();
}

void GroupUpdate::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
    delete group_main_;
  }
}

void GroupUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupUpdate_descriptor_;
}

const GroupUpdate& GroupUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupUpdate* GroupUpdate::default_instance_ = NULL;

GroupUpdate* GroupUpdate::New() const {
  return new GroupUpdate;
}

void GroupUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group_main()) {
      if (group_main_ != NULL) group_main_->::GroupMainData::Clear();
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  user_update_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GroupMainData group_main = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_main()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_update_list;
        break;
      }

      // repeated .GroupUpdate.UserUpdate user_update_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_update_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_update_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_update_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GroupMainData group_main = 1;
  if (has_group_main()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_main(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // repeated .GroupUpdate.UserUpdate user_update_list = 3;
  for (int i = 0; i < this->user_update_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_update_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GroupMainData group_main = 1;
  if (has_group_main()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_main(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // repeated .GroupUpdate.UserUpdate user_update_list = 3;
  for (int i = 0; i < this->user_update_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user_update_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GroupMainData group_main = 1;
    if (has_group_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_main());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  // repeated .GroupUpdate.UserUpdate user_update_list = 3;
  total_size += 1 * this->user_update_list_size();
  for (int i = 0; i < this->user_update_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_update_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupUpdate::MergeFrom(const GroupUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_update_list_.MergeFrom(from.user_update_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_main()) {
      mutable_group_main()->::GroupMainData::MergeFrom(from.group_main());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUpdate::CopyFrom(const GroupUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpdate::IsInitialized() const {

  if (has_group_main()) {
    if (!this->group_main().IsInitialized()) return false;
  }
  for (int i = 0; i < user_update_list_size(); i++) {
    if (!this->user_update_list(i).IsInitialized()) return false;
  }
  return true;
}

void GroupUpdate::Swap(GroupUpdate* other) {
  if (other != this) {
    std::swap(group_main_, other->group_main_);
    std::swap(user_name_, other->user_name_);
    user_update_list_.Swap(&other->user_update_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupUpdate_descriptor_;
  metadata.reflection = GroupUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupJoinConditionReq::kNeedAllowFieldNumber;
const int GroupJoinConditionReq::kLevelFieldNumber;
const int GroupJoinConditionReq::kPowerFieldNumber;
#endif  // !_MSC_VER

GroupJoinConditionReq::GroupJoinConditionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupJoinConditionReq::InitAsDefaultInstance() {
}

GroupJoinConditionReq::GroupJoinConditionReq(const GroupJoinConditionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupJoinConditionReq::SharedCtor() {
  _cached_size_ = 0;
  needallow_ = false;
  level_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupJoinConditionReq::~GroupJoinConditionReq() {
  SharedDtor();
}

void GroupJoinConditionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupJoinConditionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupJoinConditionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJoinConditionReq_descriptor_;
}

const GroupJoinConditionReq& GroupJoinConditionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupJoinConditionReq* GroupJoinConditionReq::default_instance_ = NULL;

GroupJoinConditionReq* GroupJoinConditionReq::New() const {
  return new GroupJoinConditionReq;
}

void GroupJoinConditionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needallow_ = false;
    level_ = 0;
    power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupJoinConditionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool needAllow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needallow_)));
          set_has_needallow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // optional int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupJoinConditionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool needAllow = 1;
  if (has_needallow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->needallow(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupJoinConditionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool needAllow = 1;
  if (has_needallow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->needallow(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupJoinConditionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool needAllow = 1;
    if (has_needallow()) {
      total_size += 1 + 1;
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupJoinConditionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupJoinConditionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupJoinConditionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupJoinConditionReq::MergeFrom(const GroupJoinConditionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needallow()) {
      set_needallow(from.needallow());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupJoinConditionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupJoinConditionReq::CopyFrom(const GroupJoinConditionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupJoinConditionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupJoinConditionReq::Swap(GroupJoinConditionReq* other) {
  if (other != this) {
    std::swap(needallow_, other->needallow_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupJoinConditionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupJoinConditionReq_descriptor_;
  metadata.reflection = GroupJoinConditionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupJoinConditionResp::kResultFieldNumber;
const int GroupJoinConditionResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupJoinConditionResp::GroupJoinConditionResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupJoinConditionResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupJoinConditionResp::GroupJoinConditionResp(const GroupJoinConditionResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupJoinConditionResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupJoinConditionResp::~GroupJoinConditionResp() {
  SharedDtor();
}

void GroupJoinConditionResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupJoinConditionResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupJoinConditionResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJoinConditionResp_descriptor_;
}

const GroupJoinConditionResp& GroupJoinConditionResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupJoinConditionResp* GroupJoinConditionResp::default_instance_ = NULL;

GroupJoinConditionResp* GroupJoinConditionResp::New() const {
  return new GroupJoinConditionResp;
}

void GroupJoinConditionResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupJoinConditionResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupJoinConditionResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupJoinConditionResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupJoinConditionResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupJoinConditionResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupJoinConditionResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupJoinConditionResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupJoinConditionResp::MergeFrom(const GroupJoinConditionResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupJoinConditionResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupJoinConditionResp::CopyFrom(const GroupJoinConditionResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupJoinConditionResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupJoinConditionResp::Swap(GroupJoinConditionResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupJoinConditionResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupJoinConditionResp_descriptor_;
  metadata.reflection = GroupJoinConditionResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupJoinReq::kGroupidFieldNumber;
const int GroupJoinReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GroupJoinReq::GroupJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupJoinReq::InitAsDefaultInstance() {
}

GroupJoinReq::GroupJoinReq(const GroupJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupJoinReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupJoinReq::~GroupJoinReq() {
  SharedDtor();
}

void GroupJoinReq::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void GroupJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJoinReq_descriptor_;
}

const GroupJoinReq& GroupJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupJoinReq* GroupJoinReq::default_instance_ = NULL;

GroupJoinReq* GroupJoinReq::New() const {
  return new GroupJoinReq;
}

void GroupJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupJoinReq::MergeFrom(const GroupJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupJoinReq::CopyFrom(const GroupJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupJoinReq::Swap(GroupJoinReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupJoinReq_descriptor_;
  metadata.reflection = GroupJoinReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupJoinResp_GroupJoinRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJoinResp_GroupJoinRet_descriptor_;
}
bool GroupJoinResp_GroupJoinRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 995:
    case 997:
    case 998:
    case 999:
    case 1000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupJoinResp_GroupJoinRet GroupJoinResp::OK;
const GroupJoinResp_GroupJoinRet GroupJoinResp::FAIL;
const GroupJoinResp_GroupJoinRet GroupJoinResp::HAS_GROUP;
const GroupJoinResp_GroupJoinRet GroupJoinResp::NO_NUMS;
const GroupJoinResp_GroupJoinRet GroupJoinResp::NO_TIME;
const GroupJoinResp_GroupJoinRet GroupJoinResp::ERROR_TYPE;
const GroupJoinResp_GroupJoinRet GroupJoinResp::DATA_ERROR;
const GroupJoinResp_GroupJoinRet GroupJoinResp::SAME_USER;
const GroupJoinResp_GroupJoinRet GroupJoinResp::STATUS_ERROR;
const GroupJoinResp_GroupJoinRet GroupJoinResp::NO_USER;
const GroupJoinResp_GroupJoinRet GroupJoinResp::NO_POWER;
const GroupJoinResp_GroupJoinRet GroupJoinResp::USER_COUNT_MAX;
const GroupJoinResp_GroupJoinRet GroupJoinResp::NO_CONDITION;
const GroupJoinResp_GroupJoinRet GroupJoinResp::GroupJoinRet_MIN;
const GroupJoinResp_GroupJoinRet GroupJoinResp::GroupJoinRet_MAX;
const int GroupJoinResp::GroupJoinRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupJoinResp::kResultFieldNumber;
const int GroupJoinResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupJoinResp::GroupJoinResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupJoinResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupJoinResp::GroupJoinResp(const GroupJoinResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupJoinResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupJoinResp::~GroupJoinResp() {
  SharedDtor();
}

void GroupJoinResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupJoinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupJoinResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJoinResp_descriptor_;
}

const GroupJoinResp& GroupJoinResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupJoinResp* GroupJoinResp::default_instance_ = NULL;

GroupJoinResp* GroupJoinResp::New() const {
  return new GroupJoinResp;
}

void GroupJoinResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupJoinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupJoinResp.GroupJoinRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupJoinResp_GroupJoinRet_IsValid(value)) {
            set_result(static_cast< ::GroupJoinResp_GroupJoinRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupJoinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupJoinResp.GroupJoinRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupJoinResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupJoinResp.GroupJoinRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupJoinResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupJoinResp.GroupJoinRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupJoinResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupJoinResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupJoinResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupJoinResp::MergeFrom(const GroupJoinResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupJoinResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupJoinResp::CopyFrom(const GroupJoinResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupJoinResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupJoinResp::Swap(GroupJoinResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupJoinResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupJoinResp_descriptor_;
  metadata.reflection = GroupJoinResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupAllowReq::kUsernameFieldNumber;
const int GroupAllowReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GroupAllowReq::GroupAllowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupAllowReq::InitAsDefaultInstance() {
}

GroupAllowReq::GroupAllowReq(const GroupAllowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupAllowReq::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupAllowReq::~GroupAllowReq() {
  SharedDtor();
}

void GroupAllowReq::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void GroupAllowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAllowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAllowReq_descriptor_;
}

const GroupAllowReq& GroupAllowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupAllowReq* GroupAllowReq::default_instance_ = NULL;

GroupAllowReq* GroupAllowReq::New() const {
  return new GroupAllowReq;
}

void GroupAllowReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupAllowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupAllowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupAllowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupAllowReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAllowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupAllowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupAllowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupAllowReq::MergeFrom(const GroupAllowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupAllowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAllowReq::CopyFrom(const GroupAllowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAllowReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupAllowReq::Swap(GroupAllowReq* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupAllowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupAllowReq_descriptor_;
  metadata.reflection = GroupAllowReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupAllowResp_GroupAllowRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAllowResp_GroupAllowRet_descriptor_;
}
bool GroupAllowResp_GroupAllowRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 995:
    case 997:
    case 998:
    case 999:
    case 1000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupAllowResp_GroupAllowRet GroupAllowResp::OK;
const GroupAllowResp_GroupAllowRet GroupAllowResp::FAIL;
const GroupAllowResp_GroupAllowRet GroupAllowResp::HAS_GROUP;
const GroupAllowResp_GroupAllowRet GroupAllowResp::NO_NUMS;
const GroupAllowResp_GroupAllowRet GroupAllowResp::NO_TIME;
const GroupAllowResp_GroupAllowRet GroupAllowResp::ERROR_TYPE;
const GroupAllowResp_GroupAllowRet GroupAllowResp::DATA_ERROR;
const GroupAllowResp_GroupAllowRet GroupAllowResp::SAME_USER;
const GroupAllowResp_GroupAllowRet GroupAllowResp::STATUS_ERROR;
const GroupAllowResp_GroupAllowRet GroupAllowResp::NO_USER;
const GroupAllowResp_GroupAllowRet GroupAllowResp::NO_POWER;
const GroupAllowResp_GroupAllowRet GroupAllowResp::USER_COUNT_MAX;
const GroupAllowResp_GroupAllowRet GroupAllowResp::NO_CONDITION;
const GroupAllowResp_GroupAllowRet GroupAllowResp::GroupAllowRet_MIN;
const GroupAllowResp_GroupAllowRet GroupAllowResp::GroupAllowRet_MAX;
const int GroupAllowResp::GroupAllowRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupAllowResp::kResultFieldNumber;
const int GroupAllowResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupAllowResp::GroupAllowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupAllowResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupAllowResp::GroupAllowResp(const GroupAllowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupAllowResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupAllowResp::~GroupAllowResp() {
  SharedDtor();
}

void GroupAllowResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupAllowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAllowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAllowResp_descriptor_;
}

const GroupAllowResp& GroupAllowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupAllowResp* GroupAllowResp::default_instance_ = NULL;

GroupAllowResp* GroupAllowResp::New() const {
  return new GroupAllowResp;
}

void GroupAllowResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupAllowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupAllowResp.GroupAllowRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupAllowResp_GroupAllowRet_IsValid(value)) {
            set_result(static_cast< ::GroupAllowResp_GroupAllowRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupAllowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupAllowResp.GroupAllowRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupAllowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupAllowResp.GroupAllowRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupAllowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupAllowResp.GroupAllowRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAllowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupAllowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupAllowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupAllowResp::MergeFrom(const GroupAllowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupAllowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAllowResp::CopyFrom(const GroupAllowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAllowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupAllowResp::Swap(GroupAllowResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupAllowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupAllowResp_descriptor_;
  metadata.reflection = GroupAllowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupExitGroupReq::kResultFieldNumber;
#endif  // !_MSC_VER

GroupExitGroupReq::GroupExitGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupExitGroupReq::InitAsDefaultInstance() {
}

GroupExitGroupReq::GroupExitGroupReq(const GroupExitGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupExitGroupReq::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupExitGroupReq::~GroupExitGroupReq() {
  SharedDtor();
}

void GroupExitGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupExitGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupExitGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupExitGroupReq_descriptor_;
}

const GroupExitGroupReq& GroupExitGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupExitGroupReq* GroupExitGroupReq::default_instance_ = NULL;

GroupExitGroupReq* GroupExitGroupReq::New() const {
  return new GroupExitGroupReq;
}

void GroupExitGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupExitGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupExitGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupExitGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupExitGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupExitGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupExitGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupExitGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupExitGroupReq::MergeFrom(const GroupExitGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupExitGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupExitGroupReq::CopyFrom(const GroupExitGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupExitGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupExitGroupReq::Swap(GroupExitGroupReq* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupExitGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupExitGroupReq_descriptor_;
  metadata.reflection = GroupExitGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupExitGroupResp::kResultFieldNumber;
const int GroupExitGroupResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupExitGroupResp::GroupExitGroupResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupExitGroupResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupExitGroupResp::GroupExitGroupResp(const GroupExitGroupResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupExitGroupResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupExitGroupResp::~GroupExitGroupResp() {
  SharedDtor();
}

void GroupExitGroupResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupExitGroupResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupExitGroupResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupExitGroupResp_descriptor_;
}

const GroupExitGroupResp& GroupExitGroupResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupExitGroupResp* GroupExitGroupResp::default_instance_ = NULL;

GroupExitGroupResp* GroupExitGroupResp::New() const {
  return new GroupExitGroupResp;
}

void GroupExitGroupResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupExitGroupResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupExitGroupResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupExitGroupResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupExitGroupResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupExitGroupResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupExitGroupResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupExitGroupResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupExitGroupResp::MergeFrom(const GroupExitGroupResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupExitGroupResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupExitGroupResp::CopyFrom(const GroupExitGroupResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupExitGroupResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupExitGroupResp::Swap(GroupExitGroupResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupExitGroupResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupExitGroupResp_descriptor_;
  metadata.reflection = GroupExitGroupResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupKickReq::kUserNameFieldNumber;
#endif  // !_MSC_VER

GroupKickReq::GroupKickReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupKickReq::InitAsDefaultInstance() {
}

GroupKickReq::GroupKickReq(const GroupKickReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupKickReq::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupKickReq::~GroupKickReq() {
  SharedDtor();
}

void GroupKickReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void GroupKickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupKickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupKickReq_descriptor_;
}

const GroupKickReq& GroupKickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupKickReq* GroupKickReq::default_instance_ = NULL;

GroupKickReq* GroupKickReq::New() const {
  return new GroupKickReq;
}

void GroupKickReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupKickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupKickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupKickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupKickReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupKickReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupKickReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupKickReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupKickReq::MergeFrom(const GroupKickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupKickReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupKickReq::CopyFrom(const GroupKickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupKickReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupKickReq::Swap(GroupKickReq* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupKickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupKickReq_descriptor_;
  metadata.reflection = GroupKickReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupKickResp_GroupKickRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupKickResp_GroupKickRet_descriptor_;
}
bool GroupKickResp_GroupKickRet_IsValid(int value) {
  switch(value) {
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupKickResp_GroupKickRet GroupKickResp::OK;
const GroupKickResp_GroupKickRet GroupKickResp::FAIL;
const GroupKickResp_GroupKickRet GroupKickResp::LOCKED;
const GroupKickResp_GroupKickRet GroupKickResp::NOUSER;
const GroupKickResp_GroupKickRet GroupKickResp::NOPOWER;
const GroupKickResp_GroupKickRet GroupKickResp::GroupKickRet_MIN;
const GroupKickResp_GroupKickRet GroupKickResp::GroupKickRet_MAX;
const int GroupKickResp::GroupKickRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupKickResp::kResultFieldNumber;
const int GroupKickResp::kUserSyncFieldNumber;
const int GroupKickResp::kReqFieldNumber;
#endif  // !_MSC_VER

GroupKickResp::GroupKickResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupKickResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  req_ = const_cast< ::GroupKickReq*>(&::GroupKickReq::default_instance());
}

GroupKickResp::GroupKickResp(const GroupKickResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupKickResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupKickResp::~GroupKickResp() {
  SharedDtor();
}

void GroupKickResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete req_;
  }
}

void GroupKickResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupKickResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupKickResp_descriptor_;
}

const GroupKickResp& GroupKickResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupKickResp* GroupKickResp::default_instance_ = NULL;

GroupKickResp* GroupKickResp::New() const {
  return new GroupKickResp;
}

void GroupKickResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_req()) {
      if (req_ != NULL) req_->::GroupKickReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupKickResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupKickResp.GroupKickRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupKickResp_GroupKickRet_IsValid(value)) {
            set_result(static_cast< ::GroupKickResp_GroupKickRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req;
        break;
      }

      // optional .GroupKickReq req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupKickResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupKickResp.GroupKickRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .GroupKickReq req = 3;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupKickResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupKickResp.GroupKickRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .GroupKickReq req = 3;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupKickResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupKickResp.GroupKickRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .GroupKickReq req = 3;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupKickResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupKickResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupKickResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupKickResp::MergeFrom(const GroupKickResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_req()) {
      mutable_req()->::GroupKickReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupKickResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupKickResp::CopyFrom(const GroupKickResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupKickResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void GroupKickResp::Swap(GroupKickResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupKickResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupKickResp_descriptor_;
  metadata.reflection = GroupKickResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupBroadcastReq::kBlurbFieldNumber;
const int GroupBroadcastReq::kBroadcastFieldNumber;
#endif  // !_MSC_VER

GroupBroadcastReq::GroupBroadcastReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupBroadcastReq::InitAsDefaultInstance() {
}

GroupBroadcastReq::GroupBroadcastReq(const GroupBroadcastReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupBroadcastReq::SharedCtor() {
  _cached_size_ = 0;
  blurb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  broadcast_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupBroadcastReq::~GroupBroadcastReq() {
  SharedDtor();
}

void GroupBroadcastReq::SharedDtor() {
  if (blurb_ != &::google::protobuf::internal::kEmptyString) {
    delete blurb_;
  }
  if (broadcast_ != &::google::protobuf::internal::kEmptyString) {
    delete broadcast_;
  }
  if (this != default_instance_) {
  }
}

void GroupBroadcastReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupBroadcastReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupBroadcastReq_descriptor_;
}

const GroupBroadcastReq& GroupBroadcastReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupBroadcastReq* GroupBroadcastReq::default_instance_ = NULL;

GroupBroadcastReq* GroupBroadcastReq::New() const {
  return new GroupBroadcastReq;
}

void GroupBroadcastReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_blurb()) {
      if (blurb_ != &::google::protobuf::internal::kEmptyString) {
        blurb_->clear();
      }
    }
    if (has_broadcast()) {
      if (broadcast_ != &::google::protobuf::internal::kEmptyString) {
        broadcast_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupBroadcastReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string blurb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blurb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->blurb().data(), this->blurb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_broadcast;
        break;
      }

      // optional string broadcast = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broadcast()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->broadcast().data(), this->broadcast().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupBroadcastReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string blurb = 1;
  if (has_blurb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blurb().data(), this->blurb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->blurb(), output);
  }

  // optional string broadcast = 2;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast().data(), this->broadcast().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->broadcast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupBroadcastReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string blurb = 1;
  if (has_blurb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blurb().data(), this->blurb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->blurb(), target);
  }

  // optional string broadcast = 2;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->broadcast().data(), this->broadcast().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->broadcast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupBroadcastReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string blurb = 1;
    if (has_blurb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blurb());
    }

    // optional string broadcast = 2;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->broadcast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupBroadcastReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupBroadcastReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupBroadcastReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupBroadcastReq::MergeFrom(const GroupBroadcastReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blurb()) {
      set_blurb(from.blurb());
    }
    if (from.has_broadcast()) {
      set_broadcast(from.broadcast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupBroadcastReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBroadcastReq::CopyFrom(const GroupBroadcastReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBroadcastReq::IsInitialized() const {

  return true;
}

void GroupBroadcastReq::Swap(GroupBroadcastReq* other) {
  if (other != this) {
    std::swap(blurb_, other->blurb_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupBroadcastReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupBroadcastReq_descriptor_;
  metadata.reflection = GroupBroadcastReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupBroadcastResp_GroupBroadcastRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupBroadcastResp_GroupBroadcastRet_descriptor_;
}
bool GroupBroadcastResp_GroupBroadcastRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupBroadcastResp_GroupBroadcastRet GroupBroadcastResp::OK;
const GroupBroadcastResp_GroupBroadcastRet GroupBroadcastResp::FAIL;
const GroupBroadcastResp_GroupBroadcastRet GroupBroadcastResp::DIRTY;
const GroupBroadcastResp_GroupBroadcastRet GroupBroadcastResp::NOUSER;
const GroupBroadcastResp_GroupBroadcastRet GroupBroadcastResp::NOPOWER;
const GroupBroadcastResp_GroupBroadcastRet GroupBroadcastResp::NOTYPE;
const GroupBroadcastResp_GroupBroadcastRet GroupBroadcastResp::GroupBroadcastRet_MIN;
const GroupBroadcastResp_GroupBroadcastRet GroupBroadcastResp::GroupBroadcastRet_MAX;
const int GroupBroadcastResp::GroupBroadcastRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupBroadcastResp::kResultFieldNumber;
const int GroupBroadcastResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupBroadcastResp::GroupBroadcastResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupBroadcastResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupBroadcastResp::GroupBroadcastResp(const GroupBroadcastResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupBroadcastResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupBroadcastResp::~GroupBroadcastResp() {
  SharedDtor();
}

void GroupBroadcastResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupBroadcastResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupBroadcastResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupBroadcastResp_descriptor_;
}

const GroupBroadcastResp& GroupBroadcastResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupBroadcastResp* GroupBroadcastResp::default_instance_ = NULL;

GroupBroadcastResp* GroupBroadcastResp::New() const {
  return new GroupBroadcastResp;
}

void GroupBroadcastResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupBroadcastResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupBroadcastResp.GroupBroadcastRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupBroadcastResp_GroupBroadcastRet_IsValid(value)) {
            set_result(static_cast< ::GroupBroadcastResp_GroupBroadcastRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupBroadcastResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupBroadcastResp.GroupBroadcastRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupBroadcastResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupBroadcastResp.GroupBroadcastRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupBroadcastResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupBroadcastResp.GroupBroadcastRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupBroadcastResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupBroadcastResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupBroadcastResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupBroadcastResp::MergeFrom(const GroupBroadcastResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupBroadcastResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBroadcastResp::CopyFrom(const GroupBroadcastResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBroadcastResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupBroadcastResp::Swap(GroupBroadcastResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupBroadcastResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupBroadcastResp_descriptor_;
  metadata.reflection = GroupBroadcastResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupJobReq::kUserNameFieldNumber;
const int GroupJobReq::kJobFieldNumber;
#endif  // !_MSC_VER

GroupJobReq::GroupJobReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupJobReq::InitAsDefaultInstance() {
}

GroupJobReq::GroupJobReq(const GroupJobReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupJobReq::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupJobReq::~GroupJobReq() {
  SharedDtor();
}

void GroupJobReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void GroupJobReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupJobReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJobReq_descriptor_;
}

const GroupJobReq& GroupJobReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupJobReq* GroupJobReq::default_instance_ = NULL;

GroupJobReq* GroupJobReq::New() const {
  return new GroupJobReq;
}

void GroupJobReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    job_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupJobReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // required int32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupJobReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupJobReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required int32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupJobReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupJobReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupJobReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupJobReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupJobReq::MergeFrom(const GroupJobReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupJobReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupJobReq::CopyFrom(const GroupJobReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupJobReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupJobReq::Swap(GroupJobReq* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupJobReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupJobReq_descriptor_;
  metadata.reflection = GroupJobReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupJobResp_GroupJobRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJobResp_GroupJobRet_descriptor_;
}
bool GroupJobResp_GroupJobRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupJobResp_GroupJobRet GroupJobResp::OK;
const GroupJobResp_GroupJobRet GroupJobResp::FAIL;
const GroupJobResp_GroupJobRet GroupJobResp::NOUSER;
const GroupJobResp_GroupJobRet GroupJobResp::NOPOWER;
const GroupJobResp_GroupJobRet GroupJobResp::ERROR_JOB;
const GroupJobResp_GroupJobRet GroupJobResp::FULL_MANAGER;
const GroupJobResp_GroupJobRet GroupJobResp::SAME_JOB;
const GroupJobResp_GroupJobRet GroupJobResp::GroupJobRet_MIN;
const GroupJobResp_GroupJobRet GroupJobResp::GroupJobRet_MAX;
const int GroupJobResp::GroupJobRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupJobResp::kResultFieldNumber;
const int GroupJobResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupJobResp::GroupJobResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupJobResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupJobResp::GroupJobResp(const GroupJobResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupJobResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupJobResp::~GroupJobResp() {
  SharedDtor();
}

void GroupJobResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupJobResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupJobResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupJobResp_descriptor_;
}

const GroupJobResp& GroupJobResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupJobResp* GroupJobResp::default_instance_ = NULL;

GroupJobResp* GroupJobResp::New() const {
  return new GroupJobResp;
}

void GroupJobResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupJobResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupJobResp.GroupJobRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupJobResp_GroupJobRet_IsValid(value)) {
            set_result(static_cast< ::GroupJobResp_GroupJobRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupJobResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupJobResp.GroupJobRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupJobResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupJobResp.GroupJobRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupJobResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupJobResp.GroupJobRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupJobResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupJobResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupJobResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupJobResp::MergeFrom(const GroupJobResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupJobResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupJobResp::CopyFrom(const GroupJobResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupJobResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupJobResp::Swap(GroupJobResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupJobResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupJobResp_descriptor_;
  metadata.reflection = GroupJobResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupDisbandResp_GroupDisbandRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupDisbandResp_GroupDisbandRet_descriptor_;
}
bool GroupDisbandResp_GroupDisbandRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupDisbandResp_GroupDisbandRet GroupDisbandResp::OK;
const GroupDisbandResp_GroupDisbandRet GroupDisbandResp::FAIL;
const GroupDisbandResp_GroupDisbandRet GroupDisbandResp::LOCKED;
const GroupDisbandResp_GroupDisbandRet GroupDisbandResp::NOPOWER;
const GroupDisbandResp_GroupDisbandRet GroupDisbandResp::ERROR;
const GroupDisbandResp_GroupDisbandRet GroupDisbandResp::GroupDisbandRet_MIN;
const GroupDisbandResp_GroupDisbandRet GroupDisbandResp::GroupDisbandRet_MAX;
const int GroupDisbandResp::GroupDisbandRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupDisbandResp::kResultFieldNumber;
const int GroupDisbandResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupDisbandResp::GroupDisbandResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupDisbandResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupDisbandResp::GroupDisbandResp(const GroupDisbandResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupDisbandResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupDisbandResp::~GroupDisbandResp() {
  SharedDtor();
}

void GroupDisbandResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupDisbandResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupDisbandResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupDisbandResp_descriptor_;
}

const GroupDisbandResp& GroupDisbandResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupDisbandResp* GroupDisbandResp::default_instance_ = NULL;

GroupDisbandResp* GroupDisbandResp::New() const {
  return new GroupDisbandResp;
}

void GroupDisbandResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupDisbandResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupDisbandResp.GroupDisbandRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupDisbandResp_GroupDisbandRet_IsValid(value)) {
            set_result(static_cast< ::GroupDisbandResp_GroupDisbandRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupDisbandResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupDisbandResp.GroupDisbandRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupDisbandResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupDisbandResp.GroupDisbandRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupDisbandResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupDisbandResp.GroupDisbandRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupDisbandResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupDisbandResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupDisbandResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupDisbandResp::MergeFrom(const GroupDisbandResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupDisbandResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDisbandResp::CopyFrom(const GroupDisbandResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDisbandResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupDisbandResp::Swap(GroupDisbandResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupDisbandResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupDisbandResp_descriptor_;
  metadata.reflection = GroupDisbandResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupSearchReq::kGroupidFieldNumber;
const int GroupSearchReq::kPageFieldNumber;
const int GroupSearchReq::kGroupNameFieldNumber;
#endif  // !_MSC_VER

GroupSearchReq::GroupSearchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupSearchReq::InitAsDefaultInstance() {
}

GroupSearchReq::GroupSearchReq(const GroupSearchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupSearchReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupSearchReq::~GroupSearchReq() {
  SharedDtor();
}

void GroupSearchReq::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  if (this != default_instance_) {
  }
}

void GroupSearchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupSearchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupSearchReq_descriptor_;
}

const GroupSearchReq& GroupSearchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupSearchReq* GroupSearchReq::default_instance_ = NULL;

GroupSearchReq* GroupSearchReq::New() const {
  return new GroupSearchReq;
}

void GroupSearchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    page_ = 0;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupSearchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // optional int32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // optional string group_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupSearchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }

  // optional int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupSearchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // optional int32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupSearchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

    // optional string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupSearchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupSearchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupSearchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupSearchReq::MergeFrom(const GroupSearchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupSearchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupSearchReq::CopyFrom(const GroupSearchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSearchReq::IsInitialized() const {

  return true;
}

void GroupSearchReq::Swap(GroupSearchReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(page_, other->page_);
    std::swap(group_name_, other->group_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupSearchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupSearchReq_descriptor_;
  metadata.reflection = GroupSearchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupSearchResp::kResultFieldNumber;
const int GroupSearchResp::kUserSyncFieldNumber;
const int GroupSearchResp::kGroupListFieldNumber;
const int GroupSearchResp::kTotalPageFieldNumber;
#endif  // !_MSC_VER

GroupSearchResp::GroupSearchResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupSearchResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupSearchResp::GroupSearchResp(const GroupSearchResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupSearchResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  total_page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupSearchResp::~GroupSearchResp() {
  SharedDtor();
}

void GroupSearchResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupSearchResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupSearchResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupSearchResp_descriptor_;
}

const GroupSearchResp& GroupSearchResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupSearchResp* GroupSearchResp::default_instance_ = NULL;

GroupSearchResp* GroupSearchResp::New() const {
  return new GroupSearchResp;
}

void GroupSearchResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    total_page_ = 0;
  }
  group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupSearchResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_list;
        break;
      }

      // repeated .GroupMainData group_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_list;
        if (input->ExpectTag(32)) goto parse_total_page;
        break;
      }

      // optional int32 total_page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_page_)));
          set_has_total_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupSearchResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .GroupMainData group_list = 3;
  for (int i = 0; i < this->group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group_list(i), output);
  }

  // optional int32 total_page = 4;
  if (has_total_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupSearchResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .GroupMainData group_list = 3;
  for (int i = 0; i < this->group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group_list(i), target);
  }

  // optional int32 total_page = 4;
  if (has_total_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupSearchResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 total_page = 4;
    if (has_total_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_page());
    }

  }
  // repeated .GroupMainData group_list = 3;
  total_size += 1 * this->group_list_size();
  for (int i = 0; i < this->group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupSearchResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupSearchResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupSearchResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupSearchResp::MergeFrom(const GroupSearchResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_list_.MergeFrom(from.group_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_total_page()) {
      set_total_page(from.total_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupSearchResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupSearchResp::CopyFrom(const GroupSearchResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSearchResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < group_list_size(); i++) {
    if (!this->group_list(i).IsInitialized()) return false;
  }
  return true;
}

void GroupSearchResp::Swap(GroupSearchResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    group_list_.Swap(&other->group_list_);
    std::swap(total_page_, other->total_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupSearchResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupSearchResp_descriptor_;
  metadata.reflection = GroupSearchResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupContributeReq::kTypeFieldNumber;
const int GroupContributeReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

GroupContributeReq::GroupContributeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupContributeReq::InitAsDefaultInstance() {
}

GroupContributeReq::GroupContributeReq(const GroupContributeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupContributeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupContributeReq::~GroupContributeReq() {
  SharedDtor();
}

void GroupContributeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupContributeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupContributeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupContributeReq_descriptor_;
}

const GroupContributeReq& GroupContributeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupContributeReq* GroupContributeReq::default_instance_ = NULL;

GroupContributeReq* GroupContributeReq::New() const {
  return new GroupContributeReq;
}

void GroupContributeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupContributeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tech_id;
        break;
      }

      // required int32 tech_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tech_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupContributeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 tech_id = 2;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tech_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupContributeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 tech_id = 2;
  if (has_tech_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tech_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupContributeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 tech_id = 2;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupContributeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupContributeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupContributeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupContributeReq::MergeFrom(const GroupContributeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupContributeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupContributeReq::CopyFrom(const GroupContributeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupContributeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupContributeReq::Swap(GroupContributeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupContributeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupContributeReq_descriptor_;
  metadata.reflection = GroupContributeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupContributeResp::kResultFieldNumber;
const int GroupContributeResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupContributeResp::GroupContributeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupContributeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupContributeResp::GroupContributeResp(const GroupContributeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupContributeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupContributeResp::~GroupContributeResp() {
  SharedDtor();
}

void GroupContributeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupContributeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupContributeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupContributeResp_descriptor_;
}

const GroupContributeResp& GroupContributeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupContributeResp* GroupContributeResp::default_instance_ = NULL;

GroupContributeResp* GroupContributeResp::New() const {
  return new GroupContributeResp;
}

void GroupContributeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupContributeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupContributeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupContributeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupContributeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupContributeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupContributeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupContributeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupContributeResp::MergeFrom(const GroupContributeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupContributeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupContributeResp::CopyFrom(const GroupContributeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupContributeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupContributeResp::Swap(GroupContributeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupContributeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupContributeResp_descriptor_;
  metadata.reflection = GroupContributeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupContributeCDResp::kResultFieldNumber;
const int GroupContributeCDResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupContributeCDResp::GroupContributeCDResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupContributeCDResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupContributeCDResp::GroupContributeCDResp(const GroupContributeCDResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupContributeCDResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupContributeCDResp::~GroupContributeCDResp() {
  SharedDtor();
}

void GroupContributeCDResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupContributeCDResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupContributeCDResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupContributeCDResp_descriptor_;
}

const GroupContributeCDResp& GroupContributeCDResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupContributeCDResp* GroupContributeCDResp::default_instance_ = NULL;

GroupContributeCDResp* GroupContributeCDResp::New() const {
  return new GroupContributeCDResp;
}

void GroupContributeCDResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupContributeCDResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupContributeCDResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupContributeCDResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupContributeCDResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupContributeCDResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupContributeCDResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupContributeCDResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupContributeCDResp::MergeFrom(const GroupContributeCDResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupContributeCDResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupContributeCDResp::CopyFrom(const GroupContributeCDResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupContributeCDResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupContributeCDResp::Swap(GroupContributeCDResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupContributeCDResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupContributeCDResp_descriptor_;
  metadata.reflection = GroupContributeCDResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupTechLevelupReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

GroupTechLevelupReq::GroupTechLevelupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupTechLevelupReq::InitAsDefaultInstance() {
}

GroupTechLevelupReq::GroupTechLevelupReq(const GroupTechLevelupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupTechLevelupReq::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupTechLevelupReq::~GroupTechLevelupReq() {
  SharedDtor();
}

void GroupTechLevelupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupTechLevelupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupTechLevelupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupTechLevelupReq_descriptor_;
}

const GroupTechLevelupReq& GroupTechLevelupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupTechLevelupReq* GroupTechLevelupReq::default_instance_ = NULL;

GroupTechLevelupReq* GroupTechLevelupReq::New() const {
  return new GroupTechLevelupReq;
}

void GroupTechLevelupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupTechLevelupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupTechLevelupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupTechLevelupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tech_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupTechLevelupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupTechLevelupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupTechLevelupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupTechLevelupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupTechLevelupReq::MergeFrom(const GroupTechLevelupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupTechLevelupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupTechLevelupReq::CopyFrom(const GroupTechLevelupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupTechLevelupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupTechLevelupReq::Swap(GroupTechLevelupReq* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupTechLevelupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupTechLevelupReq_descriptor_;
  metadata.reflection = GroupTechLevelupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupTechLevelupResp::kResultFieldNumber;
const int GroupTechLevelupResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupTechLevelupResp::GroupTechLevelupResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupTechLevelupResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupTechLevelupResp::GroupTechLevelupResp(const GroupTechLevelupResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupTechLevelupResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupTechLevelupResp::~GroupTechLevelupResp() {
  SharedDtor();
}

void GroupTechLevelupResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupTechLevelupResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupTechLevelupResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupTechLevelupResp_descriptor_;
}

const GroupTechLevelupResp& GroupTechLevelupResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupTechLevelupResp* GroupTechLevelupResp::default_instance_ = NULL;

GroupTechLevelupResp* GroupTechLevelupResp::New() const {
  return new GroupTechLevelupResp;
}

void GroupTechLevelupResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupTechLevelupResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupTechLevelupResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupTechLevelupResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupTechLevelupResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupTechLevelupResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupTechLevelupResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupTechLevelupResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupTechLevelupResp::MergeFrom(const GroupTechLevelupResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupTechLevelupResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupTechLevelupResp::CopyFrom(const GroupTechLevelupResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupTechLevelupResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupTechLevelupResp::Swap(GroupTechLevelupResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupTechLevelupResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupTechLevelupResp_descriptor_;
  metadata.reflection = GroupTechLevelupResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGetTechReq::kTechIdFieldNumber;
#endif  // !_MSC_VER

GroupGetTechReq::GroupGetTechReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGetTechReq::InitAsDefaultInstance() {
}

GroupGetTechReq::GroupGetTechReq(const GroupGetTechReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGetTechReq::SharedCtor() {
  _cached_size_ = 0;
  tech_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGetTechReq::~GroupGetTechReq() {
  SharedDtor();
}

void GroupGetTechReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGetTechReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGetTechReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGetTechReq_descriptor_;
}

const GroupGetTechReq& GroupGetTechReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupGetTechReq* GroupGetTechReq::default_instance_ = NULL;

GroupGetTechReq* GroupGetTechReq::New() const {
  return new GroupGetTechReq;
}

void GroupGetTechReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tech_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGetTechReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tech_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_id_)));
          set_has_tech_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGetTechReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tech_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGetTechReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tech_id = 1;
  if (has_tech_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tech_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGetTechReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tech_id = 1;
    if (has_tech_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tech_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGetTechReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGetTechReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGetTechReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGetTechReq::MergeFrom(const GroupGetTechReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tech_id()) {
      set_tech_id(from.tech_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGetTechReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGetTechReq::CopyFrom(const GroupGetTechReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGetTechReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupGetTechReq::Swap(GroupGetTechReq* other) {
  if (other != this) {
    std::swap(tech_id_, other->tech_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGetTechReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGetTechReq_descriptor_;
  metadata.reflection = GroupGetTechReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGetTechResp::kResultFieldNumber;
const int GroupGetTechResp::kUserSyncFieldNumber;
const int GroupGetTechResp::kGroupTechFieldNumber;
#endif  // !_MSC_VER

GroupGetTechResp::GroupGetTechResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGetTechResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  group_tech_ = const_cast< ::GroupTechnology*>(&::GroupTechnology::default_instance());
}

GroupGetTechResp::GroupGetTechResp(const GroupGetTechResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGetTechResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  group_tech_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGetTechResp::~GroupGetTechResp() {
  SharedDtor();
}

void GroupGetTechResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete group_tech_;
  }
}

void GroupGetTechResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGetTechResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGetTechResp_descriptor_;
}

const GroupGetTechResp& GroupGetTechResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupGetTechResp* GroupGetTechResp::default_instance_ = NULL;

GroupGetTechResp* GroupGetTechResp::New() const {
  return new GroupGetTechResp;
}

void GroupGetTechResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_group_tech()) {
      if (group_tech_ != NULL) group_tech_->::GroupTechnology::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGetTechResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_tech;
        break;
      }

      // optional .GroupTechnology group_tech = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_tech:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group_tech()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGetTechResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .GroupTechnology group_tech = 3;
  if (has_group_tech()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->group_tech(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGetTechResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .GroupTechnology group_tech = 3;
  if (has_group_tech()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->group_tech(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGetTechResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .GroupTechnology group_tech = 3;
    if (has_group_tech()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_tech());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGetTechResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGetTechResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGetTechResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGetTechResp::MergeFrom(const GroupGetTechResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_group_tech()) {
      mutable_group_tech()->::GroupTechnology::MergeFrom(from.group_tech());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGetTechResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGetTechResp::CopyFrom(const GroupGetTechResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGetTechResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_group_tech()) {
    if (!this->group_tech().IsInitialized()) return false;
  }
  return true;
}

void GroupGetTechResp::Swap(GroupGetTechResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(group_tech_, other->group_tech_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGetTechResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGetTechResp_descriptor_;
  metadata.reflection = GroupGetTechResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupLevelupResp::kResultFieldNumber;
const int GroupLevelupResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupLevelupResp::GroupLevelupResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupLevelupResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupLevelupResp::GroupLevelupResp(const GroupLevelupResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupLevelupResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupLevelupResp::~GroupLevelupResp() {
  SharedDtor();
}

void GroupLevelupResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupLevelupResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupLevelupResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupLevelupResp_descriptor_;
}

const GroupLevelupResp& GroupLevelupResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupLevelupResp* GroupLevelupResp::default_instance_ = NULL;

GroupLevelupResp* GroupLevelupResp::New() const {
  return new GroupLevelupResp;
}

void GroupLevelupResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupLevelupResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupLevelupResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupLevelupResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupLevelupResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupLevelupResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupLevelupResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupLevelupResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupLevelupResp::MergeFrom(const GroupLevelupResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupLevelupResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupLevelupResp::CopyFrom(const GroupLevelupResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupLevelupResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupLevelupResp::Swap(GroupLevelupResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupLevelupResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupLevelupResp_descriptor_;
  metadata.reflection = GroupLevelupResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupPVEGetInfoReq::kGroupBossIdFieldNumber;
#endif  // !_MSC_VER

GroupPVEGetInfoReq::GroupPVEGetInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVEGetInfoReq::InitAsDefaultInstance() {
}

GroupPVEGetInfoReq::GroupPVEGetInfoReq(const GroupPVEGetInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVEGetInfoReq::SharedCtor() {
  _cached_size_ = 0;
  group_boss_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVEGetInfoReq::~GroupPVEGetInfoReq() {
  SharedDtor();
}

void GroupPVEGetInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupPVEGetInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVEGetInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEGetInfoReq_descriptor_;
}

const GroupPVEGetInfoReq& GroupPVEGetInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVEGetInfoReq* GroupPVEGetInfoReq::default_instance_ = NULL;

GroupPVEGetInfoReq* GroupPVEGetInfoReq::New() const {
  return new GroupPVEGetInfoReq;
}

void GroupPVEGetInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_boss_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVEGetInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_boss_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_boss_id_)));
          set_has_group_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVEGetInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_boss_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVEGetInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_boss_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVEGetInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_boss_id = 1;
    if (has_group_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_boss_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVEGetInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVEGetInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVEGetInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVEGetInfoReq::MergeFrom(const GroupPVEGetInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_boss_id()) {
      set_group_boss_id(from.group_boss_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVEGetInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVEGetInfoReq::CopyFrom(const GroupPVEGetInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVEGetInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupPVEGetInfoReq::Swap(GroupPVEGetInfoReq* other) {
  if (other != this) {
    std::swap(group_boss_id_, other->group_boss_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVEGetInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVEGetInfoReq_descriptor_;
  metadata.reflection = GroupPVEGetInfoReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupPVEGetInfoResp_GroupPVEGetInfoRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEGetInfoResp_GroupPVEGetInfoRet_descriptor_;
}
bool GroupPVEGetInfoResp_GroupPVEGetInfoRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupPVEGetInfoResp_GroupPVEGetInfoRet GroupPVEGetInfoResp::OK;
const GroupPVEGetInfoResp_GroupPVEGetInfoRet GroupPVEGetInfoResp::FAIL;
const GroupPVEGetInfoResp_GroupPVEGetInfoRet GroupPVEGetInfoResp::NO_GROUP;
const GroupPVEGetInfoResp_GroupPVEGetInfoRet GroupPVEGetInfoResp::GroupPVEGetInfoRet_MIN;
const GroupPVEGetInfoResp_GroupPVEGetInfoRet GroupPVEGetInfoResp::GroupPVEGetInfoRet_MAX;
const int GroupPVEGetInfoResp::GroupPVEGetInfoRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupPVEGetInfoResp::kResultFieldNumber;
const int GroupPVEGetInfoResp::kUserSyncFieldNumber;
const int GroupPVEGetInfoResp::kInfoFieldNumber;
#endif  // !_MSC_VER

GroupPVEGetInfoResp::GroupPVEGetInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVEGetInfoResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  info_ = const_cast< ::GroupPVECheckpoint*>(&::GroupPVECheckpoint::default_instance());
}

GroupPVEGetInfoResp::GroupPVEGetInfoResp(const GroupPVEGetInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVEGetInfoResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVEGetInfoResp::~GroupPVEGetInfoResp() {
  SharedDtor();
}

void GroupPVEGetInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete info_;
  }
}

void GroupPVEGetInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVEGetInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEGetInfoResp_descriptor_;
}

const GroupPVEGetInfoResp& GroupPVEGetInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVEGetInfoResp* GroupPVEGetInfoResp::default_instance_ = NULL;

GroupPVEGetInfoResp* GroupPVEGetInfoResp::New() const {
  return new GroupPVEGetInfoResp;
}

void GroupPVEGetInfoResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::GroupPVECheckpoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVEGetInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupPVEGetInfoResp.GroupPVEGetInfoRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupPVEGetInfoResp_GroupPVEGetInfoRet_IsValid(value)) {
            set_result(static_cast< ::GroupPVEGetInfoResp_GroupPVEGetInfoRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .GroupPVECheckpoint info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVEGetInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupPVEGetInfoResp.GroupPVEGetInfoRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .GroupPVECheckpoint info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVEGetInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupPVEGetInfoResp.GroupPVEGetInfoRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .GroupPVECheckpoint info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVEGetInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupPVEGetInfoResp.GroupPVEGetInfoRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .GroupPVECheckpoint info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVEGetInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVEGetInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVEGetInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVEGetInfoResp::MergeFrom(const GroupPVEGetInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_info()) {
      mutable_info()->::GroupPVECheckpoint::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVEGetInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVEGetInfoResp::CopyFrom(const GroupPVEGetInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVEGetInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GroupPVEGetInfoResp::Swap(GroupPVEGetInfoResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVEGetInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVEGetInfoResp_descriptor_;
  metadata.reflection = GroupPVEGetInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupPVEReq::kGroupBossIdFieldNumber;
#endif  // !_MSC_VER

GroupPVEReq::GroupPVEReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVEReq::InitAsDefaultInstance() {
}

GroupPVEReq::GroupPVEReq(const GroupPVEReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVEReq::SharedCtor() {
  _cached_size_ = 0;
  group_boss_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVEReq::~GroupPVEReq() {
  SharedDtor();
}

void GroupPVEReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupPVEReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVEReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEReq_descriptor_;
}

const GroupPVEReq& GroupPVEReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVEReq* GroupPVEReq::default_instance_ = NULL;

GroupPVEReq* GroupPVEReq::New() const {
  return new GroupPVEReq;
}

void GroupPVEReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_boss_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVEReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_boss_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_boss_id_)));
          set_has_group_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVEReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_boss_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVEReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_boss_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVEReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_boss_id = 1;
    if (has_group_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_boss_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVEReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVEReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVEReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVEReq::MergeFrom(const GroupPVEReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_boss_id()) {
      set_group_boss_id(from.group_boss_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVEReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVEReq::CopyFrom(const GroupPVEReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVEReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupPVEReq::Swap(GroupPVEReq* other) {
  if (other != this) {
    std::swap(group_boss_id_, other->group_boss_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVEReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVEReq_descriptor_;
  metadata.reflection = GroupPVEReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupPVEResp_GroupPVERet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEResp_GroupPVERet_descriptor_;
}
bool GroupPVEResp_GroupPVERet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupPVEResp_GroupPVERet GroupPVEResp::OK;
const GroupPVEResp_GroupPVERet GroupPVEResp::FAIL;
const GroupPVEResp_GroupPVERet GroupPVEResp::GROUP_LEVEL;
const GroupPVEResp_GroupPVERet GroupPVEResp::TIME_OUT;
const GroupPVEResp_GroupPVERet GroupPVEResp::WDAY;
const GroupPVEResp_GroupPVERet GroupPVEResp::CHALLENGE_TIMES;
const GroupPVEResp_GroupPVERet GroupPVEResp::NO_DURABEL;
const GroupPVEResp_GroupPVERet GroupPVEResp::SHIP_FIXING;
const GroupPVEResp_GroupPVERet GroupPVEResp::NO_STRENGTH;
const GroupPVEResp_GroupPVERet GroupPVEResp::DEAD;
const GroupPVEResp_GroupPVERet GroupPVEResp::NO_GROUP;
const GroupPVEResp_GroupPVERet GroupPVEResp::NO_DATA;
const GroupPVEResp_GroupPVERet GroupPVEResp::SHIP_OUTING;
const GroupPVEResp_GroupPVERet GroupPVEResp::GroupPVERet_MIN;
const GroupPVEResp_GroupPVERet GroupPVEResp::GroupPVERet_MAX;
const int GroupPVEResp::GroupPVERet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupPVEResp::kResultFieldNumber;
const int GroupPVEResp::kUserSyncFieldNumber;
const int GroupPVEResp::kAttackListFieldNumber;
const int GroupPVEResp::kHurterListFieldNumber;
const int GroupPVEResp::kHurterHpListFieldNumber;
const int GroupPVEResp::kGroupBossIdFieldNumber;
#endif  // !_MSC_VER

GroupPVEResp::GroupPVEResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVEResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupPVEResp::GroupPVEResp(const GroupPVEResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVEResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  group_boss_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVEResp::~GroupPVEResp() {
  SharedDtor();
}

void GroupPVEResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupPVEResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVEResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEResp_descriptor_;
}

const GroupPVEResp& GroupPVEResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVEResp* GroupPVEResp::default_instance_ = NULL;

GroupPVEResp* GroupPVEResp::New() const {
  return new GroupPVEResp;
}

void GroupPVEResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    group_boss_id_ = 0;
  }
  attack_list_.Clear();
  hurter_list_.Clear();
  hurter_hp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVEResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupPVEResp.GroupPVERet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupPVEResp_GroupPVERet_IsValid(value)) {
            set_result(static_cast< ::GroupPVEResp_GroupPVERet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attack_list;
        break;
      }

      // repeated .AirShip attack_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attack_list;
        if (input->ExpectTag(34)) goto parse_hurter_list;
        break;
      }

      // repeated .AirShip hurter_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hurter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hurter_list;
        if (input->ExpectTag(40)) goto parse_hurter_hp_list;
        break;
      }

      // repeated int32 hurter_hp_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurter_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_hurter_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hurter_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hurter_hp_list;
        if (input->ExpectTag(48)) goto parse_group_boss_id;
        break;
      }

      // optional int32 group_boss_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_boss_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_boss_id_)));
          set_has_group_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVEResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupPVEResp.GroupPVERet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .AirShip attack_list = 3;
  for (int i = 0; i < this->attack_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attack_list(i), output);
  }

  // repeated .AirShip hurter_list = 4;
  for (int i = 0; i < this->hurter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hurter_list(i), output);
  }

  // repeated int32 hurter_hp_list = 5;
  for (int i = 0; i < this->hurter_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->hurter_hp_list(i), output);
  }

  // optional int32 group_boss_id = 6;
  if (has_group_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->group_boss_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVEResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupPVEResp.GroupPVERet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .AirShip attack_list = 3;
  for (int i = 0; i < this->attack_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attack_list(i), target);
  }

  // repeated .AirShip hurter_list = 4;
  for (int i = 0; i < this->hurter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hurter_list(i), target);
  }

  // repeated int32 hurter_hp_list = 5;
  for (int i = 0; i < this->hurter_hp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->hurter_hp_list(i), target);
  }

  // optional int32 group_boss_id = 6;
  if (has_group_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->group_boss_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVEResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupPVEResp.GroupPVERet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 group_boss_id = 6;
    if (has_group_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_boss_id());
    }

  }
  // repeated .AirShip attack_list = 3;
  total_size += 1 * this->attack_list_size();
  for (int i = 0; i < this->attack_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_list(i));
  }

  // repeated .AirShip hurter_list = 4;
  total_size += 1 * this->hurter_list_size();
  for (int i = 0; i < this->hurter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hurter_list(i));
  }

  // repeated int32 hurter_hp_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hurter_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hurter_hp_list(i));
    }
    total_size += 1 * this->hurter_hp_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVEResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVEResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVEResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVEResp::MergeFrom(const GroupPVEResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_list_.MergeFrom(from.attack_list_);
  hurter_list_.MergeFrom(from.hurter_list_);
  hurter_hp_list_.MergeFrom(from.hurter_hp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_group_boss_id()) {
      set_group_boss_id(from.group_boss_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVEResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVEResp::CopyFrom(const GroupPVEResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVEResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < attack_list_size(); i++) {
    if (!this->attack_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hurter_list_size(); i++) {
    if (!this->hurter_list(i).IsInitialized()) return false;
  }
  return true;
}

void GroupPVEResp::Swap(GroupPVEResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    attack_list_.Swap(&other->attack_list_);
    hurter_list_.Swap(&other->hurter_list_);
    hurter_hp_list_.Swap(&other->hurter_hp_list_);
    std::swap(group_boss_id_, other->group_boss_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVEResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVEResp_descriptor_;
  metadata.reflection = GroupPVEResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupPVEOKReq::kGroupBossIdFieldNumber;
const int GroupPVEOKReq::kResultFieldNumber;
const int GroupPVEOKReq::kHurterHpListFieldNumber;
#endif  // !_MSC_VER

GroupPVEOKReq::GroupPVEOKReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVEOKReq::InitAsDefaultInstance() {
}

GroupPVEOKReq::GroupPVEOKReq(const GroupPVEOKReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVEOKReq::SharedCtor() {
  _cached_size_ = 0;
  group_boss_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVEOKReq::~GroupPVEOKReq() {
  SharedDtor();
}

void GroupPVEOKReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupPVEOKReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVEOKReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEOKReq_descriptor_;
}

const GroupPVEOKReq& GroupPVEOKReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVEOKReq* GroupPVEOKReq::default_instance_ = NULL;

GroupPVEOKReq* GroupPVEOKReq::New() const {
  return new GroupPVEOKReq;
}

void GroupPVEOKReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_boss_id_ = 0;
    result_ = 0;
  }
  hurter_hp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVEOKReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_boss_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_boss_id_)));
          set_has_group_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hurter_hp_list;
        break;
      }

      // repeated int32 hurter_hp_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurter_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_hurter_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hurter_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hurter_hp_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVEOKReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_boss_id(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated int32 hurter_hp_list = 3;
  for (int i = 0; i < this->hurter_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->hurter_hp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVEOKReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_boss_id(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated int32 hurter_hp_list = 3;
  for (int i = 0; i < this->hurter_hp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->hurter_hp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVEOKReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_boss_id = 1;
    if (has_group_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_boss_id());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 hurter_hp_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hurter_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hurter_hp_list(i));
    }
    total_size += 1 * this->hurter_hp_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVEOKReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVEOKReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVEOKReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVEOKReq::MergeFrom(const GroupPVEOKReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hurter_hp_list_.MergeFrom(from.hurter_hp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_boss_id()) {
      set_group_boss_id(from.group_boss_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVEOKReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVEOKReq::CopyFrom(const GroupPVEOKReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVEOKReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupPVEOKReq::Swap(GroupPVEOKReq* other) {
  if (other != this) {
    std::swap(group_boss_id_, other->group_boss_id_);
    std::swap(result_, other->result_);
    hurter_hp_list_.Swap(&other->hurter_hp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVEOKReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVEOKReq_descriptor_;
  metadata.reflection = GroupPVEOKReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupPVEOKResp_GroupPVEOKRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEOKResp_GroupPVEOKRet_descriptor_;
}
bool GroupPVEOKResp_GroupPVEOKRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::OK;
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::FAIL;
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::NO_DATA;
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::HP_LIST_ERROR0;
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::HP_LIST_ERROR1;
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::NO_GROUP;
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::ERROR_RESULT;
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::GroupPVEOKRet_MIN;
const GroupPVEOKResp_GroupPVEOKRet GroupPVEOKResp::GroupPVEOKRet_MAX;
const int GroupPVEOKResp::GroupPVEOKRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupPVEOKResp::kResultFieldNumber;
const int GroupPVEOKResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GroupPVEOKResp::GroupPVEOKResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVEOKResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupPVEOKResp::GroupPVEOKResp(const GroupPVEOKResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVEOKResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVEOKResp::~GroupPVEOKResp() {
  SharedDtor();
}

void GroupPVEOKResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupPVEOKResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVEOKResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEOKResp_descriptor_;
}

const GroupPVEOKResp& GroupPVEOKResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVEOKResp* GroupPVEOKResp::default_instance_ = NULL;

GroupPVEOKResp* GroupPVEOKResp::New() const {
  return new GroupPVEOKResp;
}

void GroupPVEOKResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVEOKResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupPVEOKResp.GroupPVEOKRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupPVEOKResp_GroupPVEOKRet_IsValid(value)) {
            set_result(static_cast< ::GroupPVEOKResp_GroupPVEOKRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVEOKResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupPVEOKResp.GroupPVEOKRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVEOKResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupPVEOKResp.GroupPVEOKRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVEOKResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupPVEOKResp.GroupPVEOKRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVEOKResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVEOKResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVEOKResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVEOKResp::MergeFrom(const GroupPVEOKResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVEOKResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVEOKResp::CopyFrom(const GroupPVEOKResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVEOKResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GroupPVEOKResp::Swap(GroupPVEOKResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVEOKResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVEOKResp_descriptor_;
  metadata.reflection = GroupPVEOKResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupPVEAddTimsReq::kGroupBossIdFieldNumber;
const int GroupPVEAddTimsReq::kTimesFieldNumber;
#endif  // !_MSC_VER

GroupPVEAddTimsReq::GroupPVEAddTimsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVEAddTimsReq::InitAsDefaultInstance() {
}

GroupPVEAddTimsReq::GroupPVEAddTimsReq(const GroupPVEAddTimsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVEAddTimsReq::SharedCtor() {
  _cached_size_ = 0;
  group_boss_id_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVEAddTimsReq::~GroupPVEAddTimsReq() {
  SharedDtor();
}

void GroupPVEAddTimsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupPVEAddTimsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVEAddTimsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEAddTimsReq_descriptor_;
}

const GroupPVEAddTimsReq& GroupPVEAddTimsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVEAddTimsReq* GroupPVEAddTimsReq::default_instance_ = NULL;

GroupPVEAddTimsReq* GroupPVEAddTimsReq::New() const {
  return new GroupPVEAddTimsReq;
}

void GroupPVEAddTimsReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_boss_id_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVEAddTimsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_boss_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_boss_id_)));
          set_has_group_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVEAddTimsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_boss_id(), output);
  }

  // required int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVEAddTimsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_boss_id(), target);
  }

  // required int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVEAddTimsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_boss_id = 1;
    if (has_group_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_boss_id());
    }

    // required int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVEAddTimsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVEAddTimsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVEAddTimsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVEAddTimsReq::MergeFrom(const GroupPVEAddTimsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_boss_id()) {
      set_group_boss_id(from.group_boss_id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVEAddTimsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVEAddTimsReq::CopyFrom(const GroupPVEAddTimsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVEAddTimsReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupPVEAddTimsReq::Swap(GroupPVEAddTimsReq* other) {
  if (other != this) {
    std::swap(group_boss_id_, other->group_boss_id_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVEAddTimsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVEAddTimsReq_descriptor_;
  metadata.reflection = GroupPVEAddTimsReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupPVEAddTimsResp_GroupPVEAddTimsRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEAddTimsResp_GroupPVEAddTimsRet_descriptor_;
}
bool GroupPVEAddTimsResp_GroupPVEAddTimsRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::OK;
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::FAIL;
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::NO_GROUP;
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::NO_DATA;
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::MAX_TIMES;
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::ERROR_TIMES;
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::NO_MONEY;
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::GroupPVEAddTimsRet_MIN;
const GroupPVEAddTimsResp_GroupPVEAddTimsRet GroupPVEAddTimsResp::GroupPVEAddTimsRet_MAX;
const int GroupPVEAddTimsResp::GroupPVEAddTimsRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupPVEAddTimsResp::kResultFieldNumber;
const int GroupPVEAddTimsResp::kUserSyncFieldNumber;
const int GroupPVEAddTimsResp::kReqFieldNumber;
#endif  // !_MSC_VER

GroupPVEAddTimsResp::GroupPVEAddTimsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVEAddTimsResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  req_ = const_cast< ::GroupPVEAddTimsReq*>(&::GroupPVEAddTimsReq::default_instance());
}

GroupPVEAddTimsResp::GroupPVEAddTimsResp(const GroupPVEAddTimsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVEAddTimsResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVEAddTimsResp::~GroupPVEAddTimsResp() {
  SharedDtor();
}

void GroupPVEAddTimsResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete req_;
  }
}

void GroupPVEAddTimsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVEAddTimsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVEAddTimsResp_descriptor_;
}

const GroupPVEAddTimsResp& GroupPVEAddTimsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVEAddTimsResp* GroupPVEAddTimsResp::default_instance_ = NULL;

GroupPVEAddTimsResp* GroupPVEAddTimsResp::New() const {
  return new GroupPVEAddTimsResp;
}

void GroupPVEAddTimsResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_req()) {
      if (req_ != NULL) req_->::GroupPVEAddTimsReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVEAddTimsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupPVEAddTimsResp.GroupPVEAddTimsRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupPVEAddTimsResp_GroupPVEAddTimsRet_IsValid(value)) {
            set_result(static_cast< ::GroupPVEAddTimsResp_GroupPVEAddTimsRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req;
        break;
      }

      // optional .GroupPVEAddTimsReq req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVEAddTimsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupPVEAddTimsResp.GroupPVEAddTimsRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .GroupPVEAddTimsReq req = 3;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVEAddTimsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupPVEAddTimsResp.GroupPVEAddTimsRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .GroupPVEAddTimsReq req = 3;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVEAddTimsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupPVEAddTimsResp.GroupPVEAddTimsRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .GroupPVEAddTimsReq req = 3;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVEAddTimsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVEAddTimsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVEAddTimsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVEAddTimsResp::MergeFrom(const GroupPVEAddTimsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_req()) {
      mutable_req()->::GroupPVEAddTimsReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVEAddTimsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVEAddTimsResp::CopyFrom(const GroupPVEAddTimsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVEAddTimsResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void GroupPVEAddTimsResp::Swap(GroupPVEAddTimsResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVEAddTimsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVEAddTimsResp_descriptor_;
  metadata.reflection = GroupPVEAddTimsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupPVERewardReq::kGroupBossIdFieldNumber;
const int GroupPVERewardReq::kRewardIndexFieldNumber;
#endif  // !_MSC_VER

GroupPVERewardReq::GroupPVERewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVERewardReq::InitAsDefaultInstance() {
}

GroupPVERewardReq::GroupPVERewardReq(const GroupPVERewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVERewardReq::SharedCtor() {
  _cached_size_ = 0;
  group_boss_id_ = 0;
  reward_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVERewardReq::~GroupPVERewardReq() {
  SharedDtor();
}

void GroupPVERewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupPVERewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVERewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVERewardReq_descriptor_;
}

const GroupPVERewardReq& GroupPVERewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVERewardReq* GroupPVERewardReq::default_instance_ = NULL;

GroupPVERewardReq* GroupPVERewardReq::New() const {
  return new GroupPVERewardReq;
}

void GroupPVERewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_boss_id_ = 0;
    reward_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVERewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_boss_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_boss_id_)));
          set_has_group_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_index;
        break;
      }

      // required int32 reward_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_index_)));
          set_has_reward_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVERewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_boss_id(), output);
  }

  // required int32 reward_index = 2;
  if (has_reward_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVERewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_boss_id = 1;
  if (has_group_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_boss_id(), target);
  }

  // required int32 reward_index = 2;
  if (has_reward_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVERewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_boss_id = 1;
    if (has_group_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_boss_id());
    }

    // required int32 reward_index = 2;
    if (has_reward_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVERewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVERewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVERewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVERewardReq::MergeFrom(const GroupPVERewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_boss_id()) {
      set_group_boss_id(from.group_boss_id());
    }
    if (from.has_reward_index()) {
      set_reward_index(from.reward_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVERewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVERewardReq::CopyFrom(const GroupPVERewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVERewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupPVERewardReq::Swap(GroupPVERewardReq* other) {
  if (other != this) {
    std::swap(group_boss_id_, other->group_boss_id_);
    std::swap(reward_index_, other->reward_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVERewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVERewardReq_descriptor_;
  metadata.reflection = GroupPVERewardReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupPVERewardResp_GroupPVERewardRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVERewardResp_GroupPVERewardRet_descriptor_;
}
bool GroupPVERewardResp_GroupPVERewardRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::OK;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::FAIL;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::NO_GROUP;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::NO_DATA;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::NO_INDEX;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::NO_INDEX_DATA;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::SMALL_DAMAGE;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::GETTED;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::GroupPVERewardRet_MIN;
const GroupPVERewardResp_GroupPVERewardRet GroupPVERewardResp::GroupPVERewardRet_MAX;
const int GroupPVERewardResp::GroupPVERewardRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupPVERewardResp::kResultFieldNumber;
const int GroupPVERewardResp::kUserSyncFieldNumber;
const int GroupPVERewardResp::kReqFieldNumber;
#endif  // !_MSC_VER

GroupPVERewardResp::GroupPVERewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupPVERewardResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  req_ = const_cast< ::GroupPVERewardReq*>(&::GroupPVERewardReq::default_instance());
}

GroupPVERewardResp::GroupPVERewardResp(const GroupPVERewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupPVERewardResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupPVERewardResp::~GroupPVERewardResp() {
  SharedDtor();
}

void GroupPVERewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete req_;
  }
}

void GroupPVERewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupPVERewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPVERewardResp_descriptor_;
}

const GroupPVERewardResp& GroupPVERewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupPVERewardResp* GroupPVERewardResp::default_instance_ = NULL;

GroupPVERewardResp* GroupPVERewardResp::New() const {
  return new GroupPVERewardResp;
}

void GroupPVERewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_req()) {
      if (req_ != NULL) req_->::GroupPVERewardReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupPVERewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupPVERewardResp.GroupPVERewardRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupPVERewardResp_GroupPVERewardRet_IsValid(value)) {
            set_result(static_cast< ::GroupPVERewardResp_GroupPVERewardRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req;
        break;
      }

      // optional .GroupPVERewardReq req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupPVERewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupPVERewardResp.GroupPVERewardRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .GroupPVERewardReq req = 3;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupPVERewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupPVERewardResp.GroupPVERewardRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .GroupPVERewardReq req = 3;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupPVERewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupPVERewardResp.GroupPVERewardRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .GroupPVERewardReq req = 3;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupPVERewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupPVERewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupPVERewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupPVERewardResp::MergeFrom(const GroupPVERewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_req()) {
      mutable_req()->::GroupPVERewardReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupPVERewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupPVERewardResp::CopyFrom(const GroupPVERewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPVERewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void GroupPVERewardResp::Swap(GroupPVERewardResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupPVERewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupPVERewardResp_descriptor_;
  metadata.reflection = GroupPVERewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupRequestHelpReq::kTypeFieldNumber;
const int GroupRequestHelpReq::kIdFieldNumber;
#endif  // !_MSC_VER

GroupRequestHelpReq::GroupRequestHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupRequestHelpReq::InitAsDefaultInstance() {
}

GroupRequestHelpReq::GroupRequestHelpReq(const GroupRequestHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupRequestHelpReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupRequestHelpReq::~GroupRequestHelpReq() {
  SharedDtor();
}

void GroupRequestHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupRequestHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupRequestHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupRequestHelpReq_descriptor_;
}

const GroupRequestHelpReq& GroupRequestHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupRequestHelpReq* GroupRequestHelpReq::default_instance_ = NULL;

GroupRequestHelpReq* GroupRequestHelpReq::New() const {
  return new GroupRequestHelpReq;
}

void GroupRequestHelpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupRequestHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // repeated int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupRequestHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupRequestHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupRequestHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupRequestHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupRequestHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupRequestHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupRequestHelpReq::MergeFrom(const GroupRequestHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupRequestHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRequestHelpReq::CopyFrom(const GroupRequestHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRequestHelpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupRequestHelpReq::Swap(GroupRequestHelpReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupRequestHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupRequestHelpReq_descriptor_;
  metadata.reflection = GroupRequestHelpReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupRequestHelpResp_GroupRequestHelpRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupRequestHelpResp_GroupRequestHelpRet_descriptor_;
}
bool GroupRequestHelpResp_GroupRequestHelpRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::OK;
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::FAIL;
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::NO_DATA;
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::NO_CD;
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::REQUESTED;
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::REQ_DATA_ERROR;
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::HELPED;
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::GroupRequestHelpRet_MIN;
const GroupRequestHelpResp_GroupRequestHelpRet GroupRequestHelpResp::GroupRequestHelpRet_MAX;
const int GroupRequestHelpResp::GroupRequestHelpRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupRequestHelpResp::kResultFieldNumber;
const int GroupRequestHelpResp::kUserSyncFieldNumber;
const int GroupRequestHelpResp::kHelpListFieldNumber;
#endif  // !_MSC_VER

GroupRequestHelpResp::GroupRequestHelpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupRequestHelpResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupRequestHelpResp::GroupRequestHelpResp(const GroupRequestHelpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupRequestHelpResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupRequestHelpResp::~GroupRequestHelpResp() {
  SharedDtor();
}

void GroupRequestHelpResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupRequestHelpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupRequestHelpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupRequestHelpResp_descriptor_;
}

const GroupRequestHelpResp& GroupRequestHelpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupRequestHelpResp* GroupRequestHelpResp::default_instance_ = NULL;

GroupRequestHelpResp* GroupRequestHelpResp::New() const {
  return new GroupRequestHelpResp;
}

void GroupRequestHelpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  help_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupRequestHelpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupRequestHelpResp.GroupRequestHelpRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupRequestHelpResp_GroupRequestHelpRet_IsValid(value)) {
            set_result(static_cast< ::GroupRequestHelpResp_GroupRequestHelpRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help_list;
        break;
      }

      // repeated .HelpInfo help_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_help_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupRequestHelpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupRequestHelpResp.GroupRequestHelpRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .HelpInfo help_list = 3;
  for (int i = 0; i < this->help_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->help_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupRequestHelpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupRequestHelpResp.GroupRequestHelpRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .HelpInfo help_list = 3;
  for (int i = 0; i < this->help_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->help_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupRequestHelpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupRequestHelpResp.GroupRequestHelpRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .HelpInfo help_list = 3;
  total_size += 1 * this->help_list_size();
  for (int i = 0; i < this->help_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->help_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupRequestHelpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupRequestHelpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupRequestHelpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupRequestHelpResp::MergeFrom(const GroupRequestHelpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  help_list_.MergeFrom(from.help_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupRequestHelpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRequestHelpResp::CopyFrom(const GroupRequestHelpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupRequestHelpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < help_list_size(); i++) {
    if (!this->help_list(i).IsInitialized()) return false;
  }
  return true;
}

void GroupRequestHelpResp::Swap(GroupRequestHelpResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    help_list_.Swap(&other->help_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupRequestHelpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupRequestHelpResp_descriptor_;
  metadata.reflection = GroupRequestHelpResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupHelpListResp_GroupHelpListRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupHelpListResp_GroupHelpListRet_descriptor_;
}
bool GroupHelpListResp_GroupHelpListRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupHelpListResp_GroupHelpListRet GroupHelpListResp::OK;
const GroupHelpListResp_GroupHelpListRet GroupHelpListResp::FAIL;
const GroupHelpListResp_GroupHelpListRet GroupHelpListResp::GroupHelpListRet_MIN;
const GroupHelpListResp_GroupHelpListRet GroupHelpListResp::GroupHelpListRet_MAX;
const int GroupHelpListResp::GroupHelpListRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupHelpListResp::kResultFieldNumber;
const int GroupHelpListResp::kUserSyncFieldNumber;
const int GroupHelpListResp::kHelpListFieldNumber;
#endif  // !_MSC_VER

GroupHelpListResp::GroupHelpListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupHelpListResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupHelpListResp::GroupHelpListResp(const GroupHelpListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupHelpListResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupHelpListResp::~GroupHelpListResp() {
  SharedDtor();
}

void GroupHelpListResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupHelpListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupHelpListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupHelpListResp_descriptor_;
}

const GroupHelpListResp& GroupHelpListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupHelpListResp* GroupHelpListResp::default_instance_ = NULL;

GroupHelpListResp* GroupHelpListResp::New() const {
  return new GroupHelpListResp;
}

void GroupHelpListResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  help_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupHelpListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupHelpListResp.GroupHelpListRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupHelpListResp_GroupHelpListRet_IsValid(value)) {
            set_result(static_cast< ::GroupHelpListResp_GroupHelpListRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help_list;
        break;
      }

      // repeated .HelpInfo help_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_help_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupHelpListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupHelpListResp.GroupHelpListRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .HelpInfo help_list = 3;
  for (int i = 0; i < this->help_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->help_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupHelpListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupHelpListResp.GroupHelpListRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .HelpInfo help_list = 3;
  for (int i = 0; i < this->help_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->help_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupHelpListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupHelpListResp.GroupHelpListRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .HelpInfo help_list = 3;
  total_size += 1 * this->help_list_size();
  for (int i = 0; i < this->help_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->help_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupHelpListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupHelpListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupHelpListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupHelpListResp::MergeFrom(const GroupHelpListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  help_list_.MergeFrom(from.help_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupHelpListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupHelpListResp::CopyFrom(const GroupHelpListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupHelpListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < help_list_size(); i++) {
    if (!this->help_list(i).IsInitialized()) return false;
  }
  return true;
}

void GroupHelpListResp::Swap(GroupHelpListResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    help_list_.Swap(&other->help_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupHelpListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupHelpListResp_descriptor_;
  metadata.reflection = GroupHelpListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupHelpReq::kUserNameFieldNumber;
const int GroupHelpReq::kTypeFieldNumber;
const int GroupHelpReq::kIdFieldNumber;
#endif  // !_MSC_VER

GroupHelpReq::GroupHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupHelpReq::InitAsDefaultInstance() {
}

GroupHelpReq::GroupHelpReq(const GroupHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupHelpReq::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupHelpReq::~GroupHelpReq() {
  SharedDtor();
}

void GroupHelpReq::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void GroupHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupHelpReq_descriptor_;
}

const GroupHelpReq& GroupHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupHelpReq* GroupHelpReq::default_instance_ = NULL;

GroupHelpReq* GroupHelpReq::New() const {
  return new GroupHelpReq;
}

void GroupHelpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    type_ = 0;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupHelpReq::MergeFrom(const GroupHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupHelpReq::CopyFrom(const GroupHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupHelpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupHelpReq::Swap(GroupHelpReq* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(type_, other->type_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupHelpReq_descriptor_;
  metadata.reflection = GroupHelpReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupHelpResp_GroupHelpRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupHelpResp_GroupHelpRet_descriptor_;
}
bool GroupHelpResp_GroupHelpRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupHelpResp_GroupHelpRet GroupHelpResp::OK;
const GroupHelpResp_GroupHelpRet GroupHelpResp::FAIL;
const GroupHelpResp_GroupHelpRet GroupHelpResp::HELP_TIME_MAX;
const GroupHelpResp_GroupHelpRet GroupHelpResp::NO_DATA;
const GroupHelpResp_GroupHelpRet GroupHelpResp::NO_INFO_DATA;
const GroupHelpResp_GroupHelpRet GroupHelpResp::NO_CD;
const GroupHelpResp_GroupHelpRet GroupHelpResp::REQ_DATA_ERROR;
const GroupHelpResp_GroupHelpRet GroupHelpResp::GroupHelpRet_MIN;
const GroupHelpResp_GroupHelpRet GroupHelpResp::GroupHelpRet_MAX;
const int GroupHelpResp::GroupHelpRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupHelpResp::kResultFieldNumber;
const int GroupHelpResp::kUserSyncFieldNumber;
const int GroupHelpResp::kHelpListFieldNumber;
#endif  // !_MSC_VER

GroupHelpResp::GroupHelpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupHelpResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GroupHelpResp::GroupHelpResp(const GroupHelpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupHelpResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupHelpResp::~GroupHelpResp() {
  SharedDtor();
}

void GroupHelpResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GroupHelpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupHelpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupHelpResp_descriptor_;
}

const GroupHelpResp& GroupHelpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupHelpResp* GroupHelpResp::default_instance_ = NULL;

GroupHelpResp* GroupHelpResp::New() const {
  return new GroupHelpResp;
}

void GroupHelpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  help_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupHelpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupHelpResp.GroupHelpRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupHelpResp_GroupHelpRet_IsValid(value)) {
            set_result(static_cast< ::GroupHelpResp_GroupHelpRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help_list;
        break;
      }

      // repeated .HelpInfo help_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_help_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_help_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_help_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupHelpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupHelpResp.GroupHelpRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .HelpInfo help_list = 3;
  for (int i = 0; i < this->help_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->help_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupHelpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupHelpResp.GroupHelpRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .HelpInfo help_list = 3;
  for (int i = 0; i < this->help_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->help_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupHelpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupHelpResp.GroupHelpRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .HelpInfo help_list = 3;
  total_size += 1 * this->help_list_size();
  for (int i = 0; i < this->help_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->help_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupHelpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupHelpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupHelpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupHelpResp::MergeFrom(const GroupHelpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  help_list_.MergeFrom(from.help_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupHelpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupHelpResp::CopyFrom(const GroupHelpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupHelpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < help_list_size(); i++) {
    if (!this->help_list(i).IsInitialized()) return false;
  }
  return true;
}

void GroupHelpResp::Swap(GroupHelpResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    help_list_.Swap(&other->help_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupHelpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupHelpResp_descriptor_;
  metadata.reflection = GroupHelpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewGroupUpdate::kSenderFieldNumber;
#endif  // !_MSC_VER

NewGroupUpdate::NewGroupUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewGroupUpdate::InitAsDefaultInstance() {
}

NewGroupUpdate::NewGroupUpdate(const NewGroupUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewGroupUpdate::SharedCtor() {
  _cached_size_ = 0;
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewGroupUpdate::~NewGroupUpdate() {
  SharedDtor();
}

void NewGroupUpdate::SharedDtor() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void NewGroupUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewGroupUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewGroupUpdate_descriptor_;
}

const NewGroupUpdate& NewGroupUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

NewGroupUpdate* NewGroupUpdate::default_instance_ = NULL;

NewGroupUpdate* NewGroupUpdate::New() const {
  return new NewGroupUpdate;
}

void NewGroupUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewGroupUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewGroupUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewGroupUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewGroupUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sender = 1;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewGroupUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewGroupUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewGroupUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewGroupUpdate::MergeFrom(const NewGroupUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewGroupUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewGroupUpdate::CopyFrom(const NewGroupUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewGroupUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NewGroupUpdate::Swap(NewGroupUpdate* other) {
  if (other != this) {
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewGroupUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewGroupUpdate_descriptor_;
  metadata.reflection = NewGroupUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInviteReq::kRecverFieldNumber;
#endif  // !_MSC_VER

GroupInviteReq::GroupInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupInviteReq::InitAsDefaultInstance() {
}

GroupInviteReq::GroupInviteReq(const GroupInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupInviteReq::SharedCtor() {
  _cached_size_ = 0;
  recver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInviteReq::~GroupInviteReq() {
  SharedDtor();
}

void GroupInviteReq::SharedDtor() {
  if (recver_ != &::google::protobuf::internal::kEmptyString) {
    delete recver_;
  }
  if (this != default_instance_) {
  }
}

void GroupInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInviteReq_descriptor_;
}

const GroupInviteReq& GroupInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupInviteReq* GroupInviteReq::default_instance_ = NULL;

GroupInviteReq* GroupInviteReq::New() const {
  return new GroupInviteReq;
}

void GroupInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recver()) {
      if (recver_ != &::google::protobuf::internal::kEmptyString) {
        recver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string recver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recver().data(), this->recver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string recver = 1;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recver().data(), this->recver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string recver = 1;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recver().data(), this->recver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->recver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string recver = 1;
    if (has_recver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInviteReq::MergeFrom(const GroupInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recver()) {
      set_recver(from.recver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInviteReq::CopyFrom(const GroupInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupInviteReq::Swap(GroupInviteReq* other) {
  if (other != this) {
    std::swap(recver_, other->recver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInviteReq_descriptor_;
  metadata.reflection = GroupInviteReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupInviteResp_GroupInviteRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInviteResp_GroupInviteRet_descriptor_;
}
bool GroupInviteResp_GroupInviteRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupInviteResp_GroupInviteRet GroupInviteResp::OK;
const GroupInviteResp_GroupInviteRet GroupInviteResp::FAIL;
const GroupInviteResp_GroupInviteRet GroupInviteResp::OTHER_BLACK;
const GroupInviteResp_GroupInviteRet GroupInviteResp::MY_BLACK;
const GroupInviteResp_GroupInviteRet GroupInviteResp::SENDED;
const GroupInviteResp_GroupInviteRet GroupInviteResp::HAS_GROUP;
const GroupInviteResp_GroupInviteRet GroupInviteResp::NO_POWER;
const GroupInviteResp_GroupInviteRet GroupInviteResp::NO_OPEN;
const GroupInviteResp_GroupInviteRet GroupInviteResp::GroupInviteRet_MIN;
const GroupInviteResp_GroupInviteRet GroupInviteResp::GroupInviteRet_MAX;
const int GroupInviteResp::GroupInviteRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupInviteResp::kResultFieldNumber;
#endif  // !_MSC_VER

GroupInviteResp::GroupInviteResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupInviteResp::InitAsDefaultInstance() {
}

GroupInviteResp::GroupInviteResp(const GroupInviteResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupInviteResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInviteResp::~GroupInviteResp() {
  SharedDtor();
}

void GroupInviteResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupInviteResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInviteResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInviteResp_descriptor_;
}

const GroupInviteResp& GroupInviteResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupInviteResp* GroupInviteResp::default_instance_ = NULL;

GroupInviteResp* GroupInviteResp::New() const {
  return new GroupInviteResp;
}

void GroupInviteResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInviteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupInviteResp.GroupInviteRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupInviteResp_GroupInviteRet_IsValid(value)) {
            set_result(static_cast< ::GroupInviteResp_GroupInviteRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupInviteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupInviteResp.GroupInviteRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupInviteResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupInviteResp.GroupInviteRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupInviteResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupInviteResp.GroupInviteRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInviteResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInviteResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInviteResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInviteResp::MergeFrom(const GroupInviteResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInviteResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInviteResp::CopyFrom(const GroupInviteResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInviteResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupInviteResp::Swap(GroupInviteResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupInviteResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInviteResp_descriptor_;
  metadata.reflection = GroupInviteResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupWorshipReq::kTypeFieldNumber;
const int GroupWorshipReq::kLevelFieldNumber;
#endif  // !_MSC_VER

GroupWorshipReq::GroupWorshipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupWorshipReq::InitAsDefaultInstance() {
}

GroupWorshipReq::GroupWorshipReq(const GroupWorshipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupWorshipReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupWorshipReq::~GroupWorshipReq() {
  SharedDtor();
}

void GroupWorshipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupWorshipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupWorshipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupWorshipReq_descriptor_;
}

const GroupWorshipReq& GroupWorshipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupWorshipReq* GroupWorshipReq::default_instance_ = NULL;

GroupWorshipReq* GroupWorshipReq::New() const {
  return new GroupWorshipReq;
}

void GroupWorshipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupWorshipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupWorshipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupWorshipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupWorshipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupWorshipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupWorshipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupWorshipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupWorshipReq::MergeFrom(const GroupWorshipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupWorshipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupWorshipReq::CopyFrom(const GroupWorshipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupWorshipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupWorshipReq::Swap(GroupWorshipReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupWorshipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupWorshipReq_descriptor_;
  metadata.reflection = GroupWorshipReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GroupWorshipResp_GroupWorshipRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupWorshipResp_GroupWorshipRet_descriptor_;
}
bool GroupWorshipResp_GroupWorshipRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::OK;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::FAIL;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::ALREADY;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::NO_CONF;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::NO_GROUP;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::NO_RES;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::GETTED;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::LOW_POINT;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::NO_WORSHIP;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::GroupWorshipRet_MIN;
const GroupWorshipResp_GroupWorshipRet GroupWorshipResp::GroupWorshipRet_MAX;
const int GroupWorshipResp::GroupWorshipRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GroupWorshipResp::kResultFieldNumber;
const int GroupWorshipResp::kUserSyncFieldNumber;
const int GroupWorshipResp::kReqFieldNumber;
#endif  // !_MSC_VER

GroupWorshipResp::GroupWorshipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupWorshipResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  req_ = const_cast< ::GroupWorshipReq*>(&::GroupWorshipReq::default_instance());
}

GroupWorshipResp::GroupWorshipResp(const GroupWorshipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupWorshipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupWorshipResp::~GroupWorshipResp() {
  SharedDtor();
}

void GroupWorshipResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete req_;
  }
}

void GroupWorshipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupWorshipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupWorshipResp_descriptor_;
}

const GroupWorshipResp& GroupWorshipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdGroup_2eproto();
  return *default_instance_;
}

GroupWorshipResp* GroupWorshipResp::default_instance_ = NULL;

GroupWorshipResp* GroupWorshipResp::New() const {
  return new GroupWorshipResp;
}

void GroupWorshipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_req()) {
      if (req_ != NULL) req_->::GroupWorshipReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupWorshipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GroupWorshipResp.GroupWorshipRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GroupWorshipResp_GroupWorshipRet_IsValid(value)) {
            set_result(static_cast< ::GroupWorshipResp_GroupWorshipRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req;
        break;
      }

      // optional .GroupWorshipReq req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupWorshipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GroupWorshipResp.GroupWorshipRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .GroupWorshipReq req = 3;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupWorshipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GroupWorshipResp.GroupWorshipRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .GroupWorshipReq req = 3;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupWorshipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GroupWorshipResp.GroupWorshipRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .GroupWorshipReq req = 3;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupWorshipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupWorshipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupWorshipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupWorshipResp::MergeFrom(const GroupWorshipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_req()) {
      mutable_req()->::GroupWorshipReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupWorshipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupWorshipResp::CopyFrom(const GroupWorshipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupWorshipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void GroupWorshipResp::Swap(GroupWorshipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupWorshipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupWorshipResp_descriptor_;
  metadata.reflection = GroupWorshipResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
