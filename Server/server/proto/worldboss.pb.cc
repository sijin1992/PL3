// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worldboss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worldboss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WBossHeadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WBossHeadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WBossAttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WBossAttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDamageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDamageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WBossAttackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WBossAttackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserWBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserWBossInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserWBossInfo_Const_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WBossTerminateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WBossTerminateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WBossRankRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WBossRankRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WBossRankRewardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WBossRankRewardList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_worldboss_2eproto() {
  protobuf_AddDesc_worldboss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "worldboss.proto");
  GOOGLE_CHECK(file != NULL);
  WBossHeadInfo_descriptor_ = file->message_type(0);
  static const int WBossHeadInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossHeadInfo, boss_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossHeadInfo, boss_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossHeadInfo, boss_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossHeadInfo, boss_generations_),
  };
  WBossHeadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WBossHeadInfo_descriptor_,
      WBossHeadInfo::default_instance_,
      WBossHeadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossHeadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossHeadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WBossHeadInfo));
  WBossAttrInfo_descriptor_ = file->message_type(1);
  static const int WBossAttrInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttrInfo, cur_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttrInfo, max_hp_),
  };
  WBossAttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WBossAttrInfo_descriptor_,
      WBossAttrInfo::default_instance_,
      WBossAttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WBossAttrInfo));
  WorldBossInfo_descriptor_ = file->message_type(2);
  static const int WorldBossInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, head_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, attr_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, is_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, reward_calc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, attack_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, attack_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, next_boss_time_),
  };
  WorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossInfo_descriptor_,
      WorldBossInfo::default_instance_,
      WorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossInfo));
  UserDamageInfo_descriptor_ = file->message_type(3);
  static const int UserDamageInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, boss_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, reward_calc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, cur_season_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, cur_season_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, last_attack_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, max_season_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, max_attack_damage_),
  };
  UserDamageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDamageInfo_descriptor_,
      UserDamageInfo::default_instance_,
      UserDamageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDamageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDamageInfo));
  WBossAttackInfo_descriptor_ = file->message_type(4);
  static const int WBossAttackInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, total_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, time_),
  };
  WBossAttackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WBossAttackInfo_descriptor_,
      WBossAttackInfo::default_instance_,
      WBossAttackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossAttackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WBossAttackInfo));
  UserWBossInfo_descriptor_ = file->message_type(5);
  static const int UserWBossInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWBossInfo, cur_attack_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWBossInfo, max_attack_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWBossInfo, dmg_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWBossInfo, terminate_boss_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWBossInfo, need_update_),
  };
  UserWBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserWBossInfo_descriptor_,
      UserWBossInfo::default_instance_,
      UserWBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserWBossInfo));
  UserWBossInfo_Const_descriptor_ = UserWBossInfo_descriptor_->enum_type(0);
  WBossTerminateInfo_descriptor_ = file->message_type(6);
  static const int WBossTerminateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossTerminateInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossTerminateInfo, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossTerminateInfo, attack_damage_),
  };
  WBossTerminateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WBossTerminateInfo_descriptor_,
      WBossTerminateInfo::default_instance_,
      WBossTerminateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossTerminateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossTerminateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WBossTerminateInfo));
  WBossRankRewardItem_descriptor_ = file->message_type(7);
  static const int WBossRankRewardItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardItem, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardItem, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardItem, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardItem, item_list_),
  };
  WBossRankRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WBossRankRewardItem_descriptor_,
      WBossRankRewardItem::default_instance_,
      WBossRankRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WBossRankRewardItem));
  WBossRankRewardList_descriptor_ = file->message_type(8);
  static const int WBossRankRewardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardList, items_),
  };
  WBossRankRewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WBossRankRewardList_descriptor_,
      WBossRankRewardList::default_instance_,
      WBossRankRewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBossRankRewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WBossRankRewardList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_worldboss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WBossHeadInfo_descriptor_, &WBossHeadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WBossAttrInfo_descriptor_, &WBossAttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossInfo_descriptor_, &WorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDamageInfo_descriptor_, &UserDamageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WBossAttackInfo_descriptor_, &WBossAttackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserWBossInfo_descriptor_, &UserWBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WBossTerminateInfo_descriptor_, &WBossTerminateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WBossRankRewardItem_descriptor_, &WBossRankRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WBossRankRewardList_descriptor_, &WBossRankRewardList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_worldboss_2eproto() {
  delete WBossHeadInfo::default_instance_;
  delete WBossHeadInfo_reflection_;
  delete WBossAttrInfo::default_instance_;
  delete WBossAttrInfo_reflection_;
  delete WorldBossInfo::default_instance_;
  delete WorldBossInfo_reflection_;
  delete UserDamageInfo::default_instance_;
  delete UserDamageInfo_reflection_;
  delete WBossAttackInfo::default_instance_;
  delete WBossAttackInfo_reflection_;
  delete UserWBossInfo::default_instance_;
  delete UserWBossInfo_reflection_;
  delete WBossTerminateInfo::default_instance_;
  delete WBossTerminateInfo_reflection_;
  delete WBossRankRewardItem::default_instance_;
  delete WBossRankRewardItem_reflection_;
  delete WBossRankRewardList::default_instance_;
  delete WBossRankRewardList_reflection_;
}

void protobuf_AddDesc_worldboss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017worldboss.proto\032\nItem.proto\"c\n\rWBossHe"
    "adInfo\022\022\n\nboss_index\030\013 \001(\005\022\023\n\013boss_seaso"
    "n\030\001 \001(\005\022\017\n\007boss_id\030\002 \001(\005\022\030\n\020boss_generat"
    "ions\030\003 \001(\005\"/\n\rWBossAttrInfo\022\016\n\006cur_hp\030\013 "
    "\001(\003\022\016\n\006max_hp\030\014 \001(\003\"\315\001\n\rWorldBossInfo\022!\n"
    "\thead_info\030\001 \001(\0132\016.WBossHeadInfo\022!\n\tattr"
    "_info\030\002 \001(\0132\016.WBossAttrInfo\022\020\n\010is_alive\030"
    "\n \001(\005\022\030\n\020reward_calc_time\030\013 \001(\003\022\031\n\021attac"
    "k_start_time\030\014 \001(\003\022\027\n\017attack_end_time\030\r "
    "\001(\003\022\026\n\016next_boss_time\030\025 \001(\003\"\323\001\n\016UserDama"
    "geInfo\022!\n\tboss_head\030\001 \001(\0132\016.WBossHeadInf"
    "o\022\030\n\020reward_calc_time\030\002 \001(\003\022\027\n\017cur_seaso"
    "n_rank\030\n \001(\005\022\031\n\021cur_season_damage\030\013 \001(\005\022"
    "\032\n\022last_attack_damage\030\014 \001(\005\022\031\n\021max_seaso"
    "n_damage\030\025 \001(\005\022\031\n\021max_attack_damage\030\026 \001("
    "\005\"\230\001\n\017WBossAttackInfo\022\021\n\tuser_name\030\001 \001(\t"
    "\022\021\n\tnick_name\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\r\n\005vi"
    "plv\030\004 \001(\005\022\r\n\005power\030\005 \001(\005\022\016\n\006damage\030\025 \001(\005"
    "\022\024\n\014total_damage\030\026 \001(\005\022\014\n\004time\030d \001(\003\"\273\001\n"
    "\rUserWBossInfo\022\030\n\020cur_attack_times\030\001 \001(\005"
    "\022\030\n\020max_attack_times\030\002 \001(\005\022!\n\010dmg_info\030\013"
    " \001(\0132\017.UserDamageInfo\022\034\n\024terminate_boss_"
    "times\030\025 \001(\005\022\023\n\013need_update\0302 \001(\005\" \n\005Cons"
    "t\022\027\n\023BaseFreeAttackTimes\020\003\"Q\n\022WBossTermi"
    "nateInfo\022\021\n\tuser_name\030\001 \001(\t\022\021\n\tnick_name"
    "\030\002 \001(\t\022\025\n\rattack_damage\030\013 \001(\005\"V\n\023WBossRa"
    "nkRewardItem\022\013\n\003idx\030\001 \001(\005\022\014\n\004from\030\002 \001(\005\022"
    "\n\n\002to\030\003 \001(\005\022\030\n\titem_list\030\025 \003(\0132\005.Item\":\n"
    "\023WBossRankRewardList\022#\n\005items\030\001 \003(\0132\024.WB"
    "ossRankRewardItem", 1177);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "worldboss.proto", &protobuf_RegisterTypes);
  WBossHeadInfo::default_instance_ = new WBossHeadInfo();
  WBossAttrInfo::default_instance_ = new WBossAttrInfo();
  WorldBossInfo::default_instance_ = new WorldBossInfo();
  UserDamageInfo::default_instance_ = new UserDamageInfo();
  WBossAttackInfo::default_instance_ = new WBossAttackInfo();
  UserWBossInfo::default_instance_ = new UserWBossInfo();
  WBossTerminateInfo::default_instance_ = new WBossTerminateInfo();
  WBossRankRewardItem::default_instance_ = new WBossRankRewardItem();
  WBossRankRewardList::default_instance_ = new WBossRankRewardList();
  WBossHeadInfo::default_instance_->InitAsDefaultInstance();
  WBossAttrInfo::default_instance_->InitAsDefaultInstance();
  WorldBossInfo::default_instance_->InitAsDefaultInstance();
  UserDamageInfo::default_instance_->InitAsDefaultInstance();
  WBossAttackInfo::default_instance_->InitAsDefaultInstance();
  UserWBossInfo::default_instance_->InitAsDefaultInstance();
  WBossTerminateInfo::default_instance_->InitAsDefaultInstance();
  WBossRankRewardItem::default_instance_->InitAsDefaultInstance();
  WBossRankRewardList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worldboss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worldboss_2eproto {
  StaticDescriptorInitializer_worldboss_2eproto() {
    protobuf_AddDesc_worldboss_2eproto();
  }
} static_descriptor_initializer_worldboss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WBossHeadInfo::kBossIndexFieldNumber;
const int WBossHeadInfo::kBossSeasonFieldNumber;
const int WBossHeadInfo::kBossIdFieldNumber;
const int WBossHeadInfo::kBossGenerationsFieldNumber;
#endif  // !_MSC_VER

WBossHeadInfo::WBossHeadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WBossHeadInfo::InitAsDefaultInstance() {
}

WBossHeadInfo::WBossHeadInfo(const WBossHeadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WBossHeadInfo::SharedCtor() {
  _cached_size_ = 0;
  boss_index_ = 0;
  boss_season_ = 0;
  boss_id_ = 0;
  boss_generations_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WBossHeadInfo::~WBossHeadInfo() {
  SharedDtor();
}

void WBossHeadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WBossHeadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WBossHeadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WBossHeadInfo_descriptor_;
}

const WBossHeadInfo& WBossHeadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

WBossHeadInfo* WBossHeadInfo::default_instance_ = NULL;

WBossHeadInfo* WBossHeadInfo::New() const {
  return new WBossHeadInfo;
}

void WBossHeadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_index_ = 0;
    boss_season_ = 0;
    boss_id_ = 0;
    boss_generations_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WBossHeadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boss_season = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_season_)));
          set_has_boss_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_id;
        break;
      }

      // optional int32 boss_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_id_)));
          set_has_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boss_generations;
        break;
      }

      // optional int32 boss_generations = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_generations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_generations_)));
          set_has_boss_generations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_boss_index;
        break;
      }

      // optional int32 boss_index = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_index_)));
          set_has_boss_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WBossHeadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boss_season = 1;
  if (has_boss_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boss_season(), output);
  }

  // optional int32 boss_id = 2;
  if (has_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boss_id(), output);
  }

  // optional int32 boss_generations = 3;
  if (has_boss_generations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boss_generations(), output);
  }

  // optional int32 boss_index = 11;
  if (has_boss_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->boss_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WBossHeadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boss_season = 1;
  if (has_boss_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boss_season(), target);
  }

  // optional int32 boss_id = 2;
  if (has_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->boss_id(), target);
  }

  // optional int32 boss_generations = 3;
  if (has_boss_generations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boss_generations(), target);
  }

  // optional int32 boss_index = 11;
  if (has_boss_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->boss_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WBossHeadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boss_index = 11;
    if (has_boss_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_index());
    }

    // optional int32 boss_season = 1;
    if (has_boss_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_season());
    }

    // optional int32 boss_id = 2;
    if (has_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_id());
    }

    // optional int32 boss_generations = 3;
    if (has_boss_generations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_generations());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WBossHeadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WBossHeadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WBossHeadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WBossHeadInfo::MergeFrom(const WBossHeadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_index()) {
      set_boss_index(from.boss_index());
    }
    if (from.has_boss_season()) {
      set_boss_season(from.boss_season());
    }
    if (from.has_boss_id()) {
      set_boss_id(from.boss_id());
    }
    if (from.has_boss_generations()) {
      set_boss_generations(from.boss_generations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WBossHeadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WBossHeadInfo::CopyFrom(const WBossHeadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WBossHeadInfo::IsInitialized() const {

  return true;
}

void WBossHeadInfo::Swap(WBossHeadInfo* other) {
  if (other != this) {
    std::swap(boss_index_, other->boss_index_);
    std::swap(boss_season_, other->boss_season_);
    std::swap(boss_id_, other->boss_id_);
    std::swap(boss_generations_, other->boss_generations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WBossHeadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WBossHeadInfo_descriptor_;
  metadata.reflection = WBossHeadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WBossAttrInfo::kCurHpFieldNumber;
const int WBossAttrInfo::kMaxHpFieldNumber;
#endif  // !_MSC_VER

WBossAttrInfo::WBossAttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WBossAttrInfo::InitAsDefaultInstance() {
}

WBossAttrInfo::WBossAttrInfo(const WBossAttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WBossAttrInfo::SharedCtor() {
  _cached_size_ = 0;
  cur_hp_ = GOOGLE_LONGLONG(0);
  max_hp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WBossAttrInfo::~WBossAttrInfo() {
  SharedDtor();
}

void WBossAttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WBossAttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WBossAttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WBossAttrInfo_descriptor_;
}

const WBossAttrInfo& WBossAttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

WBossAttrInfo* WBossAttrInfo::default_instance_ = NULL;

WBossAttrInfo* WBossAttrInfo::New() const {
  return new WBossAttrInfo;
}

void WBossAttrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_hp_ = GOOGLE_LONGLONG(0);
    max_hp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WBossAttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cur_hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_max_hp;
        break;
      }

      // optional int64 max_hp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WBossAttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cur_hp = 11;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->cur_hp(), output);
  }

  // optional int64 max_hp = 12;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->max_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WBossAttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cur_hp = 11;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->cur_hp(), target);
  }

  // optional int64 max_hp = 12;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->max_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WBossAttrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cur_hp = 11;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_hp());
    }

    // optional int64 max_hp = 12;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WBossAttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WBossAttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WBossAttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WBossAttrInfo::MergeFrom(const WBossAttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WBossAttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WBossAttrInfo::CopyFrom(const WBossAttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WBossAttrInfo::IsInitialized() const {

  return true;
}

void WBossAttrInfo::Swap(WBossAttrInfo* other) {
  if (other != this) {
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WBossAttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WBossAttrInfo_descriptor_;
  metadata.reflection = WBossAttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossInfo::kHeadInfoFieldNumber;
const int WorldBossInfo::kAttrInfoFieldNumber;
const int WorldBossInfo::kIsAliveFieldNumber;
const int WorldBossInfo::kRewardCalcTimeFieldNumber;
const int WorldBossInfo::kAttackStartTimeFieldNumber;
const int WorldBossInfo::kAttackEndTimeFieldNumber;
const int WorldBossInfo::kNextBossTimeFieldNumber;
#endif  // !_MSC_VER

WorldBossInfo::WorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossInfo::InitAsDefaultInstance() {
  head_info_ = const_cast< ::WBossHeadInfo*>(&::WBossHeadInfo::default_instance());
  attr_info_ = const_cast< ::WBossAttrInfo*>(&::WBossAttrInfo::default_instance());
}

WorldBossInfo::WorldBossInfo(const WorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  head_info_ = NULL;
  attr_info_ = NULL;
  is_alive_ = 0;
  reward_calc_time_ = GOOGLE_LONGLONG(0);
  attack_start_time_ = GOOGLE_LONGLONG(0);
  attack_end_time_ = GOOGLE_LONGLONG(0);
  next_boss_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossInfo::~WorldBossInfo() {
  SharedDtor();
}

void WorldBossInfo::SharedDtor() {
  if (this != default_instance_) {
    delete head_info_;
    delete attr_info_;
  }
}

void WorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossInfo_descriptor_;
}

const WorldBossInfo& WorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

WorldBossInfo* WorldBossInfo::default_instance_ = NULL;

WorldBossInfo* WorldBossInfo::New() const {
  return new WorldBossInfo;
}

void WorldBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head_info()) {
      if (head_info_ != NULL) head_info_->::WBossHeadInfo::Clear();
    }
    if (has_attr_info()) {
      if (attr_info_ != NULL) attr_info_->::WBossAttrInfo::Clear();
    }
    is_alive_ = 0;
    reward_calc_time_ = GOOGLE_LONGLONG(0);
    attack_start_time_ = GOOGLE_LONGLONG(0);
    attack_end_time_ = GOOGLE_LONGLONG(0);
    next_boss_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WBossHeadInfo head_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr_info;
        break;
      }

      // optional .WBossAttrInfo attr_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_alive;
        break;
      }

      // optional int32 is_alive = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_alive_)));
          set_has_is_alive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reward_calc_time;
        break;
      }

      // optional int64 reward_calc_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_calc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_calc_time_)));
          set_has_reward_calc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_attack_start_time;
        break;
      }

      // optional int64 attack_start_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_start_time_)));
          set_has_attack_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attack_end_time;
        break;
      }

      // optional int64 attack_end_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_end_time_)));
          set_has_attack_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_next_boss_time;
        break;
      }

      // optional int64 next_boss_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_boss_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_boss_time_)));
          set_has_next_boss_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .WBossHeadInfo head_info = 1;
  if (has_head_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head_info(), output);
  }

  // optional .WBossAttrInfo attr_info = 2;
  if (has_attr_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr_info(), output);
  }

  // optional int32 is_alive = 10;
  if (has_is_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->is_alive(), output);
  }

  // optional int64 reward_calc_time = 11;
  if (has_reward_calc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->reward_calc_time(), output);
  }

  // optional int64 attack_start_time = 12;
  if (has_attack_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->attack_start_time(), output);
  }

  // optional int64 attack_end_time = 13;
  if (has_attack_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->attack_end_time(), output);
  }

  // optional int64 next_boss_time = 21;
  if (has_next_boss_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->next_boss_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .WBossHeadInfo head_info = 1;
  if (has_head_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head_info(), target);
  }

  // optional .WBossAttrInfo attr_info = 2;
  if (has_attr_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr_info(), target);
  }

  // optional int32 is_alive = 10;
  if (has_is_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->is_alive(), target);
  }

  // optional int64 reward_calc_time = 11;
  if (has_reward_calc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->reward_calc_time(), target);
  }

  // optional int64 attack_start_time = 12;
  if (has_attack_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->attack_start_time(), target);
  }

  // optional int64 attack_end_time = 13;
  if (has_attack_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->attack_end_time(), target);
  }

  // optional int64 next_boss_time = 21;
  if (has_next_boss_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->next_boss_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .WBossHeadInfo head_info = 1;
    if (has_head_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head_info());
    }

    // optional .WBossAttrInfo attr_info = 2;
    if (has_attr_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr_info());
    }

    // optional int32 is_alive = 10;
    if (has_is_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_alive());
    }

    // optional int64 reward_calc_time = 11;
    if (has_reward_calc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_calc_time());
    }

    // optional int64 attack_start_time = 12;
    if (has_attack_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack_start_time());
    }

    // optional int64 attack_end_time = 13;
    if (has_attack_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack_end_time());
    }

    // optional int64 next_boss_time = 21;
    if (has_next_boss_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_boss_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossInfo::MergeFrom(const WorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head_info()) {
      mutable_head_info()->::WBossHeadInfo::MergeFrom(from.head_info());
    }
    if (from.has_attr_info()) {
      mutable_attr_info()->::WBossAttrInfo::MergeFrom(from.attr_info());
    }
    if (from.has_is_alive()) {
      set_is_alive(from.is_alive());
    }
    if (from.has_reward_calc_time()) {
      set_reward_calc_time(from.reward_calc_time());
    }
    if (from.has_attack_start_time()) {
      set_attack_start_time(from.attack_start_time());
    }
    if (from.has_attack_end_time()) {
      set_attack_end_time(from.attack_end_time());
    }
    if (from.has_next_boss_time()) {
      set_next_boss_time(from.next_boss_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossInfo::CopyFrom(const WorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossInfo::IsInitialized() const {

  return true;
}

void WorldBossInfo::Swap(WorldBossInfo* other) {
  if (other != this) {
    std::swap(head_info_, other->head_info_);
    std::swap(attr_info_, other->attr_info_);
    std::swap(is_alive_, other->is_alive_);
    std::swap(reward_calc_time_, other->reward_calc_time_);
    std::swap(attack_start_time_, other->attack_start_time_);
    std::swap(attack_end_time_, other->attack_end_time_);
    std::swap(next_boss_time_, other->next_boss_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossInfo_descriptor_;
  metadata.reflection = WorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDamageInfo::kBossHeadFieldNumber;
const int UserDamageInfo::kRewardCalcTimeFieldNumber;
const int UserDamageInfo::kCurSeasonRankFieldNumber;
const int UserDamageInfo::kCurSeasonDamageFieldNumber;
const int UserDamageInfo::kLastAttackDamageFieldNumber;
const int UserDamageInfo::kMaxSeasonDamageFieldNumber;
const int UserDamageInfo::kMaxAttackDamageFieldNumber;
#endif  // !_MSC_VER

UserDamageInfo::UserDamageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDamageInfo::InitAsDefaultInstance() {
  boss_head_ = const_cast< ::WBossHeadInfo*>(&::WBossHeadInfo::default_instance());
}

UserDamageInfo::UserDamageInfo(const UserDamageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDamageInfo::SharedCtor() {
  _cached_size_ = 0;
  boss_head_ = NULL;
  reward_calc_time_ = GOOGLE_LONGLONG(0);
  cur_season_rank_ = 0;
  cur_season_damage_ = 0;
  last_attack_damage_ = 0;
  max_season_damage_ = 0;
  max_attack_damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDamageInfo::~UserDamageInfo() {
  SharedDtor();
}

void UserDamageInfo::SharedDtor() {
  if (this != default_instance_) {
    delete boss_head_;
  }
}

void UserDamageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDamageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDamageInfo_descriptor_;
}

const UserDamageInfo& UserDamageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

UserDamageInfo* UserDamageInfo::default_instance_ = NULL;

UserDamageInfo* UserDamageInfo::New() const {
  return new UserDamageInfo;
}

void UserDamageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boss_head()) {
      if (boss_head_ != NULL) boss_head_->::WBossHeadInfo::Clear();
    }
    reward_calc_time_ = GOOGLE_LONGLONG(0);
    cur_season_rank_ = 0;
    cur_season_damage_ = 0;
    last_attack_damage_ = 0;
    max_season_damage_ = 0;
    max_attack_damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDamageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WBossHeadInfo boss_head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_calc_time;
        break;
      }

      // optional int64 reward_calc_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_calc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_calc_time_)));
          set_has_reward_calc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cur_season_rank;
        break;
      }

      // optional int32 cur_season_rank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_season_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_season_rank_)));
          set_has_cur_season_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cur_season_damage;
        break;
      }

      // optional int32 cur_season_damage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_season_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_season_damage_)));
          set_has_cur_season_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_last_attack_damage;
        break;
      }

      // optional int32 last_attack_damage = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_attack_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_attack_damage_)));
          set_has_last_attack_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_max_season_damage;
        break;
      }

      // optional int32 max_season_damage = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_season_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_season_damage_)));
          set_has_max_season_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_max_attack_damage;
        break;
      }

      // optional int32 max_attack_damage = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_attack_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_attack_damage_)));
          set_has_max_attack_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDamageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .WBossHeadInfo boss_head = 1;
  if (has_boss_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boss_head(), output);
  }

  // optional int64 reward_calc_time = 2;
  if (has_reward_calc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->reward_calc_time(), output);
  }

  // optional int32 cur_season_rank = 10;
  if (has_cur_season_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cur_season_rank(), output);
  }

  // optional int32 cur_season_damage = 11;
  if (has_cur_season_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cur_season_damage(), output);
  }

  // optional int32 last_attack_damage = 12;
  if (has_last_attack_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->last_attack_damage(), output);
  }

  // optional int32 max_season_damage = 21;
  if (has_max_season_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->max_season_damage(), output);
  }

  // optional int32 max_attack_damage = 22;
  if (has_max_attack_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->max_attack_damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDamageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .WBossHeadInfo boss_head = 1;
  if (has_boss_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boss_head(), target);
  }

  // optional int64 reward_calc_time = 2;
  if (has_reward_calc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->reward_calc_time(), target);
  }

  // optional int32 cur_season_rank = 10;
  if (has_cur_season_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cur_season_rank(), target);
  }

  // optional int32 cur_season_damage = 11;
  if (has_cur_season_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cur_season_damage(), target);
  }

  // optional int32 last_attack_damage = 12;
  if (has_last_attack_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->last_attack_damage(), target);
  }

  // optional int32 max_season_damage = 21;
  if (has_max_season_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->max_season_damage(), target);
  }

  // optional int32 max_attack_damage = 22;
  if (has_max_attack_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->max_attack_damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDamageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .WBossHeadInfo boss_head = 1;
    if (has_boss_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss_head());
    }

    // optional int64 reward_calc_time = 2;
    if (has_reward_calc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_calc_time());
    }

    // optional int32 cur_season_rank = 10;
    if (has_cur_season_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_season_rank());
    }

    // optional int32 cur_season_damage = 11;
    if (has_cur_season_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_season_damage());
    }

    // optional int32 last_attack_damage = 12;
    if (has_last_attack_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_attack_damage());
    }

    // optional int32 max_season_damage = 21;
    if (has_max_season_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_season_damage());
    }

    // optional int32 max_attack_damage = 22;
    if (has_max_attack_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_attack_damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDamageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDamageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDamageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDamageInfo::MergeFrom(const UserDamageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_head()) {
      mutable_boss_head()->::WBossHeadInfo::MergeFrom(from.boss_head());
    }
    if (from.has_reward_calc_time()) {
      set_reward_calc_time(from.reward_calc_time());
    }
    if (from.has_cur_season_rank()) {
      set_cur_season_rank(from.cur_season_rank());
    }
    if (from.has_cur_season_damage()) {
      set_cur_season_damage(from.cur_season_damage());
    }
    if (from.has_last_attack_damage()) {
      set_last_attack_damage(from.last_attack_damage());
    }
    if (from.has_max_season_damage()) {
      set_max_season_damage(from.max_season_damage());
    }
    if (from.has_max_attack_damage()) {
      set_max_attack_damage(from.max_attack_damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDamageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDamageInfo::CopyFrom(const UserDamageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDamageInfo::IsInitialized() const {

  return true;
}

void UserDamageInfo::Swap(UserDamageInfo* other) {
  if (other != this) {
    std::swap(boss_head_, other->boss_head_);
    std::swap(reward_calc_time_, other->reward_calc_time_);
    std::swap(cur_season_rank_, other->cur_season_rank_);
    std::swap(cur_season_damage_, other->cur_season_damage_);
    std::swap(last_attack_damage_, other->last_attack_damage_);
    std::swap(max_season_damage_, other->max_season_damage_);
    std::swap(max_attack_damage_, other->max_attack_damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDamageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDamageInfo_descriptor_;
  metadata.reflection = UserDamageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WBossAttackInfo::kUserNameFieldNumber;
const int WBossAttackInfo::kNickNameFieldNumber;
const int WBossAttackInfo::kLevelFieldNumber;
const int WBossAttackInfo::kViplvFieldNumber;
const int WBossAttackInfo::kPowerFieldNumber;
const int WBossAttackInfo::kDamageFieldNumber;
const int WBossAttackInfo::kTotalDamageFieldNumber;
const int WBossAttackInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

WBossAttackInfo::WBossAttackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WBossAttackInfo::InitAsDefaultInstance() {
}

WBossAttackInfo::WBossAttackInfo(const WBossAttackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WBossAttackInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  viplv_ = 0;
  power_ = 0;
  damage_ = 0;
  total_damage_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WBossAttackInfo::~WBossAttackInfo() {
  SharedDtor();
}

void WBossAttackInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void WBossAttackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WBossAttackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WBossAttackInfo_descriptor_;
}

const WBossAttackInfo& WBossAttackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

WBossAttackInfo* WBossAttackInfo::default_instance_ = NULL;

WBossAttackInfo* WBossAttackInfo::New() const {
  return new WBossAttackInfo;
}

void WBossAttackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    level_ = 0;
    viplv_ = 0;
    power_ = 0;
    damage_ = 0;
    total_damage_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WBossAttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // optional int32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_damage;
        break;
      }

      // optional int32 damage = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_total_damage;
        break;
      }

      // optional int32 total_damage = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_damage_)));
          set_has_total_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_time;
        break;
      }

      // optional int64 time = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WBossAttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 viplv = 4;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viplv(), output);
  }

  // optional int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  // optional int32 damage = 21;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->damage(), output);
  }

  // optional int32 total_damage = 22;
  if (has_total_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->total_damage(), output);
  }

  // optional int64 time = 100;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(100, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WBossAttackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 viplv = 4;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viplv(), target);
  }

  // optional int32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power(), target);
  }

  // optional int32 damage = 21;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->damage(), target);
  }

  // optional int32 total_damage = 22;
  if (has_total_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->total_damage(), target);
  }

  // optional int64 time = 100;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(100, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WBossAttackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 viplv = 4;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // optional int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 damage = 21;
    if (has_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int32 total_damage = 22;
    if (has_total_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_damage());
    }

    // optional int64 time = 100;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WBossAttackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WBossAttackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WBossAttackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WBossAttackInfo::MergeFrom(const WBossAttackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_total_damage()) {
      set_total_damage(from.total_damage());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WBossAttackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WBossAttackInfo::CopyFrom(const WBossAttackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WBossAttackInfo::IsInitialized() const {

  return true;
}

void WBossAttackInfo::Swap(WBossAttackInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(power_, other->power_);
    std::swap(damage_, other->damage_);
    std::swap(total_damage_, other->total_damage_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WBossAttackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WBossAttackInfo_descriptor_;
  metadata.reflection = WBossAttackInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UserWBossInfo_Const_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserWBossInfo_Const_descriptor_;
}
bool UserWBossInfo_Const_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UserWBossInfo_Const UserWBossInfo::BaseFreeAttackTimes;
const UserWBossInfo_Const UserWBossInfo::Const_MIN;
const UserWBossInfo_Const UserWBossInfo::Const_MAX;
const int UserWBossInfo::Const_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UserWBossInfo::kCurAttackTimesFieldNumber;
const int UserWBossInfo::kMaxAttackTimesFieldNumber;
const int UserWBossInfo::kDmgInfoFieldNumber;
const int UserWBossInfo::kTerminateBossTimesFieldNumber;
const int UserWBossInfo::kNeedUpdateFieldNumber;
#endif  // !_MSC_VER

UserWBossInfo::UserWBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserWBossInfo::InitAsDefaultInstance() {
  dmg_info_ = const_cast< ::UserDamageInfo*>(&::UserDamageInfo::default_instance());
}

UserWBossInfo::UserWBossInfo(const UserWBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserWBossInfo::SharedCtor() {
  _cached_size_ = 0;
  cur_attack_times_ = 0;
  max_attack_times_ = 0;
  dmg_info_ = NULL;
  terminate_boss_times_ = 0;
  need_update_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserWBossInfo::~UserWBossInfo() {
  SharedDtor();
}

void UserWBossInfo::SharedDtor() {
  if (this != default_instance_) {
    delete dmg_info_;
  }
}

void UserWBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserWBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserWBossInfo_descriptor_;
}

const UserWBossInfo& UserWBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

UserWBossInfo* UserWBossInfo::default_instance_ = NULL;

UserWBossInfo* UserWBossInfo::New() const {
  return new UserWBossInfo;
}

void UserWBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_attack_times_ = 0;
    max_attack_times_ = 0;
    if (has_dmg_info()) {
      if (dmg_info_ != NULL) dmg_info_->::UserDamageInfo::Clear();
    }
    terminate_boss_times_ = 0;
    need_update_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserWBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cur_attack_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_attack_times_)));
          set_has_cur_attack_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_attack_times;
        break;
      }

      // optional int32 max_attack_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_attack_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_attack_times_)));
          set_has_max_attack_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dmg_info;
        break;
      }

      // optional .UserDamageInfo dmg_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dmg_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dmg_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_terminate_boss_times;
        break;
      }

      // optional int32 terminate_boss_times = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminate_boss_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terminate_boss_times_)));
          set_has_terminate_boss_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_need_update;
        break;
      }

      // optional int32 need_update = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_update_)));
          set_has_need_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserWBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cur_attack_times = 1;
  if (has_cur_attack_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_attack_times(), output);
  }

  // optional int32 max_attack_times = 2;
  if (has_max_attack_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_attack_times(), output);
  }

  // optional .UserDamageInfo dmg_info = 11;
  if (has_dmg_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->dmg_info(), output);
  }

  // optional int32 terminate_boss_times = 21;
  if (has_terminate_boss_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->terminate_boss_times(), output);
  }

  // optional int32 need_update = 50;
  if (has_need_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->need_update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserWBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cur_attack_times = 1;
  if (has_cur_attack_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_attack_times(), target);
  }

  // optional int32 max_attack_times = 2;
  if (has_max_attack_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_attack_times(), target);
  }

  // optional .UserDamageInfo dmg_info = 11;
  if (has_dmg_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->dmg_info(), target);
  }

  // optional int32 terminate_boss_times = 21;
  if (has_terminate_boss_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->terminate_boss_times(), target);
  }

  // optional int32 need_update = 50;
  if (has_need_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->need_update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserWBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cur_attack_times = 1;
    if (has_cur_attack_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_attack_times());
    }

    // optional int32 max_attack_times = 2;
    if (has_max_attack_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_attack_times());
    }

    // optional .UserDamageInfo dmg_info = 11;
    if (has_dmg_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dmg_info());
    }

    // optional int32 terminate_boss_times = 21;
    if (has_terminate_boss_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->terminate_boss_times());
    }

    // optional int32 need_update = 50;
    if (has_need_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserWBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserWBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserWBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserWBossInfo::MergeFrom(const UserWBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_attack_times()) {
      set_cur_attack_times(from.cur_attack_times());
    }
    if (from.has_max_attack_times()) {
      set_max_attack_times(from.max_attack_times());
    }
    if (from.has_dmg_info()) {
      mutable_dmg_info()->::UserDamageInfo::MergeFrom(from.dmg_info());
    }
    if (from.has_terminate_boss_times()) {
      set_terminate_boss_times(from.terminate_boss_times());
    }
    if (from.has_need_update()) {
      set_need_update(from.need_update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserWBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWBossInfo::CopyFrom(const UserWBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWBossInfo::IsInitialized() const {

  return true;
}

void UserWBossInfo::Swap(UserWBossInfo* other) {
  if (other != this) {
    std::swap(cur_attack_times_, other->cur_attack_times_);
    std::swap(max_attack_times_, other->max_attack_times_);
    std::swap(dmg_info_, other->dmg_info_);
    std::swap(terminate_boss_times_, other->terminate_boss_times_);
    std::swap(need_update_, other->need_update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserWBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserWBossInfo_descriptor_;
  metadata.reflection = UserWBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WBossTerminateInfo::kUserNameFieldNumber;
const int WBossTerminateInfo::kNickNameFieldNumber;
const int WBossTerminateInfo::kAttackDamageFieldNumber;
#endif  // !_MSC_VER

WBossTerminateInfo::WBossTerminateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WBossTerminateInfo::InitAsDefaultInstance() {
}

WBossTerminateInfo::WBossTerminateInfo(const WBossTerminateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WBossTerminateInfo::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attack_damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WBossTerminateInfo::~WBossTerminateInfo() {
  SharedDtor();
}

void WBossTerminateInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void WBossTerminateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WBossTerminateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WBossTerminateInfo_descriptor_;
}

const WBossTerminateInfo& WBossTerminateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

WBossTerminateInfo* WBossTerminateInfo::default_instance_ = NULL;

WBossTerminateInfo* WBossTerminateInfo::New() const {
  return new WBossTerminateInfo;
}

void WBossTerminateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
    attack_damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WBossTerminateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_attack_damage;
        break;
      }

      // optional int32 attack_damage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_damage_)));
          set_has_attack_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WBossTerminateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick_name(), output);
  }

  // optional int32 attack_damage = 11;
  if (has_attack_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->attack_damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WBossTerminateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional string nick_name = 2;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick_name(), target);
  }

  // optional int32 attack_damage = 11;
  if (has_attack_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->attack_damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WBossTerminateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string nick_name = 2;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

    // optional int32 attack_damage = 11;
    if (has_attack_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WBossTerminateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WBossTerminateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WBossTerminateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WBossTerminateInfo::MergeFrom(const WBossTerminateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
    if (from.has_attack_damage()) {
      set_attack_damage(from.attack_damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WBossTerminateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WBossTerminateInfo::CopyFrom(const WBossTerminateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WBossTerminateInfo::IsInitialized() const {

  return true;
}

void WBossTerminateInfo::Swap(WBossTerminateInfo* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(attack_damage_, other->attack_damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WBossTerminateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WBossTerminateInfo_descriptor_;
  metadata.reflection = WBossTerminateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WBossRankRewardItem::kIdxFieldNumber;
const int WBossRankRewardItem::kFromFieldNumber;
const int WBossRankRewardItem::kToFieldNumber;
const int WBossRankRewardItem::kItemListFieldNumber;
#endif  // !_MSC_VER

WBossRankRewardItem::WBossRankRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WBossRankRewardItem::InitAsDefaultInstance() {
}

WBossRankRewardItem::WBossRankRewardItem(const WBossRankRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WBossRankRewardItem::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  from_ = 0;
  to_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WBossRankRewardItem::~WBossRankRewardItem() {
  SharedDtor();
}

void WBossRankRewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WBossRankRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WBossRankRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WBossRankRewardItem_descriptor_;
}

const WBossRankRewardItem& WBossRankRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

WBossRankRewardItem* WBossRankRewardItem::default_instance_ = NULL;

WBossRankRewardItem* WBossRankRewardItem::New() const {
  return new WBossRankRewardItem;
}

void WBossRankRewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    from_ = 0;
    to_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WBossRankRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from;
        break;
      }

      // optional int32 from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
          set_has_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to;
        break;
      }

      // optional int32 to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_item_list;
        break;
      }

      // repeated .Item item_list = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WBossRankRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // optional int32 from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from(), output);
  }

  // optional int32 to = 3;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to(), output);
  }

  // repeated .Item item_list = 21;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WBossRankRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // optional int32 from = 2;
  if (has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from(), target);
  }

  // optional int32 to = 3;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to(), target);
  }

  // repeated .Item item_list = 21;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WBossRankRewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int32 from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from());
    }

    // optional int32 to = 3;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to());
    }

  }
  // repeated .Item item_list = 21;
  total_size += 2 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WBossRankRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WBossRankRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WBossRankRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WBossRankRewardItem::MergeFrom(const WBossRankRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WBossRankRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WBossRankRewardItem::CopyFrom(const WBossRankRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WBossRankRewardItem::IsInitialized() const {

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void WBossRankRewardItem::Swap(WBossRankRewardItem* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WBossRankRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WBossRankRewardItem_descriptor_;
  metadata.reflection = WBossRankRewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WBossRankRewardList::kItemsFieldNumber;
#endif  // !_MSC_VER

WBossRankRewardList::WBossRankRewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WBossRankRewardList::InitAsDefaultInstance() {
}

WBossRankRewardList::WBossRankRewardList(const WBossRankRewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WBossRankRewardList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WBossRankRewardList::~WBossRankRewardList() {
  SharedDtor();
}

void WBossRankRewardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WBossRankRewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WBossRankRewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WBossRankRewardList_descriptor_;
}

const WBossRankRewardList& WBossRankRewardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worldboss_2eproto();
  return *default_instance_;
}

WBossRankRewardList* WBossRankRewardList::default_instance_ = NULL;

WBossRankRewardList* WBossRankRewardList::New() const {
  return new WBossRankRewardList;
}

void WBossRankRewardList::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WBossRankRewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WBossRankRewardItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WBossRankRewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .WBossRankRewardItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WBossRankRewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .WBossRankRewardItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WBossRankRewardList::ByteSize() const {
  int total_size = 0;

  // repeated .WBossRankRewardItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WBossRankRewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WBossRankRewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WBossRankRewardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WBossRankRewardList::MergeFrom(const WBossRankRewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WBossRankRewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WBossRankRewardList::CopyFrom(const WBossRankRewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WBossRankRewardList::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void WBossRankRewardList::Swap(WBossRankRewardList* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WBossRankRewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WBossRankRewardList_descriptor_;
  metadata.reflection = WBossRankRewardList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
