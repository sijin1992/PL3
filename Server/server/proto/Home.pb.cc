// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Home.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Home.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LandInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HomeSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HomeSystemInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Home_2eproto() {
  protobuf_AddDesc_Home_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Home.proto");
  GOOGLE_CHECK(file != NULL);
  LandInfo_descriptor_ = file->message_type(0);
  static const int LandInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, land_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, resource_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, resource_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, resource_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, res_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, resource_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, helped_),
  };
  LandInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandInfo_descriptor_,
      LandInfo::default_instance_,
      LandInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandInfo));
  HomeSystemInfo_descriptor_ = file->message_type(1);
  static const int HomeSystemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSystemInfo, max_land_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSystemInfo, land_info_),
  };
  HomeSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HomeSystemInfo_descriptor_,
      HomeSystemInfo::default_instance_,
      HomeSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HomeSystemInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Home_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandInfo_descriptor_, &LandInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HomeSystemInfo_descriptor_, &HomeSystemInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Home_2eproto() {
  delete LandInfo::default_instance_;
  delete LandInfo_reflection_;
  delete HomeSystemInfo::default_instance_;
  delete HomeSystemInfo_reflection_;
}

void protobuf_AddDesc_Home_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nHome.proto\"\247\001\n\010LandInfo\022\022\n\nland_index\030"
    "\001 \002(\005\022\025\n\rresource_type\030\002 \001(\005\022\026\n\016resource"
    "_level\030\003 \001(\005\022\027\n\017resource_status\030\004 \001(\005\022\031\n"
    "\021res_refresh_times\030\005 \001(\005\022\024\n\014resource_num"
    "\030\006 \001(\005\022\016\n\006helped\030\007 \001(\010\"D\n\016HomeSystemInfo"
    "\022\024\n\014max_land_num\030\001 \001(\005\022\034\n\tland_info\030\002 \003("
    "\0132\t.LandInfo", 252);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Home.proto", &protobuf_RegisterTypes);
  LandInfo::default_instance_ = new LandInfo();
  HomeSystemInfo::default_instance_ = new HomeSystemInfo();
  LandInfo::default_instance_->InitAsDefaultInstance();
  HomeSystemInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Home_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Home_2eproto {
  StaticDescriptorInitializer_Home_2eproto() {
    protobuf_AddDesc_Home_2eproto();
  }
} static_descriptor_initializer_Home_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LandInfo::kLandIndexFieldNumber;
const int LandInfo::kResourceTypeFieldNumber;
const int LandInfo::kResourceLevelFieldNumber;
const int LandInfo::kResourceStatusFieldNumber;
const int LandInfo::kResRefreshTimesFieldNumber;
const int LandInfo::kResourceNumFieldNumber;
const int LandInfo::kHelpedFieldNumber;
#endif  // !_MSC_VER

LandInfo::LandInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LandInfo::InitAsDefaultInstance() {
}

LandInfo::LandInfo(const LandInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LandInfo::SharedCtor() {
  _cached_size_ = 0;
  land_index_ = 0;
  resource_type_ = 0;
  resource_level_ = 0;
  resource_status_ = 0;
  res_refresh_times_ = 0;
  resource_num_ = 0;
  helped_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandInfo::~LandInfo() {
  SharedDtor();
}

void LandInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandInfo_descriptor_;
}

const LandInfo& LandInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Home_2eproto();
  return *default_instance_;
}

LandInfo* LandInfo::default_instance_ = NULL;

LandInfo* LandInfo::New() const {
  return new LandInfo;
}

void LandInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    land_index_ = 0;
    resource_type_ = 0;
    resource_level_ = 0;
    resource_status_ = 0;
    res_refresh_times_ = 0;
    resource_num_ = 0;
    helped_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 land_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &land_index_)));
          set_has_land_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resource_type;
        break;
      }

      // optional int32 resource_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_type_)));
          set_has_resource_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resource_level;
        break;
      }

      // optional int32 resource_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_level_)));
          set_has_resource_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resource_status;
        break;
      }

      // optional int32 resource_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_status_)));
          set_has_resource_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_res_refresh_times;
        break;
      }

      // optional int32 res_refresh_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_refresh_times_)));
          set_has_res_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resource_num;
        break;
      }

      // optional int32 resource_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_num_)));
          set_has_resource_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_helped;
        break;
      }

      // optional bool helped = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helped_)));
          set_has_helped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 land_index = 1;
  if (has_land_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->land_index(), output);
  }

  // optional int32 resource_type = 2;
  if (has_resource_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resource_type(), output);
  }

  // optional int32 resource_level = 3;
  if (has_resource_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resource_level(), output);
  }

  // optional int32 resource_status = 4;
  if (has_resource_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resource_status(), output);
  }

  // optional int32 res_refresh_times = 5;
  if (has_res_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->res_refresh_times(), output);
  }

  // optional int32 resource_num = 6;
  if (has_resource_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->resource_num(), output);
  }

  // optional bool helped = 7;
  if (has_helped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->helped(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LandInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 land_index = 1;
  if (has_land_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->land_index(), target);
  }

  // optional int32 resource_type = 2;
  if (has_resource_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resource_type(), target);
  }

  // optional int32 resource_level = 3;
  if (has_resource_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resource_level(), target);
  }

  // optional int32 resource_status = 4;
  if (has_resource_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resource_status(), target);
  }

  // optional int32 res_refresh_times = 5;
  if (has_res_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->res_refresh_times(), target);
  }

  // optional int32 resource_num = 6;
  if (has_resource_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->resource_num(), target);
  }

  // optional bool helped = 7;
  if (has_helped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->helped(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LandInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 land_index = 1;
    if (has_land_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->land_index());
    }

    // optional int32 resource_type = 2;
    if (has_resource_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_type());
    }

    // optional int32 resource_level = 3;
    if (has_resource_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_level());
    }

    // optional int32 resource_status = 4;
    if (has_resource_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_status());
    }

    // optional int32 res_refresh_times = 5;
    if (has_res_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res_refresh_times());
    }

    // optional int32 resource_num = 6;
    if (has_resource_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resource_num());
    }

    // optional bool helped = 7;
    if (has_helped()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandInfo::MergeFrom(const LandInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_land_index()) {
      set_land_index(from.land_index());
    }
    if (from.has_resource_type()) {
      set_resource_type(from.resource_type());
    }
    if (from.has_resource_level()) {
      set_resource_level(from.resource_level());
    }
    if (from.has_resource_status()) {
      set_resource_status(from.resource_status());
    }
    if (from.has_res_refresh_times()) {
      set_res_refresh_times(from.res_refresh_times());
    }
    if (from.has_resource_num()) {
      set_resource_num(from.resource_num());
    }
    if (from.has_helped()) {
      set_helped(from.helped());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandInfo::CopyFrom(const LandInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LandInfo::Swap(LandInfo* other) {
  if (other != this) {
    std::swap(land_index_, other->land_index_);
    std::swap(resource_type_, other->resource_type_);
    std::swap(resource_level_, other->resource_level_);
    std::swap(resource_status_, other->resource_status_);
    std::swap(res_refresh_times_, other->res_refresh_times_);
    std::swap(resource_num_, other->resource_num_);
    std::swap(helped_, other->helped_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandInfo_descriptor_;
  metadata.reflection = LandInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HomeSystemInfo::kMaxLandNumFieldNumber;
const int HomeSystemInfo::kLandInfoFieldNumber;
#endif  // !_MSC_VER

HomeSystemInfo::HomeSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HomeSystemInfo::InitAsDefaultInstance() {
}

HomeSystemInfo::HomeSystemInfo(const HomeSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HomeSystemInfo::SharedCtor() {
  _cached_size_ = 0;
  max_land_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HomeSystemInfo::~HomeSystemInfo() {
  SharedDtor();
}

void HomeSystemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HomeSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HomeSystemInfo_descriptor_;
}

const HomeSystemInfo& HomeSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Home_2eproto();
  return *default_instance_;
}

HomeSystemInfo* HomeSystemInfo::default_instance_ = NULL;

HomeSystemInfo* HomeSystemInfo::New() const {
  return new HomeSystemInfo;
}

void HomeSystemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_land_num_ = 0;
  }
  land_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HomeSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_land_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_land_num_)));
          set_has_max_land_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_land_info;
        break;
      }

      // repeated .LandInfo land_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_land_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_land_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_land_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HomeSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_land_num = 1;
  if (has_max_land_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_land_num(), output);
  }

  // repeated .LandInfo land_info = 2;
  for (int i = 0; i < this->land_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->land_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HomeSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_land_num = 1;
  if (has_max_land_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_land_num(), target);
  }

  // repeated .LandInfo land_info = 2;
  for (int i = 0; i < this->land_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->land_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HomeSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_land_num = 1;
    if (has_max_land_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_land_num());
    }

  }
  // repeated .LandInfo land_info = 2;
  total_size += 1 * this->land_info_size();
  for (int i = 0; i < this->land_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->land_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HomeSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HomeSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HomeSystemInfo::MergeFrom(const HomeSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  land_info_.MergeFrom(from.land_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_land_num()) {
      set_max_land_num(from.max_land_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HomeSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeSystemInfo::CopyFrom(const HomeSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeSystemInfo::IsInitialized() const {

  for (int i = 0; i < land_info_size(); i++) {
    if (!this->land_info(i).IsInitialized()) return false;
  }
  return true;
}

void HomeSystemInfo::Swap(HomeSystemInfo* other) {
  if (other != this) {
    std::swap(max_land_num_, other->max_land_num_);
    land_info_.Swap(&other->land_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HomeSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HomeSystemInfo_descriptor_;
  metadata.reflection = HomeSystemInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
