// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gm_cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gm_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMFightReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFightReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMFightResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMFightResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GMFightResp_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GMAddItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAddItemResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAddItemResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GMAddItemResp_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DBSendMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBSendMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBGMResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBGMResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMSendMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMSendMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGeneralResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGeneralResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSnapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSnapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetUserSnapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetUserSnapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetUserSnapResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetUserSnapResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GMGetUserSnapResp_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GMBlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMBlockReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gm_5fcmd_2eproto() {
  protobuf_AddDesc_gm_5fcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gm_cmd.proto");
  GOOGLE_CHECK(file != NULL);
  GMFightReq_descriptor_ = file->message_type(0);
  static const int GMFightReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightReq, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightReq, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightReq, difficult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightReq, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightReq, session_),
  };
  GMFightReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFightReq_descriptor_,
      GMFightReq::default_instance_,
      GMFightReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFightReq));
  GMFightResp_descriptor_ = file->message_type(1);
  static const int GMFightResp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, difficult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, session_),
  };
  GMFightResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMFightResp_descriptor_,
      GMFightResp::default_instance_,
      GMFightResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMFightResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMFightResp));
  GMFightResp_Result_descriptor_ = GMFightResp_descriptor_->enum_type(0);
  GMAddItemReq_descriptor_ = file->message_type(2);
  static const int GMAddItemReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, gm_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, gm_pswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, session_),
  };
  GMAddItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddItemReq_descriptor_,
      GMAddItemReq::default_instance_,
      GMAddItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddItemReq));
  GMAddItemResp_descriptor_ = file->message_type(3);
  static const int GMAddItemResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemResp, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemResp, session_),
  };
  GMAddItemResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAddItemResp_descriptor_,
      GMAddItemResp::default_instance_,
      GMAddItemResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAddItemResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAddItemResp));
  GMAddItemResp_Result_descriptor_ = GMAddItemResp_descriptor_->enum_type(0);
  DBSendMailReq_descriptor_ = file->message_type(4);
  static const int DBSendMailReq_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, buchang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, vip_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, lev_limit_),
  };
  DBSendMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBSendMailReq_descriptor_,
      DBSendMailReq::default_instance_,
      DBSendMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBSendMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBSendMailReq));
  DBGMResp_descriptor_ = file->message_type(5);
  static const int DBGMResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGMResp, result_),
  };
  DBGMResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBGMResp_descriptor_,
      DBGMResp::default_instance_,
      DBGMResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGMResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBGMResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBGMResp));
  GMSendMailReq_descriptor_ = file->message_type(6);
  static const int GMSendMailReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailReq, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailReq, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailReq, session_),
  };
  GMSendMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMSendMailReq_descriptor_,
      GMSendMailReq::default_instance_,
      GMSendMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMSendMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMSendMailReq));
  GMGeneralResp_descriptor_ = file->message_type(7);
  static const int GMGeneralResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGeneralResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGeneralResp, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGeneralResp, session_),
  };
  GMGeneralResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGeneralResp_descriptor_,
      GMGeneralResp::default_instance_,
      GMGeneralResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGeneralResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGeneralResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGeneralResp));
  UserSnapInfo_descriptor_ = file->message_type(8);
  static const int UserSnapInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, qd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, vipscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, totaldep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, totalrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, php_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, maxpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, stagelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, maxrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, menpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, ip_),
  };
  UserSnapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSnapInfo_descriptor_,
      UserSnapInfo::default_instance_,
      UserSnapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSnapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSnapInfo));
  GMGetUserSnapReq_descriptor_ = file->message_type(9);
  static const int GMGetUserSnapReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapReq, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapReq, gmuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapReq, gmkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapReq, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapReq, session_),
  };
  GMGetUserSnapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetUserSnapReq_descriptor_,
      GMGetUserSnapReq::default_instance_,
      GMGetUserSnapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetUserSnapReq));
  GMGetUserSnapResp_descriptor_ = file->message_type(10);
  static const int GMGetUserSnapResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapResp, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapResp, session_),
  };
  GMGetUserSnapResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetUserSnapResp_descriptor_,
      GMGetUserSnapResp::default_instance_,
      GMGetUserSnapResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetUserSnapResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetUserSnapResp));
  GMGetUserSnapResp_Result_descriptor_ = GMGetUserSnapResp_descriptor_->enum_type(0);
  GMBlockReq_descriptor_ = file->message_type(11);
  static const int GMBlockReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBlockReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBlockReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBlockReq, blocktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBlockReq, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBlockReq, session_),
  };
  GMBlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMBlockReq_descriptor_,
      GMBlockReq::default_instance_,
      GMBlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMBlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMBlockReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gm_5fcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFightReq_descriptor_, &GMFightReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMFightResp_descriptor_, &GMFightResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddItemReq_descriptor_, &GMAddItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAddItemResp_descriptor_, &GMAddItemResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBSendMailReq_descriptor_, &DBSendMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBGMResp_descriptor_, &DBGMResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMSendMailReq_descriptor_, &GMSendMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGeneralResp_descriptor_, &GMGeneralResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSnapInfo_descriptor_, &UserSnapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetUserSnapReq_descriptor_, &GMGetUserSnapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetUserSnapResp_descriptor_, &GMGetUserSnapResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMBlockReq_descriptor_, &GMBlockReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gm_5fcmd_2eproto() {
  delete GMFightReq::default_instance_;
  delete GMFightReq_reflection_;
  delete GMFightResp::default_instance_;
  delete GMFightResp_reflection_;
  delete GMAddItemReq::default_instance_;
  delete GMAddItemReq_reflection_;
  delete GMAddItemResp::default_instance_;
  delete GMAddItemResp_reflection_;
  delete DBSendMailReq::default_instance_;
  delete DBSendMailReq_reflection_;
  delete DBGMResp::default_instance_;
  delete DBGMResp_reflection_;
  delete GMSendMailReq::default_instance_;
  delete GMSendMailReq_reflection_;
  delete GMGeneralResp::default_instance_;
  delete GMGeneralResp_reflection_;
  delete UserSnapInfo::default_instance_;
  delete UserSnapInfo_reflection_;
  delete GMGetUserSnapReq::default_instance_;
  delete GMGetUserSnapReq_reflection_;
  delete GMGetUserSnapResp::default_instance_;
  delete GMGetUserSnapResp_reflection_;
  delete GMBlockReq::default_instance_;
  delete GMBlockReq_reflection_;
}

void protobuf_AddDesc_gm_5fcmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Item_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014gm_cmd.proto\032\nItem.proto\"g\n\nGMFightReq"
    "\022\014\n\004user\030\001 \002(\014\022\016\n\006battle\030\002 \002(\005\022\013\n\003num\030\003 "
    "\002(\005\022\021\n\tdifficult\030\004 \002(\005\022\n\n\002fd\030\005 \001(\005\022\017\n\007se"
    "ssion\030\006 \001(\003\"\277\001\n\013GMFightResp\022#\n\006result\030\001 "
    "\002(\0162\023.GMFightResp.Result\022\014\n\004user\030\002 \002(\014\022\016"
    "\n\006battle\030\003 \002(\005\022\013\n\003num\030\004 \002(\005\022\021\n\tdifficult"
    "\030\005 \002(\005\022\013\n\003win\030\006 \001(\005\022\n\n\002fd\030\007 \001(\005\022\017\n\007sessi"
    "on\030\010 \001(\003\"#\n\006Result\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377"
    "\377\377\377\377\001\"\214\001\n\014GMAddItemReq\022\014\n\004user\030\001 \002(\014\022\014\n\004"
    "gold\030\002 \002(\005\022\017\n\007item_id\030\003 \002(\005\022\020\n\010item_num\030"
    "\004 \002(\005\022\017\n\007gm_user\030\005 \002(\t\022\017\n\007gm_pswd\030\006 \002(\t\022"
    "\n\n\002fd\030\007 \001(\005\022\017\n\007session\030\010 \001(\003\"x\n\rGMAddIte"
    "mResp\022%\n\006result\030\001 \002(\0162\025.GMAddItemResp.Re"
    "sult\022\n\n\002fd\030\002 \001(\005\022\017\n\007session\030\003 \001(\003\"#\n\006Res"
    "ult\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\"\314\001\n\rDBSen"
    "dMailReq\022\014\n\004user\030\001 \001(\014\022\014\n\004type\030\002 \002(\005\022\014\n\004"
    "from\030\003 \002(\t\022\017\n\007message\030\004 \002(\t\022\030\n\titem_list"
    "\030\005 \003(\0132\005.Item\022\017\n\007subject\030\006 \002(\t\022\014\n\004time\030\007"
    " \001(\005\022\017\n\007buchang\030\010 \001(\005\022\020\n\010reg_time\030\t \001(\003\022"
    "\021\n\tvip_limit\030\n \001(\005\022\021\n\tlev_limit\030\013 \001(\005\"\032\n"
    "\010DBGMResp\022\016\n\006result\030\001 \002(\005\"I\n\rGMSendMailR"
    "eq\022\033\n\003req\030\001 \002(\0132\016.DBSendMailReq\022\n\n\002fd\030\002 "
    "\002(\005\022\017\n\007session\030\003 \002(\003\"<\n\rGMGeneralResp\022\016\n"
    "\006result\030\001 \002(\005\022\n\n\002fd\030\002 \002(\005\022\017\n\007session\030\003 \002"
    "(\003\"\234\002\n\014UserSnapInfo\022\013\n\003uid\030\001 \001(\t\022\014\n\004nick"
    "\030\002 \001(\t\022\n\n\002qd\030\003 \001(\t\022\n\n\002lv\030\004 \001(\005\022\013\n\003exp\030\005 "
    "\001(\003\022\r\n\005viplv\030\006 \001(\005\022\020\n\010vipscore\030\007 \001(\003\022\020\n\010"
    "totaldep\030\010 \001(\005\022\020\n\010totalrmb\030\t \001(\005\022\014\n\004gold"
    "\030\n \001(\005\022\r\n\005money\030\013 \001(\005\022\013\n\003php\030\014 \001(\005\022\020\n\010ma"
    "xpower\030\r \001(\005\022\r\n\005state\030\016 \001(\005\022\017\n\007stagelv\030\017"
    " \001(\005\022\017\n\007maxrank\030\020 \001(\005\022\016\n\006menpai\030\021 \001(\t\022\n\n"
    "\002ip\0303 \001(\t\"o\n\020GMGetUserSnapReq\022\020\n\010usernam"
    "e\030\001 \001(\t\022\r\n\005flags\030\002 \001(\t\022\016\n\006gmuser\030\013 \001(\t\022\r"
    "\n\005gmkey\030\014 \001(\t\022\n\n\002fd\030\025 \001(\005\022\017\n\007session\030\026 \001"
    "(\003\"\235\001\n\021GMGetUserSnapResp\022)\n\006result\030\001 \002(\016"
    "2\031.GMGetUserSnapResp.Result\022\033\n\004info\030\002 \001("
    "\0132\r.UserSnapInfo\022\n\n\002fd\030\025 \001(\005\022\017\n\007session\030"
    "\026 \001(\003\"#\n\006Result\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377"
    "\377\001\"W\n\nGMBlockReq\022\013\n\003uid\030\001 \002(\t\022\014\n\004type\030\002 "
    "\001(\005\022\021\n\tblocktime\030\003 \001(\005\022\n\n\002fd\030\004 \002(\005\022\017\n\007se"
    "ssion\030\005 \002(\003", 1611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gm_cmd.proto", &protobuf_RegisterTypes);
  GMFightReq::default_instance_ = new GMFightReq();
  GMFightResp::default_instance_ = new GMFightResp();
  GMAddItemReq::default_instance_ = new GMAddItemReq();
  GMAddItemResp::default_instance_ = new GMAddItemResp();
  DBSendMailReq::default_instance_ = new DBSendMailReq();
  DBGMResp::default_instance_ = new DBGMResp();
  GMSendMailReq::default_instance_ = new GMSendMailReq();
  GMGeneralResp::default_instance_ = new GMGeneralResp();
  UserSnapInfo::default_instance_ = new UserSnapInfo();
  GMGetUserSnapReq::default_instance_ = new GMGetUserSnapReq();
  GMGetUserSnapResp::default_instance_ = new GMGetUserSnapResp();
  GMBlockReq::default_instance_ = new GMBlockReq();
  GMFightReq::default_instance_->InitAsDefaultInstance();
  GMFightResp::default_instance_->InitAsDefaultInstance();
  GMAddItemReq::default_instance_->InitAsDefaultInstance();
  GMAddItemResp::default_instance_->InitAsDefaultInstance();
  DBSendMailReq::default_instance_->InitAsDefaultInstance();
  DBGMResp::default_instance_->InitAsDefaultInstance();
  GMSendMailReq::default_instance_->InitAsDefaultInstance();
  GMGeneralResp::default_instance_->InitAsDefaultInstance();
  UserSnapInfo::default_instance_->InitAsDefaultInstance();
  GMGetUserSnapReq::default_instance_->InitAsDefaultInstance();
  GMGetUserSnapResp::default_instance_->InitAsDefaultInstance();
  GMBlockReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gm_5fcmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gm_5fcmd_2eproto {
  StaticDescriptorInitializer_gm_5fcmd_2eproto() {
    protobuf_AddDesc_gm_5fcmd_2eproto();
  }
} static_descriptor_initializer_gm_5fcmd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GMFightReq::kUserFieldNumber;
const int GMFightReq::kBattleFieldNumber;
const int GMFightReq::kNumFieldNumber;
const int GMFightReq::kDifficultFieldNumber;
const int GMFightReq::kFdFieldNumber;
const int GMFightReq::kSessionFieldNumber;
#endif  // !_MSC_VER

GMFightReq::GMFightReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFightReq::InitAsDefaultInstance() {
}

GMFightReq::GMFightReq(const GMFightReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFightReq::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battle_ = 0;
  num_ = 0;
  difficult_ = 0;
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFightReq::~GMFightReq() {
  SharedDtor();
}

void GMFightReq::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GMFightReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFightReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFightReq_descriptor_;
}

const GMFightReq& GMFightReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMFightReq* GMFightReq::default_instance_ = NULL;

GMFightReq* GMFightReq::New() const {
  return new GMFightReq;
}

void GMFightReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    battle_ = 0;
    num_ = 0;
    difficult_ = 0;
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFightReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle;
        break;
      }

      // required int32 battle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_difficult;
        break;
      }

      // required int32 difficult = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fd;
        break;
      }

      // optional int32 fd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_session;
        break;
      }

      // optional int64 session = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFightReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user(), output);
  }

  // required int32 battle = 2;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // required int32 difficult = 4;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difficult(), output);
  }

  // optional int32 fd = 5;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fd(), output);
  }

  // optional int64 session = 6;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFightReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // required int32 battle = 2;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // required int32 difficult = 4;
  if (has_difficult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difficult(), target);
  }

  // optional int32 fd = 5;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fd(), target);
  }

  // optional int64 session = 6;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFightReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // required int32 battle = 2;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 difficult = 4;
    if (has_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficult());
    }

    // optional int32 fd = 5;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 session = 6;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFightReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFightReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFightReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFightReq::MergeFrom(const GMFightReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFightReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFightReq::CopyFrom(const GMFightReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFightReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GMFightReq::Swap(GMFightReq* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(battle_, other->battle_);
    std::swap(num_, other->num_);
    std::swap(difficult_, other->difficult_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFightReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFightReq_descriptor_;
  metadata.reflection = GMFightReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GMFightResp_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFightResp_Result_descriptor_;
}
bool GMFightResp_Result_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GMFightResp_Result GMFightResp::OK;
const GMFightResp_Result GMFightResp::FAIL;
const GMFightResp_Result GMFightResp::Result_MIN;
const GMFightResp_Result GMFightResp::Result_MAX;
const int GMFightResp::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GMFightResp::kResultFieldNumber;
const int GMFightResp::kUserFieldNumber;
const int GMFightResp::kBattleFieldNumber;
const int GMFightResp::kNumFieldNumber;
const int GMFightResp::kDifficultFieldNumber;
const int GMFightResp::kWinFieldNumber;
const int GMFightResp::kFdFieldNumber;
const int GMFightResp::kSessionFieldNumber;
#endif  // !_MSC_VER

GMFightResp::GMFightResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMFightResp::InitAsDefaultInstance() {
}

GMFightResp::GMFightResp(const GMFightResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMFightResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battle_ = 0;
  num_ = 0;
  difficult_ = 0;
  win_ = 0;
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMFightResp::~GMFightResp() {
  SharedDtor();
}

void GMFightResp::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GMFightResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMFightResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMFightResp_descriptor_;
}

const GMFightResp& GMFightResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMFightResp* GMFightResp::default_instance_ = NULL;

GMFightResp* GMFightResp::New() const {
  return new GMFightResp;
}

void GMFightResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    battle_ = 0;
    num_ = 0;
    difficult_ = 0;
    win_ = 0;
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMFightResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GMFightResp.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GMFightResp_Result_IsValid(value)) {
            set_result(static_cast< ::GMFightResp_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required bytes user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle;
        break;
      }

      // required int32 battle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // required int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_difficult;
        break;
      }

      // required int32 difficult = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficult_)));
          set_has_difficult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win;
        break;
      }

      // optional int32 win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fd;
        break;
      }

      // optional int32 fd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_session;
        break;
      }

      // optional int64 session = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMFightResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GMFightResp.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required bytes user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->user(), output);
  }

  // required int32 battle = 3;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle(), output);
  }

  // required int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // required int32 difficult = 5;
  if (has_difficult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->difficult(), output);
  }

  // optional int32 win = 6;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->win(), output);
  }

  // optional int32 fd = 7;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fd(), output);
  }

  // optional int64 session = 8;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMFightResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GMFightResp.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required bytes user = 2;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user(), target);
  }

  // required int32 battle = 3;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle(), target);
  }

  // required int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // required int32 difficult = 5;
  if (has_difficult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->difficult(), target);
  }

  // optional int32 win = 6;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->win(), target);
  }

  // optional int32 fd = 7;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fd(), target);
  }

  // optional int64 session = 8;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMFightResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GMFightResp.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required bytes user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // required int32 battle = 3;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle());
    }

    // required int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 difficult = 5;
    if (has_difficult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficult());
    }

    // optional int32 win = 6;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // optional int32 fd = 7;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 session = 8;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMFightResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMFightResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMFightResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMFightResp::MergeFrom(const GMFightResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_difficult()) {
      set_difficult(from.difficult());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMFightResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMFightResp::CopyFrom(const GMFightResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMFightResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GMFightResp::Swap(GMFightResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_, other->user_);
    std::swap(battle_, other->battle_);
    std::swap(num_, other->num_);
    std::swap(difficult_, other->difficult_);
    std::swap(win_, other->win_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMFightResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMFightResp_descriptor_;
  metadata.reflection = GMFightResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAddItemReq::kUserFieldNumber;
const int GMAddItemReq::kGoldFieldNumber;
const int GMAddItemReq::kItemIdFieldNumber;
const int GMAddItemReq::kItemNumFieldNumber;
const int GMAddItemReq::kGmUserFieldNumber;
const int GMAddItemReq::kGmPswdFieldNumber;
const int GMAddItemReq::kFdFieldNumber;
const int GMAddItemReq::kSessionFieldNumber;
#endif  // !_MSC_VER

GMAddItemReq::GMAddItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddItemReq::InitAsDefaultInstance() {
}

GMAddItemReq::GMAddItemReq(const GMAddItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddItemReq::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gold_ = 0;
  item_id_ = 0;
  item_num_ = 0;
  gm_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gm_pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddItemReq::~GMAddItemReq() {
  SharedDtor();
}

void GMAddItemReq::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (gm_user_ != &::google::protobuf::internal::kEmptyString) {
    delete gm_user_;
  }
  if (gm_pswd_ != &::google::protobuf::internal::kEmptyString) {
    delete gm_pswd_;
  }
  if (this != default_instance_) {
  }
}

void GMAddItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddItemReq_descriptor_;
}

const GMAddItemReq& GMAddItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMAddItemReq* GMAddItemReq::default_instance_ = NULL;

GMAddItemReq* GMAddItemReq::New() const {
  return new GMAddItemReq;
}

void GMAddItemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    gold_ = 0;
    item_id_ = 0;
    item_num_ = 0;
    if (has_gm_user()) {
      if (gm_user_ != &::google::protobuf::internal::kEmptyString) {
        gm_user_->clear();
      }
    }
    if (has_gm_pswd()) {
      if (gm_pswd_ != &::google::protobuf::internal::kEmptyString) {
        gm_pswd_->clear();
      }
    }
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // required int32 item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_gm_user;
        break;
      }

      // required string gm_user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gm_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gm_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gm_user().data(), this->gm_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gm_pswd;
        break;
      }

      // required string gm_pswd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gm_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gm_pswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gm_pswd().data(), this->gm_pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fd;
        break;
      }

      // optional int32 fd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_session;
        break;
      }

      // optional int64 session = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user(), output);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  // required int32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_num(), output);
  }

  // required string gm_user = 5;
  if (has_gm_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gm_user().data(), this->gm_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->gm_user(), output);
  }

  // required string gm_pswd = 6;
  if (has_gm_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gm_pswd().data(), this->gm_pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gm_pswd(), output);
  }

  // optional int32 fd = 7;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fd(), output);
  }

  // optional int64 session = 8;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  // required int32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_num(), target);
  }

  // required string gm_user = 5;
  if (has_gm_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gm_user().data(), this->gm_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gm_user(), target);
  }

  // required string gm_pswd = 6;
  if (has_gm_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gm_pswd().data(), this->gm_pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gm_pswd(), target);
  }

  // optional int32 fd = 7;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fd(), target);
  }

  // optional int64 session = 8;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_num());
    }

    // required string gm_user = 5;
    if (has_gm_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gm_user());
    }

    // required string gm_pswd = 6;
    if (has_gm_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gm_pswd());
    }

    // optional int32 fd = 7;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 session = 8;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddItemReq::MergeFrom(const GMAddItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_gm_user()) {
      set_gm_user(from.gm_user());
    }
    if (from.has_gm_pswd()) {
      set_gm_pswd(from.gm_pswd());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddItemReq::CopyFrom(const GMAddItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddItemReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GMAddItemReq::Swap(GMAddItemReq* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(gold_, other->gold_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(gm_user_, other->gm_user_);
    std::swap(gm_pswd_, other->gm_pswd_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddItemReq_descriptor_;
  metadata.reflection = GMAddItemReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GMAddItemResp_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddItemResp_Result_descriptor_;
}
bool GMAddItemResp_Result_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GMAddItemResp_Result GMAddItemResp::OK;
const GMAddItemResp_Result GMAddItemResp::FAIL;
const GMAddItemResp_Result GMAddItemResp::Result_MIN;
const GMAddItemResp_Result GMAddItemResp::Result_MAX;
const int GMAddItemResp::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GMAddItemResp::kResultFieldNumber;
const int GMAddItemResp::kFdFieldNumber;
const int GMAddItemResp::kSessionFieldNumber;
#endif  // !_MSC_VER

GMAddItemResp::GMAddItemResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAddItemResp::InitAsDefaultInstance() {
}

GMAddItemResp::GMAddItemResp(const GMAddItemResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAddItemResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAddItemResp::~GMAddItemResp() {
  SharedDtor();
}

void GMAddItemResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMAddItemResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAddItemResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAddItemResp_descriptor_;
}

const GMAddItemResp& GMAddItemResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMAddItemResp* GMAddItemResp::default_instance_ = NULL;

GMAddItemResp* GMAddItemResp::New() const {
  return new GMAddItemResp;
}

void GMAddItemResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAddItemResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GMAddItemResp.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GMAddItemResp_Result_IsValid(value)) {
            set_result(static_cast< ::GMAddItemResp_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }

      // optional int32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // optional int64 session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAddItemResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GMAddItemResp.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 fd = 2;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fd(), output);
  }

  // optional int64 session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAddItemResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GMAddItemResp.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 fd = 2;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fd(), target);
  }

  // optional int64 session = 3;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAddItemResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GMAddItemResp.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAddItemResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAddItemResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAddItemResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAddItemResp::MergeFrom(const GMAddItemResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAddItemResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAddItemResp::CopyFrom(const GMAddItemResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAddItemResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMAddItemResp::Swap(GMAddItemResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAddItemResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAddItemResp_descriptor_;
  metadata.reflection = GMAddItemResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBSendMailReq::kUserFieldNumber;
const int DBSendMailReq::kTypeFieldNumber;
const int DBSendMailReq::kFromFieldNumber;
const int DBSendMailReq::kMessageFieldNumber;
const int DBSendMailReq::kItemListFieldNumber;
const int DBSendMailReq::kSubjectFieldNumber;
const int DBSendMailReq::kTimeFieldNumber;
const int DBSendMailReq::kBuchangFieldNumber;
const int DBSendMailReq::kRegTimeFieldNumber;
const int DBSendMailReq::kVipLimitFieldNumber;
const int DBSendMailReq::kLevLimitFieldNumber;
#endif  // !_MSC_VER

DBSendMailReq::DBSendMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBSendMailReq::InitAsDefaultInstance() {
}

DBSendMailReq::DBSendMailReq(const DBSendMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBSendMailReq::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  buchang_ = 0;
  reg_time_ = GOOGLE_LONGLONG(0);
  vip_limit_ = 0;
  lev_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBSendMailReq::~DBSendMailReq() {
  SharedDtor();
}

void DBSendMailReq::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (this != default_instance_) {
  }
}

void DBSendMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBSendMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBSendMailReq_descriptor_;
}

const DBSendMailReq& DBSendMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

DBSendMailReq* DBSendMailReq::default_instance_ = NULL;

DBSendMailReq* DBSendMailReq::New() const {
  return new DBSendMailReq;
}

void DBSendMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    type_ = 0;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::kEmptyString) {
        subject_->clear();
      }
    }
    time_ = 0;
    buchang_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reg_time_ = GOOGLE_LONGLONG(0);
    vip_limit_ = 0;
    lev_limit_ = 0;
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBSendMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from;
        break;
      }

      // required string from = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // required string message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_list;
        break;
      }

      // repeated .Item item_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_list;
        if (input->ExpectTag(50)) goto parse_subject;
        break;
      }

      // required string subject = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buchang;
        break;
      }

      // optional int32 buchang = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buchang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buchang_)));
          set_has_buchang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reg_time;
        break;
      }

      // optional int64 reg_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vip_limit;
        break;
      }

      // optional int32 vip_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_limit_)));
          set_has_vip_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lev_limit;
        break;
      }

      // optional int32 lev_limit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lev_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_limit_)));
          set_has_lev_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBSendMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->user(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required string from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from(), output);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message(), output);
  }

  // repeated .Item item_list = 5;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_list(i), output);
  }

  // required string subject = 6;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->subject(), output);
  }

  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }

  // optional int32 buchang = 8;
  if (has_buchang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buchang(), output);
  }

  // optional int64 reg_time = 9;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->reg_time(), output);
  }

  // optional int32 vip_limit = 10;
  if (has_vip_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip_limit(), output);
  }

  // optional int32 lev_limit = 11;
  if (has_lev_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lev_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBSendMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required string from = 3;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from(), target);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // repeated .Item item_list = 5;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_list(i), target);
  }

  // required string subject = 6;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->subject(), target);
  }

  // optional int32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time(), target);
  }

  // optional int32 buchang = 8;
  if (has_buchang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buchang(), target);
  }

  // optional int64 reg_time = 9;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->reg_time(), target);
  }

  // optional int32 vip_limit = 10;
  if (has_vip_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip_limit(), target);
  }

  // optional int32 lev_limit = 11;
  if (has_lev_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lev_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBSendMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string from = 3;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // required string subject = 6;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 buchang = 8;
    if (has_buchang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buchang());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 reg_time = 9;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reg_time());
    }

    // optional int32 vip_limit = 10;
    if (has_vip_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_limit());
    }

    // optional int32 lev_limit = 11;
    if (has_lev_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev_limit());
    }

  }
  // repeated .Item item_list = 5;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBSendMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBSendMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBSendMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBSendMailReq::MergeFrom(const DBSendMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_buchang()) {
      set_buchang(from.buchang());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_vip_limit()) {
      set_vip_limit(from.vip_limit());
    }
    if (from.has_lev_limit()) {
      set_lev_limit(from.lev_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBSendMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBSendMailReq::CopyFrom(const DBSendMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSendMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002e) != 0x0000002e) return false;

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void DBSendMailReq::Swap(DBSendMailReq* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(type_, other->type_);
    std::swap(from_, other->from_);
    std::swap(message_, other->message_);
    item_list_.Swap(&other->item_list_);
    std::swap(subject_, other->subject_);
    std::swap(time_, other->time_);
    std::swap(buchang_, other->buchang_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(vip_limit_, other->vip_limit_);
    std::swap(lev_limit_, other->lev_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBSendMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBSendMailReq_descriptor_;
  metadata.reflection = DBSendMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBGMResp::kResultFieldNumber;
#endif  // !_MSC_VER

DBGMResp::DBGMResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBGMResp::InitAsDefaultInstance() {
}

DBGMResp::DBGMResp(const DBGMResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBGMResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBGMResp::~DBGMResp() {
  SharedDtor();
}

void DBGMResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBGMResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBGMResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBGMResp_descriptor_;
}

const DBGMResp& DBGMResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

DBGMResp* DBGMResp::default_instance_ = NULL;

DBGMResp* DBGMResp::New() const {
  return new DBGMResp;
}

void DBGMResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBGMResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBGMResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBGMResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBGMResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBGMResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBGMResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBGMResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBGMResp::MergeFrom(const DBGMResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBGMResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBGMResp::CopyFrom(const DBGMResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGMResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DBGMResp::Swap(DBGMResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBGMResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBGMResp_descriptor_;
  metadata.reflection = DBGMResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMSendMailReq::kReqFieldNumber;
const int GMSendMailReq::kFdFieldNumber;
const int GMSendMailReq::kSessionFieldNumber;
#endif  // !_MSC_VER

GMSendMailReq::GMSendMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMSendMailReq::InitAsDefaultInstance() {
  req_ = const_cast< ::DBSendMailReq*>(&::DBSendMailReq::default_instance());
}

GMSendMailReq::GMSendMailReq(const GMSendMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMSendMailReq::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMSendMailReq::~GMSendMailReq() {
  SharedDtor();
}

void GMSendMailReq::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void GMSendMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMSendMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMSendMailReq_descriptor_;
}

const GMSendMailReq& GMSendMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMSendMailReq* GMSendMailReq::default_instance_ = NULL;

GMSendMailReq* GMSendMailReq::New() const {
  return new GMSendMailReq;
}

void GMSendMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::DBSendMailReq::Clear();
    }
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMSendMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DBSendMailReq req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }

      // required int32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // required int64 session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMSendMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DBSendMailReq req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  // required int32 fd = 2;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fd(), output);
  }

  // required int64 session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMSendMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DBSendMailReq req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  // required int32 fd = 2;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fd(), target);
  }

  // required int64 session = 3;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMSendMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DBSendMailReq req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // required int32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // required int64 session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMSendMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMSendMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMSendMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMSendMailReq::MergeFrom(const GMSendMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::DBSendMailReq::MergeFrom(from.req());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMSendMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMSendMailReq::CopyFrom(const GMSendMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMSendMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void GMSendMailReq::Swap(GMSendMailReq* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMSendMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMSendMailReq_descriptor_;
  metadata.reflection = GMSendMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGeneralResp::kResultFieldNumber;
const int GMGeneralResp::kFdFieldNumber;
const int GMGeneralResp::kSessionFieldNumber;
#endif  // !_MSC_VER

GMGeneralResp::GMGeneralResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGeneralResp::InitAsDefaultInstance() {
}

GMGeneralResp::GMGeneralResp(const GMGeneralResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGeneralResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGeneralResp::~GMGeneralResp() {
  SharedDtor();
}

void GMGeneralResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMGeneralResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGeneralResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGeneralResp_descriptor_;
}

const GMGeneralResp& GMGeneralResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMGeneralResp* GMGeneralResp::default_instance_ = NULL;

GMGeneralResp* GMGeneralResp::New() const {
  return new GMGeneralResp;
}

void GMGeneralResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGeneralResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fd;
        break;
      }

      // required int32 fd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_session;
        break;
      }

      // required int64 session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGeneralResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 fd = 2;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fd(), output);
  }

  // required int64 session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGeneralResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 fd = 2;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fd(), target);
  }

  // required int64 session = 3;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGeneralResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 fd = 2;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // required int64 session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGeneralResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGeneralResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGeneralResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGeneralResp::MergeFrom(const GMGeneralResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGeneralResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGeneralResp::CopyFrom(const GMGeneralResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGeneralResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GMGeneralResp::Swap(GMGeneralResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGeneralResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGeneralResp_descriptor_;
  metadata.reflection = GMGeneralResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSnapInfo::kUidFieldNumber;
const int UserSnapInfo::kNickFieldNumber;
const int UserSnapInfo::kQdFieldNumber;
const int UserSnapInfo::kLvFieldNumber;
const int UserSnapInfo::kExpFieldNumber;
const int UserSnapInfo::kViplvFieldNumber;
const int UserSnapInfo::kVipscoreFieldNumber;
const int UserSnapInfo::kTotaldepFieldNumber;
const int UserSnapInfo::kTotalrmbFieldNumber;
const int UserSnapInfo::kGoldFieldNumber;
const int UserSnapInfo::kMoneyFieldNumber;
const int UserSnapInfo::kPhpFieldNumber;
const int UserSnapInfo::kMaxpowerFieldNumber;
const int UserSnapInfo::kStateFieldNumber;
const int UserSnapInfo::kStagelvFieldNumber;
const int UserSnapInfo::kMaxrankFieldNumber;
const int UserSnapInfo::kMenpaiFieldNumber;
const int UserSnapInfo::kIpFieldNumber;
#endif  // !_MSC_VER

UserSnapInfo::UserSnapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSnapInfo::InitAsDefaultInstance() {
}

UserSnapInfo::UserSnapInfo(const UserSnapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSnapInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  viplv_ = 0;
  vipscore_ = GOOGLE_LONGLONG(0);
  totaldep_ = 0;
  totalrmb_ = 0;
  gold_ = 0;
  money_ = 0;
  php_ = 0;
  maxpower_ = 0;
  state_ = 0;
  stagelv_ = 0;
  maxrank_ = 0;
  menpai_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSnapInfo::~UserSnapInfo() {
  SharedDtor();
}

void UserSnapInfo::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (qd_ != &::google::protobuf::internal::kEmptyString) {
    delete qd_;
  }
  if (menpai_ != &::google::protobuf::internal::kEmptyString) {
    delete menpai_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void UserSnapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSnapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSnapInfo_descriptor_;
}

const UserSnapInfo& UserSnapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

UserSnapInfo* UserSnapInfo::default_instance_ = NULL;

UserSnapInfo* UserSnapInfo::New() const {
  return new UserSnapInfo;
}

void UserSnapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    if (has_qd()) {
      if (qd_ != &::google::protobuf::internal::kEmptyString) {
        qd_->clear();
      }
    }
    lv_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    viplv_ = 0;
    vipscore_ = GOOGLE_LONGLONG(0);
    totaldep_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    totalrmb_ = 0;
    gold_ = 0;
    money_ = 0;
    php_ = 0;
    maxpower_ = 0;
    state_ = 0;
    stagelv_ = 0;
    maxrank_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_menpai()) {
      if (menpai_ != &::google::protobuf::internal::kEmptyString) {
        menpai_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSnapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }

      // optional string nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qd;
        break;
      }

      // optional string qd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qd().data(), this->qd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int64 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipscore;
        break;
      }

      // optional int64 vipscore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vipscore_)));
          set_has_vipscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_totaldep;
        break;
      }

      // optional int32 totaldep = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totaldep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldep_)));
          set_has_totaldep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_totalrmb;
        break;
      }

      // optional int32 totalrmb = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalrmb_)));
          set_has_totalrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional int32 gold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_money;
        break;
      }

      // optional int32 money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_php;
        break;
      }

      // optional int32 php = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_php:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &php_)));
          set_has_php();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_maxpower;
        break;
      }

      // optional int32 maxpower = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpower_)));
          set_has_maxpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_state;
        break;
      }

      // optional int32 state = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_stagelv;
        break;
      }

      // optional int32 stagelv = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stagelv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stagelv_)));
          set_has_stagelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_maxrank;
        break;
      }

      // optional int32 maxrank = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrank_)));
          set_has_maxrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_menpai;
        break;
      }

      // optional string menpai = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_menpai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menpai()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->menpai().data(), this->menpai().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_ip;
        break;
      }

      // optional string ip = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSnapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

  // optional string qd = 3;
  if (has_qd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qd().data(), this->qd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->qd(), output);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  // optional int64 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->exp(), output);
  }

  // optional int32 viplv = 6;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viplv(), output);
  }

  // optional int64 vipscore = 7;
  if (has_vipscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vipscore(), output);
  }

  // optional int32 totaldep = 8;
  if (has_totaldep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totaldep(), output);
  }

  // optional int32 totalrmb = 9;
  if (has_totalrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->totalrmb(), output);
  }

  // optional int32 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gold(), output);
  }

  // optional int32 money = 11;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->money(), output);
  }

  // optional int32 php = 12;
  if (has_php()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->php(), output);
  }

  // optional int32 maxpower = 13;
  if (has_maxpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxpower(), output);
  }

  // optional int32 state = 14;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->state(), output);
  }

  // optional int32 stagelv = 15;
  if (has_stagelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->stagelv(), output);
  }

  // optional int32 maxrank = 16;
  if (has_maxrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->maxrank(), output);
  }

  // optional string menpai = 17;
  if (has_menpai()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menpai().data(), this->menpai().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->menpai(), output);
  }

  // optional string ip = 51;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSnapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nick(), target);
  }

  // optional string qd = 3;
  if (has_qd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qd().data(), this->qd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->qd(), target);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  // optional int64 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->exp(), target);
  }

  // optional int32 viplv = 6;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viplv(), target);
  }

  // optional int64 vipscore = 7;
  if (has_vipscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vipscore(), target);
  }

  // optional int32 totaldep = 8;
  if (has_totaldep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totaldep(), target);
  }

  // optional int32 totalrmb = 9;
  if (has_totalrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->totalrmb(), target);
  }

  // optional int32 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gold(), target);
  }

  // optional int32 money = 11;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->money(), target);
  }

  // optional int32 php = 12;
  if (has_php()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->php(), target);
  }

  // optional int32 maxpower = 13;
  if (has_maxpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxpower(), target);
  }

  // optional int32 state = 14;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->state(), target);
  }

  // optional int32 stagelv = 15;
  if (has_stagelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->stagelv(), target);
  }

  // optional int32 maxrank = 16;
  if (has_maxrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->maxrank(), target);
  }

  // optional string menpai = 17;
  if (has_menpai()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->menpai().data(), this->menpai().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->menpai(), target);
  }

  // optional string ip = 51;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSnapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // optional string qd = 3;
    if (has_qd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qd());
    }

    // optional int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 viplv = 6;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // optional int64 vipscore = 7;
    if (has_vipscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vipscore());
    }

    // optional int32 totaldep = 8;
    if (has_totaldep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldep());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 totalrmb = 9;
    if (has_totalrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalrmb());
    }

    // optional int32 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 money = 11;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 php = 12;
    if (has_php()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->php());
    }

    // optional int32 maxpower = 13;
    if (has_maxpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpower());
    }

    // optional int32 state = 14;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 stagelv = 15;
    if (has_stagelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stagelv());
    }

    // optional int32 maxrank = 16;
    if (has_maxrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrank());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string menpai = 17;
    if (has_menpai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menpai());
    }

    // optional string ip = 51;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSnapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSnapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSnapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSnapInfo::MergeFrom(const UserSnapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_qd()) {
      set_qd(from.qd());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_vipscore()) {
      set_vipscore(from.vipscore());
    }
    if (from.has_totaldep()) {
      set_totaldep(from.totaldep());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_totalrmb()) {
      set_totalrmb(from.totalrmb());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_php()) {
      set_php(from.php());
    }
    if (from.has_maxpower()) {
      set_maxpower(from.maxpower());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_stagelv()) {
      set_stagelv(from.stagelv());
    }
    if (from.has_maxrank()) {
      set_maxrank(from.maxrank());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_menpai()) {
      set_menpai(from.menpai());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSnapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSnapInfo::CopyFrom(const UserSnapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSnapInfo::IsInitialized() const {

  return true;
}

void UserSnapInfo::Swap(UserSnapInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nick_, other->nick_);
    std::swap(qd_, other->qd_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(viplv_, other->viplv_);
    std::swap(vipscore_, other->vipscore_);
    std::swap(totaldep_, other->totaldep_);
    std::swap(totalrmb_, other->totalrmb_);
    std::swap(gold_, other->gold_);
    std::swap(money_, other->money_);
    std::swap(php_, other->php_);
    std::swap(maxpower_, other->maxpower_);
    std::swap(state_, other->state_);
    std::swap(stagelv_, other->stagelv_);
    std::swap(maxrank_, other->maxrank_);
    std::swap(menpai_, other->menpai_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSnapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSnapInfo_descriptor_;
  metadata.reflection = UserSnapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetUserSnapReq::kUsernameFieldNumber;
const int GMGetUserSnapReq::kFlagsFieldNumber;
const int GMGetUserSnapReq::kGmuserFieldNumber;
const int GMGetUserSnapReq::kGmkeyFieldNumber;
const int GMGetUserSnapReq::kFdFieldNumber;
const int GMGetUserSnapReq::kSessionFieldNumber;
#endif  // !_MSC_VER

GMGetUserSnapReq::GMGetUserSnapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetUserSnapReq::InitAsDefaultInstance() {
}

GMGetUserSnapReq::GMGetUserSnapReq(const GMGetUserSnapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetUserSnapReq::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gmuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gmkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetUserSnapReq::~GMGetUserSnapReq() {
  SharedDtor();
}

void GMGetUserSnapReq::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (flags_ != &::google::protobuf::internal::kEmptyString) {
    delete flags_;
  }
  if (gmuser_ != &::google::protobuf::internal::kEmptyString) {
    delete gmuser_;
  }
  if (gmkey_ != &::google::protobuf::internal::kEmptyString) {
    delete gmkey_;
  }
  if (this != default_instance_) {
  }
}

void GMGetUserSnapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetUserSnapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetUserSnapReq_descriptor_;
}

const GMGetUserSnapReq& GMGetUserSnapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMGetUserSnapReq* GMGetUserSnapReq::default_instance_ = NULL;

GMGetUserSnapReq* GMGetUserSnapReq::New() const {
  return new GMGetUserSnapReq;
}

void GMGetUserSnapReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_flags()) {
      if (flags_ != &::google::protobuf::internal::kEmptyString) {
        flags_->clear();
      }
    }
    if (has_gmuser()) {
      if (gmuser_ != &::google::protobuf::internal::kEmptyString) {
        gmuser_->clear();
      }
    }
    if (has_gmkey()) {
      if (gmkey_ != &::google::protobuf::internal::kEmptyString) {
        gmkey_->clear();
      }
    }
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetUserSnapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flags;
        break;
      }

      // optional string flags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flags().data(), this->flags().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_gmuser;
        break;
      }

      // optional string gmuser = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gmuser().data(), this->gmuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_gmkey;
        break;
      }

      // optional string gmkey = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gmkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gmkey().data(), this->gmkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fd;
        break;
      }

      // optional int32 fd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_session;
        break;
      }

      // optional int64 session = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetUserSnapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->flags(), output);
  }

  // optional string gmuser = 11;
  if (has_gmuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmuser().data(), this->gmuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->gmuser(), output);
  }

  // optional string gmkey = 12;
  if (has_gmkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmkey().data(), this->gmkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->gmkey(), output);
  }

  // optional int32 fd = 21;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fd(), output);
  }

  // optional int64 session = 22;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetUserSnapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string flags = 2;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flags().data(), this->flags().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flags(), target);
  }

  // optional string gmuser = 11;
  if (has_gmuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmuser().data(), this->gmuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gmuser(), target);
  }

  // optional string gmkey = 12;
  if (has_gmkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmkey().data(), this->gmkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->gmkey(), target);
  }

  // optional int32 fd = 21;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fd(), target);
  }

  // optional int64 session = 22;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetUserSnapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flags());
    }

    // optional string gmuser = 11;
    if (has_gmuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmuser());
    }

    // optional string gmkey = 12;
    if (has_gmkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmkey());
    }

    // optional int32 fd = 21;
    if (has_fd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 session = 22;
    if (has_session()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetUserSnapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetUserSnapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetUserSnapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetUserSnapReq::MergeFrom(const GMGetUserSnapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_gmuser()) {
      set_gmuser(from.gmuser());
    }
    if (from.has_gmkey()) {
      set_gmkey(from.gmkey());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetUserSnapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetUserSnapReq::CopyFrom(const GMGetUserSnapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetUserSnapReq::IsInitialized() const {

  return true;
}

void GMGetUserSnapReq::Swap(GMGetUserSnapReq* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(flags_, other->flags_);
    std::swap(gmuser_, other->gmuser_);
    std::swap(gmkey_, other->gmkey_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetUserSnapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetUserSnapReq_descriptor_;
  metadata.reflection = GMGetUserSnapReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GMGetUserSnapResp_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetUserSnapResp_Result_descriptor_;
}
bool GMGetUserSnapResp_Result_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GMGetUserSnapResp_Result GMGetUserSnapResp::OK;
const GMGetUserSnapResp_Result GMGetUserSnapResp::FAIL;
const GMGetUserSnapResp_Result GMGetUserSnapResp::Result_MIN;
const GMGetUserSnapResp_Result GMGetUserSnapResp::Result_MAX;
const int GMGetUserSnapResp::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GMGetUserSnapResp::kResultFieldNumber;
const int GMGetUserSnapResp::kInfoFieldNumber;
const int GMGetUserSnapResp::kFdFieldNumber;
const int GMGetUserSnapResp::kSessionFieldNumber;
#endif  // !_MSC_VER

GMGetUserSnapResp::GMGetUserSnapResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetUserSnapResp::InitAsDefaultInstance() {
  info_ = const_cast< ::UserSnapInfo*>(&::UserSnapInfo::default_instance());
}

GMGetUserSnapResp::GMGetUserSnapResp(const GMGetUserSnapResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetUserSnapResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  info_ = NULL;
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetUserSnapResp::~GMGetUserSnapResp() {
  SharedDtor();
}

void GMGetUserSnapResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GMGetUserSnapResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetUserSnapResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetUserSnapResp_descriptor_;
}

const GMGetUserSnapResp& GMGetUserSnapResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMGetUserSnapResp* GMGetUserSnapResp::default_instance_ = NULL;

GMGetUserSnapResp* GMGetUserSnapResp::New() const {
  return new GMGetUserSnapResp;
}

void GMGetUserSnapResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::UserSnapInfo::Clear();
    }
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetUserSnapResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GMGetUserSnapResp.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GMGetUserSnapResp_Result_IsValid(value)) {
            set_result(static_cast< ::GMGetUserSnapResp_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .UserSnapInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fd;
        break;
      }

      // optional int32 fd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_session;
        break;
      }

      // optional int64 session = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetUserSnapResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GMGetUserSnapResp.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSnapInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional int32 fd = 21;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fd(), output);
  }

  // optional int64 session = 22;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetUserSnapResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GMGetUserSnapResp.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSnapInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional int32 fd = 21;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fd(), target);
  }

  // optional int64 session = 22;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetUserSnapResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GMGetUserSnapResp.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSnapInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 fd = 21;
    if (has_fd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int64 session = 22;
    if (has_session()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetUserSnapResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetUserSnapResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetUserSnapResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetUserSnapResp::MergeFrom(const GMGetUserSnapResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::UserSnapInfo::MergeFrom(from.info());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetUserSnapResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetUserSnapResp::CopyFrom(const GMGetUserSnapResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetUserSnapResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMGetUserSnapResp::Swap(GMGetUserSnapResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetUserSnapResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetUserSnapResp_descriptor_;
  metadata.reflection = GMGetUserSnapResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMBlockReq::kUidFieldNumber;
const int GMBlockReq::kTypeFieldNumber;
const int GMBlockReq::kBlocktimeFieldNumber;
const int GMBlockReq::kFdFieldNumber;
const int GMBlockReq::kSessionFieldNumber;
#endif  // !_MSC_VER

GMBlockReq::GMBlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMBlockReq::InitAsDefaultInstance() {
}

GMBlockReq::GMBlockReq(const GMBlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMBlockReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  blocktime_ = 0;
  fd_ = 0;
  session_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMBlockReq::~GMBlockReq() {
  SharedDtor();
}

void GMBlockReq::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void GMBlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMBlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMBlockReq_descriptor_;
}

const GMBlockReq& GMBlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gm_5fcmd_2eproto();
  return *default_instance_;
}

GMBlockReq* GMBlockReq::default_instance_ = NULL;

GMBlockReq* GMBlockReq::New() const {
  return new GMBlockReq;
}

void GMBlockReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    type_ = 0;
    blocktime_ = 0;
    fd_ = 0;
    session_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMBlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blocktime;
        break;
      }

      // optional int32 blocktime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocktime_)));
          set_has_blocktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fd;
        break;
      }

      // required int32 fd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_session;
        break;
      }

      // required int64 session = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_session:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMBlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 blocktime = 3;
  if (has_blocktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blocktime(), output);
  }

  // required int32 fd = 4;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fd(), output);
  }

  // required int64 session = 5;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMBlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 blocktime = 3;
  if (has_blocktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blocktime(), target);
  }

  // required int32 fd = 4;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fd(), target);
  }

  // required int64 session = 5;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMBlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 blocktime = 3;
    if (has_blocktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocktime());
    }

    // required int32 fd = 4;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // required int64 session = 5;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMBlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMBlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMBlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMBlockReq::MergeFrom(const GMBlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_blocktime()) {
      set_blocktime(from.blocktime());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMBlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMBlockReq::CopyFrom(const GMBlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMBlockReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void GMBlockReq::Swap(GMBlockReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(blocktime_, other->blocktime_);
    std::swap(fd_, other->fd_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMBlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMBlockReq_descriptor_;
  metadata.reflection = GMBlockReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
