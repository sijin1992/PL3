// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdArena.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdArena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ArenaInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRecordDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRecordDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaAddTimesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaAddTimesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaAddTimesResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaAddTimesResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaGetDailyRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaGetDailyRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaGetDailyRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaGetDailyRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaChallengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChallengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaChallengeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChallengeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaTitleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaTitleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaTitleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaTitleResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdArena_2eproto() {
  protobuf_AddDesc_CmdArena_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdArena.proto");
  GOOGLE_CHECK(file != NULL);
  ArenaInfoData_descriptor_ = file->message_type(0);
  static const int ArenaInfoData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, ship_guid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, ship_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, ship_level_list_),
  };
  ArenaInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaInfoData_descriptor_,
      ArenaInfoData::default_instance_,
      ArenaInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaInfoData));
  ArenaRecordData_descriptor_ = file->message_type(1);
  static const int ArenaRecordData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordData, enemy_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordData, other_user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordData, add_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordData, add_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordData, result_),
  };
  ArenaRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRecordData_descriptor_,
      ArenaRecordData::default_instance_,
      ArenaRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRecordData));
  ArenaRecordDataList_descriptor_ = file->message_type(2);
  static const int ArenaRecordDataList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordDataList, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordDataList, current_enemy_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordDataList, record_info_list_),
  };
  ArenaRecordDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRecordDataList_descriptor_,
      ArenaRecordDataList::default_instance_,
      ArenaRecordDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRecordDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRecordDataList));
  ArenaInfoReq_descriptor_ = file->message_type(3);
  static const int ArenaInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoReq, type_),
  };
  ArenaInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaInfoReq_descriptor_,
      ArenaInfoReq::default_instance_,
      ArenaInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaInfoReq));
  ArenaInfoResp_descriptor_ = file->message_type(4);
  static const int ArenaInfoResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, my_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, their_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, cur_3_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, last_reflesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, record_list_),
  };
  ArenaInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaInfoResp_descriptor_,
      ArenaInfoResp::default_instance_,
      ArenaInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaInfoResp));
  ArenaAddTimesReq_descriptor_ = file->message_type(5);
  static const int ArenaAddTimesReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAddTimesReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAddTimesReq, times_),
  };
  ArenaAddTimesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaAddTimesReq_descriptor_,
      ArenaAddTimesReq::default_instance_,
      ArenaAddTimesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAddTimesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAddTimesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaAddTimesReq));
  ArenaAddTimesResp_descriptor_ = file->message_type(6);
  static const int ArenaAddTimesResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAddTimesResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAddTimesResp, user_sync_),
  };
  ArenaAddTimesResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaAddTimesResp_descriptor_,
      ArenaAddTimesResp::default_instance_,
      ArenaAddTimesResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAddTimesResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaAddTimesResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaAddTimesResp));
  ArenaGetDailyRewardReq_descriptor_ = file->message_type(7);
  static const int ArenaGetDailyRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaGetDailyRewardReq, result_),
  };
  ArenaGetDailyRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaGetDailyRewardReq_descriptor_,
      ArenaGetDailyRewardReq::default_instance_,
      ArenaGetDailyRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaGetDailyRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaGetDailyRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaGetDailyRewardReq));
  ArenaGetDailyRewardResp_descriptor_ = file->message_type(8);
  static const int ArenaGetDailyRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaGetDailyRewardResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaGetDailyRewardResp, user_sync_),
  };
  ArenaGetDailyRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaGetDailyRewardResp_descriptor_,
      ArenaGetDailyRewardResp::default_instance_,
      ArenaGetDailyRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaGetDailyRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaGetDailyRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaGetDailyRewardResp));
  ArenaChallengeReq_descriptor_ = file->message_type(9);
  static const int ArenaChallengeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeReq, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeReq, result_),
  };
  ArenaChallengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChallengeReq_descriptor_,
      ArenaChallengeReq::default_instance_,
      ArenaChallengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChallengeReq));
  ArenaChallengeResp_descriptor_ = file->message_type(10);
  static const int ArenaChallengeResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, attack_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, hurter_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, get_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, add_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, type_),
  };
  ArenaChallengeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChallengeResp_descriptor_,
      ArenaChallengeResp::default_instance_,
      ArenaChallengeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChallengeResp));
  ArenaTitleReq_descriptor_ = file->message_type(11);
  static const int ArenaTitleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaTitleReq, type_),
  };
  ArenaTitleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaTitleReq_descriptor_,
      ArenaTitleReq::default_instance_,
      ArenaTitleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaTitleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaTitleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaTitleReq));
  ArenaTitleResp_descriptor_ = file->message_type(12);
  static const int ArenaTitleResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaTitleResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaTitleResp, user_sync_),
  };
  ArenaTitleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaTitleResp_descriptor_,
      ArenaTitleResp::default_instance_,
      ArenaTitleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaTitleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaTitleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaTitleResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdArena_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaInfoData_descriptor_, &ArenaInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRecordData_descriptor_, &ArenaRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRecordDataList_descriptor_, &ArenaRecordDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaInfoReq_descriptor_, &ArenaInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaInfoResp_descriptor_, &ArenaInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaAddTimesReq_descriptor_, &ArenaAddTimesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaAddTimesResp_descriptor_, &ArenaAddTimesResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaGetDailyRewardReq_descriptor_, &ArenaGetDailyRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaGetDailyRewardResp_descriptor_, &ArenaGetDailyRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChallengeReq_descriptor_, &ArenaChallengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChallengeResp_descriptor_, &ArenaChallengeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaTitleReq_descriptor_, &ArenaTitleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaTitleResp_descriptor_, &ArenaTitleResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdArena_2eproto() {
  delete ArenaInfoData::default_instance_;
  delete ArenaInfoData_reflection_;
  delete ArenaRecordData::default_instance_;
  delete ArenaRecordData_reflection_;
  delete ArenaRecordDataList::default_instance_;
  delete ArenaRecordDataList_reflection_;
  delete ArenaInfoReq::default_instance_;
  delete ArenaInfoReq_reflection_;
  delete ArenaInfoResp::default_instance_;
  delete ArenaInfoResp_reflection_;
  delete ArenaAddTimesReq::default_instance_;
  delete ArenaAddTimesReq_reflection_;
  delete ArenaAddTimesResp::default_instance_;
  delete ArenaAddTimesResp_reflection_;
  delete ArenaGetDailyRewardReq::default_instance_;
  delete ArenaGetDailyRewardReq_reflection_;
  delete ArenaGetDailyRewardResp::default_instance_;
  delete ArenaGetDailyRewardResp_reflection_;
  delete ArenaChallengeReq::default_instance_;
  delete ArenaChallengeReq_reflection_;
  delete ArenaChallengeResp::default_instance_;
  delete ArenaChallengeResp_reflection_;
  delete ArenaTitleReq::default_instance_;
  delete ArenaTitleReq_reflection_;
  delete ArenaTitleResp::default_instance_;
  delete ArenaTitleResp_reflection_;
}

void protobuf_AddDesc_CmdArena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_AirShip_2eproto();
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::protobuf_AddDesc_OtherInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CmdArena.proto\032\rAirShip.proto\032\016UserInf"
    "o.proto\032\016UserSync.proto\032\017OtherInfo.proto"
    "\"\307\001\n\rArenaInfoData\022\014\n\004rank\030\001 \002(\005\022\021\n\tuser"
    "_name\030\002 \002(\t\022\r\n\005power\030\003 \002(\005\022\020\n\010nickname\030\004"
    " \002(\t\022\r\n\005score\030\005 \002(\005\022\017\n\007icon_id\030\006 \002(\005\022\r\n\005"
    "level\030\007 \002(\005\022\026\n\016ship_guid_list\030\010 \003(\005\022\024\n\014s"
    "hip_id_list\030\t \003(\005\022\027\n\017ship_level_list\030\n \003"
    "(\005\"\227\001\n\017ArenaRecordData\022\027\n\017enemy_user_nam"
    "e\030\001 \002(\t\022\'\n\017other_user_info\030\002 \001(\0132\016.Other"
    "UserInfo\022\014\n\004time\030\003 \002(\003\022\021\n\tadd_score\030\004 \002("
    "\005\022\021\n\tadd_point\030\005 \002(\005\022\016\n\006result\030\006 \002(\005\"u\n\023"
    "ArenaRecordDataList\022\021\n\tuser_name\030\001 \002(\t\022\037"
    "\n\027current_enemy_user_name\030\002 \001(\t\022*\n\020recor"
    "d_info_list\030\003 \003(\0132\020.ArenaRecordData\"\034\n\014A"
    "renaInfoReq\022\014\n\004type\030\001 \002(\005\"\326\001\n\rArenaInfoR"
    "esp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t"
    ".UserSync\022\037\n\007my_info\030\003 \001(\0132\016.ArenaInfoDa"
    "ta\022\"\n\ntheir_info\030\004 \003(\0132\016.ArenaInfoData\022\021"
    "\n\tcur_3_day\030\005 \001(\003\022\024\n\014last_reflesh\030\006 \001(\003\022"
    ")\n\013record_list\030\007 \001(\0132\024.ArenaRecordDataLi"
    "st\"/\n\020ArenaAddTimesReq\022\014\n\004type\030\001 \002(\005\022\r\n\005"
    "times\030\002 \002(\005\"A\n\021ArenaAddTimesResp\022\016\n\006resu"
    "lt\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\"("
    "\n\026ArenaGetDailyRewardReq\022\016\n\006result\030\001 \002(\005"
    "\"G\n\027ArenaGetDailyRewardResp\022\016\n\006result\030\001 "
    "\002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\"\?\n\021Are"
    "naChallengeReq\022\014\n\004type\030\001 \002(\005\022\014\n\004rank\030\002 \001"
    "(\005\022\016\n\006result\030\003 \001(\005\"\264\001\n\022ArenaChallengeRes"
    "p\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.U"
    "serSync\022\035\n\013attack_list\030\003 \003(\0132\010.AirShip\022\035"
    "\n\013hurter_list\030\004 \003(\0132\010.AirShip\022\021\n\tget_sco"
    "re\030\005 \001(\005\022\021\n\tadd_point\030\006 \001(\005\022\014\n\004type\030\007 \001("
    "\005\"\035\n\rArenaTitleReq\022\014\n\004type\030\001 \002(\005\">\n\016Aren"
    "aTitleResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030"
    "\002 \001(\0132\t.UserSync", 1376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdArena.proto", &protobuf_RegisterTypes);
  ArenaInfoData::default_instance_ = new ArenaInfoData();
  ArenaRecordData::default_instance_ = new ArenaRecordData();
  ArenaRecordDataList::default_instance_ = new ArenaRecordDataList();
  ArenaInfoReq::default_instance_ = new ArenaInfoReq();
  ArenaInfoResp::default_instance_ = new ArenaInfoResp();
  ArenaAddTimesReq::default_instance_ = new ArenaAddTimesReq();
  ArenaAddTimesResp::default_instance_ = new ArenaAddTimesResp();
  ArenaGetDailyRewardReq::default_instance_ = new ArenaGetDailyRewardReq();
  ArenaGetDailyRewardResp::default_instance_ = new ArenaGetDailyRewardResp();
  ArenaChallengeReq::default_instance_ = new ArenaChallengeReq();
  ArenaChallengeResp::default_instance_ = new ArenaChallengeResp();
  ArenaTitleReq::default_instance_ = new ArenaTitleReq();
  ArenaTitleResp::default_instance_ = new ArenaTitleResp();
  ArenaInfoData::default_instance_->InitAsDefaultInstance();
  ArenaRecordData::default_instance_->InitAsDefaultInstance();
  ArenaRecordDataList::default_instance_->InitAsDefaultInstance();
  ArenaInfoReq::default_instance_->InitAsDefaultInstance();
  ArenaInfoResp::default_instance_->InitAsDefaultInstance();
  ArenaAddTimesReq::default_instance_->InitAsDefaultInstance();
  ArenaAddTimesResp::default_instance_->InitAsDefaultInstance();
  ArenaGetDailyRewardReq::default_instance_->InitAsDefaultInstance();
  ArenaGetDailyRewardResp::default_instance_->InitAsDefaultInstance();
  ArenaChallengeReq::default_instance_->InitAsDefaultInstance();
  ArenaChallengeResp::default_instance_->InitAsDefaultInstance();
  ArenaTitleReq::default_instance_->InitAsDefaultInstance();
  ArenaTitleResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdArena_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdArena_2eproto {
  StaticDescriptorInitializer_CmdArena_2eproto() {
    protobuf_AddDesc_CmdArena_2eproto();
  }
} static_descriptor_initializer_CmdArena_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArenaInfoData::kRankFieldNumber;
const int ArenaInfoData::kUserNameFieldNumber;
const int ArenaInfoData::kPowerFieldNumber;
const int ArenaInfoData::kNicknameFieldNumber;
const int ArenaInfoData::kScoreFieldNumber;
const int ArenaInfoData::kIconIdFieldNumber;
const int ArenaInfoData::kLevelFieldNumber;
const int ArenaInfoData::kShipGuidListFieldNumber;
const int ArenaInfoData::kShipIdListFieldNumber;
const int ArenaInfoData::kShipLevelListFieldNumber;
#endif  // !_MSC_VER

ArenaInfoData::ArenaInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaInfoData::InitAsDefaultInstance() {
}

ArenaInfoData::ArenaInfoData(const ArenaInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaInfoData::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  icon_id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaInfoData::~ArenaInfoData() {
  SharedDtor();
}

void ArenaInfoData::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void ArenaInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaInfoData_descriptor_;
}

const ArenaInfoData& ArenaInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaInfoData* ArenaInfoData::default_instance_ = NULL;

ArenaInfoData* ArenaInfoData::New() const {
  return new ArenaInfoData;
}

void ArenaInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    power_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    score_ = 0;
    icon_id_ = 0;
    level_ = 0;
  }
  ship_guid_list_.Clear();
  ship_id_list_.Clear();
  ship_level_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // required int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // required string nickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // required int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_icon_id;
        break;
      }

      // required int32 icon_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // required int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ship_guid_list;
        break;
      }

      // repeated int32 ship_guid_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_guid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_ship_guid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ship_guid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ship_guid_list;
        if (input->ExpectTag(72)) goto parse_ship_id_list;
        break;
      }

      // repeated int32 ship_id_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ship_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ship_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ship_id_list;
        if (input->ExpectTag(80)) goto parse_ship_level_list;
        break;
      }

      // repeated int32 ship_level_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_level_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_ship_level_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ship_level_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ship_level_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // required int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

  // required string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

  // required int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // required int32 icon_id = 6;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->icon_id(), output);
  }

  // required int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // repeated int32 ship_guid_list = 8;
  for (int i = 0; i < this->ship_guid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->ship_guid_list(i), output);
  }

  // repeated int32 ship_id_list = 9;
  for (int i = 0; i < this->ship_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ship_id_list(i), output);
  }

  // repeated int32 ship_level_list = 10;
  for (int i = 0; i < this->ship_level_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->ship_level_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // required int32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }

  // required string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // required int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // required int32 icon_id = 6;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->icon_id(), target);
  }

  // required int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // repeated int32 ship_guid_list = 8;
  for (int i = 0; i < this->ship_guid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->ship_guid_list(i), target);
  }

  // repeated int32 ship_id_list = 9;
  for (int i = 0; i < this->ship_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ship_id_list(i), target);
  }

  // repeated int32 ship_level_list = 10;
  for (int i = 0; i < this->ship_level_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->ship_level_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // required string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 icon_id = 6;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_id());
    }

    // required int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated int32 ship_guid_list = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->ship_guid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ship_guid_list(i));
    }
    total_size += 1 * this->ship_guid_list_size() + data_size;
  }

  // repeated int32 ship_id_list = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ship_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ship_id_list(i));
    }
    total_size += 1 * this->ship_id_list_size() + data_size;
  }

  // repeated int32 ship_level_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->ship_level_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ship_level_list(i));
    }
    total_size += 1 * this->ship_level_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaInfoData::MergeFrom(const ArenaInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ship_guid_list_.MergeFrom(from.ship_guid_list_);
  ship_id_list_.MergeFrom(from.ship_id_list_);
  ship_level_list_.MergeFrom(from.ship_level_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaInfoData::CopyFrom(const ArenaInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaInfoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ArenaInfoData::Swap(ArenaInfoData* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(user_name_, other->user_name_);
    std::swap(power_, other->power_);
    std::swap(nickname_, other->nickname_);
    std::swap(score_, other->score_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(level_, other->level_);
    ship_guid_list_.Swap(&other->ship_guid_list_);
    ship_id_list_.Swap(&other->ship_id_list_);
    ship_level_list_.Swap(&other->ship_level_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaInfoData_descriptor_;
  metadata.reflection = ArenaInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRecordData::kEnemyUserNameFieldNumber;
const int ArenaRecordData::kOtherUserInfoFieldNumber;
const int ArenaRecordData::kTimeFieldNumber;
const int ArenaRecordData::kAddScoreFieldNumber;
const int ArenaRecordData::kAddPointFieldNumber;
const int ArenaRecordData::kResultFieldNumber;
#endif  // !_MSC_VER

ArenaRecordData::ArenaRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRecordData::InitAsDefaultInstance() {
  other_user_info_ = const_cast< ::OtherUserInfo*>(&::OtherUserInfo::default_instance());
}

ArenaRecordData::ArenaRecordData(const ArenaRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRecordData::SharedCtor() {
  _cached_size_ = 0;
  enemy_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  other_user_info_ = NULL;
  time_ = GOOGLE_LONGLONG(0);
  add_score_ = 0;
  add_point_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRecordData::~ArenaRecordData() {
  SharedDtor();
}

void ArenaRecordData::SharedDtor() {
  if (enemy_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete enemy_user_name_;
  }
  if (this != default_instance_) {
    delete other_user_info_;
  }
}

void ArenaRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRecordData_descriptor_;
}

const ArenaRecordData& ArenaRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaRecordData* ArenaRecordData::default_instance_ = NULL;

ArenaRecordData* ArenaRecordData::New() const {
  return new ArenaRecordData;
}

void ArenaRecordData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_enemy_user_name()) {
      if (enemy_user_name_ != &::google::protobuf::internal::kEmptyString) {
        enemy_user_name_->clear();
      }
    }
    if (has_other_user_info()) {
      if (other_user_info_ != NULL) other_user_info_->::OtherUserInfo::Clear();
    }
    time_ = GOOGLE_LONGLONG(0);
    add_score_ = 0;
    add_point_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string enemy_user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemy_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enemy_user_name().data(), this->enemy_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_other_user_info;
        break;
      }

      // optional .OtherUserInfo other_user_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_score;
        break;
      }

      // required int32 add_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_score_)));
          set_has_add_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_point;
        break;
      }

      // required int32 add_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_point_)));
          set_has_add_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // required int32 result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string enemy_user_name = 1;
  if (has_enemy_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemy_user_name().data(), this->enemy_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->enemy_user_name(), output);
  }

  // optional .OtherUserInfo other_user_info = 2;
  if (has_other_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->other_user_info(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // required int32 add_score = 4;
  if (has_add_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->add_score(), output);
  }

  // required int32 add_point = 5;
  if (has_add_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->add_point(), output);
  }

  // required int32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string enemy_user_name = 1;
  if (has_enemy_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enemy_user_name().data(), this->enemy_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->enemy_user_name(), target);
  }

  // optional .OtherUserInfo other_user_info = 2;
  if (has_other_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->other_user_info(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // required int32 add_score = 4;
  if (has_add_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->add_score(), target);
  }

  // required int32 add_point = 5;
  if (has_add_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->add_point(), target);
  }

  // required int32 result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string enemy_user_name = 1;
    if (has_enemy_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemy_user_name());
    }

    // optional .OtherUserInfo other_user_info = 2;
    if (has_other_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_user_info());
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required int32 add_score = 4;
    if (has_add_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_score());
    }

    // required int32 add_point = 5;
    if (has_add_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_point());
    }

    // required int32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRecordData::MergeFrom(const ArenaRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemy_user_name()) {
      set_enemy_user_name(from.enemy_user_name());
    }
    if (from.has_other_user_info()) {
      mutable_other_user_info()->::OtherUserInfo::MergeFrom(from.other_user_info());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_add_score()) {
      set_add_score(from.add_score());
    }
    if (from.has_add_point()) {
      set_add_point(from.add_point());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRecordData::CopyFrom(const ArenaRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRecordData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  if (has_other_user_info()) {
    if (!this->other_user_info().IsInitialized()) return false;
  }
  return true;
}

void ArenaRecordData::Swap(ArenaRecordData* other) {
  if (other != this) {
    std::swap(enemy_user_name_, other->enemy_user_name_);
    std::swap(other_user_info_, other->other_user_info_);
    std::swap(time_, other->time_);
    std::swap(add_score_, other->add_score_);
    std::swap(add_point_, other->add_point_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRecordData_descriptor_;
  metadata.reflection = ArenaRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRecordDataList::kUserNameFieldNumber;
const int ArenaRecordDataList::kCurrentEnemyUserNameFieldNumber;
const int ArenaRecordDataList::kRecordInfoListFieldNumber;
#endif  // !_MSC_VER

ArenaRecordDataList::ArenaRecordDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRecordDataList::InitAsDefaultInstance() {
}

ArenaRecordDataList::ArenaRecordDataList(const ArenaRecordDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRecordDataList::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  current_enemy_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRecordDataList::~ArenaRecordDataList() {
  SharedDtor();
}

void ArenaRecordDataList::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (current_enemy_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete current_enemy_user_name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaRecordDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRecordDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRecordDataList_descriptor_;
}

const ArenaRecordDataList& ArenaRecordDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaRecordDataList* ArenaRecordDataList::default_instance_ = NULL;

ArenaRecordDataList* ArenaRecordDataList::New() const {
  return new ArenaRecordDataList;
}

void ArenaRecordDataList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_current_enemy_user_name()) {
      if (current_enemy_user_name_ != &::google::protobuf::internal::kEmptyString) {
        current_enemy_user_name_->clear();
      }
    }
  }
  record_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRecordDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_current_enemy_user_name;
        break;
      }

      // optional string current_enemy_user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_enemy_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_enemy_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->current_enemy_user_name().data(), this->current_enemy_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record_info_list;
        break;
      }

      // repeated .ArenaRecordData record_info_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRecordDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }

  // optional string current_enemy_user_name = 2;
  if (has_current_enemy_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_enemy_user_name().data(), this->current_enemy_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->current_enemy_user_name(), output);
  }

  // repeated .ArenaRecordData record_info_list = 3;
  for (int i = 0; i < this->record_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRecordDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // optional string current_enemy_user_name = 2;
  if (has_current_enemy_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_enemy_user_name().data(), this->current_enemy_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->current_enemy_user_name(), target);
  }

  // repeated .ArenaRecordData record_info_list = 3;
  for (int i = 0; i < this->record_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->record_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRecordDataList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string current_enemy_user_name = 2;
    if (has_current_enemy_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_enemy_user_name());
    }

  }
  // repeated .ArenaRecordData record_info_list = 3;
  total_size += 1 * this->record_info_list_size();
  for (int i = 0; i < this->record_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRecordDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRecordDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRecordDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRecordDataList::MergeFrom(const ArenaRecordDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_info_list_.MergeFrom(from.record_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_current_enemy_user_name()) {
      set_current_enemy_user_name(from.current_enemy_user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRecordDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRecordDataList::CopyFrom(const ArenaRecordDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRecordDataList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < record_info_list_size(); i++) {
    if (!this->record_info_list(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaRecordDataList::Swap(ArenaRecordDataList* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(current_enemy_user_name_, other->current_enemy_user_name_);
    record_info_list_.Swap(&other->record_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRecordDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRecordDataList_descriptor_;
  metadata.reflection = ArenaRecordDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaInfoReq::kTypeFieldNumber;
#endif  // !_MSC_VER

ArenaInfoReq::ArenaInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaInfoReq::InitAsDefaultInstance() {
}

ArenaInfoReq::ArenaInfoReq(const ArenaInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaInfoReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaInfoReq::~ArenaInfoReq() {
  SharedDtor();
}

void ArenaInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaInfoReq_descriptor_;
}

const ArenaInfoReq& ArenaInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaInfoReq* ArenaInfoReq::default_instance_ = NULL;

ArenaInfoReq* ArenaInfoReq::New() const {
  return new ArenaInfoReq;
}

void ArenaInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaInfoReq::MergeFrom(const ArenaInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaInfoReq::CopyFrom(const ArenaInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaInfoReq::Swap(ArenaInfoReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaInfoReq_descriptor_;
  metadata.reflection = ArenaInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaInfoResp::kResultFieldNumber;
const int ArenaInfoResp::kUserSyncFieldNumber;
const int ArenaInfoResp::kMyInfoFieldNumber;
const int ArenaInfoResp::kTheirInfoFieldNumber;
const int ArenaInfoResp::kCur3DayFieldNumber;
const int ArenaInfoResp::kLastRefleshFieldNumber;
const int ArenaInfoResp::kRecordListFieldNumber;
#endif  // !_MSC_VER

ArenaInfoResp::ArenaInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaInfoResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  my_info_ = const_cast< ::ArenaInfoData*>(&::ArenaInfoData::default_instance());
  record_list_ = const_cast< ::ArenaRecordDataList*>(&::ArenaRecordDataList::default_instance());
}

ArenaInfoResp::ArenaInfoResp(const ArenaInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaInfoResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  my_info_ = NULL;
  cur_3_day_ = GOOGLE_LONGLONG(0);
  last_reflesh_ = GOOGLE_LONGLONG(0);
  record_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaInfoResp::~ArenaInfoResp() {
  SharedDtor();
}

void ArenaInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete my_info_;
    delete record_list_;
  }
}

void ArenaInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaInfoResp_descriptor_;
}

const ArenaInfoResp& ArenaInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaInfoResp* ArenaInfoResp::default_instance_ = NULL;

ArenaInfoResp* ArenaInfoResp::New() const {
  return new ArenaInfoResp;
}

void ArenaInfoResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_my_info()) {
      if (my_info_ != NULL) my_info_->::ArenaInfoData::Clear();
    }
    cur_3_day_ = GOOGLE_LONGLONG(0);
    last_reflesh_ = GOOGLE_LONGLONG(0);
    if (has_record_list()) {
      if (record_list_ != NULL) record_list_->::ArenaRecordDataList::Clear();
    }
  }
  their_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_my_info;
        break;
      }

      // optional .ArenaInfoData my_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_their_info;
        break;
      }

      // repeated .ArenaInfoData their_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_their_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_their_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_their_info;
        if (input->ExpectTag(40)) goto parse_cur_3_day;
        break;
      }

      // optional int64 cur_3_day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_3_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_3_day_)));
          set_has_cur_3_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_reflesh;
        break;
      }

      // optional int64 last_reflesh = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reflesh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_reflesh_)));
          set_has_last_reflesh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_record_list;
        break;
      }

      // optional .ArenaRecordDataList record_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .ArenaInfoData my_info = 3;
  if (has_my_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->my_info(), output);
  }

  // repeated .ArenaInfoData their_info = 4;
  for (int i = 0; i < this->their_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->their_info(i), output);
  }

  // optional int64 cur_3_day = 5;
  if (has_cur_3_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cur_3_day(), output);
  }

  // optional int64 last_reflesh = 6;
  if (has_last_reflesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->last_reflesh(), output);
  }

  // optional .ArenaRecordDataList record_list = 7;
  if (has_record_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->record_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .ArenaInfoData my_info = 3;
  if (has_my_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->my_info(), target);
  }

  // repeated .ArenaInfoData their_info = 4;
  for (int i = 0; i < this->their_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->their_info(i), target);
  }

  // optional int64 cur_3_day = 5;
  if (has_cur_3_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cur_3_day(), target);
  }

  // optional int64 last_reflesh = 6;
  if (has_last_reflesh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->last_reflesh(), target);
  }

  // optional .ArenaRecordDataList record_list = 7;
  if (has_record_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->record_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .ArenaInfoData my_info = 3;
    if (has_my_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_info());
    }

    // optional int64 cur_3_day = 5;
    if (has_cur_3_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_3_day());
    }

    // optional int64 last_reflesh = 6;
    if (has_last_reflesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_reflesh());
    }

    // optional .ArenaRecordDataList record_list = 7;
    if (has_record_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_list());
    }

  }
  // repeated .ArenaInfoData their_info = 4;
  total_size += 1 * this->their_info_size();
  for (int i = 0; i < this->their_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->their_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaInfoResp::MergeFrom(const ArenaInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  their_info_.MergeFrom(from.their_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_my_info()) {
      mutable_my_info()->::ArenaInfoData::MergeFrom(from.my_info());
    }
    if (from.has_cur_3_day()) {
      set_cur_3_day(from.cur_3_day());
    }
    if (from.has_last_reflesh()) {
      set_last_reflesh(from.last_reflesh());
    }
    if (from.has_record_list()) {
      mutable_record_list()->::ArenaRecordDataList::MergeFrom(from.record_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaInfoResp::CopyFrom(const ArenaInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_my_info()) {
    if (!this->my_info().IsInitialized()) return false;
  }
  for (int i = 0; i < their_info_size(); i++) {
    if (!this->their_info(i).IsInitialized()) return false;
  }
  if (has_record_list()) {
    if (!this->record_list().IsInitialized()) return false;
  }
  return true;
}

void ArenaInfoResp::Swap(ArenaInfoResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(my_info_, other->my_info_);
    their_info_.Swap(&other->their_info_);
    std::swap(cur_3_day_, other->cur_3_day_);
    std::swap(last_reflesh_, other->last_reflesh_);
    std::swap(record_list_, other->record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaInfoResp_descriptor_;
  metadata.reflection = ArenaInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaAddTimesReq::kTypeFieldNumber;
const int ArenaAddTimesReq::kTimesFieldNumber;
#endif  // !_MSC_VER

ArenaAddTimesReq::ArenaAddTimesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaAddTimesReq::InitAsDefaultInstance() {
}

ArenaAddTimesReq::ArenaAddTimesReq(const ArenaAddTimesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaAddTimesReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaAddTimesReq::~ArenaAddTimesReq() {
  SharedDtor();
}

void ArenaAddTimesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaAddTimesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaAddTimesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaAddTimesReq_descriptor_;
}

const ArenaAddTimesReq& ArenaAddTimesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaAddTimesReq* ArenaAddTimesReq::default_instance_ = NULL;

ArenaAddTimesReq* ArenaAddTimesReq::New() const {
  return new ArenaAddTimesReq;
}

void ArenaAddTimesReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaAddTimesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaAddTimesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaAddTimesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaAddTimesReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaAddTimesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaAddTimesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaAddTimesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaAddTimesReq::MergeFrom(const ArenaAddTimesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaAddTimesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaAddTimesReq::CopyFrom(const ArenaAddTimesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaAddTimesReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ArenaAddTimesReq::Swap(ArenaAddTimesReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaAddTimesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaAddTimesReq_descriptor_;
  metadata.reflection = ArenaAddTimesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaAddTimesResp::kResultFieldNumber;
const int ArenaAddTimesResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ArenaAddTimesResp::ArenaAddTimesResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaAddTimesResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ArenaAddTimesResp::ArenaAddTimesResp(const ArenaAddTimesResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaAddTimesResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaAddTimesResp::~ArenaAddTimesResp() {
  SharedDtor();
}

void ArenaAddTimesResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ArenaAddTimesResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaAddTimesResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaAddTimesResp_descriptor_;
}

const ArenaAddTimesResp& ArenaAddTimesResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaAddTimesResp* ArenaAddTimesResp::default_instance_ = NULL;

ArenaAddTimesResp* ArenaAddTimesResp::New() const {
  return new ArenaAddTimesResp;
}

void ArenaAddTimesResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaAddTimesResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaAddTimesResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaAddTimesResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaAddTimesResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaAddTimesResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaAddTimesResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaAddTimesResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaAddTimesResp::MergeFrom(const ArenaAddTimesResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaAddTimesResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaAddTimesResp::CopyFrom(const ArenaAddTimesResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaAddTimesResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ArenaAddTimesResp::Swap(ArenaAddTimesResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaAddTimesResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaAddTimesResp_descriptor_;
  metadata.reflection = ArenaAddTimesResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaGetDailyRewardReq::kResultFieldNumber;
#endif  // !_MSC_VER

ArenaGetDailyRewardReq::ArenaGetDailyRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaGetDailyRewardReq::InitAsDefaultInstance() {
}

ArenaGetDailyRewardReq::ArenaGetDailyRewardReq(const ArenaGetDailyRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaGetDailyRewardReq::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaGetDailyRewardReq::~ArenaGetDailyRewardReq() {
  SharedDtor();
}

void ArenaGetDailyRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaGetDailyRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaGetDailyRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaGetDailyRewardReq_descriptor_;
}

const ArenaGetDailyRewardReq& ArenaGetDailyRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaGetDailyRewardReq* ArenaGetDailyRewardReq::default_instance_ = NULL;

ArenaGetDailyRewardReq* ArenaGetDailyRewardReq::New() const {
  return new ArenaGetDailyRewardReq;
}

void ArenaGetDailyRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaGetDailyRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaGetDailyRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaGetDailyRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaGetDailyRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaGetDailyRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaGetDailyRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaGetDailyRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaGetDailyRewardReq::MergeFrom(const ArenaGetDailyRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaGetDailyRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaGetDailyRewardReq::CopyFrom(const ArenaGetDailyRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaGetDailyRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaGetDailyRewardReq::Swap(ArenaGetDailyRewardReq* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaGetDailyRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaGetDailyRewardReq_descriptor_;
  metadata.reflection = ArenaGetDailyRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaGetDailyRewardResp::kResultFieldNumber;
const int ArenaGetDailyRewardResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ArenaGetDailyRewardResp::ArenaGetDailyRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaGetDailyRewardResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ArenaGetDailyRewardResp::ArenaGetDailyRewardResp(const ArenaGetDailyRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaGetDailyRewardResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaGetDailyRewardResp::~ArenaGetDailyRewardResp() {
  SharedDtor();
}

void ArenaGetDailyRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ArenaGetDailyRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaGetDailyRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaGetDailyRewardResp_descriptor_;
}

const ArenaGetDailyRewardResp& ArenaGetDailyRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaGetDailyRewardResp* ArenaGetDailyRewardResp::default_instance_ = NULL;

ArenaGetDailyRewardResp* ArenaGetDailyRewardResp::New() const {
  return new ArenaGetDailyRewardResp;
}

void ArenaGetDailyRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaGetDailyRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaGetDailyRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaGetDailyRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaGetDailyRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaGetDailyRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaGetDailyRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaGetDailyRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaGetDailyRewardResp::MergeFrom(const ArenaGetDailyRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaGetDailyRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaGetDailyRewardResp::CopyFrom(const ArenaGetDailyRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaGetDailyRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ArenaGetDailyRewardResp::Swap(ArenaGetDailyRewardResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaGetDailyRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaGetDailyRewardResp_descriptor_;
  metadata.reflection = ArenaGetDailyRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaChallengeReq::kTypeFieldNumber;
const int ArenaChallengeReq::kRankFieldNumber;
const int ArenaChallengeReq::kResultFieldNumber;
#endif  // !_MSC_VER

ArenaChallengeReq::ArenaChallengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChallengeReq::InitAsDefaultInstance() {
}

ArenaChallengeReq::ArenaChallengeReq(const ArenaChallengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChallengeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  rank_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChallengeReq::~ArenaChallengeReq() {
  SharedDtor();
}

void ArenaChallengeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChallengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallengeReq_descriptor_;
}

const ArenaChallengeReq& ArenaChallengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaChallengeReq* ArenaChallengeReq::default_instance_ = NULL;

ArenaChallengeReq* ArenaChallengeReq::New() const {
  return new ArenaChallengeReq;
}

void ArenaChallengeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    rank_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChallengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChallengeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChallengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChallengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaChallengeReq::MergeFrom(const ArenaChallengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaChallengeReq::CopyFrom(const ArenaChallengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaChallengeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaChallengeReq::Swap(ArenaChallengeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(rank_, other->rank_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaChallengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChallengeReq_descriptor_;
  metadata.reflection = ArenaChallengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaChallengeResp::kResultFieldNumber;
const int ArenaChallengeResp::kUserSyncFieldNumber;
const int ArenaChallengeResp::kAttackListFieldNumber;
const int ArenaChallengeResp::kHurterListFieldNumber;
const int ArenaChallengeResp::kGetScoreFieldNumber;
const int ArenaChallengeResp::kAddPointFieldNumber;
const int ArenaChallengeResp::kTypeFieldNumber;
#endif  // !_MSC_VER

ArenaChallengeResp::ArenaChallengeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChallengeResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ArenaChallengeResp::ArenaChallengeResp(const ArenaChallengeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChallengeResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  get_score_ = 0;
  add_point_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChallengeResp::~ArenaChallengeResp() {
  SharedDtor();
}

void ArenaChallengeResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ArenaChallengeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChallengeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallengeResp_descriptor_;
}

const ArenaChallengeResp& ArenaChallengeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaChallengeResp* ArenaChallengeResp::default_instance_ = NULL;

ArenaChallengeResp* ArenaChallengeResp::New() const {
  return new ArenaChallengeResp;
}

void ArenaChallengeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    get_score_ = 0;
    add_point_ = 0;
    type_ = 0;
  }
  attack_list_.Clear();
  hurter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaChallengeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attack_list;
        break;
      }

      // repeated .AirShip attack_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attack_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attack_list;
        if (input->ExpectTag(34)) goto parse_hurter_list;
        break;
      }

      // repeated .AirShip hurter_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hurter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hurter_list;
        if (input->ExpectTag(40)) goto parse_get_score;
        break;
      }

      // optional int32 get_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_score_)));
          set_has_get_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_add_point;
        break;
      }

      // optional int32 add_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_point_)));
          set_has_add_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaChallengeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .AirShip attack_list = 3;
  for (int i = 0; i < this->attack_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attack_list(i), output);
  }

  // repeated .AirShip hurter_list = 4;
  for (int i = 0; i < this->hurter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hurter_list(i), output);
  }

  // optional int32 get_score = 5;
  if (has_get_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->get_score(), output);
  }

  // optional int32 add_point = 6;
  if (has_add_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->add_point(), output);
  }

  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChallengeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .AirShip attack_list = 3;
  for (int i = 0; i < this->attack_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attack_list(i), target);
  }

  // repeated .AirShip hurter_list = 4;
  for (int i = 0; i < this->hurter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hurter_list(i), target);
  }

  // optional int32 get_score = 5;
  if (has_get_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->get_score(), target);
  }

  // optional int32 add_point = 6;
  if (has_add_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->add_point(), target);
  }

  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChallengeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 get_score = 5;
    if (has_get_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_score());
    }

    // optional int32 add_point = 6;
    if (has_add_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_point());
    }

    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .AirShip attack_list = 3;
  total_size += 1 * this->attack_list_size();
  for (int i = 0; i < this->attack_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attack_list(i));
  }

  // repeated .AirShip hurter_list = 4;
  total_size += 1 * this->hurter_list_size();
  for (int i = 0; i < this->hurter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hurter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChallengeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChallengeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChallengeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaChallengeResp::MergeFrom(const ArenaChallengeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attack_list_.MergeFrom(from.attack_list_);
  hurter_list_.MergeFrom(from.hurter_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_get_score()) {
      set_get_score(from.get_score());
    }
    if (from.has_add_point()) {
      set_add_point(from.add_point());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaChallengeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaChallengeResp::CopyFrom(const ArenaChallengeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaChallengeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < attack_list_size(); i++) {
    if (!this->attack_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hurter_list_size(); i++) {
    if (!this->hurter_list(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaChallengeResp::Swap(ArenaChallengeResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    attack_list_.Swap(&other->attack_list_);
    hurter_list_.Swap(&other->hurter_list_);
    std::swap(get_score_, other->get_score_);
    std::swap(add_point_, other->add_point_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaChallengeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChallengeResp_descriptor_;
  metadata.reflection = ArenaChallengeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaTitleReq::kTypeFieldNumber;
#endif  // !_MSC_VER

ArenaTitleReq::ArenaTitleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaTitleReq::InitAsDefaultInstance() {
}

ArenaTitleReq::ArenaTitleReq(const ArenaTitleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaTitleReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaTitleReq::~ArenaTitleReq() {
  SharedDtor();
}

void ArenaTitleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaTitleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaTitleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaTitleReq_descriptor_;
}

const ArenaTitleReq& ArenaTitleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaTitleReq* ArenaTitleReq::default_instance_ = NULL;

ArenaTitleReq* ArenaTitleReq::New() const {
  return new ArenaTitleReq;
}

void ArenaTitleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaTitleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaTitleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaTitleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaTitleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaTitleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaTitleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaTitleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaTitleReq::MergeFrom(const ArenaTitleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaTitleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaTitleReq::CopyFrom(const ArenaTitleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaTitleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaTitleReq::Swap(ArenaTitleReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaTitleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaTitleReq_descriptor_;
  metadata.reflection = ArenaTitleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaTitleResp::kResultFieldNumber;
const int ArenaTitleResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

ArenaTitleResp::ArenaTitleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaTitleResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ArenaTitleResp::ArenaTitleResp(const ArenaTitleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaTitleResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaTitleResp::~ArenaTitleResp() {
  SharedDtor();
}

void ArenaTitleResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ArenaTitleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaTitleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaTitleResp_descriptor_;
}

const ArenaTitleResp& ArenaTitleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdArena_2eproto();
  return *default_instance_;
}

ArenaTitleResp* ArenaTitleResp::default_instance_ = NULL;

ArenaTitleResp* ArenaTitleResp::New() const {
  return new ArenaTitleResp;
}

void ArenaTitleResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaTitleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaTitleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaTitleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaTitleResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaTitleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaTitleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaTitleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaTitleResp::MergeFrom(const ArenaTitleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaTitleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaTitleResp::CopyFrom(const ArenaTitleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaTitleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ArenaTitleResp::Swap(ArenaTitleResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaTitleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaTitleResp_descriptor_;
  metadata.reflection = ArenaTitleResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
