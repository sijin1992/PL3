// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlanetReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Mail_2eproto() {
  protobuf_AddDesc_Mail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mail.proto");
  GOOGLE_CHECK(file != NULL);
  PlanetReport_descriptor_ = file->message_type(0);
  static const int PlanetReport_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, item_list_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, pos_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, video_key_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, my_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, enemy_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, attack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, pre_enemy_hp_list_),
  };
  PlanetReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetReport_descriptor_,
      PlanetReport::default_instance_,
      PlanetReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetReport));
  Mail_descriptor_ = file->message_type(1);
  static const int Mail_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, expiry_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, buchang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, reg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, vip_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, lev_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, from_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, planet_report_),
  };
  Mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mail_descriptor_,
      Mail::default_instance_,
      Mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mail));
  MailList_descriptor_ = file->message_type(2);
  static const int MailList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailList, mail_list_),
  };
  MailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailList_descriptor_,
      MailList::default_instance_,
      MailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetReport_descriptor_, &PlanetReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mail_descriptor_, &Mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailList_descriptor_, &MailList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mail_2eproto() {
  delete PlanetReport::default_instance_;
  delete PlanetReport_reflection_;
  delete Mail::default_instance_;
  delete Mail_reflection_;
  delete MailList::default_instance_;
  delete MailList_reflection_;
}

void protobuf_AddDesc_Mail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_OtherInfo_2eproto();
  ::protobuf_AddDesc_Planet_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMail.proto\032\nItem.proto\032\017OtherInfo.prot"
    "o\032\014Planet.proto\"\244\002\n\014PlanetReport\022\014\n\004type"
    "\030\001 \002(\005\022\016\n\006result\030\002 \002(\010\022!\n\016item_list_list"
    "\030\003 \003(\0132\t.ItemList\022\n\n\002id\030\004 \002(\005\022\036\n\010pos_lis"
    "t\030\005 \003(\0132\014.PlanetPoint\022\r\n\005isWin\030\006 \001(\010\022\026\n\016"
    "video_key_list\030\007 \003(\t\022%\n\014my_data_list\030\010 \003"
    "(\0132\017.PlanetMailUser\022(\n\017enemy_data_list\030\t"
    " \003(\0132\017.PlanetMailUser\022\024\n\014attack_count\030\n "
    "\001(\005\022\031\n\021pre_enemy_hp_list\030\013 \003(\005\"\245\002\n\004Mail\022"
    "\014\n\004type\030\001 \002(\005\022\014\n\004from\030\002 \002(\t\022\017\n\007subject\030\003"
    " \002(\t\022\017\n\007message\030\004 \002(\t\022\030\n\titem_list\030\005 \003(\013"
    "2\005.Item\022\r\n\005stamp\030\006 \002(\003\022\014\n\004guid\030\007 \002(\r\022\024\n\014"
    "expiry_stamp\030\010 \002(\003\022\013\n\003tid\030\t \001(\005\022\017\n\007bucha"
    "ng\030\n \001(\005\022\020\n\010reg_time\030\013 \001(\005\022\021\n\tvip_limit\030"
    "\014 \001(\005\022\021\n\tlev_limit\030\r \001(\005\022\026\n\016from_user_na"
    "me\030\016 \001(\t\022$\n\rplanet_report\030\017 \001(\0132\r.Planet"
    "Report\"$\n\010MailList\022\030\n\tmail_list\030\001 \003(\0132\005."
    "Mail", 684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mail.proto", &protobuf_RegisterTypes);
  PlanetReport::default_instance_ = new PlanetReport();
  Mail::default_instance_ = new Mail();
  MailList::default_instance_ = new MailList();
  PlanetReport::default_instance_->InitAsDefaultInstance();
  Mail::default_instance_->InitAsDefaultInstance();
  MailList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mail_2eproto {
  StaticDescriptorInitializer_Mail_2eproto() {
    protobuf_AddDesc_Mail_2eproto();
  }
} static_descriptor_initializer_Mail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlanetReport::kTypeFieldNumber;
const int PlanetReport::kResultFieldNumber;
const int PlanetReport::kItemListListFieldNumber;
const int PlanetReport::kIdFieldNumber;
const int PlanetReport::kPosListFieldNumber;
const int PlanetReport::kIsWinFieldNumber;
const int PlanetReport::kVideoKeyListFieldNumber;
const int PlanetReport::kMyDataListFieldNumber;
const int PlanetReport::kEnemyDataListFieldNumber;
const int PlanetReport::kAttackCountFieldNumber;
const int PlanetReport::kPreEnemyHpListFieldNumber;
#endif  // !_MSC_VER

PlanetReport::PlanetReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetReport::InitAsDefaultInstance() {
}

PlanetReport::PlanetReport(const PlanetReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetReport::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  result_ = false;
  id_ = 0;
  iswin_ = false;
  attack_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetReport::~PlanetReport() {
  SharedDtor();
}

void PlanetReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlanetReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetReport_descriptor_;
}

const PlanetReport& PlanetReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

PlanetReport* PlanetReport::default_instance_ = NULL;

PlanetReport* PlanetReport::New() const {
  return new PlanetReport;
}

void PlanetReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    result_ = false;
    id_ = 0;
    iswin_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    attack_count_ = 0;
  }
  item_list_list_.Clear();
  pos_list_.Clear();
  video_key_list_.Clear();
  my_data_list_.Clear();
  enemy_data_list_.Clear();
  pre_enemy_hp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list_list;
        break;
      }

      // repeated .ItemList item_list_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_list_list;
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos_list;
        break;
      }

      // repeated .PlanetPoint pos_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos_list;
        if (input->ExpectTag(48)) goto parse_isWin;
        break;
      }

      // optional bool isWin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_video_key_list;
        break;
      }

      // repeated string video_key_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_video_key_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->video_key_list(this->video_key_list_size() - 1).data(),
            this->video_key_list(this->video_key_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_video_key_list;
        if (input->ExpectTag(66)) goto parse_my_data_list;
        break;
      }

      // repeated .PlanetMailUser my_data_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_my_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_my_data_list;
        if (input->ExpectTag(74)) goto parse_enemy_data_list;
        break;
      }

      // repeated .PlanetMailUser enemy_data_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_enemy_data_list;
        if (input->ExpectTag(80)) goto parse_attack_count;
        break;
      }

      // optional int32 attack_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pre_enemy_hp_list;
        break;
      }

      // repeated int32 pre_enemy_hp_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_enemy_hp_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_pre_enemy_hp_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pre_enemy_hp_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pre_enemy_hp_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // repeated .ItemList item_list_list = 3;
  for (int i = 0; i < this->item_list_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list_list(i), output);
  }

  // required int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // repeated .PlanetPoint pos_list = 5;
  for (int i = 0; i < this->pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos_list(i), output);
  }

  // optional bool isWin = 6;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->iswin(), output);
  }

  // repeated string video_key_list = 7;
  for (int i = 0; i < this->video_key_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->video_key_list(i).data(), this->video_key_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->video_key_list(i), output);
  }

  // repeated .PlanetMailUser my_data_list = 8;
  for (int i = 0; i < this->my_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->my_data_list(i), output);
  }

  // repeated .PlanetMailUser enemy_data_list = 9;
  for (int i = 0; i < this->enemy_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->enemy_data_list(i), output);
  }

  // optional int32 attack_count = 10;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->attack_count(), output);
  }

  // repeated int32 pre_enemy_hp_list = 11;
  for (int i = 0; i < this->pre_enemy_hp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->pre_enemy_hp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // repeated .ItemList item_list_list = 3;
  for (int i = 0; i < this->item_list_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_list_list(i), target);
  }

  // required int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // repeated .PlanetPoint pos_list = 5;
  for (int i = 0; i < this->pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos_list(i), target);
  }

  // optional bool isWin = 6;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->iswin(), target);
  }

  // repeated string video_key_list = 7;
  for (int i = 0; i < this->video_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->video_key_list(i).data(), this->video_key_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->video_key_list(i), target);
  }

  // repeated .PlanetMailUser my_data_list = 8;
  for (int i = 0; i < this->my_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->my_data_list(i), target);
  }

  // repeated .PlanetMailUser enemy_data_list = 9;
  for (int i = 0; i < this->enemy_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->enemy_data_list(i), target);
  }

  // optional int32 attack_count = 10;
  if (has_attack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->attack_count(), target);
  }

  // repeated int32 pre_enemy_hp_list = 11;
  for (int i = 0; i < this->pre_enemy_hp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->pre_enemy_hp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // required int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool isWin = 6;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 attack_count = 10;
    if (has_attack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_count());
    }

  }
  // repeated .ItemList item_list_list = 3;
  total_size += 1 * this->item_list_list_size();
  for (int i = 0; i < this->item_list_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list_list(i));
  }

  // repeated .PlanetPoint pos_list = 5;
  total_size += 1 * this->pos_list_size();
  for (int i = 0; i < this->pos_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_list(i));
  }

  // repeated string video_key_list = 7;
  total_size += 1 * this->video_key_list_size();
  for (int i = 0; i < this->video_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->video_key_list(i));
  }

  // repeated .PlanetMailUser my_data_list = 8;
  total_size += 1 * this->my_data_list_size();
  for (int i = 0; i < this->my_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->my_data_list(i));
  }

  // repeated .PlanetMailUser enemy_data_list = 9;
  total_size += 1 * this->enemy_data_list_size();
  for (int i = 0; i < this->enemy_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy_data_list(i));
  }

  // repeated int32 pre_enemy_hp_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->pre_enemy_hp_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pre_enemy_hp_list(i));
    }
    total_size += 1 * this->pre_enemy_hp_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetReport::MergeFrom(const PlanetReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_list_.MergeFrom(from.item_list_list_);
  pos_list_.MergeFrom(from.pos_list_);
  video_key_list_.MergeFrom(from.video_key_list_);
  my_data_list_.MergeFrom(from.my_data_list_);
  enemy_data_list_.MergeFrom(from.enemy_data_list_);
  pre_enemy_hp_list_.MergeFrom(from.pre_enemy_hp_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetReport::CopyFrom(const PlanetReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < item_list_list_size(); i++) {
    if (!this->item_list_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pos_list_size(); i++) {
    if (!this->pos_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < my_data_list_size(); i++) {
    if (!this->my_data_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemy_data_list_size(); i++) {
    if (!this->enemy_data_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetReport::Swap(PlanetReport* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    item_list_list_.Swap(&other->item_list_list_);
    std::swap(id_, other->id_);
    pos_list_.Swap(&other->pos_list_);
    std::swap(iswin_, other->iswin_);
    video_key_list_.Swap(&other->video_key_list_);
    my_data_list_.Swap(&other->my_data_list_);
    enemy_data_list_.Swap(&other->enemy_data_list_);
    std::swap(attack_count_, other->attack_count_);
    pre_enemy_hp_list_.Swap(&other->pre_enemy_hp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetReport_descriptor_;
  metadata.reflection = PlanetReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mail::kTypeFieldNumber;
const int Mail::kFromFieldNumber;
const int Mail::kSubjectFieldNumber;
const int Mail::kMessageFieldNumber;
const int Mail::kItemListFieldNumber;
const int Mail::kStampFieldNumber;
const int Mail::kGuidFieldNumber;
const int Mail::kExpiryStampFieldNumber;
const int Mail::kTidFieldNumber;
const int Mail::kBuchangFieldNumber;
const int Mail::kRegTimeFieldNumber;
const int Mail::kVipLimitFieldNumber;
const int Mail::kLevLimitFieldNumber;
const int Mail::kFromUserNameFieldNumber;
const int Mail::kPlanetReportFieldNumber;
#endif  // !_MSC_VER

Mail::Mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mail::InitAsDefaultInstance() {
  planet_report_ = const_cast< ::PlanetReport*>(&::PlanetReport::default_instance());
}

Mail::Mail(const Mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mail::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stamp_ = GOOGLE_LONGLONG(0);
  guid_ = 0u;
  expiry_stamp_ = GOOGLE_LONGLONG(0);
  tid_ = 0;
  buchang_ = 0;
  reg_time_ = 0;
  vip_limit_ = 0;
  lev_limit_ = 0;
  from_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planet_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mail::~Mail() {
  SharedDtor();
}

void Mail::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_user_name_;
  }
  if (this != default_instance_) {
    delete planet_report_;
  }
}

void Mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mail_descriptor_;
}

const Mail& Mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

Mail* Mail::default_instance_ = NULL;

Mail* Mail::New() const {
  return new Mail;
}

void Mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::kEmptyString) {
        subject_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    stamp_ = GOOGLE_LONGLONG(0);
    guid_ = 0u;
    expiry_stamp_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    tid_ = 0;
    buchang_ = 0;
    reg_time_ = 0;
    vip_limit_ = 0;
    lev_limit_ = 0;
    if (has_from_user_name()) {
      if (from_user_name_ != &::google::protobuf::internal::kEmptyString) {
        from_user_name_->clear();
      }
    }
    if (has_planet_report()) {
      if (planet_report_ != NULL) planet_report_->::PlanetReport::Clear();
    }
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from;
        break;
      }

      // required string from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subject;
        break;
      }

      // required string subject = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // required string message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_list;
        break;
      }

      // repeated .Item item_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_list;
        if (input->ExpectTag(48)) goto parse_stamp;
        break;
      }

      // required int64 stamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stamp_)));
          set_has_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guid;
        break;
      }

      // required uint32 guid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_expiry_stamp;
        break;
      }

      // required int64 expiry_stamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiry_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_stamp_)));
          set_has_expiry_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_tid;
        break;
      }

      // optional int32 tid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buchang;
        break;
      }

      // optional int32 buchang = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buchang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buchang_)));
          set_has_buchang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reg_time;
        break;
      }

      // optional int32 reg_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reg_time_)));
          set_has_reg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vip_limit;
        break;
      }

      // optional int32 vip_limit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_limit_)));
          set_has_vip_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lev_limit;
        break;
      }

      // optional int32 lev_limit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lev_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_limit_)));
          set_has_lev_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_from_user_name;
        break;
      }

      // optional string from_user_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_user_name().data(), this->from_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_planet_report;
        break;
      }

      // optional .PlanetReport planet_report = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from(), output);
  }

  // required string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subject(), output);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message(), output);
  }

  // repeated .Item item_list = 5;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_list(i), output);
  }

  // required int64 stamp = 6;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->stamp(), output);
  }

  // required uint32 guid = 7;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->guid(), output);
  }

  // required int64 expiry_stamp = 8;
  if (has_expiry_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->expiry_stamp(), output);
  }

  // optional int32 tid = 9;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tid(), output);
  }

  // optional int32 buchang = 10;
  if (has_buchang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->buchang(), output);
  }

  // optional int32 reg_time = 11;
  if (has_reg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reg_time(), output);
  }

  // optional int32 vip_limit = 12;
  if (has_vip_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vip_limit(), output);
  }

  // optional int32 lev_limit = 13;
  if (has_lev_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lev_limit(), output);
  }

  // optional string from_user_name = 14;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_name().data(), this->from_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->from_user_name(), output);
  }

  // optional .PlanetReport planet_report = 15;
  if (has_planet_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->planet_report(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string from = 2;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from(), target);
  }

  // required string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subject(), target);
  }

  // required string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // repeated .Item item_list = 5;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_list(i), target);
  }

  // required int64 stamp = 6;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->stamp(), target);
  }

  // required uint32 guid = 7;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->guid(), target);
  }

  // required int64 expiry_stamp = 8;
  if (has_expiry_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->expiry_stamp(), target);
  }

  // optional int32 tid = 9;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tid(), target);
  }

  // optional int32 buchang = 10;
  if (has_buchang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->buchang(), target);
  }

  // optional int32 reg_time = 11;
  if (has_reg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reg_time(), target);
  }

  // optional int32 vip_limit = 12;
  if (has_vip_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vip_limit(), target);
  }

  // optional int32 lev_limit = 13;
  if (has_lev_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lev_limit(), target);
  }

  // optional string from_user_name = 14;
  if (has_from_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_user_name().data(), this->from_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->from_user_name(), target);
  }

  // optional .PlanetReport planet_report = 15;
  if (has_planet_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->planet_report(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string from = 2;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string subject = 3;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // required string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // required int64 stamp = 6;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stamp());
    }

    // required uint32 guid = 7;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guid());
    }

    // required int64 expiry_stamp = 8;
    if (has_expiry_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiry_stamp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 tid = 9;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 buchang = 10;
    if (has_buchang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buchang());
    }

    // optional int32 reg_time = 11;
    if (has_reg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reg_time());
    }

    // optional int32 vip_limit = 12;
    if (has_vip_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_limit());
    }

    // optional int32 lev_limit = 13;
    if (has_lev_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev_limit());
    }

    // optional string from_user_name = 14;
    if (has_from_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_name());
    }

    // optional .PlanetReport planet_report = 15;
    if (has_planet_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_report());
    }

  }
  // repeated .Item item_list = 5;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mail::MergeFrom(const Mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_expiry_stamp()) {
      set_expiry_stamp(from.expiry_stamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_buchang()) {
      set_buchang(from.buchang());
    }
    if (from.has_reg_time()) {
      set_reg_time(from.reg_time());
    }
    if (from.has_vip_limit()) {
      set_vip_limit(from.vip_limit());
    }
    if (from.has_lev_limit()) {
      set_lev_limit(from.lev_limit());
    }
    if (from.has_from_user_name()) {
      set_from_user_name(from.from_user_name());
    }
    if (from.has_planet_report()) {
      mutable_planet_report()->::PlanetReport::MergeFrom(from.planet_report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mail::CopyFrom(const Mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ef) != 0x000000ef) return false;

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  if (has_planet_report()) {
    if (!this->planet_report().IsInitialized()) return false;
  }
  return true;
}

void Mail::Swap(Mail* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(from_, other->from_);
    std::swap(subject_, other->subject_);
    std::swap(message_, other->message_);
    item_list_.Swap(&other->item_list_);
    std::swap(stamp_, other->stamp_);
    std::swap(guid_, other->guid_);
    std::swap(expiry_stamp_, other->expiry_stamp_);
    std::swap(tid_, other->tid_);
    std::swap(buchang_, other->buchang_);
    std::swap(reg_time_, other->reg_time_);
    std::swap(vip_limit_, other->vip_limit_);
    std::swap(lev_limit_, other->lev_limit_);
    std::swap(from_user_name_, other->from_user_name_);
    std::swap(planet_report_, other->planet_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mail_descriptor_;
  metadata.reflection = Mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailList::kMailListFieldNumber;
#endif  // !_MSC_VER

MailList::MailList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailList::InitAsDefaultInstance() {
}

MailList::MailList(const MailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailList::~MailList() {
  SharedDtor();
}

void MailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailList_descriptor_;
}

const MailList& MailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mail_2eproto();
  return *default_instance_;
}

MailList* MailList::default_instance_ = NULL;

MailList* MailList::New() const {
  return new MailList;
}

void MailList::Clear() {
  mail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Mail mail_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Mail mail_list = 1;
  for (int i = 0; i < this->mail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Mail mail_list = 1;
  for (int i = 0; i < this->mail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailList::ByteSize() const {
  int total_size = 0;

  // repeated .Mail mail_list = 1;
  total_size += 1 * this->mail_list_size();
  for (int i = 0; i < this->mail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailList::MergeFrom(const MailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_list_.MergeFrom(from.mail_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailList::CopyFrom(const MailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailList::IsInitialized() const {

  for (int i = 0; i < mail_list_size(); i++) {
    if (!this->mail_list(i).IsInitialized()) return false;
  }
  return true;
}

void MailList::Swap(MailList* other) {
  if (other != this) {
    mail_list_.Swap(&other->mail_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailList_descriptor_;
  metadata.reflection = MailList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
