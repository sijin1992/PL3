// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdPlanet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdPlanet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlanetGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetCollectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetCollectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetCollectResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetCollectResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlanetCollectResp_PlanetCollectRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlanetRideBackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetRideBackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetRideBackResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetRideBackResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetRuinsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetRuinsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetRuinsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetRuinsResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlanetRuinsResp_PlanetRuinsRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlanetRaidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetRaidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetRaidResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetRaidResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlanetRaidResp_PlanetRaidRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlanetSpeedUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetSpeedUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetSpeedUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetSpeedUpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetShieldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetShieldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetShieldResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetShieldResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetMoveBaseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetMoveBaseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetMoveBaseResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetMoveBaseResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlanetMoveBaseResp_PlanetMoveBaseRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlanetMarkReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetMarkReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanetMarkResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanetMarkResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdPlanet_2eproto() {
  protobuf_AddDesc_CmdPlanet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdPlanet.proto");
  GOOGLE_CHECK(file != NULL);
  PlanetGetReq_descriptor_ = file->message_type(0);
  static const int PlanetGetReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetReq, node_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetReq, element_global_key_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetReq, army_line_key_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetReq, army_key_list_),
  };
  PlanetGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetGetReq_descriptor_,
      PlanetGetReq::default_instance_,
      PlanetGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetGetReq));
  PlanetGetResp_descriptor_ = file->message_type(1);
  static const int PlanetGetResp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, planet_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, node_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, element_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, planet_army_line_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, mail_user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, army_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, army_list_),
  };
  PlanetGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetGetResp_descriptor_,
      PlanetGetResp::default_instance_,
      PlanetGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetGetResp));
  PlanetCollectReq_descriptor_ = file->message_type(2);
  static const int PlanetCollectReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectReq, res_global_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectReq, lineup_),
  };
  PlanetCollectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetCollectReq_descriptor_,
      PlanetCollectReq::default_instance_,
      PlanetCollectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetCollectReq));
  PlanetCollectResp_descriptor_ = file->message_type(3);
  static const int PlanetCollectResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectResp, planet_user_),
  };
  PlanetCollectResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetCollectResp_descriptor_,
      PlanetCollectResp::default_instance_,
      PlanetCollectResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetCollectResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetCollectResp));
  PlanetCollectResp_PlanetCollectRet_descriptor_ = PlanetCollectResp_descriptor_->enum_type(0);
  PlanetRideBackReq_descriptor_ = file->message_type(4);
  static const int PlanetRideBackReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackReq, army_guid_),
  };
  PlanetRideBackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetRideBackReq_descriptor_,
      PlanetRideBackReq::default_instance_,
      PlanetRideBackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetRideBackReq));
  PlanetRideBackResp_descriptor_ = file->message_type(5);
  static const int PlanetRideBackResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackResp, planet_user_),
  };
  PlanetRideBackResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetRideBackResp_descriptor_,
      PlanetRideBackResp::default_instance_,
      PlanetRideBackResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRideBackResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetRideBackResp));
  PlanetRuinsReq_descriptor_ = file->message_type(6);
  static const int PlanetRuinsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsReq, element_global_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsReq, lineup_),
  };
  PlanetRuinsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetRuinsReq_descriptor_,
      PlanetRuinsReq::default_instance_,
      PlanetRuinsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetRuinsReq));
  PlanetRuinsResp_descriptor_ = file->message_type(7);
  static const int PlanetRuinsResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsResp, planet_user_),
  };
  PlanetRuinsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetRuinsResp_descriptor_,
      PlanetRuinsResp::default_instance_,
      PlanetRuinsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRuinsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetRuinsResp));
  PlanetRuinsResp_PlanetRuinsRet_descriptor_ = PlanetRuinsResp_descriptor_->enum_type(0);
  PlanetRaidReq_descriptor_ = file->message_type(8);
  static const int PlanetRaidReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidReq, type_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidReq, element_global_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidReq, lineup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidReq, army_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidReq, mass_level_),
  };
  PlanetRaidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetRaidReq_descriptor_,
      PlanetRaidReq::default_instance_,
      PlanetRaidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetRaidReq));
  PlanetRaidResp_descriptor_ = file->message_type(9);
  static const int PlanetRaidResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidResp, planet_user_),
  };
  PlanetRaidResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetRaidResp_descriptor_,
      PlanetRaidResp::default_instance_,
      PlanetRaidResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetRaidResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetRaidResp));
  PlanetRaidResp_PlanetRaidRet_descriptor_ = PlanetRaidResp_descriptor_->enum_type(0);
  PlanetSpeedUpReq_descriptor_ = file->message_type(10);
  static const int PlanetSpeedUpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpReq, army_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpReq, type_),
  };
  PlanetSpeedUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetSpeedUpReq_descriptor_,
      PlanetSpeedUpReq::default_instance_,
      PlanetSpeedUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetSpeedUpReq));
  PlanetSpeedUpResp_descriptor_ = file->message_type(11);
  static const int PlanetSpeedUpResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpResp, army_),
  };
  PlanetSpeedUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetSpeedUpResp_descriptor_,
      PlanetSpeedUpResp::default_instance_,
      PlanetSpeedUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetSpeedUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetSpeedUpResp));
  PlanetShieldReq_descriptor_ = file->message_type(12);
  static const int PlanetShieldReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetShieldReq, item_id_),
  };
  PlanetShieldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetShieldReq_descriptor_,
      PlanetShieldReq::default_instance_,
      PlanetShieldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetShieldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetShieldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetShieldReq));
  PlanetShieldResp_descriptor_ = file->message_type(13);
  static const int PlanetShieldResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetShieldResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetShieldResp, user_sync_),
  };
  PlanetShieldResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetShieldResp_descriptor_,
      PlanetShieldResp::default_instance_,
      PlanetShieldResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetShieldResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetShieldResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetShieldResp));
  PlanetMoveBaseReq_descriptor_ = file->message_type(14);
  static const int PlanetMoveBaseReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseReq, pos_),
  };
  PlanetMoveBaseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetMoveBaseReq_descriptor_,
      PlanetMoveBaseReq::default_instance_,
      PlanetMoveBaseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetMoveBaseReq));
  PlanetMoveBaseResp_descriptor_ = file->message_type(15);
  static const int PlanetMoveBaseResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseResp, planet_user_),
  };
  PlanetMoveBaseResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetMoveBaseResp_descriptor_,
      PlanetMoveBaseResp::default_instance_,
      PlanetMoveBaseResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMoveBaseResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetMoveBaseResp));
  PlanetMoveBaseResp_PlanetMoveBaseRet_descriptor_ = PlanetMoveBaseResp_descriptor_->enum_type(0);
  PlanetMarkReq_descriptor_ = file->message_type(16);
  static const int PlanetMarkReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkReq, pos_),
  };
  PlanetMarkReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetMarkReq_descriptor_,
      PlanetMarkReq::default_instance_,
      PlanetMarkReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetMarkReq));
  PlanetMarkResp_descriptor_ = file->message_type(17);
  static const int PlanetMarkResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkResp, mark_list_),
  };
  PlanetMarkResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanetMarkResp_descriptor_,
      PlanetMarkResp::default_instance_,
      PlanetMarkResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanetMarkResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanetMarkResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdPlanet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetGetReq_descriptor_, &PlanetGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetGetResp_descriptor_, &PlanetGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetCollectReq_descriptor_, &PlanetCollectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetCollectResp_descriptor_, &PlanetCollectResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetRideBackReq_descriptor_, &PlanetRideBackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetRideBackResp_descriptor_, &PlanetRideBackResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetRuinsReq_descriptor_, &PlanetRuinsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetRuinsResp_descriptor_, &PlanetRuinsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetRaidReq_descriptor_, &PlanetRaidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetRaidResp_descriptor_, &PlanetRaidResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetSpeedUpReq_descriptor_, &PlanetSpeedUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetSpeedUpResp_descriptor_, &PlanetSpeedUpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetShieldReq_descriptor_, &PlanetShieldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetShieldResp_descriptor_, &PlanetShieldResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetMoveBaseReq_descriptor_, &PlanetMoveBaseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetMoveBaseResp_descriptor_, &PlanetMoveBaseResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetMarkReq_descriptor_, &PlanetMarkReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanetMarkResp_descriptor_, &PlanetMarkResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdPlanet_2eproto() {
  delete PlanetGetReq::default_instance_;
  delete PlanetGetReq_reflection_;
  delete PlanetGetResp::default_instance_;
  delete PlanetGetResp_reflection_;
  delete PlanetCollectReq::default_instance_;
  delete PlanetCollectReq_reflection_;
  delete PlanetCollectResp::default_instance_;
  delete PlanetCollectResp_reflection_;
  delete PlanetRideBackReq::default_instance_;
  delete PlanetRideBackReq_reflection_;
  delete PlanetRideBackResp::default_instance_;
  delete PlanetRideBackResp_reflection_;
  delete PlanetRuinsReq::default_instance_;
  delete PlanetRuinsReq_reflection_;
  delete PlanetRuinsResp::default_instance_;
  delete PlanetRuinsResp_reflection_;
  delete PlanetRaidReq::default_instance_;
  delete PlanetRaidReq_reflection_;
  delete PlanetRaidResp::default_instance_;
  delete PlanetRaidResp_reflection_;
  delete PlanetSpeedUpReq::default_instance_;
  delete PlanetSpeedUpReq_reflection_;
  delete PlanetSpeedUpResp::default_instance_;
  delete PlanetSpeedUpResp_reflection_;
  delete PlanetShieldReq::default_instance_;
  delete PlanetShieldReq_reflection_;
  delete PlanetShieldResp::default_instance_;
  delete PlanetShieldResp_reflection_;
  delete PlanetMoveBaseReq::default_instance_;
  delete PlanetMoveBaseReq_reflection_;
  delete PlanetMoveBaseResp::default_instance_;
  delete PlanetMoveBaseResp_reflection_;
  delete PlanetMarkReq::default_instance_;
  delete PlanetMarkReq_reflection_;
  delete PlanetMarkResp::default_instance_;
  delete PlanetMarkResp_reflection_;
}

void protobuf_AddDesc_CmdPlanet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Planet_2eproto();
  ::protobuf_AddDesc_UserInfo_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017CmdPlanet.proto\032\014Planet.proto\032\016UserInf"
    "o.proto\032\016UserSync.proto\"\206\001\n\014PlanetGetReq"
    "\022\014\n\004type\030\001 \002(\005\022\024\n\014node_id_list\030\002 \003(\005\022\037\n\027"
    "element_global_key_list\030\003 \003(\t\022\032\n\022army_li"
    "ne_key_list\030\004 \003(\t\022\025\n\rarmy_key_list\030\005 \003(\t"
    "\"\325\002\n\rPlanetGetResp\022\016\n\006result\030\001 \002(\005\022\034\n\tus"
    "er_sync\030\002 \001(\0132\t.UserSync\022\014\n\004type\030\003 \002(\005\022 "
    "\n\013planet_user\030\004 \001(\0132\013.PlanetUser\022\036\n\tnode"
    "_list\030\005 \003(\0132\013.PlanetNode\022$\n\014element_list"
    "\030\006 \003(\0132\016.PlanetElement\022.\n\025planet_army_li"
    "ne_list\030\007 \003(\0132\017.PlanetArmyLine\022\'\n\016mail_u"
    "ser_list\030\010 \003(\0132\017.PlanetMailUser\022\'\n\016army_"
    "info_list\030\t \003(\0132\017.PlanetArmyInfo\022\036\n\tarmy"
    "_list\030\n \003(\0132\013.PlanetArmy\":\n\020PlanetCollec"
    "tReq\022\026\n\016res_global_key\030\001 \002(\t\022\016\n\006lineup\030\002"
    " \003(\005\"\367\002\n\021PlanetCollectResp\0223\n\006result\030\001 \002"
    "(\0162#.PlanetCollectResp.PlanetCollectRet\022"
    "\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022 \n\013planet_"
    "user\030\003 \001(\0132\013.PlanetUser\"\354\001\n\020PlanetCollec"
    "tRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nERROR"
    "_TYPE\020\001\022\r\n\tREQ_ERROR\020\002\022\020\n\014LINEUP_ERROR\020\003"
    "\022\016\n\nNO_DURABLE\020\004\022\n\n\006FIXING\020\005\022\n\n\006OUTING\020\006"
    "\022\020\n\014ARMY_NUM_MAX\020\007\022\n\n\006MY_RES\020\010\022\020\n\014RES_MA"
    "X_LOAD\020\t\022\017\n\013ERROR_GROUP\020\n\022\016\n\nNO_STORAGE\020"
    "\013\022\023\n\017ALREADY_COLLECT\020\014\"4\n\021PlanetRideBack"
    "Req\022\014\n\004type\030\001 \002(\005\022\021\n\tarmy_guid\030\002 \002(\005\"d\n\022"
    "PlanetRideBackResp\022\016\n\006result\030\001 \002(\005\022\034\n\tus"
    "er_sync\030\002 \001(\0132\t.UserSync\022 \n\013planet_user\030"
    "\003 \001(\0132\013.PlanetUser\"<\n\016PlanetRuinsReq\022\032\n\022"
    "element_global_key\030\001 \002(\t\022\016\n\006lineup\030\002 \003(\005"
    "\"\271\002\n\017PlanetRuinsResp\022/\n\006result\030\001 \002(\0162\037.P"
    "lanetRuinsResp.PlanetRuinsRet\022\034\n\tuser_sy"
    "nc\030\002 \001(\0132\t.UserSync\022 \n\013planet_user\030\003 \001(\013"
    "2\013.PlanetUser\"\264\001\n\016PlanetRuinsRet\022\006\n\002OK\020\000"
    "\022\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nERROR_TYPE\020\001\022\r\n\tR"
    "EQ_ERROR\020\002\022\020\n\014LINEUP_ERROR\020\003\022\016\n\nNO_DURAB"
    "LE\020\004\022\n\n\006FIXING\020\005\022\n\n\006OUTING\020\006\022\020\n\014ARMY_NUM"
    "_MAX\020\007\022\013\n\007NO_TYPE\020\010\022\017\n\013NO_STRENGTH\020\t\"t\n\r"
    "PlanetRaidReq\022\021\n\ttype_list\030\001 \003(\005\022\032\n\022elem"
    "ent_global_key\030\002 \002(\t\022\016\n\006lineup\030\003 \003(\005\022\020\n\010"
    "army_key\030\004 \001(\t\022\022\n\nmass_level\030\005 \001(\005\"\340\003\n\016P"
    "lanetRaidResp\022-\n\006result\030\001 \002(\0162\035.PlanetRa"
    "idResp.PlanetRaidRet\022\034\n\tuser_sync\030\002 \001(\0132"
    "\t.UserSync\022 \n\013planet_user\030\003 \001(\0132\013.Planet"
    "User\"\336\002\n\rPlanetRaidRet\022\006\n\002OK\020\000\022\021\n\004FAIL\020\377"
    "\377\377\377\377\377\377\377\377\001\022\016\n\nERROR_TYPE\020\001\022\r\n\tREQ_ERROR\020\002"
    "\022\020\n\014LINEUP_ERROR\020\003\022\016\n\nNO_DURABLE\020\004\022\n\n\006FI"
    "XING\020\005\022\n\n\006OUTING\020\006\022\020\n\014ARMY_NUM_MAX\020\007\022\014\n\010"
    "NOT_OPEN\020\010\022\017\n\013ERROR_GROUP\020\t\022\020\n\014ERROR_STA"
    "TUS\020\n\022\017\n\013NO_STRENGTH\020\013\022\014\n\010NO_GROUP\020\014\022\022\n\016"
    "ALREADY_GUARDE\020\r\022\025\n\021ALREADY_ACCOMPANY\020\016\022"
    "\031\n\025ALREADY_REQ_ACCOMPANY\020\017\022\022\n\016NO_GROUP_P"
    "OWER\020\020\022\021\n\rNO_BASE_POWER\020\021\022\n\n\006SHIELD\020\022\"2\n"
    "\020PlanetSpeedUpReq\022\020\n\010army_key\030\001 \002(\t\022\014\n\004t"
    "ype\030\002 \002(\005\"\\\n\021PlanetSpeedUpResp\022\016\n\006result"
    "\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\031\n\004"
    "army\030\003 \001(\0132\013.PlanetArmy\"\"\n\017PlanetShieldR"
    "eq\022\017\n\007item_id\030\001 \002(\005\"@\n\020PlanetShieldResp\022"
    "\016\n\006result\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.Use"
    "rSync\"<\n\021PlanetMoveBaseReq\022\014\n\004type\030\001 \002(\005"
    "\022\031\n\003pos\030\002 \001(\0132\014.PlanetPoint\"\212\002\n\022PlanetMo"
    "veBaseResp\0225\n\006result\030\001 \002(\0162%.PlanetMoveB"
    "aseResp.PlanetMoveBaseRet\022\034\n\tuser_sync\030\002"
    " \001(\0132\t.UserSync\022 \n\013planet_user\030\003 \001(\0132\013.P"
    "lanetUser\"}\n\021PlanetMoveBaseRet\022\006\n\002OK\020\000\022\021"
    "\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007NO_ITEM\020\001\022\017\n\013HAS_EL"
    "EMENT\020\002\022\020\n\014ERROR_NATION\020\003\022\016\n\nERROR_CITY\020"
    "\004\022\r\n\tERROR_POS\020\005\"F\n\rPlanetMarkReq\022\014\n\004typ"
    "e\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\031\n\003pos\030\003 \001(\0132\014.Pla"
    "netPoint\"^\n\016PlanetMarkResp\022\016\n\006result\030\001 \002"
    "(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\036\n\tmark"
    "_list\030\003 \003(\0132\013.PlanetMark", 2864);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdPlanet.proto", &protobuf_RegisterTypes);
  PlanetGetReq::default_instance_ = new PlanetGetReq();
  PlanetGetResp::default_instance_ = new PlanetGetResp();
  PlanetCollectReq::default_instance_ = new PlanetCollectReq();
  PlanetCollectResp::default_instance_ = new PlanetCollectResp();
  PlanetRideBackReq::default_instance_ = new PlanetRideBackReq();
  PlanetRideBackResp::default_instance_ = new PlanetRideBackResp();
  PlanetRuinsReq::default_instance_ = new PlanetRuinsReq();
  PlanetRuinsResp::default_instance_ = new PlanetRuinsResp();
  PlanetRaidReq::default_instance_ = new PlanetRaidReq();
  PlanetRaidResp::default_instance_ = new PlanetRaidResp();
  PlanetSpeedUpReq::default_instance_ = new PlanetSpeedUpReq();
  PlanetSpeedUpResp::default_instance_ = new PlanetSpeedUpResp();
  PlanetShieldReq::default_instance_ = new PlanetShieldReq();
  PlanetShieldResp::default_instance_ = new PlanetShieldResp();
  PlanetMoveBaseReq::default_instance_ = new PlanetMoveBaseReq();
  PlanetMoveBaseResp::default_instance_ = new PlanetMoveBaseResp();
  PlanetMarkReq::default_instance_ = new PlanetMarkReq();
  PlanetMarkResp::default_instance_ = new PlanetMarkResp();
  PlanetGetReq::default_instance_->InitAsDefaultInstance();
  PlanetGetResp::default_instance_->InitAsDefaultInstance();
  PlanetCollectReq::default_instance_->InitAsDefaultInstance();
  PlanetCollectResp::default_instance_->InitAsDefaultInstance();
  PlanetRideBackReq::default_instance_->InitAsDefaultInstance();
  PlanetRideBackResp::default_instance_->InitAsDefaultInstance();
  PlanetRuinsReq::default_instance_->InitAsDefaultInstance();
  PlanetRuinsResp::default_instance_->InitAsDefaultInstance();
  PlanetRaidReq::default_instance_->InitAsDefaultInstance();
  PlanetRaidResp::default_instance_->InitAsDefaultInstance();
  PlanetSpeedUpReq::default_instance_->InitAsDefaultInstance();
  PlanetSpeedUpResp::default_instance_->InitAsDefaultInstance();
  PlanetShieldReq::default_instance_->InitAsDefaultInstance();
  PlanetShieldResp::default_instance_->InitAsDefaultInstance();
  PlanetMoveBaseReq::default_instance_->InitAsDefaultInstance();
  PlanetMoveBaseResp::default_instance_->InitAsDefaultInstance();
  PlanetMarkReq::default_instance_->InitAsDefaultInstance();
  PlanetMarkResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdPlanet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdPlanet_2eproto {
  StaticDescriptorInitializer_CmdPlanet_2eproto() {
    protobuf_AddDesc_CmdPlanet_2eproto();
  }
} static_descriptor_initializer_CmdPlanet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlanetGetReq::kTypeFieldNumber;
const int PlanetGetReq::kNodeIdListFieldNumber;
const int PlanetGetReq::kElementGlobalKeyListFieldNumber;
const int PlanetGetReq::kArmyLineKeyListFieldNumber;
const int PlanetGetReq::kArmyKeyListFieldNumber;
#endif  // !_MSC_VER

PlanetGetReq::PlanetGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetGetReq::InitAsDefaultInstance() {
}

PlanetGetReq::PlanetGetReq(const PlanetGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetGetReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetGetReq::~PlanetGetReq() {
  SharedDtor();
}

void PlanetGetReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlanetGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetGetReq_descriptor_;
}

const PlanetGetReq& PlanetGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetGetReq* PlanetGetReq::default_instance_ = NULL;

PlanetGetReq* PlanetGetReq::New() const {
  return new PlanetGetReq;
}

void PlanetGetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  node_id_list_.Clear();
  element_global_key_list_.Clear();
  army_line_key_list_.Clear();
  army_key_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id_list;
        break;
      }

      // repeated int32 node_id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_node_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_node_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_id_list;
        if (input->ExpectTag(26)) goto parse_element_global_key_list;
        break;
      }

      // repeated string element_global_key_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_global_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_element_global_key_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->element_global_key_list(this->element_global_key_list_size() - 1).data(),
            this->element_global_key_list(this->element_global_key_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_element_global_key_list;
        if (input->ExpectTag(34)) goto parse_army_line_key_list;
        break;
      }

      // repeated string army_line_key_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_line_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_army_line_key_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->army_line_key_list(this->army_line_key_list_size() - 1).data(),
            this->army_line_key_list(this->army_line_key_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_army_line_key_list;
        if (input->ExpectTag(42)) goto parse_army_key_list;
        break;
      }

      // repeated string army_key_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_key_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_army_key_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->army_key_list(this->army_key_list_size() - 1).data(),
            this->army_key_list(this->army_key_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_army_key_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 node_id_list = 2;
  for (int i = 0; i < this->node_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->node_id_list(i), output);
  }

  // repeated string element_global_key_list = 3;
  for (int i = 0; i < this->element_global_key_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->element_global_key_list(i).data(), this->element_global_key_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->element_global_key_list(i), output);
  }

  // repeated string army_line_key_list = 4;
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->army_line_key_list(i).data(), this->army_line_key_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->army_line_key_list(i), output);
  }

  // repeated string army_key_list = 5;
  for (int i = 0; i < this->army_key_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->army_key_list(i).data(), this->army_key_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->army_key_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 node_id_list = 2;
  for (int i = 0; i < this->node_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->node_id_list(i), target);
  }

  // repeated string element_global_key_list = 3;
  for (int i = 0; i < this->element_global_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->element_global_key_list(i).data(), this->element_global_key_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->element_global_key_list(i), target);
  }

  // repeated string army_line_key_list = 4;
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_line_key_list(i).data(), this->army_line_key_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->army_line_key_list(i), target);
  }

  // repeated string army_key_list = 5;
  for (int i = 0; i < this->army_key_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_key_list(i).data(), this->army_key_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->army_key_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 node_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->node_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->node_id_list(i));
    }
    total_size += 1 * this->node_id_list_size() + data_size;
  }

  // repeated string element_global_key_list = 3;
  total_size += 1 * this->element_global_key_list_size();
  for (int i = 0; i < this->element_global_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->element_global_key_list(i));
  }

  // repeated string army_line_key_list = 4;
  total_size += 1 * this->army_line_key_list_size();
  for (int i = 0; i < this->army_line_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->army_line_key_list(i));
  }

  // repeated string army_key_list = 5;
  total_size += 1 * this->army_key_list_size();
  for (int i = 0; i < this->army_key_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->army_key_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetGetReq::MergeFrom(const PlanetGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_id_list_.MergeFrom(from.node_id_list_);
  element_global_key_list_.MergeFrom(from.element_global_key_list_);
  army_line_key_list_.MergeFrom(from.army_line_key_list_);
  army_key_list_.MergeFrom(from.army_key_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetGetReq::CopyFrom(const PlanetGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetGetReq::Swap(PlanetGetReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    node_id_list_.Swap(&other->node_id_list_);
    element_global_key_list_.Swap(&other->element_global_key_list_);
    army_line_key_list_.Swap(&other->army_line_key_list_);
    army_key_list_.Swap(&other->army_key_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetGetReq_descriptor_;
  metadata.reflection = PlanetGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetGetResp::kResultFieldNumber;
const int PlanetGetResp::kUserSyncFieldNumber;
const int PlanetGetResp::kTypeFieldNumber;
const int PlanetGetResp::kPlanetUserFieldNumber;
const int PlanetGetResp::kNodeListFieldNumber;
const int PlanetGetResp::kElementListFieldNumber;
const int PlanetGetResp::kPlanetArmyLineListFieldNumber;
const int PlanetGetResp::kMailUserListFieldNumber;
const int PlanetGetResp::kArmyInfoListFieldNumber;
const int PlanetGetResp::kArmyListFieldNumber;
#endif  // !_MSC_VER

PlanetGetResp::PlanetGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetGetResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
}

PlanetGetResp::PlanetGetResp(const PlanetGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetGetResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  type_ = 0;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetGetResp::~PlanetGetResp() {
  SharedDtor();
}

void PlanetGetResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetGetResp_descriptor_;
}

const PlanetGetResp& PlanetGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetGetResp* PlanetGetResp::default_instance_ = NULL;

PlanetGetResp* PlanetGetResp::New() const {
  return new PlanetGetResp;
}

void PlanetGetResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    type_ = 0;
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  node_list_.Clear();
  element_list_.Clear();
  planet_army_line_list_.Clear();
  mail_user_list_.Clear();
  army_info_list_.Clear();
  army_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_node_list;
        break;
      }

      // repeated .PlanetNode node_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_node_list;
        if (input->ExpectTag(50)) goto parse_element_list;
        break;
      }

      // repeated .PlanetElement element_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_element_list;
        if (input->ExpectTag(58)) goto parse_planet_army_line_list;
        break;
      }

      // repeated .PlanetArmyLine planet_army_line_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_army_line_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_planet_army_line_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_planet_army_line_list;
        if (input->ExpectTag(66)) goto parse_mail_user_list;
        break;
      }

      // repeated .PlanetMailUser mail_user_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mail_user_list;
        if (input->ExpectTag(74)) goto parse_army_info_list;
        break;
      }

      // repeated .PlanetArmyInfo army_info_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_army_info_list;
        if (input->ExpectTag(82)) goto parse_army_list;
        break;
      }

      // repeated .PlanetArmy army_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_army_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional .PlanetUser planet_user = 4;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->planet_user(), output);
  }

  // repeated .PlanetNode node_list = 5;
  for (int i = 0; i < this->node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->node_list(i), output);
  }

  // repeated .PlanetElement element_list = 6;
  for (int i = 0; i < this->element_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->element_list(i), output);
  }

  // repeated .PlanetArmyLine planet_army_line_list = 7;
  for (int i = 0; i < this->planet_army_line_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->planet_army_line_list(i), output);
  }

  // repeated .PlanetMailUser mail_user_list = 8;
  for (int i = 0; i < this->mail_user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mail_user_list(i), output);
  }

  // repeated .PlanetArmyInfo army_info_list = 9;
  for (int i = 0; i < this->army_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->army_info_list(i), output);
  }

  // repeated .PlanetArmy army_list = 10;
  for (int i = 0; i < this->army_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->army_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional .PlanetUser planet_user = 4;
  if (has_planet_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->planet_user(), target);
  }

  // repeated .PlanetNode node_list = 5;
  for (int i = 0; i < this->node_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->node_list(i), target);
  }

  // repeated .PlanetElement element_list = 6;
  for (int i = 0; i < this->element_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->element_list(i), target);
  }

  // repeated .PlanetArmyLine planet_army_line_list = 7;
  for (int i = 0; i < this->planet_army_line_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->planet_army_line_list(i), target);
  }

  // repeated .PlanetMailUser mail_user_list = 8;
  for (int i = 0; i < this->mail_user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mail_user_list(i), target);
  }

  // repeated .PlanetArmyInfo army_info_list = 9;
  for (int i = 0; i < this->army_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->army_info_list(i), target);
  }

  // repeated .PlanetArmy army_list = 10;
  for (int i = 0; i < this->army_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->army_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetGetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .PlanetUser planet_user = 4;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  // repeated .PlanetNode node_list = 5;
  total_size += 1 * this->node_list_size();
  for (int i = 0; i < this->node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_list(i));
  }

  // repeated .PlanetElement element_list = 6;
  total_size += 1 * this->element_list_size();
  for (int i = 0; i < this->element_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->element_list(i));
  }

  // repeated .PlanetArmyLine planet_army_line_list = 7;
  total_size += 1 * this->planet_army_line_list_size();
  for (int i = 0; i < this->planet_army_line_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planet_army_line_list(i));
  }

  // repeated .PlanetMailUser mail_user_list = 8;
  total_size += 1 * this->mail_user_list_size();
  for (int i = 0; i < this->mail_user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_user_list(i));
  }

  // repeated .PlanetArmyInfo army_info_list = 9;
  total_size += 1 * this->army_info_list_size();
  for (int i = 0; i < this->army_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army_info_list(i));
  }

  // repeated .PlanetArmy army_list = 10;
  total_size += 1 * this->army_list_size();
  for (int i = 0; i < this->army_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetGetResp::MergeFrom(const PlanetGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_list_.MergeFrom(from.node_list_);
  element_list_.MergeFrom(from.element_list_);
  planet_army_line_list_.MergeFrom(from.planet_army_line_list_);
  mail_user_list_.MergeFrom(from.mail_user_list_);
  army_info_list_.MergeFrom(from.army_info_list_);
  army_list_.MergeFrom(from.army_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetGetResp::CopyFrom(const PlanetGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetGetResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  for (int i = 0; i < node_list_size(); i++) {
    if (!this->node_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < element_list_size(); i++) {
    if (!this->element_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < planet_army_line_list_size(); i++) {
    if (!this->planet_army_line_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mail_user_list_size(); i++) {
    if (!this->mail_user_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < army_info_list_size(); i++) {
    if (!this->army_info_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < army_list_size(); i++) {
    if (!this->army_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetGetResp::Swap(PlanetGetResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(type_, other->type_);
    std::swap(planet_user_, other->planet_user_);
    node_list_.Swap(&other->node_list_);
    element_list_.Swap(&other->element_list_);
    planet_army_line_list_.Swap(&other->planet_army_line_list_);
    mail_user_list_.Swap(&other->mail_user_list_);
    army_info_list_.Swap(&other->army_info_list_);
    army_list_.Swap(&other->army_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetGetResp_descriptor_;
  metadata.reflection = PlanetGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetCollectReq::kResGlobalKeyFieldNumber;
const int PlanetCollectReq::kLineupFieldNumber;
#endif  // !_MSC_VER

PlanetCollectReq::PlanetCollectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetCollectReq::InitAsDefaultInstance() {
}

PlanetCollectReq::PlanetCollectReq(const PlanetCollectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCollectReq::SharedCtor() {
  _cached_size_ = 0;
  res_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCollectReq::~PlanetCollectReq() {
  SharedDtor();
}

void PlanetCollectReq::SharedDtor() {
  if (res_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete res_global_key_;
  }
  if (this != default_instance_) {
  }
}

void PlanetCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetCollectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetCollectReq_descriptor_;
}

const PlanetCollectReq& PlanetCollectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetCollectReq* PlanetCollectReq::default_instance_ = NULL;

PlanetCollectReq* PlanetCollectReq::New() const {
  return new PlanetCollectReq;
}

void PlanetCollectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_res_global_key()) {
      if (res_global_key_ != &::google::protobuf::internal::kEmptyString) {
        res_global_key_->clear();
      }
    }
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string res_global_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res_global_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res_global_key().data(), this->res_global_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string res_global_key = 1;
  if (has_res_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_global_key().data(), this->res_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->res_global_key(), output);
  }

  // repeated int32 lineup = 2;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lineup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetCollectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string res_global_key = 1;
  if (has_res_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res_global_key().data(), this->res_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->res_global_key(), target);
  }

  // repeated int32 lineup = 2;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lineup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string res_global_key = 1;
    if (has_res_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res_global_key());
    }

  }
  // repeated int32 lineup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetCollectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetCollectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetCollectReq::MergeFrom(const PlanetCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res_global_key()) {
      set_res_global_key(from.res_global_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetCollectReq::CopyFrom(const PlanetCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCollectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetCollectReq::Swap(PlanetCollectReq* other) {
  if (other != this) {
    std::swap(res_global_key_, other->res_global_key_);
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetCollectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetCollectReq_descriptor_;
  metadata.reflection = PlanetCollectReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlanetCollectResp_PlanetCollectRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetCollectResp_PlanetCollectRet_descriptor_;
}
bool PlanetCollectResp_PlanetCollectRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::OK;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::FAIL;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::ERROR_TYPE;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::REQ_ERROR;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::LINEUP_ERROR;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::NO_DURABLE;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::FIXING;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::OUTING;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::ARMY_NUM_MAX;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::MY_RES;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::RES_MAX_LOAD;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::ERROR_GROUP;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::NO_STORAGE;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::ALREADY_COLLECT;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::PlanetCollectRet_MIN;
const PlanetCollectResp_PlanetCollectRet PlanetCollectResp::PlanetCollectRet_MAX;
const int PlanetCollectResp::PlanetCollectRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlanetCollectResp::kResultFieldNumber;
const int PlanetCollectResp::kUserSyncFieldNumber;
const int PlanetCollectResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetCollectResp::PlanetCollectResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetCollectResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
}

PlanetCollectResp::PlanetCollectResp(const PlanetCollectResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetCollectResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetCollectResp::~PlanetCollectResp() {
  SharedDtor();
}

void PlanetCollectResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetCollectResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetCollectResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetCollectResp_descriptor_;
}

const PlanetCollectResp& PlanetCollectResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetCollectResp* PlanetCollectResp::default_instance_ = NULL;

PlanetCollectResp* PlanetCollectResp::New() const {
  return new PlanetCollectResp;
}

void PlanetCollectResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetCollectResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetCollectResp.PlanetCollectRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlanetCollectResp_PlanetCollectRet_IsValid(value)) {
            set_result(static_cast< ::PlanetCollectResp_PlanetCollectRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetCollectResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetCollectResp.PlanetCollectRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->planet_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetCollectResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PlanetCollectResp.PlanetCollectRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->planet_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetCollectResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetCollectResp.PlanetCollectRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetCollectResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetCollectResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetCollectResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetCollectResp::MergeFrom(const PlanetCollectResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetCollectResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetCollectResp::CopyFrom(const PlanetCollectResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetCollectResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetCollectResp::Swap(PlanetCollectResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetCollectResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetCollectResp_descriptor_;
  metadata.reflection = PlanetCollectResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRideBackReq::kTypeFieldNumber;
const int PlanetRideBackReq::kArmyGuidFieldNumber;
#endif  // !_MSC_VER

PlanetRideBackReq::PlanetRideBackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetRideBackReq::InitAsDefaultInstance() {
}

PlanetRideBackReq::PlanetRideBackReq(const PlanetRideBackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRideBackReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  army_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRideBackReq::~PlanetRideBackReq() {
  SharedDtor();
}

void PlanetRideBackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlanetRideBackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetRideBackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRideBackReq_descriptor_;
}

const PlanetRideBackReq& PlanetRideBackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetRideBackReq* PlanetRideBackReq::default_instance_ = NULL;

PlanetRideBackReq* PlanetRideBackReq::New() const {
  return new PlanetRideBackReq;
}

void PlanetRideBackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    army_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetRideBackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_army_guid;
        break;
      }

      // required int32 army_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_army_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &army_guid_)));
          set_has_army_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRideBackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 army_guid = 2;
  if (has_army_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->army_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetRideBackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 army_guid = 2;
  if (has_army_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->army_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetRideBackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 army_guid = 2;
    if (has_army_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->army_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRideBackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetRideBackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetRideBackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetRideBackReq::MergeFrom(const PlanetRideBackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_army_guid()) {
      set_army_guid(from.army_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetRideBackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetRideBackReq::CopyFrom(const PlanetRideBackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRideBackReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlanetRideBackReq::Swap(PlanetRideBackReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(army_guid_, other->army_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetRideBackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetRideBackReq_descriptor_;
  metadata.reflection = PlanetRideBackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRideBackResp::kResultFieldNumber;
const int PlanetRideBackResp::kUserSyncFieldNumber;
const int PlanetRideBackResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetRideBackResp::PlanetRideBackResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetRideBackResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
}

PlanetRideBackResp::PlanetRideBackResp(const PlanetRideBackResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRideBackResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRideBackResp::~PlanetRideBackResp() {
  SharedDtor();
}

void PlanetRideBackResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetRideBackResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetRideBackResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRideBackResp_descriptor_;
}

const PlanetRideBackResp& PlanetRideBackResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetRideBackResp* PlanetRideBackResp::default_instance_ = NULL;

PlanetRideBackResp* PlanetRideBackResp::New() const {
  return new PlanetRideBackResp;
}

void PlanetRideBackResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetRideBackResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRideBackResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->planet_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetRideBackResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->planet_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetRideBackResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRideBackResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetRideBackResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetRideBackResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetRideBackResp::MergeFrom(const PlanetRideBackResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetRideBackResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetRideBackResp::CopyFrom(const PlanetRideBackResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRideBackResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetRideBackResp::Swap(PlanetRideBackResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetRideBackResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetRideBackResp_descriptor_;
  metadata.reflection = PlanetRideBackResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRuinsReq::kElementGlobalKeyFieldNumber;
const int PlanetRuinsReq::kLineupFieldNumber;
#endif  // !_MSC_VER

PlanetRuinsReq::PlanetRuinsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetRuinsReq::InitAsDefaultInstance() {
}

PlanetRuinsReq::PlanetRuinsReq(const PlanetRuinsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRuinsReq::SharedCtor() {
  _cached_size_ = 0;
  element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRuinsReq::~PlanetRuinsReq() {
  SharedDtor();
}

void PlanetRuinsReq::SharedDtor() {
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete element_global_key_;
  }
  if (this != default_instance_) {
  }
}

void PlanetRuinsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetRuinsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRuinsReq_descriptor_;
}

const PlanetRuinsReq& PlanetRuinsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetRuinsReq* PlanetRuinsReq::default_instance_ = NULL;

PlanetRuinsReq* PlanetRuinsReq::New() const {
  return new PlanetRuinsReq;
}

void PlanetRuinsReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_element_global_key()) {
      if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
        element_global_key_->clear();
      }
    }
  }
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetRuinsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string element_global_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_global_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->element_global_key().data(), this->element_global_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineup;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRuinsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string element_global_key = 1;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->element_global_key().data(), this->element_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->element_global_key(), output);
  }

  // repeated int32 lineup = 2;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lineup(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetRuinsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string element_global_key = 1;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->element_global_key().data(), this->element_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->element_global_key(), target);
  }

  // repeated int32 lineup = 2;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lineup(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetRuinsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string element_global_key = 1;
    if (has_element_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_global_key());
    }

  }
  // repeated int32 lineup = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRuinsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetRuinsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetRuinsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetRuinsReq::MergeFrom(const PlanetRuinsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_element_global_key()) {
      set_element_global_key(from.element_global_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetRuinsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetRuinsReq::CopyFrom(const PlanetRuinsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRuinsReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetRuinsReq::Swap(PlanetRuinsReq* other) {
  if (other != this) {
    std::swap(element_global_key_, other->element_global_key_);
    lineup_.Swap(&other->lineup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetRuinsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetRuinsReq_descriptor_;
  metadata.reflection = PlanetRuinsReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlanetRuinsResp_PlanetRuinsRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRuinsResp_PlanetRuinsRet_descriptor_;
}
bool PlanetRuinsResp_PlanetRuinsRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::OK;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::FAIL;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::ERROR_TYPE;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::REQ_ERROR;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::LINEUP_ERROR;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::NO_DURABLE;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::FIXING;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::OUTING;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::ARMY_NUM_MAX;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::NO_TYPE;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::NO_STRENGTH;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::PlanetRuinsRet_MIN;
const PlanetRuinsResp_PlanetRuinsRet PlanetRuinsResp::PlanetRuinsRet_MAX;
const int PlanetRuinsResp::PlanetRuinsRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlanetRuinsResp::kResultFieldNumber;
const int PlanetRuinsResp::kUserSyncFieldNumber;
const int PlanetRuinsResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetRuinsResp::PlanetRuinsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetRuinsResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
}

PlanetRuinsResp::PlanetRuinsResp(const PlanetRuinsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRuinsResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRuinsResp::~PlanetRuinsResp() {
  SharedDtor();
}

void PlanetRuinsResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetRuinsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetRuinsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRuinsResp_descriptor_;
}

const PlanetRuinsResp& PlanetRuinsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetRuinsResp* PlanetRuinsResp::default_instance_ = NULL;

PlanetRuinsResp* PlanetRuinsResp::New() const {
  return new PlanetRuinsResp;
}

void PlanetRuinsResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetRuinsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetRuinsResp.PlanetRuinsRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlanetRuinsResp_PlanetRuinsRet_IsValid(value)) {
            set_result(static_cast< ::PlanetRuinsResp_PlanetRuinsRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRuinsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetRuinsResp.PlanetRuinsRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->planet_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetRuinsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PlanetRuinsResp.PlanetRuinsRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->planet_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetRuinsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetRuinsResp.PlanetRuinsRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRuinsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetRuinsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetRuinsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetRuinsResp::MergeFrom(const PlanetRuinsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetRuinsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetRuinsResp::CopyFrom(const PlanetRuinsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRuinsResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetRuinsResp::Swap(PlanetRuinsResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetRuinsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetRuinsResp_descriptor_;
  metadata.reflection = PlanetRuinsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetRaidReq::kTypeListFieldNumber;
const int PlanetRaidReq::kElementGlobalKeyFieldNumber;
const int PlanetRaidReq::kLineupFieldNumber;
const int PlanetRaidReq::kArmyKeyFieldNumber;
const int PlanetRaidReq::kMassLevelFieldNumber;
#endif  // !_MSC_VER

PlanetRaidReq::PlanetRaidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetRaidReq::InitAsDefaultInstance() {
}

PlanetRaidReq::PlanetRaidReq(const PlanetRaidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRaidReq::SharedCtor() {
  _cached_size_ = 0;
  element_global_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mass_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRaidReq::~PlanetRaidReq() {
  SharedDtor();
}

void PlanetRaidReq::SharedDtor() {
  if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
    delete element_global_key_;
  }
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  if (this != default_instance_) {
  }
}

void PlanetRaidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetRaidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRaidReq_descriptor_;
}

const PlanetRaidReq& PlanetRaidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetRaidReq* PlanetRaidReq::default_instance_ = NULL;

PlanetRaidReq* PlanetRaidReq::New() const {
  return new PlanetRaidReq;
}

void PlanetRaidReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_element_global_key()) {
      if (element_global_key_ != &::google::protobuf::internal::kEmptyString) {
        element_global_key_->clear();
      }
    }
    if (has_army_key()) {
      if (army_key_ != &::google::protobuf::internal::kEmptyString) {
        army_key_->clear();
      }
    }
    mass_level_ = 0;
  }
  type_list_.Clear();
  lineup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetRaidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 type_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_type_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type_list;
        if (input->ExpectTag(18)) goto parse_element_global_key;
        break;
      }

      // required string element_global_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element_global_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_global_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->element_global_key().data(), this->element_global_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        break;
      }

      // repeated int32 lineup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lineup())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lineup())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lineup;
        if (input->ExpectTag(34)) goto parse_army_key;
        break;
      }

      // optional string army_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_army_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->army_key().data(), this->army_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mass_level;
        break;
      }

      // optional int32 mass_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mass_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_level_)));
          set_has_mass_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRaidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 type_list = 1;
  for (int i = 0; i < this->type_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->type_list(i), output);
  }

  // required string element_global_key = 2;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->element_global_key().data(), this->element_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->element_global_key(), output);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lineup(i), output);
  }

  // optional string army_key = 4;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_key().data(), this->army_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->army_key(), output);
  }

  // optional int32 mass_level = 5;
  if (has_mass_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mass_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetRaidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 type_list = 1;
  for (int i = 0; i < this->type_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->type_list(i), target);
  }

  // required string element_global_key = 2;
  if (has_element_global_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->element_global_key().data(), this->element_global_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->element_global_key(), target);
  }

  // repeated int32 lineup = 3;
  for (int i = 0; i < this->lineup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lineup(i), target);
  }

  // optional string army_key = 4;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_key().data(), this->army_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->army_key(), target);
  }

  // optional int32 mass_level = 5;
  if (has_mass_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mass_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetRaidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string element_global_key = 2;
    if (has_element_global_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_global_key());
    }

    // optional string army_key = 4;
    if (has_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->army_key());
    }

    // optional int32 mass_level = 5;
    if (has_mass_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass_level());
    }

  }
  // repeated int32 type_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type_list(i));
    }
    total_size += 1 * this->type_list_size() + data_size;
  }

  // repeated int32 lineup = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lineup_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lineup(i));
    }
    total_size += 1 * this->lineup_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRaidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetRaidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetRaidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetRaidReq::MergeFrom(const PlanetRaidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_list_.MergeFrom(from.type_list_);
  lineup_.MergeFrom(from.lineup_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_element_global_key()) {
      set_element_global_key(from.element_global_key());
    }
    if (from.has_army_key()) {
      set_army_key(from.army_key());
    }
    if (from.has_mass_level()) {
      set_mass_level(from.mass_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetRaidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetRaidReq::CopyFrom(const PlanetRaidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRaidReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PlanetRaidReq::Swap(PlanetRaidReq* other) {
  if (other != this) {
    type_list_.Swap(&other->type_list_);
    std::swap(element_global_key_, other->element_global_key_);
    lineup_.Swap(&other->lineup_);
    std::swap(army_key_, other->army_key_);
    std::swap(mass_level_, other->mass_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetRaidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetRaidReq_descriptor_;
  metadata.reflection = PlanetRaidReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlanetRaidResp_PlanetRaidRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRaidResp_PlanetRaidRet_descriptor_;
}
bool PlanetRaidResp_PlanetRaidRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::OK;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::FAIL;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ERROR_TYPE;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::REQ_ERROR;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::LINEUP_ERROR;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_DURABLE;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::FIXING;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::OUTING;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ARMY_NUM_MAX;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NOT_OPEN;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ERROR_GROUP;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ERROR_STATUS;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_STRENGTH;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_GROUP;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ALREADY_GUARDE;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ALREADY_ACCOMPANY;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::ALREADY_REQ_ACCOMPANY;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_GROUP_POWER;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::NO_BASE_POWER;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::SHIELD;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::PlanetRaidRet_MIN;
const PlanetRaidResp_PlanetRaidRet PlanetRaidResp::PlanetRaidRet_MAX;
const int PlanetRaidResp::PlanetRaidRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlanetRaidResp::kResultFieldNumber;
const int PlanetRaidResp::kUserSyncFieldNumber;
const int PlanetRaidResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetRaidResp::PlanetRaidResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetRaidResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
}

PlanetRaidResp::PlanetRaidResp(const PlanetRaidResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetRaidResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetRaidResp::~PlanetRaidResp() {
  SharedDtor();
}

void PlanetRaidResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetRaidResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetRaidResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetRaidResp_descriptor_;
}

const PlanetRaidResp& PlanetRaidResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetRaidResp* PlanetRaidResp::default_instance_ = NULL;

PlanetRaidResp* PlanetRaidResp::New() const {
  return new PlanetRaidResp;
}

void PlanetRaidResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetRaidResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetRaidResp.PlanetRaidRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlanetRaidResp_PlanetRaidRet_IsValid(value)) {
            set_result(static_cast< ::PlanetRaidResp_PlanetRaidRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetRaidResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetRaidResp.PlanetRaidRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->planet_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetRaidResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PlanetRaidResp.PlanetRaidRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->planet_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetRaidResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetRaidResp.PlanetRaidRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetRaidResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetRaidResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetRaidResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetRaidResp::MergeFrom(const PlanetRaidResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetRaidResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetRaidResp::CopyFrom(const PlanetRaidResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetRaidResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetRaidResp::Swap(PlanetRaidResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetRaidResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetRaidResp_descriptor_;
  metadata.reflection = PlanetRaidResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetSpeedUpReq::kArmyKeyFieldNumber;
const int PlanetSpeedUpReq::kTypeFieldNumber;
#endif  // !_MSC_VER

PlanetSpeedUpReq::PlanetSpeedUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetSpeedUpReq::InitAsDefaultInstance() {
}

PlanetSpeedUpReq::PlanetSpeedUpReq(const PlanetSpeedUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetSpeedUpReq::SharedCtor() {
  _cached_size_ = 0;
  army_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetSpeedUpReq::~PlanetSpeedUpReq() {
  SharedDtor();
}

void PlanetSpeedUpReq::SharedDtor() {
  if (army_key_ != &::google::protobuf::internal::kEmptyString) {
    delete army_key_;
  }
  if (this != default_instance_) {
  }
}

void PlanetSpeedUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetSpeedUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetSpeedUpReq_descriptor_;
}

const PlanetSpeedUpReq& PlanetSpeedUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetSpeedUpReq* PlanetSpeedUpReq::default_instance_ = NULL;

PlanetSpeedUpReq* PlanetSpeedUpReq::New() const {
  return new PlanetSpeedUpReq;
}

void PlanetSpeedUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_army_key()) {
      if (army_key_ != &::google::protobuf::internal::kEmptyString) {
        army_key_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetSpeedUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string army_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_army_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->army_key().data(), this->army_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetSpeedUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string army_key = 1;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_key().data(), this->army_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->army_key(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetSpeedUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string army_key = 1;
  if (has_army_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->army_key().data(), this->army_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->army_key(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetSpeedUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string army_key = 1;
    if (has_army_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->army_key());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetSpeedUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetSpeedUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetSpeedUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetSpeedUpReq::MergeFrom(const PlanetSpeedUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army_key()) {
      set_army_key(from.army_key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetSpeedUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetSpeedUpReq::CopyFrom(const PlanetSpeedUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetSpeedUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlanetSpeedUpReq::Swap(PlanetSpeedUpReq* other) {
  if (other != this) {
    std::swap(army_key_, other->army_key_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetSpeedUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetSpeedUpReq_descriptor_;
  metadata.reflection = PlanetSpeedUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetSpeedUpResp::kResultFieldNumber;
const int PlanetSpeedUpResp::kUserSyncFieldNumber;
const int PlanetSpeedUpResp::kArmyFieldNumber;
#endif  // !_MSC_VER

PlanetSpeedUpResp::PlanetSpeedUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetSpeedUpResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  army_ = const_cast< ::PlanetArmy*>(&::PlanetArmy::default_instance());
}

PlanetSpeedUpResp::PlanetSpeedUpResp(const PlanetSpeedUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetSpeedUpResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  army_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetSpeedUpResp::~PlanetSpeedUpResp() {
  SharedDtor();
}

void PlanetSpeedUpResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete army_;
  }
}

void PlanetSpeedUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetSpeedUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetSpeedUpResp_descriptor_;
}

const PlanetSpeedUpResp& PlanetSpeedUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetSpeedUpResp* PlanetSpeedUpResp::default_instance_ = NULL;

PlanetSpeedUpResp* PlanetSpeedUpResp::New() const {
  return new PlanetSpeedUpResp;
}

void PlanetSpeedUpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_army()) {
      if (army_ != NULL) army_->::PlanetArmy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetSpeedUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_army;
        break;
      }

      // optional .PlanetArmy army = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_army:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetSpeedUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .PlanetArmy army = 3;
  if (has_army()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->army(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetSpeedUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .PlanetArmy army = 3;
  if (has_army()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->army(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetSpeedUpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetArmy army = 3;
    if (has_army()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetSpeedUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetSpeedUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetSpeedUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetSpeedUpResp::MergeFrom(const PlanetSpeedUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_army()) {
      mutable_army()->::PlanetArmy::MergeFrom(from.army());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetSpeedUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetSpeedUpResp::CopyFrom(const PlanetSpeedUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetSpeedUpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_army()) {
    if (!this->army().IsInitialized()) return false;
  }
  return true;
}

void PlanetSpeedUpResp::Swap(PlanetSpeedUpResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(army_, other->army_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetSpeedUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetSpeedUpResp_descriptor_;
  metadata.reflection = PlanetSpeedUpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetShieldReq::kItemIdFieldNumber;
#endif  // !_MSC_VER

PlanetShieldReq::PlanetShieldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetShieldReq::InitAsDefaultInstance() {
}

PlanetShieldReq::PlanetShieldReq(const PlanetShieldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetShieldReq::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetShieldReq::~PlanetShieldReq() {
  SharedDtor();
}

void PlanetShieldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlanetShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetShieldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetShieldReq_descriptor_;
}

const PlanetShieldReq& PlanetShieldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetShieldReq* PlanetShieldReq::default_instance_ = NULL;

PlanetShieldReq* PlanetShieldReq::New() const {
  return new PlanetShieldReq;
}

void PlanetShieldReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetShieldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetShieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetShieldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetShieldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetShieldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetShieldReq::MergeFrom(const PlanetShieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetShieldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetShieldReq::CopyFrom(const PlanetShieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetShieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlanetShieldReq::Swap(PlanetShieldReq* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetShieldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetShieldReq_descriptor_;
  metadata.reflection = PlanetShieldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetShieldResp::kResultFieldNumber;
const int PlanetShieldResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

PlanetShieldResp::PlanetShieldResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetShieldResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

PlanetShieldResp::PlanetShieldResp(const PlanetShieldResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetShieldResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetShieldResp::~PlanetShieldResp() {
  SharedDtor();
}

void PlanetShieldResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void PlanetShieldResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetShieldResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetShieldResp_descriptor_;
}

const PlanetShieldResp& PlanetShieldResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetShieldResp* PlanetShieldResp::default_instance_ = NULL;

PlanetShieldResp* PlanetShieldResp::New() const {
  return new PlanetShieldResp;
}

void PlanetShieldResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetShieldResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetShieldResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetShieldResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetShieldResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetShieldResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetShieldResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetShieldResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetShieldResp::MergeFrom(const PlanetShieldResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetShieldResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetShieldResp::CopyFrom(const PlanetShieldResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetShieldResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void PlanetShieldResp::Swap(PlanetShieldResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetShieldResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetShieldResp_descriptor_;
  metadata.reflection = PlanetShieldResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMoveBaseReq::kTypeFieldNumber;
const int PlanetMoveBaseReq::kPosFieldNumber;
#endif  // !_MSC_VER

PlanetMoveBaseReq::PlanetMoveBaseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetMoveBaseReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::PlanetPoint*>(&::PlanetPoint::default_instance());
}

PlanetMoveBaseReq::PlanetMoveBaseReq(const PlanetMoveBaseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMoveBaseReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMoveBaseReq::~PlanetMoveBaseReq() {
  SharedDtor();
}

void PlanetMoveBaseReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void PlanetMoveBaseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetMoveBaseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetMoveBaseReq_descriptor_;
}

const PlanetMoveBaseReq& PlanetMoveBaseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetMoveBaseReq* PlanetMoveBaseReq::default_instance_ = NULL;

PlanetMoveBaseReq* PlanetMoveBaseReq::New() const {
  return new PlanetMoveBaseReq;
}

void PlanetMoveBaseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PlanetPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetMoveBaseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .PlanetPoint pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMoveBaseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .PlanetPoint pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetMoveBaseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .PlanetPoint pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetMoveBaseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .PlanetPoint pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMoveBaseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetMoveBaseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetMoveBaseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetMoveBaseReq::MergeFrom(const PlanetMoveBaseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::PlanetPoint::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetMoveBaseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetMoveBaseReq::CopyFrom(const PlanetMoveBaseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMoveBaseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void PlanetMoveBaseReq::Swap(PlanetMoveBaseReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetMoveBaseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetMoveBaseReq_descriptor_;
  metadata.reflection = PlanetMoveBaseReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlanetMoveBaseResp_PlanetMoveBaseRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetMoveBaseResp_PlanetMoveBaseRet_descriptor_;
}
bool PlanetMoveBaseResp_PlanetMoveBaseRet_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::OK;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::FAIL;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::NO_ITEM;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::HAS_ELEMENT;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::ERROR_NATION;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::ERROR_CITY;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::ERROR_POS;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::PlanetMoveBaseRet_MIN;
const PlanetMoveBaseResp_PlanetMoveBaseRet PlanetMoveBaseResp::PlanetMoveBaseRet_MAX;
const int PlanetMoveBaseResp::PlanetMoveBaseRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlanetMoveBaseResp::kResultFieldNumber;
const int PlanetMoveBaseResp::kUserSyncFieldNumber;
const int PlanetMoveBaseResp::kPlanetUserFieldNumber;
#endif  // !_MSC_VER

PlanetMoveBaseResp::PlanetMoveBaseResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetMoveBaseResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
  planet_user_ = const_cast< ::PlanetUser*>(&::PlanetUser::default_instance());
}

PlanetMoveBaseResp::PlanetMoveBaseResp(const PlanetMoveBaseResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMoveBaseResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  planet_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMoveBaseResp::~PlanetMoveBaseResp() {
  SharedDtor();
}

void PlanetMoveBaseResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
    delete planet_user_;
  }
}

void PlanetMoveBaseResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetMoveBaseResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetMoveBaseResp_descriptor_;
}

const PlanetMoveBaseResp& PlanetMoveBaseResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetMoveBaseResp* PlanetMoveBaseResp::default_instance_ = NULL;

PlanetMoveBaseResp* PlanetMoveBaseResp::New() const {
  return new PlanetMoveBaseResp;
}

void PlanetMoveBaseResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    if (has_planet_user()) {
      if (planet_user_ != NULL) planet_user_->::PlanetUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetMoveBaseResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlanetMoveBaseResp.PlanetMoveBaseRet result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlanetMoveBaseResp_PlanetMoveBaseRet_IsValid(value)) {
            set_result(static_cast< ::PlanetMoveBaseResp_PlanetMoveBaseRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planet_user;
        break;
      }

      // optional .PlanetUser planet_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planet_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planet_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMoveBaseResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlanetMoveBaseResp.PlanetMoveBaseRet result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->planet_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetMoveBaseResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PlanetMoveBaseResp.PlanetMoveBaseRet result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional .PlanetUser planet_user = 3;
  if (has_planet_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->planet_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetMoveBaseResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlanetMoveBaseResp.PlanetMoveBaseRet result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional .PlanetUser planet_user = 3;
    if (has_planet_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->planet_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMoveBaseResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetMoveBaseResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetMoveBaseResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetMoveBaseResp::MergeFrom(const PlanetMoveBaseResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_planet_user()) {
      mutable_planet_user()->::PlanetUser::MergeFrom(from.planet_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetMoveBaseResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetMoveBaseResp::CopyFrom(const PlanetMoveBaseResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMoveBaseResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  if (has_planet_user()) {
    if (!this->planet_user().IsInitialized()) return false;
  }
  return true;
}

void PlanetMoveBaseResp::Swap(PlanetMoveBaseResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(planet_user_, other->planet_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetMoveBaseResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetMoveBaseResp_descriptor_;
  metadata.reflection = PlanetMoveBaseResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMarkReq::kTypeFieldNumber;
const int PlanetMarkReq::kNameFieldNumber;
const int PlanetMarkReq::kPosFieldNumber;
#endif  // !_MSC_VER

PlanetMarkReq::PlanetMarkReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetMarkReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::PlanetPoint*>(&::PlanetPoint::default_instance());
}

PlanetMarkReq::PlanetMarkReq(const PlanetMarkReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMarkReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMarkReq::~PlanetMarkReq() {
  SharedDtor();
}

void PlanetMarkReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void PlanetMarkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetMarkReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetMarkReq_descriptor_;
}

const PlanetMarkReq& PlanetMarkReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetMarkReq* PlanetMarkReq::default_instance_ = NULL;

PlanetMarkReq* PlanetMarkReq::New() const {
  return new PlanetMarkReq;
}

void PlanetMarkReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PlanetPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetMarkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .PlanetPoint pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMarkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .PlanetPoint pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetMarkReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .PlanetPoint pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetMarkReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .PlanetPoint pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMarkReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetMarkReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetMarkReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetMarkReq::MergeFrom(const PlanetMarkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pos()) {
      mutable_pos()->::PlanetPoint::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetMarkReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetMarkReq::CopyFrom(const PlanetMarkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMarkReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void PlanetMarkReq::Swap(PlanetMarkReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetMarkReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetMarkReq_descriptor_;
  metadata.reflection = PlanetMarkReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanetMarkResp::kResultFieldNumber;
const int PlanetMarkResp::kUserSyncFieldNumber;
const int PlanetMarkResp::kMarkListFieldNumber;
#endif  // !_MSC_VER

PlanetMarkResp::PlanetMarkResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanetMarkResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

PlanetMarkResp::PlanetMarkResp(const PlanetMarkResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanetMarkResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanetMarkResp::~PlanetMarkResp() {
  SharedDtor();
}

void PlanetMarkResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void PlanetMarkResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanetMarkResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanetMarkResp_descriptor_;
}

const PlanetMarkResp& PlanetMarkResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdPlanet_2eproto();
  return *default_instance_;
}

PlanetMarkResp* PlanetMarkResp::default_instance_ = NULL;

PlanetMarkResp* PlanetMarkResp::New() const {
  return new PlanetMarkResp;
}

void PlanetMarkResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  mark_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanetMarkResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mark_list;
        break;
      }

      // repeated .PlanetMark mark_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mark_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mark_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mark_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanetMarkResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .PlanetMark mark_list = 3;
  for (int i = 0; i < this->mark_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mark_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanetMarkResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .PlanetMark mark_list = 3;
  for (int i = 0; i < this->mark_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mark_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanetMarkResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .PlanetMark mark_list = 3;
  total_size += 1 * this->mark_list_size();
  for (int i = 0; i < this->mark_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mark_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanetMarkResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanetMarkResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanetMarkResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanetMarkResp::MergeFrom(const PlanetMarkResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mark_list_.MergeFrom(from.mark_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanetMarkResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanetMarkResp::CopyFrom(const PlanetMarkResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanetMarkResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < mark_list_size(); i++) {
    if (!this->mark_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlanetMarkResp::Swap(PlanetMarkResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    mark_list_.Swap(&other->mark_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanetMarkResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanetMarkResp_descriptor_;
  metadata.reflection = PlanetMarkResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
