// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CmdEquip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CmdEquip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EquipLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipLevelUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipLevelUpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipEnchaseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipEnchaseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipEnchaseResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipEnchaseResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShipEquipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipEquipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrengthEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengthEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrengthEquipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrengthEquipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolveEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolveEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolveEquipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolveEquipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateEquipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateEquipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolveBlueprintReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolveBlueprintReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolveBlueprintResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolveBlueprintResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemEquipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemEquipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MixGemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MixGemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MixGemResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MixGemResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CmdEquip_2eproto() {
  protobuf_AddDesc_CmdEquip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CmdEquip.proto");
  GOOGLE_CHECK(file != NULL);
  EquipLevelUpReq_descriptor_ = file->message_type(0);
  static const int EquipLevelUpReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpReq, add_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpReq, add_new_player_),
  };
  EquipLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipLevelUpReq_descriptor_,
      EquipLevelUpReq::default_instance_,
      EquipLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipLevelUpReq));
  EquipLevelUpResp_descriptor_ = file->message_type(1);
  static const int EquipLevelUpResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpResp, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpResp, add_new_player_),
  };
  EquipLevelUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipLevelUpResp_descriptor_,
      EquipLevelUpResp::default_instance_,
      EquipLevelUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLevelUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipLevelUpResp));
  EquipEnchaseReq_descriptor_ = file->message_type(2);
  static const int EquipEnchaseReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchaseReq, id_),
  };
  EquipEnchaseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipEnchaseReq_descriptor_,
      EquipEnchaseReq::default_instance_,
      EquipEnchaseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchaseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchaseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipEnchaseReq));
  EquipEnchaseResp_descriptor_ = file->message_type(3);
  static const int EquipEnchaseResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchaseResp, result_),
  };
  EquipEnchaseResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipEnchaseResp_descriptor_,
      EquipEnchaseResp::default_instance_,
      EquipEnchaseResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchaseResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchaseResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipEnchaseResp));
  ShipEquipReq_descriptor_ = file->message_type(4);
  static const int ShipEquipReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipReq, ship_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipReq, equip_index_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipReq, equip_guid_list_),
  };
  ShipEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipEquipReq_descriptor_,
      ShipEquipReq::default_instance_,
      ShipEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipEquipReq));
  ShipEquipResp_descriptor_ = file->message_type(5);
  static const int ShipEquipResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipResp, ship_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipResp, equip_index_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipResp, equip_guid_list_),
  };
  ShipEquipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipEquipResp_descriptor_,
      ShipEquipResp::default_instance_,
      ShipEquipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipEquipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipEquipResp));
  StrengthEquipReq_descriptor_ = file->message_type(6);
  static const int StrengthEquipReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipReq, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipReq, count_),
  };
  StrengthEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengthEquipReq_descriptor_,
      StrengthEquipReq::default_instance_,
      StrengthEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengthEquipReq));
  StrengthEquipResp_descriptor_ = file->message_type(7);
  static const int StrengthEquipResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipResp, equip_guid_),
  };
  StrengthEquipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrengthEquipResp_descriptor_,
      StrengthEquipResp::default_instance_,
      StrengthEquipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthEquipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrengthEquipResp));
  ResolveEquipReq_descriptor_ = file->message_type(8);
  static const int ResolveEquipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveEquipReq, equip_guid_list_),
  };
  ResolveEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolveEquipReq_descriptor_,
      ResolveEquipReq::default_instance_,
      ResolveEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolveEquipReq));
  ResolveEquipResp_descriptor_ = file->message_type(9);
  static const int ResolveEquipResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveEquipResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveEquipResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveEquipResp, get_item_list_),
  };
  ResolveEquipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolveEquipResp_descriptor_,
      ResolveEquipResp::default_instance_,
      ResolveEquipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveEquipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveEquipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolveEquipResp));
  CreateEquipReq_descriptor_ = file->message_type(10);
  static const int CreateEquipReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipReq, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipReq, forge_guid_),
  };
  CreateEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateEquipReq_descriptor_,
      CreateEquipReq::default_instance_,
      CreateEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateEquipReq));
  CreateEquipResp_descriptor_ = file->message_type(11);
  static const int CreateEquipResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipResp, get_equip_guid_),
  };
  CreateEquipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateEquipResp_descriptor_,
      CreateEquipResp::default_instance_,
      CreateEquipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateEquipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateEquipResp));
  ResolveBlueprintReq_descriptor_ = file->message_type(12);
  static const int ResolveBlueprintReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveBlueprintReq, item_list_),
  };
  ResolveBlueprintReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolveBlueprintReq_descriptor_,
      ResolveBlueprintReq::default_instance_,
      ResolveBlueprintReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveBlueprintReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveBlueprintReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolveBlueprintReq));
  ResolveBlueprintResp_descriptor_ = file->message_type(13);
  static const int ResolveBlueprintResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveBlueprintResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveBlueprintResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveBlueprintResp, get_item_list_),
  };
  ResolveBlueprintResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolveBlueprintResp_descriptor_,
      ResolveBlueprintResp::default_instance_,
      ResolveBlueprintResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveBlueprintResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveBlueprintResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolveBlueprintResp));
  GemEquipReq_descriptor_ = file->message_type(14);
  static const int GemEquipReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipReq, ship_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipReq, gem_id_),
  };
  GemEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemEquipReq_descriptor_,
      GemEquipReq::default_instance_,
      GemEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemEquipReq));
  GemEquipResp_descriptor_ = file->message_type(15);
  static const int GemEquipResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipResp, user_sync_),
  };
  GemEquipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemEquipResp_descriptor_,
      GemEquipResp::default_instance_,
      GemEquipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemEquipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemEquipResp));
  MixGemReq_descriptor_ = file->message_type(16);
  static const int MixGemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemReq, gem_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemReq, count_),
  };
  MixGemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MixGemReq_descriptor_,
      MixGemReq::default_instance_,
      MixGemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MixGemReq));
  MixGemResp_descriptor_ = file->message_type(17);
  static const int MixGemResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemResp, user_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemResp, mix_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemResp, remain_list_),
  };
  MixGemResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MixGemResp_descriptor_,
      MixGemResp::default_instance_,
      MixGemResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MixGemResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MixGemResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CmdEquip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipLevelUpReq_descriptor_, &EquipLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipLevelUpResp_descriptor_, &EquipLevelUpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipEnchaseReq_descriptor_, &EquipEnchaseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipEnchaseResp_descriptor_, &EquipEnchaseResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipEquipReq_descriptor_, &ShipEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipEquipResp_descriptor_, &ShipEquipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengthEquipReq_descriptor_, &StrengthEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrengthEquipResp_descriptor_, &StrengthEquipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolveEquipReq_descriptor_, &ResolveEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolveEquipResp_descriptor_, &ResolveEquipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateEquipReq_descriptor_, &CreateEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateEquipResp_descriptor_, &CreateEquipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolveBlueprintReq_descriptor_, &ResolveBlueprintReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolveBlueprintResp_descriptor_, &ResolveBlueprintResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemEquipReq_descriptor_, &GemEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemEquipResp_descriptor_, &GemEquipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MixGemReq_descriptor_, &MixGemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MixGemResp_descriptor_, &MixGemResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CmdEquip_2eproto() {
  delete EquipLevelUpReq::default_instance_;
  delete EquipLevelUpReq_reflection_;
  delete EquipLevelUpResp::default_instance_;
  delete EquipLevelUpResp_reflection_;
  delete EquipEnchaseReq::default_instance_;
  delete EquipEnchaseReq_reflection_;
  delete EquipEnchaseResp::default_instance_;
  delete EquipEnchaseResp_reflection_;
  delete ShipEquipReq::default_instance_;
  delete ShipEquipReq_reflection_;
  delete ShipEquipResp::default_instance_;
  delete ShipEquipResp_reflection_;
  delete StrengthEquipReq::default_instance_;
  delete StrengthEquipReq_reflection_;
  delete StrengthEquipResp::default_instance_;
  delete StrengthEquipResp_reflection_;
  delete ResolveEquipReq::default_instance_;
  delete ResolveEquipReq_reflection_;
  delete ResolveEquipResp::default_instance_;
  delete ResolveEquipResp_reflection_;
  delete CreateEquipReq::default_instance_;
  delete CreateEquipReq_reflection_;
  delete CreateEquipResp::default_instance_;
  delete CreateEquipResp_reflection_;
  delete ResolveBlueprintReq::default_instance_;
  delete ResolveBlueprintReq_reflection_;
  delete ResolveBlueprintResp::default_instance_;
  delete ResolveBlueprintResp_reflection_;
  delete GemEquipReq::default_instance_;
  delete GemEquipReq_reflection_;
  delete GemEquipResp::default_instance_;
  delete GemEquipResp_reflection_;
  delete MixGemReq::default_instance_;
  delete MixGemReq_reflection_;
  delete MixGemResp::default_instance_;
  delete MixGemResp_reflection_;
}

void protobuf_AddDesc_CmdEquip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Equip_2eproto();
  ::protobuf_AddDesc_Item_2eproto();
  ::protobuf_AddDesc_UserSync_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CmdEquip.proto\032\013Equip.proto\032\nItem.prot"
    "o\032\016UserSync.proto\"H\n\017EquipLevelUpReq\022\n\n\002"
    "id\030\001 \002(\005\022\021\n\tadd_value\030\002 \002(\005\022\026\n\016add_new_p"
    "layer\030\003 \001(\005\"Q\n\020EquipLevelUpResp\022\016\n\006resul"
    "t\030\001 \002(\005\022\025\n\005equip\030\002 \001(\0132\006.Equip\022\026\n\016add_ne"
    "w_player\030\003 \001(\005\"\035\n\017EquipEnchaseReq\022\n\n\002id\030"
    "\001 \002(\005\"\"\n\020EquipEnchaseResp\022\016\n\006result\030\001 \002("
    "\005\"T\n\014ShipEquipReq\022\021\n\tship_guid\030\001 \002(\005\022\030\n\020"
    "equip_index_list\030\002 \003(\005\022\027\n\017equip_guid_lis"
    "t\030\003 \003(\005\"\203\001\n\rShipEquipResp\022\016\n\006result\030\001 \002("
    "\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\021\n\tship_"
    "guid\030\003 \002(\005\022\030\n\020equip_index_list\030\004 \003(\005\022\027\n\017"
    "equip_guid_list\030\005 \003(\005\"5\n\020StrengthEquipRe"
    "q\022\022\n\nequip_guid\030\001 \002(\005\022\r\n\005count\030\002 \001(\005\"U\n\021"
    "StrengthEquipResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuse"
    "r_sync\030\002 \001(\0132\t.UserSync\022\022\n\nequip_guid\030\003 "
    "\001(\005\"*\n\017ResolveEquipReq\022\027\n\017equip_guid_lis"
    "t\030\001 \003(\005\"^\n\020ResolveEquipResp\022\016\n\006result\030\001 "
    "\002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\034\n\rget"
    "_item_list\030\003 \003(\0132\005.Item\"D\n\016CreateEquipRe"
    "q\022\014\n\004type\030\001 \002(\005\022\020\n\010equip_id\030\002 \001(\005\022\022\n\nfor"
    "ge_guid\030\003 \001(\005\"W\n\017CreateEquipResp\022\016\n\006resu"
    "lt\030\001 \002(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\022\026"
    "\n\016get_equip_guid\030\003 \001(\005\"/\n\023ResolveBluepri"
    "ntReq\022\030\n\titem_list\030\001 \003(\0132\005.Pair\"b\n\024Resol"
    "veBlueprintResp\022\016\n\006result\030\001 \002(\005\022\034\n\tuser_"
    "sync\030\002 \001(\0132\t.UserSync\022\034\n\rget_item_list\030\003"
    " \003(\0132\005.Pair\"M\n\013GemEquipReq\022\014\n\004type\030\001 \002(\005"
    "\022\021\n\tship_guid\030\002 \002(\005\022\r\n\005index\030\003 \002(\005\022\016\n\006ge"
    "m_id\030\004 \002(\005\"<\n\014GemEquipResp\022\016\n\006result\030\001 \002"
    "(\005\022\034\n\tuser_sync\030\002 \001(\0132\t.UserSync\"2\n\tMixG"
    "emReq\022\026\n\010gem_list\030\001 \003(\0132\004.Gem\022\r\n\005count\030\002"
    " \001(\005\"i\n\nMixGemResp\022\016\n\006result\030\001 \002(\005\022\034\n\tus"
    "er_sync\030\002 \001(\0132\t.UserSync\022\022\n\nmix_result\030\003"
    " \001(\010\022\031\n\013remain_list\030\004 \003(\0132\004.Gem", 1391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CmdEquip.proto", &protobuf_RegisterTypes);
  EquipLevelUpReq::default_instance_ = new EquipLevelUpReq();
  EquipLevelUpResp::default_instance_ = new EquipLevelUpResp();
  EquipEnchaseReq::default_instance_ = new EquipEnchaseReq();
  EquipEnchaseResp::default_instance_ = new EquipEnchaseResp();
  ShipEquipReq::default_instance_ = new ShipEquipReq();
  ShipEquipResp::default_instance_ = new ShipEquipResp();
  StrengthEquipReq::default_instance_ = new StrengthEquipReq();
  StrengthEquipResp::default_instance_ = new StrengthEquipResp();
  ResolveEquipReq::default_instance_ = new ResolveEquipReq();
  ResolveEquipResp::default_instance_ = new ResolveEquipResp();
  CreateEquipReq::default_instance_ = new CreateEquipReq();
  CreateEquipResp::default_instance_ = new CreateEquipResp();
  ResolveBlueprintReq::default_instance_ = new ResolveBlueprintReq();
  ResolveBlueprintResp::default_instance_ = new ResolveBlueprintResp();
  GemEquipReq::default_instance_ = new GemEquipReq();
  GemEquipResp::default_instance_ = new GemEquipResp();
  MixGemReq::default_instance_ = new MixGemReq();
  MixGemResp::default_instance_ = new MixGemResp();
  EquipLevelUpReq::default_instance_->InitAsDefaultInstance();
  EquipLevelUpResp::default_instance_->InitAsDefaultInstance();
  EquipEnchaseReq::default_instance_->InitAsDefaultInstance();
  EquipEnchaseResp::default_instance_->InitAsDefaultInstance();
  ShipEquipReq::default_instance_->InitAsDefaultInstance();
  ShipEquipResp::default_instance_->InitAsDefaultInstance();
  StrengthEquipReq::default_instance_->InitAsDefaultInstance();
  StrengthEquipResp::default_instance_->InitAsDefaultInstance();
  ResolveEquipReq::default_instance_->InitAsDefaultInstance();
  ResolveEquipResp::default_instance_->InitAsDefaultInstance();
  CreateEquipReq::default_instance_->InitAsDefaultInstance();
  CreateEquipResp::default_instance_->InitAsDefaultInstance();
  ResolveBlueprintReq::default_instance_->InitAsDefaultInstance();
  ResolveBlueprintResp::default_instance_->InitAsDefaultInstance();
  GemEquipReq::default_instance_->InitAsDefaultInstance();
  GemEquipResp::default_instance_->InitAsDefaultInstance();
  MixGemReq::default_instance_->InitAsDefaultInstance();
  MixGemResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CmdEquip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CmdEquip_2eproto {
  StaticDescriptorInitializer_CmdEquip_2eproto() {
    protobuf_AddDesc_CmdEquip_2eproto();
  }
} static_descriptor_initializer_CmdEquip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipLevelUpReq::kIdFieldNumber;
const int EquipLevelUpReq::kAddValueFieldNumber;
const int EquipLevelUpReq::kAddNewPlayerFieldNumber;
#endif  // !_MSC_VER

EquipLevelUpReq::EquipLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipLevelUpReq::InitAsDefaultInstance() {
}

EquipLevelUpReq::EquipLevelUpReq(const EquipLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  add_value_ = 0;
  add_new_player_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipLevelUpReq::~EquipLevelUpReq() {
  SharedDtor();
}

void EquipLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipLevelUpReq_descriptor_;
}

const EquipLevelUpReq& EquipLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

EquipLevelUpReq* EquipLevelUpReq::default_instance_ = NULL;

EquipLevelUpReq* EquipLevelUpReq::New() const {
  return new EquipLevelUpReq;
}

void EquipLevelUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    add_value_ = 0;
    add_new_player_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_value;
        break;
      }

      // required int32 add_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_value_)));
          set_has_add_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_new_player;
        break;
      }

      // optional int32 add_new_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_new_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_new_player_)));
          set_has_add_new_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 add_value = 2;
  if (has_add_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add_value(), output);
  }

  // optional int32 add_new_player = 3;
  if (has_add_new_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_new_player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 add_value = 2;
  if (has_add_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add_value(), target);
  }

  // optional int32 add_new_player = 3;
  if (has_add_new_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_new_player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 add_value = 2;
    if (has_add_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_value());
    }

    // optional int32 add_new_player = 3;
    if (has_add_new_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_new_player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipLevelUpReq::MergeFrom(const EquipLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_add_value()) {
      set_add_value(from.add_value());
    }
    if (from.has_add_new_player()) {
      set_add_new_player(from.add_new_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipLevelUpReq::CopyFrom(const EquipLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipLevelUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipLevelUpReq::Swap(EquipLevelUpReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(add_value_, other->add_value_);
    std::swap(add_new_player_, other->add_new_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipLevelUpReq_descriptor_;
  metadata.reflection = EquipLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipLevelUpResp::kResultFieldNumber;
const int EquipLevelUpResp::kEquipFieldNumber;
const int EquipLevelUpResp::kAddNewPlayerFieldNumber;
#endif  // !_MSC_VER

EquipLevelUpResp::EquipLevelUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipLevelUpResp::InitAsDefaultInstance() {
  equip_ = const_cast< ::Equip*>(&::Equip::default_instance());
}

EquipLevelUpResp::EquipLevelUpResp(const EquipLevelUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipLevelUpResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  equip_ = NULL;
  add_new_player_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipLevelUpResp::~EquipLevelUpResp() {
  SharedDtor();
}

void EquipLevelUpResp::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void EquipLevelUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipLevelUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipLevelUpResp_descriptor_;
}

const EquipLevelUpResp& EquipLevelUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

EquipLevelUpResp* EquipLevelUpResp::default_instance_ = NULL;

EquipLevelUpResp* EquipLevelUpResp::New() const {
  return new EquipLevelUpResp;
}

void EquipLevelUpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::Equip::Clear();
    }
    add_new_player_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipLevelUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // optional .Equip equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_add_new_player;
        break;
      }

      // optional int32 add_new_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_new_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_new_player_)));
          set_has_add_new_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipLevelUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .Equip equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  // optional int32 add_new_player = 3;
  if (has_add_new_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->add_new_player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipLevelUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .Equip equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  // optional int32 add_new_player = 3;
  if (has_add_new_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->add_new_player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipLevelUpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .Equip equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional int32 add_new_player = 3;
    if (has_add_new_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_new_player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipLevelUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipLevelUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipLevelUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipLevelUpResp::MergeFrom(const EquipLevelUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equip()) {
      mutable_equip()->::Equip::MergeFrom(from.equip());
    }
    if (from.has_add_new_player()) {
      set_add_new_player(from.add_new_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipLevelUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipLevelUpResp::CopyFrom(const EquipLevelUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipLevelUpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void EquipLevelUpResp::Swap(EquipLevelUpResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equip_, other->equip_);
    std::swap(add_new_player_, other->add_new_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipLevelUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipLevelUpResp_descriptor_;
  metadata.reflection = EquipLevelUpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipEnchaseReq::kIdFieldNumber;
#endif  // !_MSC_VER

EquipEnchaseReq::EquipEnchaseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipEnchaseReq::InitAsDefaultInstance() {
}

EquipEnchaseReq::EquipEnchaseReq(const EquipEnchaseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipEnchaseReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipEnchaseReq::~EquipEnchaseReq() {
  SharedDtor();
}

void EquipEnchaseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipEnchaseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipEnchaseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipEnchaseReq_descriptor_;
}

const EquipEnchaseReq& EquipEnchaseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

EquipEnchaseReq* EquipEnchaseReq::default_instance_ = NULL;

EquipEnchaseReq* EquipEnchaseReq::New() const {
  return new EquipEnchaseReq;
}

void EquipEnchaseReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipEnchaseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipEnchaseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipEnchaseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipEnchaseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipEnchaseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipEnchaseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipEnchaseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipEnchaseReq::MergeFrom(const EquipEnchaseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipEnchaseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipEnchaseReq::CopyFrom(const EquipEnchaseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipEnchaseReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipEnchaseReq::Swap(EquipEnchaseReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipEnchaseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipEnchaseReq_descriptor_;
  metadata.reflection = EquipEnchaseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipEnchaseResp::kResultFieldNumber;
#endif  // !_MSC_VER

EquipEnchaseResp::EquipEnchaseResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipEnchaseResp::InitAsDefaultInstance() {
}

EquipEnchaseResp::EquipEnchaseResp(const EquipEnchaseResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipEnchaseResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipEnchaseResp::~EquipEnchaseResp() {
  SharedDtor();
}

void EquipEnchaseResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipEnchaseResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipEnchaseResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipEnchaseResp_descriptor_;
}

const EquipEnchaseResp& EquipEnchaseResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

EquipEnchaseResp* EquipEnchaseResp::default_instance_ = NULL;

EquipEnchaseResp* EquipEnchaseResp::New() const {
  return new EquipEnchaseResp;
}

void EquipEnchaseResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipEnchaseResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipEnchaseResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipEnchaseResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipEnchaseResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipEnchaseResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipEnchaseResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipEnchaseResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipEnchaseResp::MergeFrom(const EquipEnchaseResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipEnchaseResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipEnchaseResp::CopyFrom(const EquipEnchaseResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipEnchaseResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipEnchaseResp::Swap(EquipEnchaseResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipEnchaseResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipEnchaseResp_descriptor_;
  metadata.reflection = EquipEnchaseResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipEquipReq::kShipGuidFieldNumber;
const int ShipEquipReq::kEquipIndexListFieldNumber;
const int ShipEquipReq::kEquipGuidListFieldNumber;
#endif  // !_MSC_VER

ShipEquipReq::ShipEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipEquipReq::InitAsDefaultInstance() {
}

ShipEquipReq::ShipEquipReq(const ShipEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipEquipReq::SharedCtor() {
  _cached_size_ = 0;
  ship_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipEquipReq::~ShipEquipReq() {
  SharedDtor();
}

void ShipEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipEquipReq_descriptor_;
}

const ShipEquipReq& ShipEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

ShipEquipReq* ShipEquipReq::default_instance_ = NULL;

ShipEquipReq* ShipEquipReq::New() const {
  return new ShipEquipReq;
}

void ShipEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ship_guid_ = 0;
  }
  equip_index_list_.Clear();
  equip_guid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ship_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_index_list;
        break;
      }

      // repeated int32 equip_index_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_index_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_equip_index_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equip_index_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_index_list;
        if (input->ExpectTag(24)) goto parse_equip_guid_list;
        break;
      }

      // repeated int32 equip_guid_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_guid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_equip_guid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equip_guid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_guid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ship_guid = 1;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ship_guid(), output);
  }

  // repeated int32 equip_index_list = 2;
  for (int i = 0; i < this->equip_index_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->equip_index_list(i), output);
  }

  // repeated int32 equip_guid_list = 3;
  for (int i = 0; i < this->equip_guid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->equip_guid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ship_guid = 1;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ship_guid(), target);
  }

  // repeated int32 equip_index_list = 2;
  for (int i = 0; i < this->equip_index_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->equip_index_list(i), target);
  }

  // repeated int32 equip_guid_list = 3;
  for (int i = 0; i < this->equip_guid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->equip_guid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ship_guid = 1;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

  }
  // repeated int32 equip_index_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_index_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equip_index_list(i));
    }
    total_size += 1 * this->equip_index_list_size() + data_size;
  }

  // repeated int32 equip_guid_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_guid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equip_guid_list(i));
    }
    total_size += 1 * this->equip_guid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipEquipReq::MergeFrom(const ShipEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_index_list_.MergeFrom(from.equip_index_list_);
  equip_guid_list_.MergeFrom(from.equip_guid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipEquipReq::CopyFrom(const ShipEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ShipEquipReq::Swap(ShipEquipReq* other) {
  if (other != this) {
    std::swap(ship_guid_, other->ship_guid_);
    equip_index_list_.Swap(&other->equip_index_list_);
    equip_guid_list_.Swap(&other->equip_guid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipEquipReq_descriptor_;
  metadata.reflection = ShipEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShipEquipResp::kResultFieldNumber;
const int ShipEquipResp::kUserSyncFieldNumber;
const int ShipEquipResp::kShipGuidFieldNumber;
const int ShipEquipResp::kEquipIndexListFieldNumber;
const int ShipEquipResp::kEquipGuidListFieldNumber;
#endif  // !_MSC_VER

ShipEquipResp::ShipEquipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShipEquipResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ShipEquipResp::ShipEquipResp(const ShipEquipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShipEquipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ship_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipEquipResp::~ShipEquipResp() {
  SharedDtor();
}

void ShipEquipResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ShipEquipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipEquipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipEquipResp_descriptor_;
}

const ShipEquipResp& ShipEquipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

ShipEquipResp* ShipEquipResp::default_instance_ = NULL;

ShipEquipResp* ShipEquipResp::New() const {
  return new ShipEquipResp;
}

void ShipEquipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    ship_guid_ = 0;
  }
  equip_index_list_.Clear();
  equip_guid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipEquipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ship_guid;
        break;
      }

      // required int32 ship_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_equip_index_list;
        break;
      }

      // repeated int32 equip_index_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_index_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_equip_index_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equip_index_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_equip_index_list;
        if (input->ExpectTag(40)) goto parse_equip_guid_list;
        break;
      }

      // repeated int32 equip_guid_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_guid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_equip_guid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equip_guid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip_guid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShipEquipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // required int32 ship_guid = 3;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ship_guid(), output);
  }

  // repeated int32 equip_index_list = 4;
  for (int i = 0; i < this->equip_index_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->equip_index_list(i), output);
  }

  // repeated int32 equip_guid_list = 5;
  for (int i = 0; i < this->equip_guid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->equip_guid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShipEquipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // required int32 ship_guid = 3;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ship_guid(), target);
  }

  // repeated int32 equip_index_list = 4;
  for (int i = 0; i < this->equip_index_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->equip_index_list(i), target);
  }

  // repeated int32 equip_guid_list = 5;
  for (int i = 0; i < this->equip_guid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->equip_guid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShipEquipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // required int32 ship_guid = 3;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

  }
  // repeated int32 equip_index_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_index_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equip_index_list(i));
    }
    total_size += 1 * this->equip_index_list_size() + data_size;
  }

  // repeated int32 equip_guid_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_guid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equip_guid_list(i));
    }
    total_size += 1 * this->equip_guid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipEquipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipEquipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipEquipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipEquipResp::MergeFrom(const ShipEquipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_index_list_.MergeFrom(from.equip_index_list_);
  equip_guid_list_.MergeFrom(from.equip_guid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipEquipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipEquipResp::CopyFrom(const ShipEquipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipEquipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void ShipEquipResp::Swap(ShipEquipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(ship_guid_, other->ship_guid_);
    equip_index_list_.Swap(&other->equip_index_list_);
    equip_guid_list_.Swap(&other->equip_guid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipEquipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipEquipResp_descriptor_;
  metadata.reflection = ShipEquipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrengthEquipReq::kEquipGuidFieldNumber;
const int StrengthEquipReq::kCountFieldNumber;
#endif  // !_MSC_VER

StrengthEquipReq::StrengthEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrengthEquipReq::InitAsDefaultInstance() {
}

StrengthEquipReq::StrengthEquipReq(const StrengthEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrengthEquipReq::SharedCtor() {
  _cached_size_ = 0;
  equip_guid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengthEquipReq::~StrengthEquipReq() {
  SharedDtor();
}

void StrengthEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrengthEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengthEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengthEquipReq_descriptor_;
}

const StrengthEquipReq& StrengthEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

StrengthEquipReq* StrengthEquipReq::default_instance_ = NULL;

StrengthEquipReq* StrengthEquipReq::New() const {
  return new StrengthEquipReq;
}

void StrengthEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_guid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengthEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrengthEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equip_guid = 1;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_guid(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrengthEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equip_guid = 1;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_guid(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrengthEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equip_guid = 1;
    if (has_equip_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_guid());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengthEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengthEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengthEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengthEquipReq::MergeFrom(const StrengthEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengthEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengthEquipReq::CopyFrom(const StrengthEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengthEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StrengthEquipReq::Swap(StrengthEquipReq* other) {
  if (other != this) {
    std::swap(equip_guid_, other->equip_guid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengthEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengthEquipReq_descriptor_;
  metadata.reflection = StrengthEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrengthEquipResp::kResultFieldNumber;
const int StrengthEquipResp::kUserSyncFieldNumber;
const int StrengthEquipResp::kEquipGuidFieldNumber;
#endif  // !_MSC_VER

StrengthEquipResp::StrengthEquipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrengthEquipResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

StrengthEquipResp::StrengthEquipResp(const StrengthEquipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrengthEquipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  equip_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrengthEquipResp::~StrengthEquipResp() {
  SharedDtor();
}

void StrengthEquipResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void StrengthEquipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengthEquipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrengthEquipResp_descriptor_;
}

const StrengthEquipResp& StrengthEquipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

StrengthEquipResp* StrengthEquipResp::default_instance_ = NULL;

StrengthEquipResp* StrengthEquipResp::New() const {
  return new StrengthEquipResp;
}

void StrengthEquipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    equip_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrengthEquipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_guid;
        break;
      }

      // optional int32 equip_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrengthEquipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 equip_guid = 3;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrengthEquipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 equip_guid = 3;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrengthEquipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 equip_guid = 3;
    if (has_equip_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengthEquipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrengthEquipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrengthEquipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrengthEquipResp::MergeFrom(const StrengthEquipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrengthEquipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengthEquipResp::CopyFrom(const StrengthEquipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengthEquipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void StrengthEquipResp::Swap(StrengthEquipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(equip_guid_, other->equip_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrengthEquipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrengthEquipResp_descriptor_;
  metadata.reflection = StrengthEquipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolveEquipReq::kEquipGuidListFieldNumber;
#endif  // !_MSC_VER

ResolveEquipReq::ResolveEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolveEquipReq::InitAsDefaultInstance() {
}

ResolveEquipReq::ResolveEquipReq(const ResolveEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolveEquipReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolveEquipReq::~ResolveEquipReq() {
  SharedDtor();
}

void ResolveEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResolveEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolveEquipReq_descriptor_;
}

const ResolveEquipReq& ResolveEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

ResolveEquipReq* ResolveEquipReq::default_instance_ = NULL;

ResolveEquipReq* ResolveEquipReq::New() const {
  return new ResolveEquipReq;
}

void ResolveEquipReq::Clear() {
  equip_guid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolveEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 equip_guid_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_guid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_equip_guid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equip_guid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_equip_guid_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolveEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 equip_guid_list = 1;
  for (int i = 0; i < this->equip_guid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->equip_guid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolveEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 equip_guid_list = 1;
  for (int i = 0; i < this->equip_guid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->equip_guid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolveEquipReq::ByteSize() const {
  int total_size = 0;

  // repeated int32 equip_guid_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_guid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equip_guid_list(i));
    }
    total_size += 1 * this->equip_guid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolveEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolveEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolveEquipReq::MergeFrom(const ResolveEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_guid_list_.MergeFrom(from.equip_guid_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolveEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveEquipReq::CopyFrom(const ResolveEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveEquipReq::IsInitialized() const {

  return true;
}

void ResolveEquipReq::Swap(ResolveEquipReq* other) {
  if (other != this) {
    equip_guid_list_.Swap(&other->equip_guid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolveEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolveEquipReq_descriptor_;
  metadata.reflection = ResolveEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolveEquipResp::kResultFieldNumber;
const int ResolveEquipResp::kUserSyncFieldNumber;
const int ResolveEquipResp::kGetItemListFieldNumber;
#endif  // !_MSC_VER

ResolveEquipResp::ResolveEquipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolveEquipResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ResolveEquipResp::ResolveEquipResp(const ResolveEquipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolveEquipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolveEquipResp::~ResolveEquipResp() {
  SharedDtor();
}

void ResolveEquipResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ResolveEquipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveEquipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolveEquipResp_descriptor_;
}

const ResolveEquipResp& ResolveEquipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

ResolveEquipResp* ResolveEquipResp::default_instance_ = NULL;

ResolveEquipResp* ResolveEquipResp::New() const {
  return new ResolveEquipResp;
}

void ResolveEquipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  get_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolveEquipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_item_list;
        break;
      }

      // repeated .Item get_item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolveEquipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .Item get_item_list = 3;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolveEquipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .Item get_item_list = 3;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolveEquipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .Item get_item_list = 3;
  total_size += 1 * this->get_item_list_size();
  for (int i = 0; i < this->get_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveEquipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolveEquipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolveEquipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolveEquipResp::MergeFrom(const ResolveEquipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_item_list_.MergeFrom(from.get_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolveEquipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveEquipResp::CopyFrom(const ResolveEquipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveEquipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < get_item_list_size(); i++) {
    if (!this->get_item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ResolveEquipResp::Swap(ResolveEquipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    get_item_list_.Swap(&other->get_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolveEquipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolveEquipResp_descriptor_;
  metadata.reflection = ResolveEquipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateEquipReq::kTypeFieldNumber;
const int CreateEquipReq::kEquipIdFieldNumber;
const int CreateEquipReq::kForgeGuidFieldNumber;
#endif  // !_MSC_VER

CreateEquipReq::CreateEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateEquipReq::InitAsDefaultInstance() {
}

CreateEquipReq::CreateEquipReq(const CreateEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateEquipReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  equip_id_ = 0;
  forge_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateEquipReq::~CreateEquipReq() {
  SharedDtor();
}

void CreateEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateEquipReq_descriptor_;
}

const CreateEquipReq& CreateEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

CreateEquipReq* CreateEquipReq::default_instance_ = NULL;

CreateEquipReq* CreateEquipReq::New() const {
  return new CreateEquipReq;
}

void CreateEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    equip_id_ = 0;
    forge_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_id;
        break;
      }

      // optional int32 equip_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_forge_guid;
        break;
      }

      // optional int32 forge_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forge_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forge_guid_)));
          set_has_forge_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 equip_id = 2;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_id(), output);
  }

  // optional int32 forge_guid = 3;
  if (has_forge_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->forge_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 equip_id = 2;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_id(), target);
  }

  // optional int32 forge_guid = 3;
  if (has_forge_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->forge_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 equip_id = 2;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_id());
    }

    // optional int32 forge_guid = 3;
    if (has_forge_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forge_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateEquipReq::MergeFrom(const CreateEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_forge_guid()) {
      set_forge_guid(from.forge_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEquipReq::CopyFrom(const CreateEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateEquipReq::Swap(CreateEquipReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(forge_guid_, other->forge_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateEquipReq_descriptor_;
  metadata.reflection = CreateEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateEquipResp::kResultFieldNumber;
const int CreateEquipResp::kUserSyncFieldNumber;
const int CreateEquipResp::kGetEquipGuidFieldNumber;
#endif  // !_MSC_VER

CreateEquipResp::CreateEquipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateEquipResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

CreateEquipResp::CreateEquipResp(const CreateEquipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateEquipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  get_equip_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateEquipResp::~CreateEquipResp() {
  SharedDtor();
}

void CreateEquipResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void CreateEquipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateEquipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateEquipResp_descriptor_;
}

const CreateEquipResp& CreateEquipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

CreateEquipResp* CreateEquipResp::default_instance_ = NULL;

CreateEquipResp* CreateEquipResp::New() const {
  return new CreateEquipResp;
}

void CreateEquipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    get_equip_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateEquipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_equip_guid;
        break;
      }

      // optional int32 get_equip_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_equip_guid_)));
          set_has_get_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateEquipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional int32 get_equip_guid = 3;
  if (has_get_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->get_equip_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateEquipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional int32 get_equip_guid = 3;
  if (has_get_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->get_equip_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateEquipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional int32 get_equip_guid = 3;
    if (has_get_equip_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_equip_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateEquipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateEquipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateEquipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateEquipResp::MergeFrom(const CreateEquipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_get_equip_guid()) {
      set_get_equip_guid(from.get_equip_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateEquipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEquipResp::CopyFrom(const CreateEquipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEquipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void CreateEquipResp::Swap(CreateEquipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(get_equip_guid_, other->get_equip_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateEquipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateEquipResp_descriptor_;
  metadata.reflection = CreateEquipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolveBlueprintReq::kItemListFieldNumber;
#endif  // !_MSC_VER

ResolveBlueprintReq::ResolveBlueprintReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolveBlueprintReq::InitAsDefaultInstance() {
}

ResolveBlueprintReq::ResolveBlueprintReq(const ResolveBlueprintReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolveBlueprintReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolveBlueprintReq::~ResolveBlueprintReq() {
  SharedDtor();
}

void ResolveBlueprintReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResolveBlueprintReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveBlueprintReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolveBlueprintReq_descriptor_;
}

const ResolveBlueprintReq& ResolveBlueprintReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

ResolveBlueprintReq* ResolveBlueprintReq::default_instance_ = NULL;

ResolveBlueprintReq* ResolveBlueprintReq::New() const {
  return new ResolveBlueprintReq;
}

void ResolveBlueprintReq::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolveBlueprintReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Pair item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolveBlueprintReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Pair item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolveBlueprintReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Pair item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolveBlueprintReq::ByteSize() const {
  int total_size = 0;

  // repeated .Pair item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveBlueprintReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolveBlueprintReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolveBlueprintReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolveBlueprintReq::MergeFrom(const ResolveBlueprintReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolveBlueprintReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveBlueprintReq::CopyFrom(const ResolveBlueprintReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveBlueprintReq::IsInitialized() const {

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ResolveBlueprintReq::Swap(ResolveBlueprintReq* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolveBlueprintReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolveBlueprintReq_descriptor_;
  metadata.reflection = ResolveBlueprintReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolveBlueprintResp::kResultFieldNumber;
const int ResolveBlueprintResp::kUserSyncFieldNumber;
const int ResolveBlueprintResp::kGetItemListFieldNumber;
#endif  // !_MSC_VER

ResolveBlueprintResp::ResolveBlueprintResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResolveBlueprintResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

ResolveBlueprintResp::ResolveBlueprintResp(const ResolveBlueprintResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResolveBlueprintResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolveBlueprintResp::~ResolveBlueprintResp() {
  SharedDtor();
}

void ResolveBlueprintResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void ResolveBlueprintResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveBlueprintResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolveBlueprintResp_descriptor_;
}

const ResolveBlueprintResp& ResolveBlueprintResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

ResolveBlueprintResp* ResolveBlueprintResp::default_instance_ = NULL;

ResolveBlueprintResp* ResolveBlueprintResp::New() const {
  return new ResolveBlueprintResp;
}

void ResolveBlueprintResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  get_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolveBlueprintResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_item_list;
        break;
      }

      // repeated .Pair get_item_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_get_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResolveBlueprintResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // repeated .Pair get_item_list = 3;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResolveBlueprintResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // repeated .Pair get_item_list = 3;
  for (int i = 0; i < this->get_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResolveBlueprintResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  // repeated .Pair get_item_list = 3;
  total_size += 1 * this->get_item_list_size();
  for (int i = 0; i < this->get_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveBlueprintResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolveBlueprintResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolveBlueprintResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolveBlueprintResp::MergeFrom(const ResolveBlueprintResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_item_list_.MergeFrom(from.get_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolveBlueprintResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveBlueprintResp::CopyFrom(const ResolveBlueprintResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveBlueprintResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < get_item_list_size(); i++) {
    if (!this->get_item_list(i).IsInitialized()) return false;
  }
  return true;
}

void ResolveBlueprintResp::Swap(ResolveBlueprintResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    get_item_list_.Swap(&other->get_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolveBlueprintResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolveBlueprintResp_descriptor_;
  metadata.reflection = ResolveBlueprintResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemEquipReq::kTypeFieldNumber;
const int GemEquipReq::kShipGuidFieldNumber;
const int GemEquipReq::kIndexFieldNumber;
const int GemEquipReq::kGemIdFieldNumber;
#endif  // !_MSC_VER

GemEquipReq::GemEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemEquipReq::InitAsDefaultInstance() {
}

GemEquipReq::GemEquipReq(const GemEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemEquipReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ship_guid_ = 0;
  index_ = 0;
  gem_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemEquipReq::~GemEquipReq() {
  SharedDtor();
}

void GemEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemEquipReq_descriptor_;
}

const GemEquipReq& GemEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

GemEquipReq* GemEquipReq::default_instance_ = NULL;

GemEquipReq* GemEquipReq::New() const {
  return new GemEquipReq;
}

void GemEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ship_guid_ = 0;
    index_ = 0;
    gem_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ship_guid;
        break;
      }

      // required int32 ship_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ship_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_guid_)));
          set_has_ship_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gem_id;
        break;
      }

      // required int32 gem_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_id_)));
          set_has_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 ship_guid = 2;
  if (has_ship_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ship_guid(), output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // required int32 gem_id = 4;
  if (has_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gem_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 ship_guid = 2;
  if (has_ship_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ship_guid(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // required int32 gem_id = 4;
  if (has_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gem_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 ship_guid = 2;
    if (has_ship_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_guid());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 gem_id = 4;
    if (has_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemEquipReq::MergeFrom(const GemEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ship_guid()) {
      set_ship_guid(from.ship_guid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_gem_id()) {
      set_gem_id(from.gem_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemEquipReq::CopyFrom(const GemEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GemEquipReq::Swap(GemEquipReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ship_guid_, other->ship_guid_);
    std::swap(index_, other->index_);
    std::swap(gem_id_, other->gem_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemEquipReq_descriptor_;
  metadata.reflection = GemEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemEquipResp::kResultFieldNumber;
const int GemEquipResp::kUserSyncFieldNumber;
#endif  // !_MSC_VER

GemEquipResp::GemEquipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemEquipResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

GemEquipResp::GemEquipResp(const GemEquipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemEquipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemEquipResp::~GemEquipResp() {
  SharedDtor();
}

void GemEquipResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void GemEquipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemEquipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemEquipResp_descriptor_;
}

const GemEquipResp& GemEquipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

GemEquipResp* GemEquipResp::default_instance_ = NULL;

GemEquipResp* GemEquipResp::New() const {
  return new GemEquipResp;
}

void GemEquipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemEquipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GemEquipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemEquipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemEquipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemEquipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemEquipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemEquipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemEquipResp::MergeFrom(const GemEquipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemEquipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemEquipResp::CopyFrom(const GemEquipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemEquipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  return true;
}

void GemEquipResp::Swap(GemEquipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemEquipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemEquipResp_descriptor_;
  metadata.reflection = GemEquipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MixGemReq::kGemListFieldNumber;
const int MixGemReq::kCountFieldNumber;
#endif  // !_MSC_VER

MixGemReq::MixGemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MixGemReq::InitAsDefaultInstance() {
}

MixGemReq::MixGemReq(const MixGemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MixGemReq::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MixGemReq::~MixGemReq() {
  SharedDtor();
}

void MixGemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MixGemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixGemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MixGemReq_descriptor_;
}

const MixGemReq& MixGemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

MixGemReq* MixGemReq::default_instance_ = NULL;

MixGemReq* MixGemReq::New() const {
  return new MixGemReq;
}

void MixGemReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    count_ = 0;
  }
  gem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MixGemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gem gem_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gem_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gem_list;
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MixGemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Gem gem_list = 1;
  for (int i = 0; i < this->gem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gem_list(i), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MixGemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Gem gem_list = 1;
  for (int i = 0; i < this->gem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gem_list(i), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MixGemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .Gem gem_list = 1;
  total_size += 1 * this->gem_list_size();
  for (int i = 0; i < this->gem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixGemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MixGemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MixGemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MixGemReq::MergeFrom(const MixGemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  gem_list_.MergeFrom(from.gem_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MixGemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixGemReq::CopyFrom(const MixGemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixGemReq::IsInitialized() const {

  for (int i = 0; i < gem_list_size(); i++) {
    if (!this->gem_list(i).IsInitialized()) return false;
  }
  return true;
}

void MixGemReq::Swap(MixGemReq* other) {
  if (other != this) {
    gem_list_.Swap(&other->gem_list_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MixGemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MixGemReq_descriptor_;
  metadata.reflection = MixGemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MixGemResp::kResultFieldNumber;
const int MixGemResp::kUserSyncFieldNumber;
const int MixGemResp::kMixResultFieldNumber;
const int MixGemResp::kRemainListFieldNumber;
#endif  // !_MSC_VER

MixGemResp::MixGemResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MixGemResp::InitAsDefaultInstance() {
  user_sync_ = const_cast< ::UserSync*>(&::UserSync::default_instance());
}

MixGemResp::MixGemResp(const MixGemResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MixGemResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_sync_ = NULL;
  mix_result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MixGemResp::~MixGemResp() {
  SharedDtor();
}

void MixGemResp::SharedDtor() {
  if (this != default_instance_) {
    delete user_sync_;
  }
}

void MixGemResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MixGemResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MixGemResp_descriptor_;
}

const MixGemResp& MixGemResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CmdEquip_2eproto();
  return *default_instance_;
}

MixGemResp* MixGemResp::default_instance_ = NULL;

MixGemResp* MixGemResp::New() const {
  return new MixGemResp;
}

void MixGemResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_user_sync()) {
      if (user_sync_ != NULL) user_sync_->::UserSync::Clear();
    }
    mix_result_ = false;
  }
  remain_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MixGemResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_sync;
        break;
      }

      // optional .UserSync user_sync = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mix_result;
        break;
      }

      // optional bool mix_result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mix_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mix_result_)));
          set_has_mix_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remain_list;
        break;
      }

      // repeated .Gem remain_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remain_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_remain_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_remain_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MixGemResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_sync(), output);
  }

  // optional bool mix_result = 3;
  if (has_mix_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mix_result(), output);
  }

  // repeated .Gem remain_list = 4;
  for (int i = 0; i < this->remain_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->remain_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MixGemResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .UserSync user_sync = 2;
  if (has_user_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_sync(), target);
  }

  // optional bool mix_result = 3;
  if (has_mix_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mix_result(), target);
  }

  // repeated .Gem remain_list = 4;
  for (int i = 0; i < this->remain_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->remain_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MixGemResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .UserSync user_sync = 2;
    if (has_user_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_sync());
    }

    // optional bool mix_result = 3;
    if (has_mix_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Gem remain_list = 4;
  total_size += 1 * this->remain_list_size();
  for (int i = 0; i < this->remain_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->remain_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MixGemResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MixGemResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MixGemResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MixGemResp::MergeFrom(const MixGemResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  remain_list_.MergeFrom(from.remain_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_sync()) {
      mutable_user_sync()->::UserSync::MergeFrom(from.user_sync());
    }
    if (from.has_mix_result()) {
      set_mix_result(from.mix_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MixGemResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MixGemResp::CopyFrom(const MixGemResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MixGemResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_sync()) {
    if (!this->user_sync().IsInitialized()) return false;
  }
  for (int i = 0; i < remain_list_size(); i++) {
    if (!this->remain_list(i).IsInitialized()) return false;
  }
  return true;
}

void MixGemResp::Swap(MixGemResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_sync_, other->user_sync_);
    std::swap(mix_result_, other->mix_result_);
    remain_list_.Swap(&other->remain_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MixGemResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MixGemResp_descriptor_;
  metadata.reflection = MixGemResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
