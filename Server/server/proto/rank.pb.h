// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rank.proto

#ifndef PROTOBUF_rank_2eproto__INCLUDED
#define PROTOBUF_rank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rank_2eproto();
void protobuf_AssignDesc_rank_2eproto();
void protobuf_ShutdownFile_rank_2eproto();

class RankItem;
class RankPlayerInfo;
class RankExtData;
class RankCallBack;
class RankItemList;

// ===================================================================

class RankItem : public ::google::protobuf::Message {
 public:
  RankItem();
  virtual ~RankItem();

  RankItem(const RankItem& from);

  inline RankItem& operator=(const RankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankItem& default_instance();

  void Swap(RankItem* other);

  // implements Message ----------------------------------------------

  RankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankItem& from);
  void MergeFrom(const RankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional int32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 ranktype = 3;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRanktypeFieldNumber = 3;
  inline ::google::protobuf::int32 ranktype() const;
  inline void set_ranktype(::google::protobuf::int32 value);

  // optional int32 rankid = 4;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankidFieldNumber = 4;
  inline ::google::protobuf::int32 rankid() const;
  inline void set_rankid(::google::protobuf::int32 value);

  // optional .RankExtData extdata = 5;
  inline bool has_extdata() const;
  inline void clear_extdata();
  static const int kExtdataFieldNumber = 5;
  inline const ::RankExtData& extdata() const;
  inline ::RankExtData* mutable_extdata();
  inline ::RankExtData* release_extdata();
  inline void set_allocated_extdata(::RankExtData* extdata);

  // optional int32 rankop = 6;
  inline bool has_rankop() const;
  inline void clear_rankop();
  static const int kRankopFieldNumber = 6;
  inline ::google::protobuf::int32 rankop() const;
  inline void set_rankop(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankItem)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_extdata();
  inline void clear_has_extdata();
  inline void set_has_rankop();
  inline void clear_has_rankop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 ranktype_;
  ::RankExtData* extdata_;
  ::google::protobuf::int32 rankid_;
  ::google::protobuf::int32 rankop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankItem* default_instance_;
};
// -------------------------------------------------------------------

class RankPlayerInfo : public ::google::protobuf::Message {
 public:
  RankPlayerInfo();
  virtual ~RankPlayerInfo();

  RankPlayerInfo(const RankPlayerInfo& from);

  inline RankPlayerInfo& operator=(const RankPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankPlayerInfo& default_instance();

  void Swap(RankPlayerInfo* other);

  // implements Message ----------------------------------------------

  RankPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankPlayerInfo& from);
  void MergeFrom(const RankPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 rolelevel = 2;
  inline bool has_rolelevel() const;
  inline void clear_rolelevel();
  static const int kRolelevelFieldNumber = 2;
  inline ::google::protobuf::int32 rolelevel() const;
  inline void set_rolelevel(::google::protobuf::int32 value);

  // optional int32 viplevel = 3;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 3;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 power = 11;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 11;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankPlayerInfo)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_rolelevel();
  inline void clear_has_rolelevel();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 rolelevel_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class RankExtData : public ::google::protobuf::Message {
 public:
  RankExtData();
  virtual ~RankExtData();

  RankExtData(const RankExtData& from);

  inline RankExtData& operator=(const RankExtData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankExtData& default_instance();

  void Swap(RankExtData* other);

  // implements Message ----------------------------------------------

  RankExtData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankExtData& from);
  void MergeFrom(const RankExtData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 numbervec = 1;
  inline int numbervec_size() const;
  inline void clear_numbervec();
  static const int kNumbervecFieldNumber = 1;
  inline ::google::protobuf::int32 numbervec(int index) const;
  inline void set_numbervec(int index, ::google::protobuf::int32 value);
  inline void add_numbervec(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      numbervec() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_numbervec();

  // repeated bytes stringvec = 2;
  inline int stringvec_size() const;
  inline void clear_stringvec();
  static const int kStringvecFieldNumber = 2;
  inline const ::std::string& stringvec(int index) const;
  inline ::std::string* mutable_stringvec(int index);
  inline void set_stringvec(int index, const ::std::string& value);
  inline void set_stringvec(int index, const char* value);
  inline void set_stringvec(int index, const void* value, size_t size);
  inline ::std::string* add_stringvec();
  inline void add_stringvec(const ::std::string& value);
  inline void add_stringvec(const char* value);
  inline void add_stringvec(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stringvec() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stringvec();

  // repeated int64 seedvec = 3;
  inline int seedvec_size() const;
  inline void clear_seedvec();
  static const int kSeedvecFieldNumber = 3;
  inline ::google::protobuf::int64 seedvec(int index) const;
  inline void set_seedvec(int index, ::google::protobuf::int64 value);
  inline void add_seedvec(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      seedvec() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_seedvec();

  // optional .RankPlayerInfo playerinfo = 11;
  inline bool has_playerinfo() const;
  inline void clear_playerinfo();
  static const int kPlayerinfoFieldNumber = 11;
  inline const ::RankPlayerInfo& playerinfo() const;
  inline ::RankPlayerInfo* mutable_playerinfo();
  inline ::RankPlayerInfo* release_playerinfo();
  inline void set_allocated_playerinfo(::RankPlayerInfo* playerinfo);

  // @@protoc_insertion_point(class_scope:RankExtData)
 private:
  inline void set_has_playerinfo();
  inline void clear_has_playerinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > numbervec_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stringvec_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > seedvec_;
  ::RankPlayerInfo* playerinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankExtData* default_instance_;
};
// -------------------------------------------------------------------

class RankCallBack : public ::google::protobuf::Message {
 public:
  RankCallBack();
  virtual ~RankCallBack();

  RankCallBack(const RankCallBack& from);

  inline RankCallBack& operator=(const RankCallBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankCallBack& default_instance();

  void Swap(RankCallBack* other);

  // implements Message ----------------------------------------------

  RankCallBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankCallBack& from);
  void MergeFrom(const RankCallBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ranktype = 1;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRanktypeFieldNumber = 1;
  inline ::google::protobuf::int32 ranktype() const;
  inline void set_ranktype(::google::protobuf::int32 value);

  // optional int32 rankid = 2;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankidFieldNumber = 2;
  inline ::google::protobuf::int32 rankid() const;
  inline void set_rankid(::google::protobuf::int32 value);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankCallBack)
 private:
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ranktype_;
  ::google::protobuf::int32 rankid_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankCallBack* default_instance_;
};
// -------------------------------------------------------------------

class RankItemList : public ::google::protobuf::Message {
 public:
  RankItemList();
  virtual ~RankItemList();

  RankItemList(const RankItemList& from);

  inline RankItemList& operator=(const RankItemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankItemList& default_instance();

  void Swap(RankItemList* other);

  // implements Message ----------------------------------------------

  RankItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankItemList& from);
  void MergeFrom(const RankItemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RankItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::RankItem& items(int index) const;
  inline ::RankItem* mutable_items(int index);
  inline ::RankItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::RankItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::RankItem >*
      mutable_items();

  // optional int32 rankstart = 2;
  inline bool has_rankstart() const;
  inline void clear_rankstart();
  static const int kRankstartFieldNumber = 2;
  inline ::google::protobuf::int32 rankstart() const;
  inline void set_rankstart(::google::protobuf::int32 value);

  // optional int32 rankcount = 3;
  inline bool has_rankcount() const;
  inline void clear_rankcount();
  static const int kRankcountFieldNumber = 3;
  inline ::google::protobuf::int32 rankcount() const;
  inline void set_rankcount(::google::protobuf::int32 value);

  // optional int32 totalranksize = 4;
  inline bool has_totalranksize() const;
  inline void clear_totalranksize();
  static const int kTotalranksizeFieldNumber = 4;
  inline ::google::protobuf::int32 totalranksize() const;
  inline void set_totalranksize(::google::protobuf::int32 value);

  // optional bytes taruser = 5;
  inline bool has_taruser() const;
  inline void clear_taruser();
  static const int kTaruserFieldNumber = 5;
  inline const ::std::string& taruser() const;
  inline void set_taruser(const ::std::string& value);
  inline void set_taruser(const char* value);
  inline void set_taruser(const void* value, size_t size);
  inline ::std::string* mutable_taruser();
  inline ::std::string* release_taruser();
  inline void set_allocated_taruser(::std::string* taruser);

  // optional int32 taruserrank = 6;
  inline bool has_taruserrank() const;
  inline void clear_taruserrank();
  static const int kTaruserrankFieldNumber = 6;
  inline ::google::protobuf::int32 taruserrank() const;
  inline void set_taruserrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankItemList)
 private:
  inline void set_has_rankstart();
  inline void clear_has_rankstart();
  inline void set_has_rankcount();
  inline void clear_has_rankcount();
  inline void set_has_totalranksize();
  inline void clear_has_totalranksize();
  inline void set_has_taruser();
  inline void clear_has_taruser();
  inline void set_has_taruserrank();
  inline void clear_has_taruserrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::RankItem > items_;
  ::google::protobuf::int32 rankstart_;
  ::google::protobuf::int32 rankcount_;
  ::std::string* taruser_;
  ::google::protobuf::int32 totalranksize_;
  ::google::protobuf::int32 taruserrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_rank_2eproto();
  friend void protobuf_AssignDesc_rank_2eproto();
  friend void protobuf_ShutdownFile_rank_2eproto();

  void InitAsDefaultInstance();
  static RankItemList* default_instance_;
};
// ===================================================================


// ===================================================================

// RankItem

// optional bytes user = 1;
inline bool RankItem::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankItem::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankItem::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankItem::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& RankItem::user() const {
  return *user_;
}
inline void RankItem::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void RankItem::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void RankItem::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankItem::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* RankItem::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankItem::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 key = 2;
inline bool RankItem::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankItem::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankItem::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankItem::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 RankItem::key() const {
  return key_;
}
inline void RankItem::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 ranktype = 3;
inline bool RankItem::has_ranktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankItem::set_has_ranktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankItem::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankItem::clear_ranktype() {
  ranktype_ = 0;
  clear_has_ranktype();
}
inline ::google::protobuf::int32 RankItem::ranktype() const {
  return ranktype_;
}
inline void RankItem::set_ranktype(::google::protobuf::int32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// optional int32 rankid = 4;
inline bool RankItem::has_rankid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankItem::set_has_rankid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankItem::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankItem::clear_rankid() {
  rankid_ = 0;
  clear_has_rankid();
}
inline ::google::protobuf::int32 RankItem::rankid() const {
  return rankid_;
}
inline void RankItem::set_rankid(::google::protobuf::int32 value) {
  set_has_rankid();
  rankid_ = value;
}

// optional .RankExtData extdata = 5;
inline bool RankItem::has_extdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankItem::set_has_extdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankItem::clear_has_extdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankItem::clear_extdata() {
  if (extdata_ != NULL) extdata_->::RankExtData::Clear();
  clear_has_extdata();
}
inline const ::RankExtData& RankItem::extdata() const {
  return extdata_ != NULL ? *extdata_ : *default_instance_->extdata_;
}
inline ::RankExtData* RankItem::mutable_extdata() {
  set_has_extdata();
  if (extdata_ == NULL) extdata_ = new ::RankExtData;
  return extdata_;
}
inline ::RankExtData* RankItem::release_extdata() {
  clear_has_extdata();
  ::RankExtData* temp = extdata_;
  extdata_ = NULL;
  return temp;
}
inline void RankItem::set_allocated_extdata(::RankExtData* extdata) {
  delete extdata_;
  extdata_ = extdata;
  if (extdata) {
    set_has_extdata();
  } else {
    clear_has_extdata();
  }
}

// optional int32 rankop = 6;
inline bool RankItem::has_rankop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankItem::set_has_rankop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankItem::clear_has_rankop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankItem::clear_rankop() {
  rankop_ = 0;
  clear_has_rankop();
}
inline ::google::protobuf::int32 RankItem::rankop() const {
  return rankop_;
}
inline void RankItem::set_rankop(::google::protobuf::int32 value) {
  set_has_rankop();
  rankop_ = value;
}

// -------------------------------------------------------------------

// RankPlayerInfo

// optional string nickname = 1;
inline bool RankPlayerInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankPlayerInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankPlayerInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankPlayerInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RankPlayerInfo::nickname() const {
  return *nickname_;
}
inline void RankPlayerInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RankPlayerInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RankPlayerInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankPlayerInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* RankPlayerInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankPlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rolelevel = 2;
inline bool RankPlayerInfo::has_rolelevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankPlayerInfo::set_has_rolelevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankPlayerInfo::clear_has_rolelevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankPlayerInfo::clear_rolelevel() {
  rolelevel_ = 0;
  clear_has_rolelevel();
}
inline ::google::protobuf::int32 RankPlayerInfo::rolelevel() const {
  return rolelevel_;
}
inline void RankPlayerInfo::set_rolelevel(::google::protobuf::int32 value) {
  set_has_rolelevel();
  rolelevel_ = value;
}

// optional int32 viplevel = 3;
inline bool RankPlayerInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankPlayerInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankPlayerInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankPlayerInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 RankPlayerInfo::viplevel() const {
  return viplevel_;
}
inline void RankPlayerInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 power = 11;
inline bool RankPlayerInfo::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankPlayerInfo::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankPlayerInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankPlayerInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 RankPlayerInfo::power() const {
  return power_;
}
inline void RankPlayerInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// -------------------------------------------------------------------

// RankExtData

// repeated int32 numbervec = 1;
inline int RankExtData::numbervec_size() const {
  return numbervec_.size();
}
inline void RankExtData::clear_numbervec() {
  numbervec_.Clear();
}
inline ::google::protobuf::int32 RankExtData::numbervec(int index) const {
  return numbervec_.Get(index);
}
inline void RankExtData::set_numbervec(int index, ::google::protobuf::int32 value) {
  numbervec_.Set(index, value);
}
inline void RankExtData::add_numbervec(::google::protobuf::int32 value) {
  numbervec_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RankExtData::numbervec() const {
  return numbervec_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RankExtData::mutable_numbervec() {
  return &numbervec_;
}

// repeated bytes stringvec = 2;
inline int RankExtData::stringvec_size() const {
  return stringvec_.size();
}
inline void RankExtData::clear_stringvec() {
  stringvec_.Clear();
}
inline const ::std::string& RankExtData::stringvec(int index) const {
  return stringvec_.Get(index);
}
inline ::std::string* RankExtData::mutable_stringvec(int index) {
  return stringvec_.Mutable(index);
}
inline void RankExtData::set_stringvec(int index, const ::std::string& value) {
  stringvec_.Mutable(index)->assign(value);
}
inline void RankExtData::set_stringvec(int index, const char* value) {
  stringvec_.Mutable(index)->assign(value);
}
inline void RankExtData::set_stringvec(int index, const void* value, size_t size) {
  stringvec_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankExtData::add_stringvec() {
  return stringvec_.Add();
}
inline void RankExtData::add_stringvec(const ::std::string& value) {
  stringvec_.Add()->assign(value);
}
inline void RankExtData::add_stringvec(const char* value) {
  stringvec_.Add()->assign(value);
}
inline void RankExtData::add_stringvec(const void* value, size_t size) {
  stringvec_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RankExtData::stringvec() const {
  return stringvec_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RankExtData::mutable_stringvec() {
  return &stringvec_;
}

// repeated int64 seedvec = 3;
inline int RankExtData::seedvec_size() const {
  return seedvec_.size();
}
inline void RankExtData::clear_seedvec() {
  seedvec_.Clear();
}
inline ::google::protobuf::int64 RankExtData::seedvec(int index) const {
  return seedvec_.Get(index);
}
inline void RankExtData::set_seedvec(int index, ::google::protobuf::int64 value) {
  seedvec_.Set(index, value);
}
inline void RankExtData::add_seedvec(::google::protobuf::int64 value) {
  seedvec_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
RankExtData::seedvec() const {
  return seedvec_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
RankExtData::mutable_seedvec() {
  return &seedvec_;
}

// optional .RankPlayerInfo playerinfo = 11;
inline bool RankExtData::has_playerinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankExtData::set_has_playerinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankExtData::clear_has_playerinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankExtData::clear_playerinfo() {
  if (playerinfo_ != NULL) playerinfo_->::RankPlayerInfo::Clear();
  clear_has_playerinfo();
}
inline const ::RankPlayerInfo& RankExtData::playerinfo() const {
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::RankPlayerInfo* RankExtData::mutable_playerinfo() {
  set_has_playerinfo();
  if (playerinfo_ == NULL) playerinfo_ = new ::RankPlayerInfo;
  return playerinfo_;
}
inline ::RankPlayerInfo* RankExtData::release_playerinfo() {
  clear_has_playerinfo();
  ::RankPlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void RankExtData::set_allocated_playerinfo(::RankPlayerInfo* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    set_has_playerinfo();
  } else {
    clear_has_playerinfo();
  }
}

// -------------------------------------------------------------------

// RankCallBack

// optional int32 ranktype = 1;
inline bool RankCallBack::has_ranktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankCallBack::set_has_ranktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankCallBack::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankCallBack::clear_ranktype() {
  ranktype_ = 0;
  clear_has_ranktype();
}
inline ::google::protobuf::int32 RankCallBack::ranktype() const {
  return ranktype_;
}
inline void RankCallBack::set_ranktype(::google::protobuf::int32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// optional int32 rankid = 2;
inline bool RankCallBack::has_rankid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankCallBack::set_has_rankid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankCallBack::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankCallBack::clear_rankid() {
  rankid_ = 0;
  clear_has_rankid();
}
inline ::google::protobuf::int32 RankCallBack::rankid() const {
  return rankid_;
}
inline void RankCallBack::set_rankid(::google::protobuf::int32 value) {
  set_has_rankid();
  rankid_ = value;
}

// optional int32 rank = 3;
inline bool RankCallBack::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankCallBack::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankCallBack::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankCallBack::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 RankCallBack::rank() const {
  return rank_;
}
inline void RankCallBack::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// RankItemList

// repeated .RankItem items = 1;
inline int RankItemList::items_size() const {
  return items_.size();
}
inline void RankItemList::clear_items() {
  items_.Clear();
}
inline const ::RankItem& RankItemList::items(int index) const {
  return items_.Get(index);
}
inline ::RankItem* RankItemList::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::RankItem* RankItemList::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RankItem >&
RankItemList::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::RankItem >*
RankItemList::mutable_items() {
  return &items_;
}

// optional int32 rankstart = 2;
inline bool RankItemList::has_rankstart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankItemList::set_has_rankstart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankItemList::clear_has_rankstart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankItemList::clear_rankstart() {
  rankstart_ = 0;
  clear_has_rankstart();
}
inline ::google::protobuf::int32 RankItemList::rankstart() const {
  return rankstart_;
}
inline void RankItemList::set_rankstart(::google::protobuf::int32 value) {
  set_has_rankstart();
  rankstart_ = value;
}

// optional int32 rankcount = 3;
inline bool RankItemList::has_rankcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankItemList::set_has_rankcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankItemList::clear_has_rankcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankItemList::clear_rankcount() {
  rankcount_ = 0;
  clear_has_rankcount();
}
inline ::google::protobuf::int32 RankItemList::rankcount() const {
  return rankcount_;
}
inline void RankItemList::set_rankcount(::google::protobuf::int32 value) {
  set_has_rankcount();
  rankcount_ = value;
}

// optional int32 totalranksize = 4;
inline bool RankItemList::has_totalranksize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankItemList::set_has_totalranksize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankItemList::clear_has_totalranksize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankItemList::clear_totalranksize() {
  totalranksize_ = 0;
  clear_has_totalranksize();
}
inline ::google::protobuf::int32 RankItemList::totalranksize() const {
  return totalranksize_;
}
inline void RankItemList::set_totalranksize(::google::protobuf::int32 value) {
  set_has_totalranksize();
  totalranksize_ = value;
}

// optional bytes taruser = 5;
inline bool RankItemList::has_taruser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankItemList::set_has_taruser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankItemList::clear_has_taruser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankItemList::clear_taruser() {
  if (taruser_ != &::google::protobuf::internal::kEmptyString) {
    taruser_->clear();
  }
  clear_has_taruser();
}
inline const ::std::string& RankItemList::taruser() const {
  return *taruser_;
}
inline void RankItemList::set_taruser(const ::std::string& value) {
  set_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    taruser_ = new ::std::string;
  }
  taruser_->assign(value);
}
inline void RankItemList::set_taruser(const char* value) {
  set_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    taruser_ = new ::std::string;
  }
  taruser_->assign(value);
}
inline void RankItemList::set_taruser(const void* value, size_t size) {
  set_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    taruser_ = new ::std::string;
  }
  taruser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankItemList::mutable_taruser() {
  set_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    taruser_ = new ::std::string;
  }
  return taruser_;
}
inline ::std::string* RankItemList::release_taruser() {
  clear_has_taruser();
  if (taruser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taruser_;
    taruser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankItemList::set_allocated_taruser(::std::string* taruser) {
  if (taruser_ != &::google::protobuf::internal::kEmptyString) {
    delete taruser_;
  }
  if (taruser) {
    set_has_taruser();
    taruser_ = taruser;
  } else {
    clear_has_taruser();
    taruser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 taruserrank = 6;
inline bool RankItemList::has_taruserrank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankItemList::set_has_taruserrank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankItemList::clear_has_taruserrank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankItemList::clear_taruserrank() {
  taruserrank_ = 0;
  clear_has_taruserrank();
}
inline ::google::protobuf::int32 RankItemList::taruserrank() const {
  return taruserrank_;
}
inline void RankItemList::set_taruserrank(::google::protobuf::int32 value) {
  set_has_taruserrank();
  taruserrank_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rank_2eproto__INCLUDED
