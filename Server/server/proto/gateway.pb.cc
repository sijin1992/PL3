// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gateway.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AuthResp_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QQLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQLogReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QQLogReq_LOGTYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gateway_2eproto() {
  protobuf_AddDesc_gateway_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gateway.proto");
  GOOGLE_CHECK(file != NULL);
  AuthReq_descriptor_ = file->message_type(0);
  static const int AuthReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, domain_),
  };
  AuthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthReq_descriptor_,
      AuthReq::default_instance_,
      AuthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthReq));
  AuthResp_descriptor_ = file->message_type(1);
  static const int AuthResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResp, result_),
  };
  AuthResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthResp_descriptor_,
      AuthResp::default_instance_,
      AuthResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthResp));
  AuthResp_Result_descriptor_ = AuthResp_descriptor_->enum_type(0);
  QQLogReq_descriptor_ = file->message_type(2);
  static const int QQLogReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQLogReq, logtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQLogReq, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQLogReq, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQLogReq, userip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQLogReq, userkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQLogReq, domain_),
  };
  QQLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QQLogReq_descriptor_,
      QQLogReq::default_instance_,
      QQLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QQLogReq));
  QQLogReq_LOGTYPE_descriptor_ = QQLogReq_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gateway_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthReq_descriptor_, &AuthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthResp_descriptor_, &AuthResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QQLogReq_descriptor_, &QQLogReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gateway_2eproto() {
  delete AuthReq::default_instance_;
  delete AuthReq_reflection_;
  delete AuthResp::default_instance_;
  delete AuthResp_reflection_;
  delete QQLogReq::default_instance_;
  delete QQLogReq_reflection_;
}

void protobuf_AddDesc_gateway_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgateway.proto\"&\n\007AuthReq\022\013\n\003key\030\001 \002(\t\022"
    "\016\n\006domain\030\002 \001(\t\"]\n\010AuthResp\022 \n\006result\030\001 "
    "\002(\0162\020.AuthResp.Result\"/\n\006Result\022\006\n\002OK\020\000\022"
    "\021\n\004FAIL\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006NOAUTH\020\001\"\312\001\n\010QQLog"
    "Req\022\"\n\007logtype\030\001 \002(\0162\021.QQLogReq.LOGTYPE\022"
    "\016\n\006values\030\002 \003(\t\022\r\n\005names\030\003 \003(\t\022\016\n\006userip"
    "\030\004 \001(\005\022\017\n\007userkey\030\005 \001(\t\022\016\n\006domain\030\006 \001(\005\""
    "J\n\007LOGTYPE\022\n\n\006REGIST\020\001\022\t\n\005LOGIN\020\002\022\n\n\006LOG"
    "OUT\020\003\022\013\n\007PAYMENT\020\004\022\017\n\013ONLINE_STAT\020\005", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gateway.proto", &protobuf_RegisterTypes);
  AuthReq::default_instance_ = new AuthReq();
  AuthResp::default_instance_ = new AuthResp();
  QQLogReq::default_instance_ = new QQLogReq();
  AuthReq::default_instance_->InitAsDefaultInstance();
  AuthResp::default_instance_->InitAsDefaultInstance();
  QQLogReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gateway_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gateway_2eproto {
  StaticDescriptorInitializer_gateway_2eproto() {
    protobuf_AddDesc_gateway_2eproto();
  }
} static_descriptor_initializer_gateway_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuthReq::kKeyFieldNumber;
const int AuthReq::kDomainFieldNumber;
#endif  // !_MSC_VER

AuthReq::AuthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthReq::InitAsDefaultInstance() {
}

AuthReq::AuthReq(const AuthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthReq::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthReq::~AuthReq() {
  SharedDtor();
}

void AuthReq::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (this != default_instance_) {
  }
}

void AuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthReq_descriptor_;
}

const AuthReq& AuthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_2eproto();
  return *default_instance_;
}

AuthReq* AuthReq::default_instance_ = NULL;

AuthReq* AuthReq::New() const {
  return new AuthReq;
}

void AuthReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->domain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthReq::MergeFrom(const AuthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthReq::CopyFrom(const AuthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthReq::Swap(AuthReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthReq_descriptor_;
  metadata.reflection = AuthReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AuthResp_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthResp_Result_descriptor_;
}
bool AuthResp_Result_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AuthResp_Result AuthResp::OK;
const AuthResp_Result AuthResp::FAIL;
const AuthResp_Result AuthResp::NOAUTH;
const AuthResp_Result AuthResp::Result_MIN;
const AuthResp_Result AuthResp::Result_MAX;
const int AuthResp::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AuthResp::kResultFieldNumber;
#endif  // !_MSC_VER

AuthResp::AuthResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthResp::InitAsDefaultInstance() {
}

AuthResp::AuthResp(const AuthResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthResp::~AuthResp() {
  SharedDtor();
}

void AuthResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthResp_descriptor_;
}

const AuthResp& AuthResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_2eproto();
  return *default_instance_;
}

AuthResp* AuthResp::default_instance_ = NULL;

AuthResp* AuthResp::New() const {
  return new AuthResp;
}

void AuthResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AuthResp.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AuthResp_Result_IsValid(value)) {
            set_result(static_cast< ::AuthResp_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AuthResp.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AuthResp.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AuthResp.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthResp::MergeFrom(const AuthResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthResp::CopyFrom(const AuthResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthResp::Swap(AuthResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthResp_descriptor_;
  metadata.reflection = AuthResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QQLogReq_LOGTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQLogReq_LOGTYPE_descriptor_;
}
bool QQLogReq_LOGTYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QQLogReq_LOGTYPE QQLogReq::REGIST;
const QQLogReq_LOGTYPE QQLogReq::LOGIN;
const QQLogReq_LOGTYPE QQLogReq::LOGOUT;
const QQLogReq_LOGTYPE QQLogReq::PAYMENT;
const QQLogReq_LOGTYPE QQLogReq::ONLINE_STAT;
const QQLogReq_LOGTYPE QQLogReq::LOGTYPE_MIN;
const QQLogReq_LOGTYPE QQLogReq::LOGTYPE_MAX;
const int QQLogReq::LOGTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int QQLogReq::kLogtypeFieldNumber;
const int QQLogReq::kValuesFieldNumber;
const int QQLogReq::kNamesFieldNumber;
const int QQLogReq::kUseripFieldNumber;
const int QQLogReq::kUserkeyFieldNumber;
const int QQLogReq::kDomainFieldNumber;
#endif  // !_MSC_VER

QQLogReq::QQLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QQLogReq::InitAsDefaultInstance() {
}

QQLogReq::QQLogReq(const QQLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QQLogReq::SharedCtor() {
  _cached_size_ = 0;
  logtype_ = 1;
  userip_ = 0;
  userkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQLogReq::~QQLogReq() {
  SharedDtor();
}

void QQLogReq::SharedDtor() {
  if (userkey_ != &::google::protobuf::internal::kEmptyString) {
    delete userkey_;
  }
  if (this != default_instance_) {
  }
}

void QQLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQLogReq_descriptor_;
}

const QQLogReq& QQLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gateway_2eproto();
  return *default_instance_;
}

QQLogReq* QQLogReq::default_instance_ = NULL;

QQLogReq* QQLogReq::New() const {
  return new QQLogReq;
}

void QQLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logtype_ = 1;
    userip_ = 0;
    if (has_userkey()) {
      if (userkey_ != &::google::protobuf::internal::kEmptyString) {
        userkey_->clear();
      }
    }
    domain_ = 0;
  }
  values_.Clear();
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QQLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QQLogReq.LOGTYPE logtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QQLogReq_LOGTYPE_IsValid(value)) {
            set_logtype(static_cast< ::QQLogReq_LOGTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectTag(26)) goto parse_names;
        break;
      }

      // repeated string names = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_names;
        if (input->ExpectTag(32)) goto parse_userip;
        break;
      }

      // optional int32 userip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userip_)));
          set_has_userip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userkey;
        break;
      }

      // optional string userkey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userkey().data(), this->userkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_domain;
        break;
      }

      // optional int32 domain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_domain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &domain_)));
          set_has_domain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QQLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QQLogReq.LOGTYPE logtype = 1;
  if (has_logtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->logtype(), output);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  // repeated string names = 3;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->names(i), output);
  }

  // optional int32 userip = 4;
  if (has_userip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userip(), output);
  }

  // optional string userkey = 5;
  if (has_userkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userkey().data(), this->userkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->userkey(), output);
  }

  // optional int32 domain = 6;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->domain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QQLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QQLogReq.LOGTYPE logtype = 1;
  if (has_logtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->logtype(), target);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  // repeated string names = 3;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->names(i), target);
  }

  // optional int32 userip = 4;
  if (has_userip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userip(), target);
  }

  // optional string userkey = 5;
  if (has_userkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userkey().data(), this->userkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->userkey(), target);
  }

  // optional int32 domain = 6;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->domain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QQLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QQLogReq.LOGTYPE logtype = 1;
    if (has_logtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->logtype());
    }

    // optional int32 userip = 4;
    if (has_userip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userip());
    }

    // optional string userkey = 5;
    if (has_userkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userkey());
    }

    // optional int32 domain = 6;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->domain());
    }

  }
  // repeated string values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  // repeated string names = 3;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QQLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQLogReq::MergeFrom(const QQLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logtype()) {
      set_logtype(from.logtype());
    }
    if (from.has_userip()) {
      set_userip(from.userip());
    }
    if (from.has_userkey()) {
      set_userkey(from.userkey());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QQLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQLogReq::CopyFrom(const QQLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQLogReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QQLogReq::Swap(QQLogReq* other) {
  if (other != this) {
    std::swap(logtype_, other->logtype_);
    values_.Swap(&other->values_);
    names_.Swap(&other->names_);
    std::swap(userip_, other->userip_);
    std::swap(userkey_, other->userkey_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QQLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQLogReq_descriptor_;
  metadata.reflection = QQLogReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
